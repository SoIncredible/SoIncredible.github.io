<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EddieLee</title>
  
  <subtitle>to infinity and beyond✨🛸.</subtitle>
  <link href="https://soincredible.github.io/atom.xml" rel="self"/>
  
  <link href="https://soincredible.github.io/"/>
  <updated>2025-08-20T13:49:18.324Z</updated>
  <id>https://soincredible.github.io/</id>
  
  <author>
    <name>Eddie Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UnrealEngine源码</title>
    <link href="https://soincredible.github.io/posts/43a309b5/"/>
    <id>https://soincredible.github.io/posts/43a309b5/</id>
    <published>2025-08-16T09:39:38.000Z</published>
    <updated>2025-08-20T13:49:18.324Z</updated>
    
    <content type="html"><![CDATA[<p>虚幻引擎的代码使用的是古早版本的C++, 跟现代的C++有些脱节了, 所以可以把虚幻引擎的源代码理解为是C++的一个变种</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;虚幻引擎的代码使用的是古早版本的C++, 跟现代的C++有些脱节了, 所以可以把虚幻引擎的源代码理解为是C++的一个变种&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>在Unity中实现拖拽物体的功能</title>
    <link href="https://soincredible.github.io/posts/aa328bbc/"/>
    <id>https://soincredible.github.io/posts/aa328bbc/</id>
    <published>2025-08-10T08:33:19.000Z</published>
    <updated>2025-08-11T03:35:33.789Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DraggableObj</span> : <span class="title">MonoBehaviour</span>, </span><br><span class="line">        <span class="title">IDragHandler</span>, <span class="title">IBeginDragHandler</span>, <span class="title">IEndDragHandler</span></span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">enum</span> DragState</span><br><span class="line">        &#123;</span><br><span class="line">            None,</span><br><span class="line">            Idle,</span><br><span class="line">            Dragging,</span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> DragState dragState = DragState.None;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;拖拽中...&quot;</span>);</span><br><span class="line">            RectTransformUtility.ScreenPointToLocalPointInRectangle(transform.parent.transform <span class="keyword">as</span> RectTransform, eventData.position, Camera.main, <span class="keyword">out</span> Vector2 point);</span><br><span class="line">            transform.localPosition = point;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeginDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;开始拖拽&quot;</span>);</span><br><span class="line">            transform.localScale = Vector3.one * <span class="number">1.5f</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEndDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;拖拽结束...&quot;</span>);</span><br><span class="line">            transform.localScale = Vector3.one;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将上面的逻辑进一步抽象一下, 把每个接口内的行为抽离出来, 作为一个action, 在合适的时机传进去.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FigmaAPI阅读</title>
    <link href="https://soincredible.github.io/posts/8d32db40/"/>
    <id>https://soincredible.github.io/posts/8d32db40/</id>
    <published>2025-08-10T08:29:45.000Z</published>
    <updated>2025-08-11T03:35:33.787Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.figma.com/developers/api#intro">https://www.figma.com/developers/api#intro</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.figma.com/developers/api#intro&quot;&gt;https://www.figma.com/developers/api#intro&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Unity源码阅读</title>
    <link href="https://soincredible.github.io/posts/4d404b8c/"/>
    <id>https://soincredible.github.io/posts/4d404b8c/</id>
    <published>2025-08-10T02:11:30.000Z</published>
    <updated>2025-08-11T03:35:33.789Z</updated>
    
    <content type="html"><![CDATA[<p>Unity中有一种<code>.bindings </code>格式的文件, 这类文件经过某种处理会转换为C#文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">C++RAW</span><br><span class="line"></span><br><span class="line">#include &quot;UnityPrefix.h&quot;</span><br><span class="line">#include &quot;Configuration/UnityConfigure.h&quot;</span><br><span class="line">#include &quot;Runtime/Mono/MonoBehaviour.h&quot;</span><br><span class="line">#include &quot;Runtime/UI/Canvas.h&quot;</span><br><span class="line">#include &quot;Runtime/UI/UIStructs.h&quot;</span><br><span class="line">#include &quot;Runtime/UI/BatchGenerator.h&quot;</span><br><span class="line"></span><br><span class="line">#if ENABLE_PROFILER</span><br><span class="line">#include &quot;Modules/Profiler/Public/ProfilerImpl.h&quot;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">CSRAW</span><br><span class="line">using System;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using Object = UnityEngine.Object;</span><br><span class="line"></span><br><span class="line">namespace UnityEngine</span><br><span class="line">&#123;</span><br><span class="line">    ENUM RenderMode</span><br><span class="line">        ScreenSpaceOverlay = 0,</span><br><span class="line">        ScreenSpaceCamera = 1,</span><br><span class="line">        WorldSpace = 2</span><br><span class="line">    END</span><br><span class="line"></span><br><span class="line">    [Flags]</span><br><span class="line">    ENUM AdditionalCanvasShaderChannels</span><br><span class="line">        None = 0,</span><br><span class="line">        TexCoord1 = 1 &lt;&lt; 0,</span><br><span class="line">        TexCoord2 = 1 &lt;&lt; 1,</span><br><span class="line">        TexCoord3 = 1 &lt;&lt; 2,</span><br><span class="line">        Normal = 1 &lt;&lt; 3,</span><br><span class="line">        Tangent = 1 &lt;&lt; 4,</span><br><span class="line">    END</span><br><span class="line"></span><br><span class="line">    // CanvasRenderer is the C++ rendering backend for the UI system.</span><br><span class="line">    [RequireComponent(typeof(RectTransform))]</span><br><span class="line">    [NativeClass(&quot;UI::Canvas&quot;)]</span><br><span class="line">    CLASS Canvas : Behaviour</span><br><span class="line"></span><br><span class="line">        AUTO_PROP RenderMode renderMode GetRenderMode SetRenderMode</span><br><span class="line">        AUTO_PROP bool isRootCanvas GetIsRootCanvas</span><br><span class="line">        AUTO_PTR_PROP Camera worldCamera GetCamera SetCamera</span><br><span class="line">        AUTO_PROP Rect pixelRect GetPixelRect</span><br><span class="line">        AUTO_PROP float scaleFactor GetScaleFactor SetScaleFactor</span><br><span class="line">        AUTO_PROP float referencePixelsPerUnit GetReferencePixelsPerUnit SetReferencePixelsPerUnit</span><br><span class="line">        AUTO_PROP bool overridePixelPerfect GetOverridePixelPerfect SetOverridePixelPerfect</span><br><span class="line">        AUTO_PROP bool pixelPerfect GetPixelPerfect SetPixelPerfect</span><br><span class="line">        AUTO_PROP float planeDistance GetPlaneDistance SetPlaneDistance</span><br><span class="line"></span><br><span class="line">        AUTO_PROP int renderOrder GetRenderOrder</span><br><span class="line"></span><br><span class="line">        AUTO_PROP bool overrideSorting GetOverrideSorting SetOverrideSorting</span><br><span class="line">        AUTO_PROP int sortingOrder GetSortingOrder SetSortingOrder</span><br><span class="line">        AUTO_PROP int targetDisplay GetTargetDisplay SetTargetDisplay</span><br><span class="line"></span><br><span class="line">        OBSOLETE warning Setting normalizedSize via a int is not supported. Please use normalizedSortingGridSize</span><br><span class="line">        AUTO_PROP int sortingGridNormalizedSize GetSortingBucketNormalizedSize SetSortingBucketNormalizedSize</span><br><span class="line"></span><br><span class="line">        AUTO_PROP float normalizedSortingGridSize GetSortingBucketNormalizedSize SetSortingBucketNormalizedSize</span><br><span class="line"></span><br><span class="line">        AUTO_PROP int sortingLayerID GetSortingLayerID SetSortingLayerID</span><br><span class="line">        AUTO_PROP int cachedSortingLayerValue GetCachedSortingLayerValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AUTO_PROP AdditionalCanvasShaderChannels additionalShaderChannels GetAdditionalShaderChannels SetAdditionalShaderChannels</span><br><span class="line"></span><br><span class="line">        CUSTOM_PROP string sortingLayerName</span><br><span class="line">        &#123;</span><br><span class="line">            return scripting_string_new(self-&gt;GetSortingLayerName());</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            self-&gt;SetSortingLayerName(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM_PROP Canvas rootCanvas</span><br><span class="line">        &#123;</span><br><span class="line">            UI::Canvas* root = self-&gt;GetRootCanvas();</span><br><span class="line">            return Scripting::ScriptingWrapperFor(root == NULL ? self : root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM static Material GetDefaultCanvasMaterial()</span><br><span class="line">        &#123;</span><br><span class="line">            return Scripting::ScriptingWrapperFor(UI::GetDefaultUIMaterial());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM static Material GetETC1SupportedCanvasMaterial()</span><br><span class="line">        &#123;</span><br><span class="line">            return Scripting::ScriptingWrapperFor(UI::GetETC1SupportedCanvasMaterial());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        OBSOLETE warning Shared default material now used for text and general UI elements, call Canvas.GetDefaultCanvasMaterial()</span><br><span class="line">        CUSTOM static Material GetDefaultCanvasTextMaterial()</span><br><span class="line">        &#123;</span><br><span class="line">            return Scripting::ScriptingWrapperFor(UI::GetDefaultUIMaterial());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CSRAW</span><br><span class="line">        public delegate void WillRenderCanvases();</span><br><span class="line">        public static event WillRenderCanvases willRenderCanvases;</span><br><span class="line">        [RequiredByNativeCode]</span><br><span class="line">        private static void SendWillRenderCanvases() &#123; if (willRenderCanvases != null) willRenderCanvases(); &#125;</span><br><span class="line">        public static void ForceUpdateCanvases() &#123; SendWillRenderCanvases(); &#125;</span><br><span class="line">    END</span><br><span class="line"></span><br><span class="line">    CLASS UISystemProfilerApi</span><br><span class="line">        C++RAW</span><br><span class="line">        enum SampleType &#123; Layout, Render &#125;;</span><br><span class="line">        ENUM SampleType</span><br><span class="line">            Layout,</span><br><span class="line">            Render,</span><br><span class="line">        END</span><br><span class="line">        CUSTOM static public void BeginSample(SampleType type)</span><br><span class="line">        &#123;</span><br><span class="line">#if ENABLE_PROFILER</span><br><span class="line">            if (UnityProfilerPerThread::ms_InstanceTLS != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                ProfilerInformation&amp; profilerInfo = *profiler_get_info_for_name(type == Layout ? &quot;Layout&quot; : &quot;Render&quot;, type == Layout ? kProfilerUISystemLayout : kProfilerUISystemRender);</span><br><span class="line">                PROFILER_BEGIN(profilerInfo, NULL);</span><br><span class="line">            &#125;</span><br><span class="line">#endif // ENABLE_PROFILER</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM static public void EndSample(SampleType type)</span><br><span class="line">        &#123;</span><br><span class="line">#if ENABLE_PROFILER</span><br><span class="line">            if (UnityProfilerPerThread::ms_InstanceTLS != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                ProfilerInformation&amp; profilerInfo = *profiler_get_info_for_name(type == Layout ? &quot;Layout&quot; : &quot;Render&quot;, type == Layout ? kProfilerUISystemLayout : kProfilerUISystemRender);</span><br><span class="line">                PROFILER_END(profilerInfo);</span><br><span class="line">            &#125;</span><br><span class="line">#endif // ENABLE_PROFILER</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM static public void AddMarker(string name, Object obj)</span><br><span class="line">        &#123;</span><br><span class="line">#if ENABLE_PROFILER &amp;&amp; UNITY_EDITOR</span><br><span class="line">            InstanceID instanceID = InstanceID_None;</span><br><span class="line">            std::string nameStr(name);</span><br><span class="line">            if (!obj.IsNull() &amp;&amp; Thread::CurrentThreadIsMainThread())</span><br><span class="line">            &#123;</span><br><span class="line">                instanceID =  obj-&gt;GetInstanceID();</span><br><span class="line">                nameStr += &quot; &quot;;</span><br><span class="line">                nameStr += obj-&gt;GetName();</span><br><span class="line">            &#125;</span><br><span class="line">            UI::GetCanvasManager().AddMarker(nameStr.c_str(), instanceID);</span><br><span class="line">#endif // ENABLE_PROFILER</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    END</span><br><span class="line"></span><br><span class="line">    CSRAW</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Unity中有一种&lt;code&gt;.bindings &lt;/code&gt;格式的文件, 这类文件经过某种处理会转换为C#文件&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UnityUGUI解构(二)-EventSystem</title>
    <link href="https://soincredible.github.io/posts/28d70de0/"/>
    <id>https://soincredible.github.io/posts/28d70de0/</id>
    <published>2025-08-10T00:42:26.000Z</published>
    <updated>2025-08-20T13:53:56.093Z</updated>
    
    <content type="html"><![CDATA[<h1>GraphicRaycaster</h1><p>为什么在创建Canvas节点的时候, 都要GrapihcRaycaster会自动创建<br>GrapihcRaycaster组件不是必须的, 删除掉之后这个Canvas就不能响应点击了.</p><p>要看明白下面这段逻辑是在干什么</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> <span class="title">Raycast</span>(<span class="params">Vector2 sp, Camera eventCamera</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isActiveAndEnabled)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t = transform;</span><br><span class="line">    <span class="keyword">var</span> components = ListPool&lt;Component&gt;.Get();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bool</span> ignoreParentGroups = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">bool</span> continueTraversal = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (t != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t.GetComponents(components);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; components.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> canvas = components[i] <span class="keyword">as</span> Canvas;</span><br><span class="line">            <span class="keyword">if</span> (canvas != <span class="literal">null</span> &amp;&amp; canvas.overrideSorting)</span><br><span class="line">                continueTraversal = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> filter = components[i] <span class="keyword">as</span> ICanvasRaycastFilter;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (filter == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> raycastValid = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">group</span> = components[i] <span class="keyword">as</span> CanvasGroup;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">group</span> != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">group</span>.enabled)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ignoreParentGroups == <span class="literal">false</span> &amp;&amp; <span class="keyword">group</span>.ignoreParentGroups)</span><br><span class="line">                &#123;</span><br><span class="line">                    ignoreParentGroups = <span class="literal">true</span>;</span><br><span class="line">                    raycastValid = filter.IsRaycastLocationValid(sp, eventCamera);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!ignoreParentGroups)</span><br><span class="line">                    raycastValid = filter.IsRaycastLocationValid(sp, eventCamera);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                raycastValid = filter.IsRaycastLocationValid(sp, eventCamera);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!raycastValid)</span><br><span class="line">            &#123;</span><br><span class="line">                ListPool&lt;Component&gt;.Release(components);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t = continueTraversal ? t.parent : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListPool&lt;Component&gt;.Release(components);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>EventSystem的触发机理</h1><p>依赖Raycast给的一些数据, 用这些数据找到Raycast命中的gameobject, 找到这些gameObject上的Handler组件, 触发这些Handler.</p><p>不管市面上的UnityUI的方案(比如FGUI)多炫酷, 最终到Unity中都是要走UGUI的底层</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;GraphicRaycaster&lt;/h1&gt;
&lt;p&gt;为什么在创建Canvas节点的时候, 都要GrapihcRaycaster会自动创建&lt;br&gt;
GrapihcRaycaster组件不是必须的, 删除掉之后这个Canvas就不能响应点击了.&lt;/p&gt;
&lt;p&gt;要看明白下面这段逻</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Actor模型</title>
    <link href="https://soincredible.github.io/posts/d6fe94a3/"/>
    <id>https://soincredible.github.io/posts/d6fe94a3/</id>
    <published>2025-07-29T00:59:18.000Z</published>
    <updated>2025-08-11T03:35:33.787Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>近期学吉他心得</title>
    <link href="https://soincredible.github.io/posts/5b1bb5d7/"/>
    <id>https://soincredible.github.io/posts/5b1bb5d7/</id>
    <published>2025-07-26T01:00:24.000Z</published>
    <updated>2025-07-28T06:49:10.581Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>UnityUGUI解构(一)——RectTransform</title>
    <link href="https://soincredible.github.io/posts/67d7d086/"/>
    <id>https://soincredible.github.io/posts/67d7d086/</id>
    <published>2025-07-15T13:56:01.000Z</published>
    <updated>2025-08-11T03:35:33.788Z</updated>
    
    <content type="html"><![CDATA[<p>RectTransform继承自Transform, 并没有包含在UGUI体系里面, 但是RectTransform的字段绝大多数情况下只在UGUI体系中才有意义.  因此我们可以将RectTransform看作是Unity UGUI的一部分, 并且将其作为UGUI系列中首个分析的对象.</p><h1>锚点(Anchor)与中心点(Pivot)</h1><h2 id="锚点Anchor">锚点Anchor</h2><p>这个Anchor并不是直接参与位置信息运算的数据, Unity会先根据这个信息计算出一个anchorReferencePosition, 再用这个值进行其他的运算.<br>在Unity中 锚点是可以至多被分成四个角的, 并不是一个点. 而在计算一个RectTransform中的一些属性时需要把锚点作为一个&quot;点&quot; 参与运算, 作为四个角不重合的情况, 需要有一个Anchor Reference Position来作为锚点,<br>Anchor Reference Position的计算公式如下:<br>$$ AnchorReferencePosition_x = (1 - pivot_x) \times x_0 + pivot_x \times x_1 $$<br>$$ AnchorReferencePosition_y = (1 - pivot_y) \times y_0 + pivot_y \times y_1 $$<br>其中 (x0, y0)代表的是AnchorMin在该RectTransform的父节点中的位置, (x1, y1)代表的是AnchorMax在该RectTransform的父节点中的位置, (pivotx, pivoty)指的是中心点的归一化位置坐标</p><p>有一个概念叫AnchoredPosition, 这个值的含义是Pivot点相对于<code>Anchor Reference Position</code>的距离, 当锚点的四个角没有重合在一点时, 我们可能会以为Anchor Reference Position</p><p>AnchoredPosition和Local Position的区别是什么?<br>在Transform(非RectTransform)体系中, 子物体的localPosition只能通过调整其和父物体的相对位置来实现变化, 在RectTransform体系下, 子物体的localPosition除了受相对位置的影响, 还与父物体的width、子物体本身的pivot有关</p><h1>RectTransform中的字段</h1><blockquote><p>💡本文我们只讨论RectTransform中有而Transform中没有的字段</p></blockquote><ul><li>rect Rect 注意RectTransform中的rect成员不支持直接修改注意以上字段都是不可以通过RectTransform操作其值的., 因为没有set属性, 外部没有对它的访问权限<ul><li>xMin, 代表的是rect围成矩形区域的左下角的横坐标值, 坐标系原点是这个rect围成的矩形区域的中心点,</li><li>yMin, 代表的是rect围成矩形区域的左下角的纵坐标值, 坐标系原点是这个rect围成的矩形区域的中心点,</li><li>mHeight, 这个rect围成矩形的高</li><li>mWidth, 这个rect围成矩形的宽</li></ul></li><li>anchorMin Vector2 以当前RectTransform的父节点的rect的左下角为坐标原点, 锚点左下角的归一化位置坐标</li><li>anchorMax Vector2 以当前RectTransform的父节点的rect的左下角为坐标原点, 锚点右上角的归一化位置坐标</li><li>sizeDelta Vector2 当锚点四角重合时, sizeDelta.x=rect.width=(offsetMax-offsetMin).x, sizeDelta.y=rect.height=(offsetMax-offsetMin).y 当不重合时 sizeDelta.x=(offsetMax-offsetMin).x, sizeDelta.y=(offsetMax-offsetMin).y</li><li>offsetMin Vector2 指锚点左下角与rect的左下角的偏移值 以当前RectTransform的父节点的rect的左下角为坐标原点</li><li>offsetMax Vector2  指锚点右上角与rect的右上角的偏移值 以当前RectTransform的父节点的rect的左下角为坐标原点</li><li>anchoredPosition Vector2</li><li>anchoredPosition3D Vector3 包含anchoredPosition的xy分量, 增加了z分量 一般用不到<br>localPosition的含义是当前RectTransform的pivot相对于该RectTransform的父节点rect的中心点的位置, 由于可以调整父节点的rect, 所以可以间接影响子物体的localPosition属性, 而我也可以让rect的绝对位置不变 通过改变pivot的位置来影响localPosition的值, 这在Transform(非RectTransform)体系下是不太可能做到的,</li></ul><p>锚点(Anchor)描述的是当前UI节点和其父节点的位置关系, 锚点虽然叫点, 但是会存在锚点的四个角没有重合的情况. 只不过锚点的四角重合时anchor reference position和该点重合了而已 unity会计算出一个anchor reference point, 和pivot做运算得到anchored position<br>中心点(Pivot)描述的是当前UI节点的轴心位置 与父节点无关</p><h1>IDragHandler</h1><p>在此猜测 , IDragHandler的生效逻辑是什么</p><p>每一帧 Unity都会从摄像机出发生成一个射线 由你的pointer投射到场景中的gameObject上, 每一帧你都会拿到这些信息 拿到这些物体, 查看这些物体上挂载的组件有没有实现IDragHandler接口, 如果有, 出发这个IDragHnader的fafa</p><p>在Unity源码中 搜 localIdentifierInFile</p><p>BuildSerialization.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ConvertSceneObjectsToInstanceIDBuildRemap</span><span class="params">(<span class="type">const</span> core::string&amp; path, <span class="type">const</span> WriteDataArray&amp; sceneObjects, InstanceIDBuildRemap&amp; output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pathIndex = <span class="built_in">GetPersistentManager</span>().<span class="built_in">GetSerializedFileIndexFromPath</span>(path);</span><br><span class="line"></span><br><span class="line">    output.<span class="built_in">reserve</span>(output.<span class="built_in">size</span>() + sceneObjects.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (WriteDataArray::const_iterator i = sceneObjects.<span class="built_in">begin</span>(); i != sceneObjects.<span class="built_in">end</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Assert</span>(i-&gt;localIdentifierInFile != <span class="number">0</span>);</span><br><span class="line">        output.<span class="built_in">push_unsorted</span>(i-&gt;instanceID, <span class="built_in">SerializedObjectIdentifier</span>(pathIndex, i-&gt;localIdentifierInFile));</span><br><span class="line">    &#125;</span><br><span class="line">    output.<span class="built_in">sort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResourceManager.cpp中的void BuiltinResourceManager::InitializeResources()方法</p><p>下面这段代码, 推测应该是Unity给资产生成FileId的逻辑<br>明天验证一下 对于大部分的FBX中的mesh资源, 他们应该都是叫同样的名字, 又因为他们都是mesh, 所以传入的参数一样, 所以在meta文件中, 你可以看到, 即便是引用了不同的fbx的mesh, 变的只有guid, fileid都是一样了<br>明天验证一下, 两个mesh名不一样的fbx, 应该fileId就会不一样, 而且改了mesh的名字, fileId的名字也就会跟着变</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;RectTransform继承自Transform, 并没有包含在UGUI体系里面, 但是RectTransform的字段绝大多数情况下只在UGUI体系中才有意义.  因此我们可以将RectTransform看作是Unity UGUI的一部分, 并且将其作为UGUI系列中首</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSharp合集</title>
    <link href="https://soincredible.github.io/posts/d97e22f1/"/>
    <id>https://soincredible.github.io/posts/d97e22f1/</id>
    <published>2025-07-15T13:43:56.000Z</published>
    <updated>2025-07-15T13:47:59.495Z</updated>
    
    <content type="html"><![CDATA[<p>CSharp问题杂记<br><a href="20505312">CSharp前传</a><br>CSharp中的委托<br>CSharp中的CancellationToken<br>CSharp中的Task<br>Dissecting-the-async-methods-in-CSharp<br>Extending-the-asynce-methods-in-CSharp-译</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;CSharp问题杂记&lt;br&gt;
&lt;a href=&quot;20505312&quot;&gt;CSharp前传&lt;/a&gt;&lt;br&gt;
CSharp中的委托&lt;br&gt;
CSharp中的CancellationToken&lt;br&gt;
CSharp中的Task&lt;br&gt;
Dissecting-the-async-met</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>代码热更新合集</title>
    <link href="https://soincredible.github.io/posts/99b1bffa/"/>
    <id>https://soincredible.github.io/posts/99b1bffa/</id>
    <published>2025-06-23T11:07:40.000Z</published>
    <updated>2025-07-28T06:44:13.278Z</updated>
    
    <content type="html"><![CDATA[<h1>XLua、ILRuntime、HybridCLR热更原理</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;XLua、ILRuntime、HybridCLR热更原理&lt;/h1&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSharp前传</title>
    <link href="https://soincredible.github.io/posts/20505312/"/>
    <id>https://soincredible.github.io/posts/20505312/</id>
    <published>2025-06-22T00:31:38.000Z</published>
    <updated>2025-07-15T13:47:59.495Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>《CLR via C#》这本书帮助读者建立起了C#的知识框架, 是笔者职业生涯中功不可没的好书, 不过本书的作者Jeffrey <a href="http://xn--Richter-oc5k144o.Net">Richter是以.Net</a> Framework框架在Windows平台进行开发的视角上介绍.Net的一些特性的, 而笔者作为一个Unity入门C#的半吊子在最初阅读本书的很长一段时间内是没有真正理解.Net的核心特性的. 在本篇博客中, 笔者尝试基于这本书, 加上笔者对Unity的理解, 站在Unity开发者的视角上, 诠释.Net中的一些关键性概念.</p></blockquote><h1>.NET往事</h1><p>在《CLR via C#》<a href="http://xn--1jq840bfog6d140aln3a9iqxvd2rli4epa472o.Net">这本书里面并没有详细解释.Net</a>、.NetCore、.Net Standard、.Net Framework一系列的概念, 之所以有这么多的概念, 也是有历史原因的, 了解.Net的发展史能帮我们更好地理解这些概念、<br>.Net是.Net C#是C#, .Net是一套支持C#代码运行的框架体系, 除此之外.Net还支持F#、VB等语言</p><p>.Net Framework、 .NetCore、 .Net这三者是对同一个对象在不同发展时期的不同称谓, 这一对象在不同发展时期具有不同的特点.<br>他们是同种概念的不同形态</p><h2 id="Net-Framework时期">.Net Framework时期</h2><p>早期的.Net只能运行在<br>此时的.Net只能够运行在Windows上, 而且C#代码的运行方式是JIT模式</p><h2 id="Mono的出现">Mono的出现</h2><p>由于.Net完全闭源, 有一群人从零手搓了一个, 使用体验跟.Net一模一样的Mono, 而且还支持跨平台, 就跟汉堡王和肯德基一样, 都是汉堡薯条, 吃起来大同小异, 但是做法原料可能完全不同, 也就是说, Mono和.Net可能底层实现不一样, 但是上层要实现的功能是完全一样的: 为C#(笔者这里就只说C#了)提供一套能够正确运行的环境, 知道这个就行了.</p><h2 id="Net-Core是啥">.Net Core是啥</h2><p>.Net Core在原来.NetFramework的基础上, 增加了对于跨平台的支持</p><h2 id="Net-是啥">.Net 是啥</h2><p><a href="http://xn--6kqv66j.Net">至于.Net</a>, 是目前的大一统状态, 里面</p><p>经过一段时间的演变, .Net <a href="http://xn--Core-ts5fw5zn9ou7k.Net">Core就变成了.Net</a></p><table><thead><tr><th>组件名称</th><th>作用</th><th>说明</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>CoreCLR / .NET Runtime</td><td>托管运行时/虚拟机，负责执行IL，中间语言JIT，GC</td><td><a href="https://github.com/dotnet/runtime%EF%BC%88%E5%B7%B2%E5%BC%80%E6%BA%90%EF%BC%89">https://github.com/dotnet/runtime（已开源）</a></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>CoreFX / 基类库（Base Class Library, BCL）</td><td>常用系统API：IO、网络、集合、字符串等</td><td>现代叫runtime中的“libraries”</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><a href="http://ASP.NET">ASP.NET</a> Core</td><td>Web开发框架</td><td>支持Web服务器、API、MVC、Blazor、SignalR、gRPC等平台</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Entity Framework Core</td><td>对象关系映射（ORM）数据库组件</td><td>支持SQLServer、SQLite、MySQL等主流数据库</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>WinForms、WPF（Windows Only）</td><td>桌面GUI开发</td><td>.NET 5+支持基本移植，但仅限Windows</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>MSBuild</td><td>构建系统</td><td>dotnet build 就是用的这个</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Roslyn</td><td>C#、VB.NET编译器和代码分析器</td><td><a href="https://github.com/dotnet/roslyn">https://github.com/dotnet/roslyn</a></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>NuGet</td><td>包管理工具</td><td>在线/本地包管理</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>CLI</td><td>命令行工具（dotnet）</td><td>包括dotnet、dotnet build、dotnet run等基础命令</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Mono是啥">Mono是啥</h2><p>Mono 项目始于 2001 年，由 Ximian 公司的创始人 Miguel de Icaza 领导。Ximian 是一家专注于 Linux 和开源软件的公司。Miguel de Icaza <a href="http://xn--4gqvd70lutrsxi5wc1t2biya.NET">的目标是创建一个.NET</a> 框架的开源实现，以便在 Linux 上运行。</p><p>.NET 框架最初由微软开发，主要用于构建 Windows 应用程序。<a href="http://xn--6kqu55g.NET">由于.NET</a> 框架的闭源性，它无法直接在其他操作系统上运行。Mono 项目的出现打破了这一限制，<a href="http://xn--2rq350b.NET">使得.NET</a> 开发者的代码能够在多种平台上运行。</p><p>随着时间的推移，Mono 项目得到了广泛的社区支持，并且不断发展和完善。它支持多种编程语言，包括 C#、Visual <a href="http://Basic.NET">Basic.NET</a> 和 F#，<a href="http://xn--phqsk73ztrc71ev35bpf9a.NET">并且实现了许多.NET</a> 框架的功能。Mono <a href="http://xn--fiqqezet6cs0gs0ag5r80qxpgh48a7jsgeb81q2u9fc90a.NET">项目在开源社区中的成功也促进了.NET</a> 技术在非 Windows 平台上的普及。</p><p><a href="http://xn--xft85uwsaj08j.xn--Net-6g3ei87f2r7a.Net">还有就是.Net升级是.Net</a> C# language升级是language<br>一般来说, 先是C#的语言有更新, 必须新增了某种语法或者语言特性 那么配套的.Net中就需要支持能够识别并驱动这些语法, 因此一般C#有新特性增加对应的.Net也有新的升级</p><p>说白了 .Net、.NetCore、.NetFramework、Mono每一个都是一套让C#代码能够运行跑起来的平台. 这就好比各家虚拟机平台, 而C#就像是你在微软官网上下载的Windows操作系统的镜像文件, 你可以将这个镜像文件挂载在VMWare平台上, 也可以挂载在Parallel Desktop平台上, 即便平台的底层实现不同, 但是因为它们都遵循同样的规范, 因此同样的一操作系统镜像文件可以跑在不同的虚拟机平台上, 这些平台遵循的规范, 类比到.Net中也就是<code>.Net Standard</code></p><h2 id="Net-Standard">.Net Standard</h2><p>.Net Standard 是针对多个 .Net实现推出的一套正式的.Net API规范. 推出.NetStandard的背后动机是要提高.Net生态系统中的一致性.<br>由上面的陈述可知, .Net有很多的实现, 为了能够让不同实现的.Net能够协同工作, .Net Standard出现了. 比如在Unity开发中, 你需要使用一个托管的dll, 这个dll使用.Net环境开发, 而Unity是Mono环境, 为了让dll中的代码能够和Unity中的代码正确协同, <a href="http://xn--Unitydll-b50n2ky0c413fdixom8b6r7cmhhzivd30a.Net">只需要让Unity和dll遵循同样的.Net</a> Standard版本就可以了. 在Unity的BuildSettings中的APICompatibilityLevel就是这个作用, 不同的Unity版本可以对标的.Net版本也不太一样. 比如在<code>2020.3.48</code>版本中, <code>API Compatibility Level</code>的选项是<code>.Net 4.X</code>和<code>.Net Standard 2.0</code>, 而在<code>2022.3.15</code>版本中, <code>API Compatibility Level</code>的选项则变成了<code>.Net Standard 2.1</code>和<code>.Net Framework</code>. 所以这么一看你所使用的插件必须要有<code>API Compatibility Level</code>相对应的版本才能够在Unity中使用.<br><a href="http://xn--zbs584j.Net">说回.Net</a>, .Net5采用的不同的方法来建立一致性, <a href="http://xn--ghqe42iv2dxrl2vvsdhtrtvcvrs3cu50i0xyjnofs9cchveoes67a.Net">这种新方法在很多情况下都不需要使用到.Net</a> Standard.</p><p>你的Unity工程，允许代码能用（兼容）的 .NET（或Mono）API集合的标准程度。</p><p>Unity的脚本运行环境（Scripting Backend）是基于Mono（或IL2CPP）来实现C#环境的；<br>但Mono和微软官方.NET实现的API/标准并不是完全一致的，有新有旧、有全有残；<br>API Compatibility Level，就是让你指定用哪一套标准的API接口子集：<br>比如：.NET 2.0 Subset<br>又比如：.NET 4.x / .NET Standard 2.0<br>或者更高（随着Unity版本演进而变化）<br>这些选项，<a href="http://xn--Unity-fg1hjcs88bgjegyy9a11h01wpp1glkcu71cohh804h.NET">实际上背后对应着一组Unity定制的.NET</a> Base Class Library (BCL)，决定你在C#脚本里能不能引用、编译、反射、调用某些标准库功能。</p><p>新项目：优先选“.NET 4.x”或“.NET Standard 2.0”。<br>项目中有现代C#语法（如async/await、LINQ等）：必须选新标准。<br>做插件/SDK跨Unity兼容：优先考虑“.NET Standard 2.0”。<br>有老DLL、Asset Store资产只支持2.0，且不想升级：临时用“.NET 2.0”。<br>手机版本极度精简、追求最小包体：用Subset，但很少有这种极端需求。</p><h1>一个C#工程使用的.Net版本怎么看?</h1><p>注意.Net版本和C#LanguageVersion是两个东西,<br>对于使用Rider创建的C#项目,</p><p>Unity的.NetVersion能不能改?</p><h1>一个C#工程使用的.Net版本怎么修改?</h1><h1>C#项目的组织结构</h1><h1>Unity项目的代码组织结构</h1><h2 id="sln-csproj-dll-asmdef-pdb的区别和联系">.sln .csproj .dll .asmdef .pdb的区别和联系</h2><h2 id="dll">.dll</h2><p>如果你的C#项目选择的是ClassLibrary, 那么构建这个C#项目的时候, 构建结果就是.dll,<br><a href="https://github.com/shimat/opencvsharp/releases">这是C#版本的OpenCV库</a>, 下载他的release你会发现,里面还带一个pdb文件.<br>.sln 是<br>.csproj 一个sln下会有多个csproj<br>.asmdef 这是Unity中的一个概念, 每创建一个asmdef, Unity都会自动生成这个asmdef对应的csproj<br>.dll dll一般有两种: 使用C#编译生成的dll, 这类dll属于托管类dll, 导入Unity能够直接被Unity编译器识别; 还有一类是使用c/c++等非托管类语言编译生成的dll, 这类dll需要C#具有能够调用原生(native)代码的能力, 需要使用<code>[DLLImport]</code>属性来导入方法</p><p>对于简单的项目 完全没必要创建sln 但是像Rider、Visual Studio这些IDE是没有提供只创建csproj的选项的, 这就有点大材小用了 我们可以通过使用命令行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建后是一个dll</span></span><br><span class="line">dotnet new classlib</span><br></pre></td></tr></table></figure><p>这种方式只创建csproj, 然后使用Rider或者VS打开这个csproj, 就可以绕过生成sln文件<br>.sln（Solution）文件是 Visual Studio/VS Code/Coderush Rider 等IDE用来管理一组相关项目（.csproj）的容器。比如你要做大型架构、包括多个类库、应用，以及单元测试项目时，.sln文件可以统一管理它们的依赖与结构。<br>但是，小项目、单个项目时，完全可以不建 .sln，只用一个 csproj 文件照样编译、运行、开发（如命令行下dotnet build XX.csproj，VS Code 也能直接打开）。<br>实例1：你在任意文件夹里新建dotnet new console，它会创建Program.cs和XX.csproj，没有.sln，也能正常dotnet run/build。<br>只有需要管理多个项目（比如引用类库或测试工程等），用.sln会更方便。</p><p>pdb 文件是什么？</p><p>PDB（Program Database）是Windows/Visual Studio环境下的“程序数据库”文件。<br>内容：主要存储了可执行文件（exe/dll等）的调试信息，如：<br>源文件名/路径<br>行号<br>局部变量、函数参数名<br>类型信息<br>符号表、断点等信息<br>目的是：进行调试时，IDE/调试器能还原源代码对应关系、栈、变量名等，是“调试辅助文件”。<br>3. dll 和 pdb 的关系</p><p>当你用 Visual Studio 编译一个 dll 时（Debug 模式），通常会生成同名的 pdb 文件。<br>这个 dll 文件是真正的动态库，pdb 文件不给程序加载，只在调试/分析时让开发者用。<br>没有 pdb，发布的 dll 依然可以运行，只是调试难度大。</p><h1>C#代码是怎么跑起来的?</h1><p>在《CLR via C#》中, 作者只提及了JIT, 因为AOT方式是在2022年在.Net7发布的, 本书的成书时间应该是2014年, 没有提及AOT也是很正常的</p><h2 id="JIT模式">JIT模式</h2><p>在Unity中, 这对应的就是Mono的构建方式</p><p>JIT方式打包, 在打包阶段, 我们编写的C#代码会被编译成IL, 打入一个.dll的文件, 这就是Mono的打包方式, 使用这种方式打的包, 包体小, 但是由于其代码不是原生的, 所以运行时需要依赖CLR将IL代码编译成原生代码执行, 比起AOT方式 在启动时间上会久一点, 因为需要编译, 但是只要编译了一次之后, 执行效率和AOT是没什么区别的</p><p>笔者认为在一开始.Net可能就只支持JIT的方式执行C#代码, 而AOT和解释器方式则是跨平台的概念引入到.Net中后, 才出现的概念.</p><p>随着.Net支持跨平台. 想要在MacOS、iOS上运行.Net程序, 使用JIT的方式就不行了, 因为苹果是不允许程序运行时动态加载代码的, 所有代码必须被编译成机器码原生地执行. 这就是AOT模式</p><h2 id="AOT模式">AOT模式</h2><p>微软是在.Net7版本中实现了AOT功能.</p><p>在Unity中, 这对应的就是IL2CPP的构建方式</p><p>我们就拿Unity开发举例子, 如果使用AOT的方式打包, 那么在打包阶段, 我们编写的C#代码就会全部被编译成机器码, 也就是.so文件, 这种代码就是原生的代码, 丢到机器上就就能立刻运行, 不需要编译, 但是机器码都是01, 存储效率低, 由我们的C#脚本转成机器码会造成代码膨胀, 听起来是不是很像IL2CPP?</p><p>那在AOT推出之前, Unity是怎么实现在iOS平台上发布的呢? Mono是专门提供了</p><h1>代码热更</h1><h2 id="Interpreter模式">Interpreter模式</h2><p>解释器, 笔者第一次看到这个概念出现在C#中时, 是非常疑惑的, 因为笔者理解的解释器, 是像Python那种解释型语言才会使用到的东西, 而C#作为一个编译型语言, 其实C#并不是传统意义上的编译型语言, 因为C#是先编译成IL中间语言, 然后在运行时通过JITCompiler将中间语言编译成机器码执行的方式.</p><p>也就是, C#不解释型语言那样直接解释源代码执行, 也不像C++那样一次性把源代码编译成机器码执行.</p><p>解释器模式可以理解为是在Unity开发中代码热更新场景下, 业内开发者为了能够执行热更代码(dll)而开发的一种迷你版的CLR(虚拟机).<br>我再理解一下解释器的角色, 解释器就是在AOT打包方式下, 主包的.Net的虚拟机被剔除丧失了解析编译IL(dll)的能力, 需要一个迷你版的虚拟机(也就是解释器)来执行IL代码</p><h1>JIT和解释器的区别是啥呢? 不都是运行时编译代码嘛?</h1><p>JIT方式是有完整的Mono或者CLR虚拟机的机制, 而解释器则是一种针对Unity热更场景下的迷你版虚拟机机制.</p><h2 id="Lua、XLua">Lua、XLua</h2><h2 id="ILRuntime">ILRuntime</h2><h2 id="HybridCLR">HybridCLR</h2><h1>C#的执行机制</h1><p>C#代码会被编译成IL语言, 在运行的时候, 通过一个Interpreter(解释器)逐行解释IL指令运行<br>在IOS上, 是不允许JIT的方式运行代码的, 只能使用AOT的方式运行<br>在Android等其他设备上AOT和JIT都是可以的</p><h1>如今行业内主流的热更方案究竟是怎么形成的?</h1><ul><li>由于IOS对于JIT的限制, 导致主包必须使用AOT的方式打包, <a href="http://xn--AOT-0y9d42pwx1aclan9eb47e78s.Net">而AOT打包会直接把.Net</a> Mono虚拟机剔除掉, 将C#直接转成C++原生代码. 这就会导致主包不具备识别dll能力</li><li>接着, 由于各个操作系统平台对于原生代码的动态加载是有限制的（比如 dlopen 加新 so/dll）, 所以想要在运行时动态的加载一段逻辑进来, 只能使用非原生代码, 于是热更通常选择DLL（IL）</li><li>要让底包能认识和运行“热更dll”里的 C# 代码，就得有.NET虚拟机。但AOT打包让虚拟机相关能力被移除/阉割，不认dll。 但是虚拟机在AOT打包的时候已经几乎被完全剔除掉了, 因此我们必须让它恢复识别dll的功能,</li><li>要想恢复识别dll的能力，就得集成新的虚拟机或解释能力（比如ILRuntime/HybridCLR）。HybridCLR的意义就是让AOT包恢复充分甚至很大程度原生的DLL识别/运行能力。这就是HybridCLR所做的事情在AOT打包模式剔除掉Mono虚拟机识别dll代码能力的情况下, 重写AOT的打包方式, 让其保留能够识别dll代码的能力.</li></ul><h1>代码热更新</h1><p>为什么代码热更新都选择使用JIT(将热更代码编译成dll)的方式, 而不选择AOT原生方式呢?</p><h1>热更的代码和热更的资源 哪个应该先加载?</h1><p>热更代码的调用方式<br>有一种很取巧的方式加载热更代码, 那就是把热更代码挂载到某一个预制体上, 通过Unity的Awake方法调用热更代码的入口<br>AOT程序集 就是底包程序集 AOT是一种代码编译方式 它会</p><p>什么是streaming path? 什么是persistent path?</p><h1>一些Unity中无法内置的dll的处理</h1><p><a href="https://blog.csdn.net/lanchunhui/article/details/53239441">https://blog.csdn.net/lanchunhui/article/details/53239441</a></p><p><a href="https://zh.wikipedia.org/zh-hans/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83">https://zh.wikipedia.org/zh-hans/正态分布</a></p><p><a href="https://blog.csdn.net/qq_17347313/article/details/106995687">https://blog.csdn.net/qq_17347313/article/details/106995687</a><br>C#中正态分布的第三方库</p><h1>正态分布</h1><h2 id="标准正态分布">标准正态分布</h2><h1>正偏态分布</h1><h1>累积分布函数</h1><h1>参考</h1><ul><li><a href="https://www.cnblogs.com/SunSpring/p/15047424.html">.net 温故知新：【2】 .Net Framework 、.Net 、 .NET Standard的概念与区别</a></li><li><a href="https://blog.csdn.net/codywangziham01/article/details/123689658">AOT 和 JIT、 IL2CPP和Mono、 CLR、 ILRuntime热更新原理</a></li><li><a href="https://www.cnblogs.com/fly-100/p/4594380.html">Unity跨平台原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/88692056">Unity从发布到流行经历了什么重大变化（2）</a></li><li><a href="https://blog.csdn.net/gz_huangzl/article/details/52486255">Unity将来时：IL2CPP是什么？有了Mono为什么还需要IL2CPP?</a></li><li><a href="https://blog.csdn.net/Funniyuan/article/details/136002603">.NET 发展历程与未来</a></li><li><a href="https://my.oschina.net/emacs_9244658/blog/18230886">Mono 软件发展历程详解</a></li><li><a href="https://www.cnblogs.com/willick/p/15038133.html">.NET 的发展简史</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;《CLR via C#》这本书帮助读者建立起了C#的知识框架, 是笔者职业生涯中功不可没的好书, 不过本书的作者Jeffrey &lt;a href=&quot;http://xn--Richter-oc5k144o.Net&quot;&gt;Richter是以.Net&lt;/a&gt; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>人性的弱点</title>
    <link href="https://soincredible.github.io/posts/109e75d5/"/>
    <id>https://soincredible.github.io/posts/109e75d5/</id>
    <published>2025-06-18T10:58:23.000Z</published>
    <updated>2025-06-23T13:51:07.889Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>UnityEditor开发中Singleton的设计</title>
    <link href="https://soincredible.github.io/posts/1477ebaf/"/>
    <id>https://soincredible.github.io/posts/1477ebaf/</id>
    <published>2025-06-11T08:14:28.000Z</published>
    <updated>2025-06-23T02:20:26.329Z</updated>
    
    <content type="html"><![CDATA[<h1>在Editor下创建单例</h1><p>灵感来自Unity的<a href="https://sites.google.com/view/monkey-user-guide/getting-started">MonKey插件</a></p><h2 id="使用场景">使用场景</h2><p>我有一些由<code>ScriptableObject</code>、<code>json</code>或者别的格式组织的一组数据, 我希望在Editor模式下开发一套工具, 能让我对这一组数据进行增删改查, 根据MVC架构的思想, 必须有一个<code>Manager</code>来维护这一组数据的增删改查, 并且该<code>Manager</code>的生命周期需要和Unity Editor的生命周期保持一致.</p><h2 id="关键角色">关键角色</h2><ul><li><a href="https://docs.unity3d.com/ScriptReference/InitializeOnLoadAttribute.html"><code>InitializeOnLoad</code></a>属性, 根据官方的描述, 该属性会在UnityEditor打开和代码重新编译的时候初始化Editor脚本. 你需要给这个Editor脚本提供一个静态的构造函数, <strong>注意</strong> 官方提到了 应该避免在InitialzeOnLoad中进行资产加载的操作, 因为InitialzeOnLoad是在资产导入完成前被调用的, 该操作有可能会导致资产加载失败. 要在需要进行资产操作的域重载后进行初始化, 可以使用<code>AssetPostprocessor.OnPostprocessAllAssets</code>回调. 但Unity2020版本中是没有这个接口的, 该回调支持所有资产操作, 并有一个参数提示是否进行了域重载. Unity不能保证 因此使用懒汉模式, 将在初始化操作中不能加载资源的操作变为了在初始化的过程中不能访问Instance的操作, 将加载资源的操作放在首次访问Instance之后 对于一个Editor单例, 如果该单例需要做一些加载操作, 那么就让这个单例实现IAssetProcess接口,</li></ul><p>EditorSingleton的实现</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;在Editor下创建单例&lt;/h1&gt;
&lt;p&gt;灵感来自Unity的&lt;a href=&quot;https://sites.google.com/view/monkey-user-guide/getting-started&quot;&gt;MonKey插件&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用场景&quot;&gt;</summary>
      
    
    
    
    <category term="UnityEditor开发" scheme="https://soincredible.github.io/categories/UnityEditor%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>UnityUGUIText实现描边</title>
    <link href="https://soincredible.github.io/posts/9125ebdc/"/>
    <id>https://soincredible.github.io/posts/9125ebdc/</id>
    <published>2025-05-27T15:41:18.000Z</published>
    <updated>2025-06-25T08:21:13.783Z</updated>
    
    <content type="html"><![CDATA[<h1>通过顶点方式实现描边</h1><h2 id="UGUI中自带的Outline">UGUI中自带的Outline</h2><h1>通过Shader方式实现描边</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;通过顶点方式实现描边&lt;/h1&gt;
&lt;h2 id=&quot;UGUI中自带的Outline&quot;&gt;UGUI中自带的Outline&lt;/h2&gt;
&lt;h1&gt;通过Shader方式实现描边&lt;/h1&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UnityUGUI解构</title>
    <link href="https://soincredible.github.io/posts/e0e34b4b/"/>
    <id>https://soincredible.github.io/posts/e0e34b4b/</id>
    <published>2025-05-27T07:55:46.000Z</published>
    <updated>2025-07-15T13:47:59.496Z</updated>
    
    <content type="html"><![CDATA[<h1>引子——UGUI中的Text如何被绘制到屏幕上?</h1><p>参与绘制Text的角色:</p><ul><li>VertexHelper</li><li>TextGenerator</li><li>Font和FontData</li><li>BaseMeshEffect</li></ul><p>这是字体使用的Shader</p><figure class="highlight plaintext"><figcaption><span>Shader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)</span><br><span class="line"></span><br><span class="line">Shader &quot;GUI/Text Shader&quot; &#123;</span><br><span class="line">    Properties &#123;</span><br><span class="line">        _MainTex (&quot;Font Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Color (&quot;Text Color&quot;, Color) = (1,1,1,1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader &#123;</span><br><span class="line"></span><br><span class="line">        Tags &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;PreviewType&quot;=&quot;Plane&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        Lighting Off Cull Off ZTest Always ZWrite Off</span><br><span class="line">        Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line"></span><br><span class="line">        Pass &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #pragma multi_compile _ UNITY_SINGLE_PASS_STEREO STEREO_INSTANCING_ON STEREO_MULTIVIEW_ON</span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">            struct appdata_t &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                fixed4 color : COLOR;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">                UNITY_VERTEX_INPUT_INSTANCE_ID</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f &#123;</span><br><span class="line">                float4 vertex : SV_POSITION;</span><br><span class="line">                fixed4 color : COLOR;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">                UNITY_VERTEX_OUTPUT_STEREO</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            uniform float4 _MainTex_ST;</span><br><span class="line">            uniform fixed4 _Color;</span><br><span class="line"></span><br><span class="line">            v2f vert (appdata_t v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                UNITY_SETUP_INSTANCE_ID(v);</span><br><span class="line">                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);</span><br><span class="line">                o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.color = v.color * _Color;</span><br><span class="line">                o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag (v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 col = i.color;</span><br><span class="line">                col.a *= tex2D(_MainTex, i.texcoord).a;</span><br><span class="line">                return col;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是所有的UGUI默认使用的Shader</p><figure class="highlight plaintext"><figcaption><span>Shader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)</span><br><span class="line"></span><br><span class="line">Shader &quot;UI/Default&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        [PerRendererData] _MainTex (&quot;Sprite Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Color (&quot;Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line"></span><br><span class="line">        _StencilComp (&quot;Stencil Comparison&quot;, Float) = 8</span><br><span class="line">        _Stencil (&quot;Stencil ID&quot;, Float) = 0</span><br><span class="line">        _StencilOp (&quot;Stencil Operation&quot;, Float) = 0</span><br><span class="line">        _StencilWriteMask (&quot;Stencil Write Mask&quot;, Float) = 255</span><br><span class="line">        _StencilReadMask (&quot;Stencil Read Mask&quot;, Float) = 255</span><br><span class="line"></span><br><span class="line">        _ColorMask (&quot;Color Mask&quot;, Float) = 15</span><br><span class="line"></span><br><span class="line">        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (&quot;Use Alpha Clip&quot;, Float) = 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;PreviewType&quot;=&quot;Plane&quot;</span><br><span class="line">            &quot;CanUseSpriteAtlas&quot;=&quot;True&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stencil</span><br><span class="line">        &#123;</span><br><span class="line">            Ref [_Stencil]</span><br><span class="line">            Comp [_StencilComp]</span><br><span class="line">            Pass [_StencilOp]</span><br><span class="line">            ReadMask [_StencilReadMask]</span><br><span class="line">            WriteMask [_StencilWriteMask]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Cull Off</span><br><span class="line">        Lighting Off</span><br><span class="line">        ZWrite Off</span><br><span class="line">        ZTest [unity_GUIZTestMode]</span><br><span class="line">        Blend One OneMinusSrcAlpha</span><br><span class="line">        ColorMask [_ColorMask]</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Name &quot;Default&quot;</span><br><span class="line">        CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #pragma target 2.0</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line">            #include &quot;UnityUI.cginc&quot;</span><br><span class="line"></span><br><span class="line">            #pragma multi_compile_local _ UNITY_UI_CLIP_RECT</span><br><span class="line">            #pragma multi_compile_local _ UNITY_UI_ALPHACLIP</span><br><span class="line"></span><br><span class="line">            struct appdata_t</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex   : POSITION;</span><br><span class="line">                float4 color    : COLOR;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">                UNITY_VERTEX_INPUT_INSTANCE_ID</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex   : SV_POSITION;</span><br><span class="line">                fixed4 color    : COLOR;</span><br><span class="line">                float2 texcoord  : TEXCOORD0;</span><br><span class="line">                float4 worldPosition : TEXCOORD1;</span><br><span class="line">                float4  mask : TEXCOORD2;</span><br><span class="line">                UNITY_VERTEX_OUTPUT_STEREO</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            fixed4 _TextureSampleAdd;</span><br><span class="line">            float4 _ClipRect;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            float _UIMaskSoftnessX;</span><br><span class="line">            float _UIMaskSoftnessY;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_t v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f OUT;</span><br><span class="line">                UNITY_SETUP_INSTANCE_ID(v);</span><br><span class="line">                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);</span><br><span class="line">                float4 vPosition = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                OUT.worldPosition = v.vertex;</span><br><span class="line">                OUT.vertex = vPosition;</span><br><span class="line"></span><br><span class="line">                float2 pixelSize = vPosition.w;</span><br><span class="line">                pixelSize /= float2(1, 1) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));</span><br><span class="line"></span><br><span class="line">                float4 clampedRect = clamp(_ClipRect, -2e10, 2e10);</span><br><span class="line">                float2 maskUV = (v.vertex.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);</span><br><span class="line">                OUT.texcoord = TRANSFORM_TEX(v.texcoord.xy, _MainTex);</span><br><span class="line">                OUT.mask = float4(v.vertex.xy * 2 - clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_UIMaskSoftnessX, _UIMaskSoftnessY) + abs(pixelSize.xy)));</span><br><span class="line"></span><br><span class="line">                OUT.color = v.color * _Color;</span><br><span class="line">                return OUT;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f IN) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                half4 color = IN.color * (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd);</span><br><span class="line"></span><br><span class="line">                #ifdef UNITY_UI_CLIP_RECT</span><br><span class="line">                half2 m = saturate((_ClipRect.zw - _ClipRect.xy - abs(IN.mask.xy)) * IN.mask.zw);</span><br><span class="line">                color.a *= m.x * m.y;</span><br><span class="line">                #endif</span><br><span class="line"></span><br><span class="line">                #ifdef UNITY_UI_ALPHACLIP</span><br><span class="line">                clip (color.a - 0.001);</span><br><span class="line">                #endif</span><br><span class="line"></span><br><span class="line">                color.rgb *= color.a;</span><br><span class="line"></span><br><span class="line">                return color;</span><br><span class="line">            &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考资料</h1><ul><li><a href="https://docs.unity3d.com/2022.3/Documentation/ScriptReference/TextGenerator.html">Unity TextGenerator API</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;引子——UGUI中的Text如何被绘制到屏幕上?&lt;/h1&gt;
&lt;p&gt;参与绘制Text的角色:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VertexHelper&lt;/li&gt;
&lt;li&gt;TextGenerator&lt;/li&gt;
&lt;li&gt;Font和FontData&lt;/li&gt;
&lt;li&gt;BaseMeshE</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线性代数在游戏开发中的应用</title>
    <link href="https://soincredible.github.io/posts/fd0318d/"/>
    <id>https://soincredible.github.io/posts/fd0318d/</id>
    <published>2025-05-27T03:38:12.000Z</published>
    <updated>2025-06-23T02:20:26.330Z</updated>
    
    <content type="html"><![CDATA[<h1>判断一个向量与坐标轴的重合度</h1><p>向量与每个坐标轴向量进行点积, 注意这里要求参与运算的所有向量都是归一化的, 点积结果会得到一个常数, 对这个常数取绝对值, 结果越大代表与该周向量越重合, 常数的正负代表的是与坐标轴的正方向还是负方向重合度更高.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;判断一个向量与坐标轴的重合度&lt;/h1&gt;
&lt;p&gt;向量与每个坐标轴向量进行点积, 注意这里要求参与运算的所有向量都是归一化的, 点积结果会得到一个常数, 对这个常数取绝对值, 结果越大代表与该周向量越重合, 常数的正负代表的是与坐标轴的正方向还是负方向重合度更高.&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSharp中的CancellationToken</title>
    <link href="https://soincredible.github.io/posts/7331d0f1/"/>
    <id>https://soincredible.github.io/posts/7331d0f1/</id>
    <published>2025-05-24T01:08:07.000Z</published>
    <updated>2025-05-27T01:40:32.452Z</updated>
    
    <content type="html"><![CDATA[<h1>参考资料</h1><p><a href="https://medium.com/@mitesh_shah/a-deep-dive-into-c-s-cancellationtoken-44bc7664555f">A Deep Dive into C#’s CancellationToken</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;参考资料&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@mitesh_shah/a-deep-dive-into-c-s-cancellationtoken-44bc7664555f&quot;&gt;A Deep Dive into C#’s Cancell</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SVN——SubVersion学习记录</title>
    <link href="https://soincredible.github.io/posts/fb782408/"/>
    <id>https://soincredible.github.io/posts/fb782408/</id>
    <published>2025-05-22T13:04:39.000Z</published>
    <updated>2025-07-22T08:55:41.941Z</updated>
    
    <content type="html"><![CDATA[<p>SVN中的两种冲突</p><h2 id="1-文件冲突（file-conflict）是什么？">1. 文件冲突（file conflict）是什么？</h2><ul><li><strong>文件冲突</strong>指的是：<br>多人对<strong>同一个文件的同一个部分</strong>进行了不同修改。</li><li>例如：你和同事同时编辑 <code>a.txt</code> 的第5行内容，提交更新时就会发生文件冲突。</li></ul><h3 id="常见表现">常见表现</h3><ul><li>SVN 会把有冲突的部分插入一些 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>、<code>=======</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 标记，等你手动合并/选择。</li><li>你需要打开文件合并或直接重新编辑。</li></ul><hr><h2 id="2-树冲突（tree-conflict）是什么？">2. 树冲突（tree conflict）是什么？</h2><ul><li><strong>树冲突</strong>是 SVN 1.6 及以后的概念。</li><li>所谓“树”其实指<strong>目录结构/文件结构（不是树状控件，也不是数据结构的树，而是整个项目的文件、文件夹组成的目录树）</strong>。</li><li><strong>树冲突出现在：</strong><br>针对目录结构操作（如文件/文件夹的新增、重命名、删除、移动）时，不同人对同一部分目录树做了<strong>结构性变化</strong>，并发生了冲突。</li></ul><h3 id="典型例子">典型例子</h3><ol><li><strong>你删除了某个文件/文件夹，同事修改了这个文件</strong><ul><li>你删了<code>A/B/C.cs</code>，同事还在同一版本上编辑<code>C.cs</code>，你们都提交，然后更新。你就会遇到<code>tree conflict</code>。</li></ul></li><li><strong>一方移动/重命名目录，另一方在原地新建或修改文件</strong></li><li><strong>父目录被删除、子文件被修改或反之</strong></li><li><strong>任何目录或者文件在结构上发生变化，而非内容修改</strong></li></ol><h1>SVN撤回某一次提交</h1><p>你想撤销130次提交的内容（可能此后还有131、132、133…的正常提交），只撤销这次的内容，其后的变动继续存在。<br>操作命令</p><p>svn merge -c -130 你的工作副本目录<br>svn commit -m “撤销r130提交内容”<br>-c参数后面加上负号-130，表示“撤销 r130”的变更。<br>执行后记得到工作副本看下变动，再commit。<br>举例</p><p>如你的项目地址为http://xxx.com/svn/project/trunk，你在trunk目录下：</p><p>svn merge -c -130 .<br>svn commit -m “撤销第130次提交”</p><h1>SVN查看当前Revision</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn info</span><br></pre></td></tr></table></figure><h1>写一个可以查询当天提交记录的shell脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用法: ./svn_tag_summary.sh /path/to/your/svn/working_copy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SVN_PATH=&quot;$1&quot;</span><br><span class="line"></span><br><span class="line">AUTHOR=&quot;liyinuo@tuyoogame.com&quot;</span><br><span class="line"></span><br><span class="line">TODAY=$(date +&quot;%Y-%m-%d&quot;)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [[ ! -d &quot;$SVN_PATH/.svn&quot; ]]; then</span><br><span class="line"></span><br><span class="line">echo &quot;路径 $SVN_PATH 不是svn仓库&quot;</span><br><span class="line"></span><br><span class="line">exit 1</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">cd &quot;$SVN_PATH&quot; || exit 1</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取今天该作者的提交记录</span></span><br><span class="line"></span><br><span class="line">svn log -r &#123;$&#123;TODAY&#125;T00:00:00&#125;:&#123;$&#123;TODAY&#125;T23:59:59&#125; --search &quot;$AUTHOR&quot; --verbose --xml &gt; __svn_today.xml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if ! grep -q &quot;&lt;logentry&quot; __svn_today.xml; then</span><br><span class="line"></span><br><span class="line">echo &quot;没有今天作者 $AUTHOR 的提交记录&quot;</span><br><span class="line"></span><br><span class="line">rm -f __svn_today.xml</span><br><span class="line"></span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取所有 commit message</span></span><br><span class="line"></span><br><span class="line">msgs=$(xmllint --xpath &#x27;//logentry[author=&quot;&#x27;$AUTHOR&#x27;&quot;]/msg/text()&#x27; __svn_today.xml 2&gt;/dev/null | grep -v &#x27;^$&#x27;)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">各分类字符串</span></span><br><span class="line"></span><br><span class="line">feat_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">fix_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">refactor_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">docs_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">test_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">chore_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">other_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">while IFS= read -r line; do</span><br><span class="line"></span><br><span class="line">if [[ &quot;$line&quot; =~ ^\[feat\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">feat_msgs=&quot;$&#123;feat_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[fix\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">fix_msgs=&quot;$&#123;fix_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[refactor\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">refactor_msgs=&quot;$&#123;refactor_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[docs\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">docs_msgs=&quot;$&#123;docs_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[test\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">test_msgs=&quot;$&#123;test_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[chore\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">chore_msgs=&quot;$&#123;chore_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">other_msgs=&quot;$&#123;other_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">done &lt;&lt;&lt; &quot;$msgs&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;作者: $AUTHOR 今天的提交分类如下：&quot;</span><br><span class="line"></span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$feat_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [feat] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$feat_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$fix_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [fix] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$fix_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$refactor_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [refactor] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$refactor_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$docs_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [docs] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$docs_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$test_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [test] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$test_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$chore_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [chore] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$chore_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$other_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [other] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$other_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">rm -f __svn_today.xml</span><br></pre></td></tr></table></figure><h3 id="1-SVN-删除一个文件后如何用命令行提交这个修改">1. SVN 删除一个文件后如何用命令行提交这个修改</h3><p>删除文件后，请按以下步骤操作：</p><h4 id="（1）删除文件">（1）删除文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn delete 文件名</span><br><span class="line"># 比如</span><br><span class="line">svn delete test.txt</span><br></pre></td></tr></table></figure><p>或者直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn del test.txt</span><br></pre></td></tr></table></figure><h4 id="（2）提交删除操作">（2）提交删除操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn commit -m &quot;删除了test.txt文件&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="2-SVN-使用命令行-Add-to-working-copy">2. SVN 使用命令行 Add to working copy</h3><p>如果您想将某个文件或目录添加到您的工作副本（working copy），即包含到版本控制，命令如下：</p><h4 id="（1）添加文件或目录">（1）添加文件或目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn add 文件名或目录名</span><br><span class="line"># 比如</span><br><span class="line">svn add newfile.txt</span><br></pre></td></tr></table></figure><p>如果是新文件夹，可以递归添加内部全部新文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn add newfolder --force</span><br></pre></td></tr></table></figure><h4 id="（2）提交添加操作">（2）提交添加操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn commit -m &quot;添加了新文件（或文件夹）&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="总结">总结</h3><ul><li><p><strong>删除后提交：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn delete 文件</span><br><span class="line">svn commit -m &quot;说明&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>新增后提交：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn add 文件</span><br><span class="line">svn commit -m &quot;说明&quot;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SVN中的两种冲突&lt;/p&gt;
&lt;h2 id=&quot;1-文件冲突（file-conflict）是什么？&quot;&gt;1. 文件冲突（file conflict）是什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件冲突&lt;/strong&gt;指的是：&lt;br&gt;
多人对&lt;strong&gt;同一个文件的</summary>
      
    
    
    
    <category term="版本管理工具" scheme="https://soincredible.github.io/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="SVN" scheme="https://soincredible.github.io/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>程序员超强大脑</title>
    <link href="https://soincredible.github.io/posts/823ad99a/"/>
    <id>https://soincredible.github.io/posts/823ad99a/</id>
    <published>2025-05-22T12:59:53.000Z</published>
    <updated>2025-07-28T06:54:16.043Z</updated>
    
    <content type="html"><![CDATA[<h1>剖析程序设计之惑</h1><h2 id="阅读代码中遇到的三种困惑">阅读代码中遇到的三种困惑</h2><ul><li>缺乏知识, 不了解正在阅读的编程语言、算法或领域.</li><li>缺乏信息, 无法获得理解代码所需的全部信息, 尤其是如今的代码经常使用各种库、模块或包, 想读懂代码就需要检索大量信息, 而在收集新信息的同时还不能忘记原本应该完成的任务. 代码中看到一个接口不清楚他的作用是属于缺乏信息</li><li>缺乏加工能力, 代码有时过于复杂, 超出了大脑的加工能力.</li></ul><h2 id="影响程序设计的不同认知过程">影响程序设计的不同认知过程</h2><ul><li>长时记忆(long-term memory), 可以无限期存储所有记忆, 缺乏知识意味着长时记忆中缺少足够的相关事实. 长时记忆会存储几类相关的编程信息, 例如成功运用某种编程技巧的记忆、Java关键字的含义、英语单词的含义或者Java中int型变量的最大值(2147483647).</li><li>短时记忆(short-term memory), 大脑获取的信息暂时存储于短时记忆, 大脑接受外部的信息时, 不会直接进入长时记忆, 而是首先进入容量有限的短时记忆. 短时记忆的容量众说纷纭, 但是大多数科学家认为这种记忆只能存储少量的信息元素, 通常不会超过12个. 例如, 在阅读程序时, 大脑会把程序使用的关键字、变量名和数据结构暂时保存在短时记忆中.</li><li>工作记忆(working memory), 如果把长时记忆比做硬盘, 短时记忆比做内存, 那么工作记忆就相当于大脑的“处理器”. 在阅读代码的过程中, 大脑还会进行更多的活动. 程序员会尝试心算并梳理代码的执行结果, 这个过程称为<strong>追踪</strong>, 也就是在脑海里编译并执行代码. 大脑内部用于追踪以及进行其他复杂认知活动的机制称为工作记忆, 这种记忆相当于计算机用来执行计算任务的处理器. 如果大脑感觉需要借助外部媒介来存储信息, 则可能意味着工作记忆的负担过重, 难以加工更多的信息.</li></ul><p>长时记忆、短时记忆、工作记忆这三种认知过程在阅读代码的过程中都会参与、相辅相成.</p><img src="/posts/823ad99a/image.png" class=""><h1>小节</h1><ul><li>缺乏知识会影响长时记忆.</li><li>缺乏信息会影响短时记忆.</li><li>缺乏加工能力会影响工作记忆.</li></ul><h1>快速阅读代码</h1><p>提高快速查找相关信息的能力有助于减少反复浏览代码的次数. 如果代码阅读水平很高, 那么还可以降低浏览代码以查找其他信息的频率. 花在阅读代码方面的时间越少, 留给修复错误或者添加新功能的时间就越多, 程序员的效率因而越高.</p><h2 id="快速阅读代码">快速阅读代码</h2><h2 id="弥补记忆容量不足的短板">弥补记忆容量不足的短板</h2><p>既然缺乏信息会影响短时记忆, 因为短时记忆的容量十分有限. 想到提升短时记忆的容量并不容易, 我们更应该去提高自己把零散的小块变成组块(chunk), 虽然我们能够持有的信息素没有变, 但是单个信息元素包含的内容更丰富, 更集成, 更模块化</p><h2 id="看到的代码比读到的代码多">看到的代码比读到的代码多</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;剖析程序设计之惑&lt;/h1&gt;
&lt;h2 id=&quot;阅读代码中遇到的三种困惑&quot;&gt;阅读代码中遇到的三种困惑&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;缺乏知识, 不了解正在阅读的编程语言、算法或领域.&lt;/li&gt;
&lt;li&gt;缺乏信息, 无法获得理解代码所需的全部信息, 尤其是如今的代码经常使用各种库</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSharp中的委托</title>
    <link href="https://soincredible.github.io/posts/4f9ac505/"/>
    <id>https://soincredible.github.io/posts/4f9ac505/</id>
    <published>2025-05-22T01:00:06.000Z</published>
    <updated>2025-07-09T02:36:20.979Z</updated>
    
    <content type="html"><![CDATA[<h1>委托</h1><p>一篇很好的博客https://www.cnblogs.com/skysoot/archive/2012/04/05/2433639.html</p><p>C#中的委托类似于C或C++中的函数指针。委托是存有对某个方法的引用的一种引用类型变量，引用可在运行时被改变。</p><p>委托特别用于实现事件和回调方法。所有的委托都派生自<code>System.Delegate</code>类。</p><h2 id="从实际问题出发来理解委托">从实际问题出发来理解委托</h2><h3 id="将方法作为方法的参数">将方法作为方法的参数</h3><p>这个标题非常地拗口，但我们先不管它，来看两个方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">EnglishGreeting(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnglishGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">  Console.WriteLine(<span class="string">&quot;Good Moring,&quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先不管这两个方法有没有实际的意义，我们现在想通过这两个方法来向某人问好，当传入某人的姓名时，比如说&quot;Joe&quot;进去的时候，在这个方法中将调用EnglishGreeting方法，再次传递name参数，EnglishGreeting方法则用于向屏幕输出&quot;Good Moring, Joe&quot;。</p><p>那么现在，假设这个程序要进行全球化了，我作为一个中国人，我不理解&quot;Good Moring&quot;是什么意思，那我就只能再加一个中文的问候方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChineseGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;早上好，&quot;</span>+name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候GreetPeople也需要改一下了，不然如何判断到底用哪个版本的Greeting问候方法合适呢？当然在进行这个之前，我们最好再定义一个枚举作为判断的依据：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Language&#123;</span><br><span class="line">English, Chinese</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, Language lang</span>)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(lang)&#123;</span><br><span class="line"><span class="keyword">case</span> Language.English:</span><br><span class="line">EnglishGreeting(name);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Language.Chinese:</span><br><span class="line">    ChineseGreeting(name);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，尽管这样解决了问题，但是这个方法的可扩展性太差了，如果之后我们还要再添加韩文版、日文版，我们就不得不反复修改枚举和GreetPeople的方法，来适应新的需求。</p><p>那么在考虑新的解决方案之前，我们先来看看GreetPeople的方法签名：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, Language lang</span>)</span>;</span><br></pre></td></tr></table></figure><p>我们只看<code>string name</code>，在这里，string是参数类型，name是参数变量，当我们赋给name字符串&quot;Joe&quot;时，他就代表了&quot;Joe&quot;这个值；当我们赋给他&quot;周杰伦&quot;时，它又代表着&quot;周杰伦&quot;这个值。然后，我们可以在这个方法体内对这个name进行其他的操作。</p><p>那我们再仔细想一想，假如GreetPeople方法可以接受一个参数变量，这个变量可以代表另一个方法，当我们给这个变量赋值EnglishGreeting的时候它代表着EnglishGreeting()这个方法；当我们给它赋值ChineseGreeting的时候，它又代表着ChineseGreeting()的方法，我们将这个参数变量命名为MakeGreeting，那么不是可以如同给name赋值的时候一样，在调用Greet People()方法的时候，给这个MakeGreeting参数也附上值么，然后我们在方法体内，也可以像使用别的参数一样使用MakeGreeting。但是，由于MakeGreeting代表着一个方法，它的使用方式应该和它被赋的方法是一样的，比如<code>MakeGreeting(name)</code>；</p><p>好了，有了思路了，我们现在就来改改GreetPeople()方法，那么它应该是这个样子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, *** MakeGreeting</span>)</span>&#123;</span><br><span class="line">MakeGreeting(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到 ***，这个位置通常放置的应该是参数的类型，但是到目前为止，我们仅仅想到的是应该有一个方法，并且按照这个思路去改写GreetPeople方法，现在就出现了一个大问题：这个代表着方法的MakeGreeting参数应该是什么类型的？</p><p>**说明：**这里已经不再需要枚举了，因为在给MakeGreeting赋值的时候动态地决定使用哪个方法，是ChineseGreeting还是EnglishGreeting，而在这两个方法内部，已经对使用GroodMoring还是早上好做了区分。</p><p>下面就该委托出场了：</p><p>我们MakeGreeting代表的两个方法的签名如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnglishGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chineseGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br></pre></td></tr></table></figure><p>如同<code>name</code>可以接受string类型的数据一样，MakeGreeting它也代表着接受相同的一类数据，再进一步讲，就是MakeGreeting代表了参数类型和返回类型都相同的一类方法。本例中委托的定义如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">GreetingDelegate</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br></pre></td></tr></table></figure><p>与上面EnglishGreeting()方法的签名对比一下，出了加入delegate关键字以外，其他的部分都是完全一样的，那么再次调用GreetPeople方法，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Greetingdelegate</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, Greetingdelegate MakeGreeting</span>)</span>&#123;</span><br><span class="line">MakeGreeting(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>委托Greeting Delegat出现的位置和string相同，string是一个类型，Greeting Delegate也是一个类型，或者说是一个类。但是委托的声明方式和类完全不同。实际上，委托在编译的时候确实会被编译成类。因为Delegate是一个类，所以在任何可以声明类的地方都可以声明委托。下面是一个完整的代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">GreetingDelegate</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EnglishGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Good Morning, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ChineseGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;早上好, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, GreetingDelegate MakeGreeting</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MakeGreeting(name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        GreetPeople(<span class="string">&quot;Joe&quot;</span>, EnglishGreeting);</span><br><span class="line">        GreetPeople(<span class="string">&quot;周杰伦&quot;</span>, ChineseGreeting);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合游戏开发中的实际应用，我们经常讲委托和单例模式、观察者模式等设计模式结合在一起使用，下面我将尝试抽象出一个事件中心的类，它专门负责处理各种委托事件，由于在一个游戏进程中只会有一个<strong>事件处理中心</strong>，所以我要将它设计成<a href="http://soincredible777.com.cn/posts/279644bd/">单例模式</a>。</p><p><strong>我们现在对委托做一个总结：委托是一个类，它定义了方法的类型，使得可以将方法作为另一个方法的参数来进行传递，这种将方法动态地赋给参数的做法，可以避免在程序中大量地使用if-else(switch)语句，同时使得程序具有更好的可扩展性。</strong></p><h2 id="声明委托">声明委托</h2><p>委托声明决定了可由该委托引用的方法。委托可指向一个与其具有相同标签的方法。</p><p>假设有一个委托：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br></pre></td></tr></table></figure><p>上面的委托可被用于引用任何一个带有一个单一的string参数的方法，并返回一个int 类型的变量。</p><p>声明委托的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delegate</span> &lt;<span class="keyword">return</span> type&gt;&lt;<span class="built_in">delegate</span>-name&gt;&lt;parameter list&gt;</span><br></pre></td></tr></table></figure><h2 id="实例化委托">实例化委托</h2><p>一旦声明了委托类型，委托对象就必须使用new关键字来创建，并且与一个特定的方法有关，当委托创建时，传递到new语句的参数就像方法调用一样书写，但是不带有参数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">printString</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">pringString ps1 = <span class="keyword">new</span> printString(WriteToScreen);</span><br><span class="line">printString ps2 = <span class="keyword">new</span> printString(WriteToFile);</span><br></pre></td></tr></table></figure><p>下面的实例演示了委托的声明、实例化和使用，该委托可用于引用带有一个整形参数的方法，并返回一个整型值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DelegateAppl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">TestDelegate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            num += p;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MultNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            num *= q;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getNum</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            NumberChanger nc1 = <span class="keyword">new</span> NumberChanger(AddNum);</span><br><span class="line">            NumberChanger nc2 = <span class="keyword">new</span> NumberChanger(MultNum);</span><br><span class="line">            nc1(<span class="number">25</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());</span><br><span class="line">            nc2(<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面代码被编译和执行的时候，它会产生如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Value of Num: 35</span><br><span class="line">Value of Num: 175</span><br></pre></td></tr></table></figure><p><strong>补充：</strong></p><ol><li>委托里面存储的方法可以是静态方法也可以是非静态的方法。</li><li>当声明的委托包含返回值的时候，不能直接调用Invoke方法，否则只会得到最后一个方法的结果。</li><li>定义委托与定义方法相比，一是没有方法体，而是多用了delegate修饰。</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Test1</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Test2</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line">        MyDelegate myDelegate = <span class="keyword">new</span> MyDelegate(program.Test1);</span><br><span class="line">        myDelegate += program.Test2;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 将delegate存放到一个数组中才能依次获取每一个方法的返回值。</span></span><br><span class="line">        Delegate[] delegates = myDelegate.GetInvocationList();</span><br><span class="line">        <span class="keyword">foreach</span> (MyDelegate item <span class="keyword">in</span> delegates)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(item(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托的多播-Multicasting-of-a-Delegate">委托的多播(Multicasting of a Delegate)</h2><p>委托对象可以使用&quot;+“运算符进行合并。一个合并委托调用它所合并的两个委托。只有相同类型的委托可以被合并。”-&quot;运算符可用于从合并的委托中移除组件委托。</p><p>使用委托的这个特点，我们可以创建一个委托被调用时要调用的方法的调用列表，这种行为被称为委托的多播(multicasting)，也叫组播。下面的程序演示了委托的多播：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DelegateAppl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">testdelegate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            num += p;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MultNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            num *= q;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getNum</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            NumberChanger nc;</span><br><span class="line">            NumberChanger nc1 = <span class="keyword">new</span> NumberChanger(AddNum);</span><br><span class="line">            NumberChanger nc2 = <span class="keyword">new</span> NumberChanger(MultNum);</span><br><span class="line"></span><br><span class="line">            nc = nc1;</span><br><span class="line">            nc += nc2;</span><br><span class="line">            nc += AddNum;</span><br><span class="line">            nc(<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托的用途">委托的用途</h2><p>下面实际演示了委托的用法，委托<code>printString</code>可用于引用带有一个字符串作为输入的方法，并不返回任何东西。</p><p>我们使用这个委托来调用两个方法，第一个把字符串打印到控制台，第二个把字符串打印到文件：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DelegateAppl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">PrintString</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> FileStream fs;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> StreamWriter sw;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">printString</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteToScreen</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;The String is:&#123;0&#125;&quot;</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteToFile</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;./message.txt&quot;</span>, FileMode.Append, FileAccess.Write);</span><br><span class="line">            sw = <span class="keyword">new</span> StreamWriter(fs);</span><br><span class="line">            sw.WriteLine(s);</span><br><span class="line">            sw.Flush();</span><br><span class="line">            sw.Close();</span><br><span class="line">            fs.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendString</span>(<span class="params">printString ps</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ps(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            printString ps1 = <span class="keyword">new</span> printString(WriteToScreen);</span><br><span class="line">            printString ps2 = <span class="keyword">new</span> printString(WriteToFile);</span><br><span class="line">            sendString(ps1);</span><br><span class="line">            sendString(ps2);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>事件</h1><p>事件基本上说是一个用户的操作，比如按键、点击、鼠标移动等等，或者是一些提示信息，如系统生成的通知。应用程序需要在事件发生时响应事件，比如中断。</p><p>C#中使用事件机制实现线程间的通信。</p><p>事件是一个受限制的委托，先看如下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">MyDelegateClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> MyDelegate? myDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (myDelegate != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            myDelegate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegateClass delegateClass = <span class="keyword">new</span> MyDelegateClass();</span><br><span class="line">        delegateClass.myDelegate += Run;</span><br><span class="line">        delegateClass.myDelegate.Invoke();</span><br><span class="line">        delegateClass.Test();</span><br><span class="line">        delegateClass.myDelegate = <span class="keyword">new</span> MyDelegate(Run);</span><br><span class="line">        delegateClass.myDelegate();</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Running.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码运行时没有问题的，也就是说，我们在MyDelegateClass中声明的委托，既可以在当前类中执行，也可以在其他的类中执行，还可以在其他的类中重新赋值后再被调用执行。</p><p>接下来我们看看事件声明的情况：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">MyDelegateClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> MyDelegate? myDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (myDelegate != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            myDelegate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegateClass delegateClass = <span class="keyword">new</span> MyDelegateClass();</span><br><span class="line">        delegateClass.myDelegate += Run;</span><br><span class="line">        delegateClass.myDelegate.Invoke();</span><br><span class="line">        delegateClass.Test();</span><br><span class="line">        delegateClass.myDelegate = <span class="keyword">new</span> MyDelegate(Run);</span><br><span class="line">        delegateClass.myDelegate();</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Running.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到声明事件其实就是在声明委托变量的条件下，只用了个<code>event</code>修饰而已，即<code>myDelegate</code>现在是一个事件变量，而不是一个委托变量了，我们发现它仍然能在当前类中被执行，但是在另外的一个类中，既不能被直接调用执行，也不能被重新赋值了，只能通过<code>+=</code>或者<code>-=</code>来增减函数，这就是事件存在的必要，因为事件的这两个限制条件，在某种程度上会更安全。</p><p>**疑问：**如果我在类中声明了一个委托，那么在实例化这个对象的时候，我并没有显式地给给这个委托赋值，<s>为什么不会报错呢</s>？但是如果我们在Main函数中实例化一个委托，不给他赋值的话，就会报错，为什么？</p><p>下面的代码给出了答案，上面说的两种情况都会报错的，但是在实例化对象的时候还需要手动地加一个判断条件，判断实例化的对象中的委托是不是空的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">MyDelegateClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> MyDelegate? myDelegate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RegitserDelegate</span>(<span class="params">MyDelegate mmm</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        myDelegate += mmm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InvokeDelegate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (myDelegate == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;委托是空的！不能调用！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            myDelegate.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Running.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Func</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegateClass delegateClass = <span class="keyword">new</span> MyDelegateClass();</span><br><span class="line">        delegateClass.InvokeDelegate();</span><br><span class="line">        MyDelegate mm = <span class="keyword">new</span> MyDelegate(MyDelegateClass.Run);</span><br><span class="line">        delegateClass.RegitserDelegate(mm);</span><br><span class="line">        delegateClass.InvokeDelegate();</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中用到了一些访问修饰符</p><ul><li><code>public</code>: 公有访问，不受任何限制</li><li><code>private</code>: 私有访问，只限于本类成员访问，子类、实例都不能访问</li><li><code>protected</code>: 保护访问，只限于本类和子类访问，实例不能访问</li><li><code>internal</code>: 内部访问， 只限于本项目内访问，其他不能访问</li></ul><p>**TIPS：**在计算机科学领域，<code>声明(Decalration)</code>指的是向编译器说明一个变量或者函数信息，包活：名字、类型、初始值等等，即声明变量、函数的属性细节；而<code>定义(Definition)</code>则指明变量、函数存储在哪里，当定义发生时，系统为变量或者函数分配内存单元。</p><h2 id="通过事件使用委托">通过事件使用委托</h2><p>事件在类中声明且生成，且通过使用同一个类或者其他类中的委托与事件处理程序关联。包含事件的类用于发布事件，它被称为发布器(publisher)类。其他接受该事件的类被称为订阅器(subscriber)类。事件使用发布-订阅(publisher-subscriber)模型。</p><p>发布器(publisher)是一个包含事件和委托定义的对象。事件和委托之间的联系也定义在这个对象中。发布器类的对象调用这个事件，并通知其他的对象。</p><p>订阅器(subscriber)是一个接受事件并提供事件处理程序的对象。在发布器类中的委托调用订阅器类中。</p><h2 id="声明事件-Event">声明事件(Event)</h2><p>在类的内部声明事件，首先必须声明该事件的委托类型。如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">BoilerLogHandler</span>(<span class="params"><span class="built_in">string</span> status</span>)</span>;</span><br></pre></td></tr></table></figure><p>然后，声明事件本身，使用event关键字：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> BoilerLogHandler BoilerEventLog;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为BoilerLogHandler的委托和一个名为BoilerEventLog的事件，该事件在生成的时候会调用委托。</p><h2 id="实例">实例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SimpleEvent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/******发布器类*******/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">NumManipulationHandler</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> NumManipulationHandler ChangeNum;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnNumChanged</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ChangeNum != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ChangeNum(); <span class="comment">// 事件被触发</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Event not fire&quot;</span>);</span><br><span class="line">                Console.ReadKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EventTest</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> n = <span class="number">5</span>;</span><br><span class="line">            SetValue(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> != n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">value</span> = n;</span><br><span class="line">                OnNumChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/********订阅器类********/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">subscribEvent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printf</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;event fire&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/********触发********/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            EventTest e = <span class="keyword">new</span> EventTest(); <span class="comment">// 实例化对象，第一次没有触发事件</span></span><br><span class="line">            subscribEvent v = <span class="keyword">new</span> subscribEvent();</span><br><span class="line">            e.ChangeNum += <span class="keyword">new</span> EventTest.NumManipulationHandler(v.printf); <span class="comment">// 注册</span></span><br><span class="line">            e.SetValue(<span class="number">7</span>);</span><br><span class="line">            e.SetValue(<span class="number">11</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小故事：">小故事：</h2><p>曾经.NET只有一个Delegate，别人想要使用委托的时候，必须使用delegate关键字来定义一个委托，但是这样有一个弊端，那就是delegate可以使用<code>=</code>将所有已经订阅的取消，也可以使用<code>+</code>和<code>-</code>对订阅进行合并和删除，只保留<code>=</code>之后的新的订阅，这就给了犯罪分子可乘之机。所以event应运而生，event是一种特殊的委托，它只能使用<code>+=</code>、<code>-=</code>，而不能直接使用<code>=</code>，也就是说，event在定义类（发布者）中是可以直接<code>=</code>的，但是在其他类中（订阅者）就只能使用<code>+=</code>、<code>-=</code>了，也就是说发布者发布了一个事件之后，订阅者针对他只能进行自身的订阅和取消。但是在事件发布和订阅的过程中，定义事件的原型委托类型常常是一件重复性的工作。所以<code>Event Handler</code>应运而生，它的出现就是为了避免这种重复性的工作，并建议尽量使用该类型作为事件的原型。</p><p>下面是EvenHandler的实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TeacherArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler acthandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;老师来了&quot;</span>);</span><br><span class="line">        TeacherArgs args = <span class="keyword">new</span> TeacherArgs() &#123; Name = Name &#125;;</span><br><span class="line">        acthandler(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HeadArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> MedalCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Headmaster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> MedalCount;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Headmaster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        MedalCount = medalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长来了&quot;</span>);</span><br><span class="line">        HeadArgs args = <span class="keyword">new</span> HeadArgs() &#123; Name = Name, MedalCount = MedalCount &#125;;</span><br><span class="line">        actHandler(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Teacher</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        TeacherArgs args = e <span class="keyword">as</span> TeacherArgs;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好！&quot;</span>, args.Name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Master</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        HeadArgs args = e <span class="keyword">as</span> HeadArgs;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好&quot;</span>, args.Name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长获奖数为：&#123;0&#125;&quot;</span>, args.MedalCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Monitor</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MonitorArgs args = e <span class="keyword">as</span> MonitorArgs;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是没有任何参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonitorArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是什么参数都没有&quot;</span>);</span><br><span class="line">        MonitorArgs args = <span class="keyword">new</span> MonitorArgs() &#123; &#125;;</span><br><span class="line">        actHandler(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Students students = <span class="keyword">new</span> Students();</span><br><span class="line">        Headmaster headmaster = <span class="keyword">new</span> Headmaster(<span class="string">&quot;孙校长&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;刘老师&quot;</span>);</span><br><span class="line">        Monitor monitor = <span class="keyword">new</span> Monitor();</span><br><span class="line">        headmaster.actHandler += students.Action_Master;</span><br><span class="line">        teacher.acthandler += students.Action_Teacher;</span><br><span class="line">        monitor.actHandler += students.Action_Monitor;</span><br><span class="line">        teacher.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        headmaster.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        monitor.Come();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**总结：**使用EventHandler可以</p><ol><li>标准化</li><li>可以省略定义委托这一步，不必定义多个不同类型的委托</li><li>搭配EventArgs，可以传递多个信息</li></ol><p>下面的代码是不使用EventHandler的实现：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Diagnostics.Metrics;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">TeacherDelegate</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">HeadMasterDelegate</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MonitorDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> TeacherDelegate acthandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;老师来了&quot;</span>);</span><br><span class="line">        acthandler(Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Headmaster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> MedalCount;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> HeadMasterDelegate actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Headmaster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        MedalCount = medalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长来了&quot;</span>);</span><br><span class="line">        actHandler(Name, MedalCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> MonitorDelegate actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是什么参数都没有&quot;</span>);</span><br><span class="line">        actHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好！&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Master</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好&quot;</span>, name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长获奖数为：&#123;0&#125;&quot;</span>, medalCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Monitor</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是没有任何参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Students students = <span class="keyword">new</span> Students();</span><br><span class="line">        Headmaster headmaster = <span class="keyword">new</span> Headmaster(<span class="string">&quot;孙校长&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;刘老师&quot;</span>);</span><br><span class="line">        Monitor monitor = <span class="keyword">new</span> Monitor();</span><br><span class="line">        headmaster.actHandler += students.Action_Master;</span><br><span class="line">        teacher.acthandler += students.Action_Teacher;</span><br><span class="line">        monitor.actHandler += students.Action_Monitor;</span><br><span class="line">        teacher.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        headmaster.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        monitor.Come();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续回到小故事：在这个故事中，Delegate是老大哥，但是EventHandler是event的小弟，老大哥不太高兴了，说我也要有小弟，但更重要的原因是每次定义Delegate也是很麻烦的，所以Action应运而生，Action是系统预定义的一种委托，没有<strong>返回值</strong>，参数在<code>&lt;&gt;</code>中传入，下面就是使用Action的方法来实现上面的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">string</span>&gt; acthandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;老师来了&quot;</span>);</span><br><span class="line">        acthandler(Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Headmaster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> MedalCount;</span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Headmaster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        MedalCount = medalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长来了&quot;</span>);</span><br><span class="line">        actHandler(Name, MedalCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Action actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是什么参数都没有&quot;</span>);</span><br><span class="line">        actHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好！&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Master</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好&quot;</span>, name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长获奖数为：&#123;0&#125;&quot;</span>, medalCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Monitor</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是没有任何参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Students students = <span class="keyword">new</span> Students();</span><br><span class="line">        Headmaster headmaster = <span class="keyword">new</span> Headmaster(<span class="string">&quot;孙校长&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;刘老师&quot;</span>);</span><br><span class="line">        Monitor monitor = <span class="keyword">new</span> Monitor();</span><br><span class="line">        headmaster.actHandler += students.Action_Master;</span><br><span class="line">        teacher.acthandler += students.Action_Teacher;</span><br><span class="line">        monitor.actHandler += students.Action_Monitor;</span><br><span class="line">        teacher.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        headmaster.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        monitor.Come();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这段代码是用Func的方式实现的，Fun<code>&lt;&gt;</code>中比注册的函数的参数多1个，最后一个是参数是函数的返回类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">string</span>, <span class="built_in">bool</span>&gt; acthandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;老师来了&quot;</span>);</span><br><span class="line">        acthandler(Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Headmaster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> MedalCount;</span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">string</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>&gt; actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Headmaster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        MedalCount = medalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长来了&quot;</span>);</span><br><span class="line">        actHandler(Name, MedalCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">bool</span>&gt; actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是什么参数都没有&quot;</span>);</span><br><span class="line">        actHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Action_Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好！&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Action_Master</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好&quot;</span>, name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长获奖数为：&#123;0&#125;&quot;</span>, medalCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Action_Monitor</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是没有任何参数&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Students students = <span class="keyword">new</span> Students();</span><br><span class="line">        Headmaster headmaster = <span class="keyword">new</span> Headmaster(<span class="string">&quot;孙校长&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;刘老师&quot;</span>);</span><br><span class="line">        Monitor monitor = <span class="keyword">new</span> Monitor();</span><br><span class="line">        headmaster.actHandler += students.Action_Master;</span><br><span class="line">        teacher.acthandler += students.Action_Teacher;</span><br><span class="line">        monitor.actHandler += students.Action_Monitor;</span><br><span class="line">        teacher.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        headmaster.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        monitor.Come();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>写一个带有事件中心的发布、订阅系统</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualBasic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerDeath</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;玩家死亡！向事件中心发送消息！&quot;</span>);</span><br><span class="line">        MessageCenter.Instance.SendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AudioManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AudioManager Instance = <span class="keyword">new</span> AudioManager();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AudioManager</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是AudioManager，我已经创建完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayDeathAudio</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;执行死亡音效&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataManager Instance = <span class="keyword">new</span> DataManager();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DataManager</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是DataManager，我已经创建完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ResetData</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;玩家死亡，执行数据重制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnenyManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnenyManager Instance = <span class="keyword">new</span> EnenyManager();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnenyManager</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是EnemyManager，我已经创建完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnemyVictory</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;玩家死亡，敌人胜利！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageCenter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 这里是事件中心，处理游戏中各类事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MessageCenter Instance = <span class="keyword">new</span> MessageCenter();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MessageCenter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 构造函数使用private关键字就可以避免在别的类中使用new实例化对象了</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是事件中心，我已经初始化完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">PlayerDeathDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PlayerDeathDelegate DeathDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DeathDelegate == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;委托是空的！没有什么好执行的！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            DeathDelegate.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params">PlayerDeathDelegate deathDelegate</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        DeathDelegate += deathDelegate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameStart</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PlayerState player = <span class="keyword">new</span> PlayerState();</span><br><span class="line">        <span class="comment">// 游戏开始后要先将函数注册到事件中心去</span></span><br><span class="line">        MessageCenter.Instance.Register(AudioManager.Instance.PlayDeathAudio);</span><br><span class="line">        MessageCenter.Instance.Register(DataManager.Instance.ResetData);</span><br><span class="line">        MessageCenter.Instance.Register(EnenyManager.Instance.EnemyVictory);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        player.PlayerDeath();</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码还不够完善，比如现在只是处理了玩家死亡这一种事件，那如何处理玩家其他状态的事件呢？还有如果不是玩家，是别的什么比如宝物、使用药水等等各种的委托，该怎么实现？这都是后话了，委托的学习到此可以先告一段落了。</p><h1>项目中的按钮响应点击事件的方法</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ButtonUI</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Button btn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UI.Extension;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ButtonPage</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ButtonUI _ui;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _ui = gameObject.GetComponent&lt;ButtonUI&gt;();</span><br><span class="line">        _ui.btn.onClick.AddListener(OnBtnClicked);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBtnClicked</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;我被点击了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;委托&lt;/h1&gt;
&lt;p&gt;一篇很好的博客https://www.cnblogs.com/skysoot/archive/2012/04/05/2433639.html&lt;/p&gt;
&lt;p&gt;C#中的委托类似于C或C++中的函数指针。委托是存有对某个方法的引用的一种引用类型变量，引用可</summary>
      
    
    
    
    
  </entry>
  
</feed>
