<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EddieLee</title>
  
  <subtitle>to infinity and beyond✨🛸.</subtitle>
  <link href="https://soincredible.github.io/atom.xml" rel="self"/>
  
  <link href="https://soincredible.github.io/"/>
  <updated>2025-10-09T01:58:44.715Z</updated>
  <id>https://soincredible.github.io/</id>
  
  <author>
    <name>Eddie Lee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随记</title>
    <link href="https://soincredible.github.io/posts/f211d1c6/"/>
    <id>https://soincredible.github.io/posts/f211d1c6/</id>
    <published>2025-10-06T02:47:10.000Z</published>
    <updated>2025-10-09T01:58:44.715Z</updated>
    
    <content type="html"><![CDATA[<p>父亲过分地夸大了人际关系在人事业中的占比, 可是个人能力才是一切的基础, 即使有贵人相助, 没有能力, 机会来了, 贵人也没办法把你托举上去.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;父亲过分地夸大了人际关系在人事业中的占比, 可是个人能力才是一切的基础, 即使有贵人相助, 没有能力, 机会来了, 贵人也没办法把你托举上去.&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>3D数学基础——线性代数的起源</title>
    <link href="https://soincredible.github.io/posts/f9ac7a69/"/>
    <id>https://soincredible.github.io/posts/f9ac7a69/</id>
    <published>2025-09-30T03:28:57.000Z</published>
    <updated>2025-10-10T08:34:08.381Z</updated>
    
    <content type="html"><![CDATA[<p>线性代数起源于对线性方程组的分析, 处理空间中的变换就是在解线性方程组. 空间中的任意点$(x, y, z)$, 经过任意操作A变换成$(x_1, y_1, z_1)$, 那么操作A可以通过一个矩阵来描述.</p><p>操作的分类</p><p>旋转<br>平移<br>缩放<br>错切<br>反射</p><h1>使用高斯消元法求解线性方程组</h1><p>使用矩阵表示旋转, 在三维空间的左手坐标系中, 以绕着y轴顺时针旋转$\theta$度, 注意左手系中, 顺时针旋转为正向旋转. 来构建方程组<br>设点$P_1(x_1, y_1, z_1)$, 经过上述所说的旋转矩阵M, 旋转到$P_2(x_2, y_2, z_2)$, $P_1$、$P_2$已知, 求旋转矩阵M.</p><p>构建方程组<br>已知向量$\vec{OP_1}$、$\vec{OP_2}$<br>根据向量内积(点积)<br>$$ \vec{OP_1} \cdot \vec{OP_2} = |\vec{OP_1}||\vec{OP_2}|cos\theta $$<br>根据向量外积(叉积)<br>$$ \begin{bmatrix}<br>x_1\<br>y_1\<br>z_1<br>\end{bmatrix}^T<br>\times<br>\begin{bmatrix}<br>x_2\<br>y_2\<br>z_2<br>\end{bmatrix}^T<br>= \begin{bmatrix}<br>y_1z_2 - z_1y_2\<br>z_1x_2 - x_1z_2\<br>x_1y_2 - y_1x_2<br>\end{bmatrix}^T<br>$$</p><h1>参考资料</h1><p><a href="https://www.ebsco.com/research-starters/mathematics/linear-algebra">Linear algebra</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;线性代数起源于对线性方程组的分析, 处理空间中的变换就是在解线性方程组. 空间中的任意点$(x, y, z)$, 经过任意操作A变换成$(x_1, y_1, z_1)$, 那么操作A可以通过一个矩阵来描述.&lt;/p&gt;
&lt;p&gt;操作的分类&lt;/p&gt;
&lt;p&gt;旋转&lt;br&gt;
平移&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>游戏开发中的设计模式——双缓冲</title>
    <link href="https://soincredible.github.io/posts/2c673fe4/"/>
    <id>https://soincredible.github.io/posts/2c673fe4/</id>
    <published>2025-09-24T08:03:41.000Z</published>
    <updated>2025-09-30T10:09:01.240Z</updated>
    
    <content type="html"><![CDATA[<p>双缓冲的关键是, 对外部的使用者来说, 外部使用者永远都是和buffer1进行沟通, buffer2不会暴露在外部.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;双缓冲的关键是, 对外部的使用者来说, 外部使用者永远都是和buffer1进行沟通, buffer2不会暴露在外部.&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>经济学</title>
    <link href="https://soincredible.github.io/posts/d315c0a7/"/>
    <id>https://soincredible.github.io/posts/d315c0a7/</id>
    <published>2025-09-17T07:03:52.000Z</published>
    <updated>2025-09-30T10:09:01.241Z</updated>
    
    <content type="html"><![CDATA[<p>我们想赚的不是钱本身, 而是钱背后的东西: 资源、产品和服务</p><p>银行的储蓄低, 就需要鼓励民众存钱, 就得提高储蓄的利率, 因为银行本身储蓄就低, 借贷给创业者的钱就少, 抗风险能力低, 并且银行需要要求创业者返还贷款的利息也就更高了.<br>银行储蓄高, 就需要鼓励民众投资, 降低储蓄的利率, 从而降低民众的储蓄意愿. 借贷给创业者的钱就多, 抗风险能力高, 银行需要要求创业者返还贷款的利息也就更低了.</p><p>生产力的提高是通货紧缩的充分不必要条件, 前提是货币供应量不变、社会总需求不变, 货币的供应量变小, 变相得让货币的购买力提升了, 所以也会造成通货紧缩</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们想赚的不是钱本身, 而是钱背后的东西: 资源、产品和服务&lt;/p&gt;
&lt;p&gt;银行的储蓄低, 就需要鼓励民众存钱, 就得提高储蓄的利率, 因为银行本身储蓄就低, 借贷给创业者的钱就少, 抗风险能力低, 并且银行需要要求创业者返还贷款的利息也就更高了.&lt;br&gt;
银行储蓄高, 就</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSharp中的GC</title>
    <link href="https://soincredible.github.io/posts/aa627dfb/"/>
    <id>https://soincredible.github.io/posts/aa627dfb/</id>
    <published>2025-09-17T01:59:42.000Z</published>
    <updated>2025-09-30T10:09:01.239Z</updated>
    
    <content type="html"><![CDATA[<h1>基于代的垃圾回收机制</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;基于代的垃圾回收机制&lt;/h1&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>迷思——异步</title>
    <link href="https://soincredible.github.io/posts/519cf715/"/>
    <id>https://soincredible.github.io/posts/519cf715/</id>
    <published>2025-09-16T09:43:11.000Z</published>
    <updated>2025-09-30T10:09:01.241Z</updated>
    
    <content type="html"><![CDATA[<p>代码是真的要去写才能有深刻体会</p><h1>看两个Unity的异步接口</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerator <span class="title">LoadSceneAsync</span>(<span class="params"><span class="built_in">string</span> sceneName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> YooAssets.LoadSceneAsync(sceneName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadSceneAsync</span>(<span class="params"><span class="built_in">string</span> sceneName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> handle = YooAssets.LoadSceneAsync(sceneName);</span><br><span class="line">    GameManager.Instance.StartCoroutine(handle);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上哪种是真正的异步呢? 所谓异步, 我们可以这样理解: 我在一段业务代码中, 有操作A、B、C、D, 其中操作B有可能十分耗时, 而且 A、B、C、D之间没有任何的依赖关系, 那么我们肯定是希望这段逻辑越快执行完越好.</p><p>异步的顶层要由StartCoroutine终结, 哪里调用了StartCoroutine, 哪里就是真正异步操作的入口. 以此类推 在async/await编程模型中, 哪里调用了Task.Start, 哪里才是异步真正的入口<br>UniTask中的终结是在哪里?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;代码是真的要去写才能有深刻体会&lt;/p&gt;
&lt;h1&gt;看两个Unity的异步接口&lt;/h1&gt;
&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2025书单</title>
    <link href="https://soincredible.github.io/posts/c56dc2fa/"/>
    <id>https://soincredible.github.io/posts/c56dc2fa/</id>
    <published>2025-09-15T01:51:03.000Z</published>
    <updated>2025-09-30T10:09:01.237Z</updated>
    
    <content type="html"><![CDATA[<p>《Unity3D网络游戏实战(第二版)》<br>《以日为鉴》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;《Unity3D网络游戏实战(第二版)》&lt;br&gt;
《以日为鉴》&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UnitySourceCode——C++与C#之间的通讯</title>
    <link href="https://soincredible.github.io/posts/21f751b8/"/>
    <id>https://soincredible.github.io/posts/21f751b8/</id>
    <published>2025-09-13T09:57:31.000Z</published>
    <updated>2025-09-15T01:45:56.172Z</updated>
    
    <content type="html"><![CDATA[<h1>Scripting家族</h1><h1>PPtr</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/BaseClasses/BaseObject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALLOW_AUTOLOAD_PPTR_DEREFERNCE (UNITY_EDITOR || 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PPtr</span></span><br><span class="line">&#123;</span><br><span class="line">    InstanceID  m_InstanceID;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    <span class="keyword">mutable</span> T*          m_DEBUGPtr;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">AssignObject</span><span class="params">(<span class="type">const</span> Object* o)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* <span class="title">GetTypeString</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">MightContainPPtr</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">AllowTransferOptimization</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> TransferFunction&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">Transfer</span><span class="params">(TransferFunction&amp; transfer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assignment</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">PPtr</span><span class="params">(InstanceID instanceID)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_InstanceID = instanceID;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">        m_DEBUGPtr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PPtr</span>(<span class="type">const</span> T* o)                               &#123; <span class="built_in">AssignObject</span>(o); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">U</span>&gt;</span><br><span class="line">    <span class="built_in">PPtr</span>&lt;T&gt;(<span class="type">const</span> PPtr&lt;U&gt;&amp;o)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_RELEASE</span></span><br><span class="line">        <span class="comment">// This is here to force a compile error in case a down cast from U to T is attempted</span></span><br><span class="line">        T* dummy = <span class="built_in">reinterpret_cast</span>&lt;U*&gt;(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">UNUSED</span>(dummy);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        m_DEBUGPtr = o.<span class="built_in">GetDEBUGPtr</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        m_InstanceID = o.<span class="built_in">GetInstanceID</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PPtr</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">        m_DEBUGPtr = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        m_InstanceID = InstanceID_None;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> T* o)                   &#123; <span class="built_in">AssignObject</span>(o); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">U</span>&gt;</span><br><span class="line">    PPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> PPtr&lt;U&gt;&amp; o)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_RELEASE</span></span><br><span class="line">        <span class="comment">// This is here to force a compile error in case a down cast from U to T is attempted</span></span><br><span class="line">        T* dummy = <span class="built_in">reinterpret_cast</span>&lt;U*&gt;(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">UNUSED</span>(dummy);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        m_DEBUGPtr = o.<span class="built_in">GetDEBUGPtr</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        m_InstanceID = o.<span class="built_in">GetInstanceID</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetInstanceID</span><span class="params">(InstanceID instanceID)</span>      </span>&#123; m_InstanceID = instanceID; &#125;</span><br><span class="line">    <span class="function">InstanceID <span class="title">GetInstanceID</span><span class="params">()</span> <span class="type">const</span>               </span>&#123; <span class="keyword">return</span> m_InstanceID; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    <span class="function">T* <span class="title">GetDEBUGPtr</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_DEBUGPtr; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AssignObjectFromInstanceID</span><span class="params">(InstanceID instanceID, <span class="type">bool</span> threadedLoading)</span> </span>&#123; m_InstanceID = instanceID; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Comparison</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> PPtr&amp; p) <span class="type">const</span>   &#123; <span class="keyword">return</span> m_InstanceID &lt; p.m_InstanceID; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> PPtr&amp; p) <span class="type">const</span>   &#123; <span class="keyword">return</span> m_InstanceID == p.m_InstanceID; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> PPtr&amp; p) <span class="type">const</span>   &#123; <span class="keyword">return</span> m_InstanceID != p.m_InstanceID; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MSVC gets confused whether it should use operator bool(), or operator T* with implicit</span></span><br><span class="line">    <span class="comment">// comparison to NULL. So we add explicit functions and use them instead.</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsNull</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsValid</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">ForceLoadPtr</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> T*() <span class="type">const</span>;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="type">const</span>;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="type">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">PtrToType</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">PtrToType</span>&lt;T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">PtrToType</span>&lt;<span class="type">const</span> T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> U&gt;</span></span><br><span class="line"><span class="function">T <span class="title">dynamic_pptr_cast</span><span class="params">(U* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> PtrToType&lt;T&gt;::value_type Type;</span><br><span class="line">    T castedPtr = (T)(ptr);</span><br><span class="line">    <span class="keyword">if</span> (castedPtr &amp;&amp; castedPtr-&gt;<span class="keyword">template</span> <span class="built_in">IsDerivedFrom</span>&lt;Type&gt;())</span><br><span class="line">        <span class="keyword">return</span> castedPtr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> U&gt;</span></span><br><span class="line"><span class="function">T <span class="title">dynamic_pptr_cast</span><span class="params">(<span class="type">const</span> PPtr&lt;U&gt;&amp; ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    U* o = ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dynamic_pptr_cast</span>&lt;T&gt;(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span></span></span><br><span class="line"><span class="function">T <span class="title">dynamic_instanceID_cast</span><span class="params">(InstanceID instanceID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Object* o = <span class="built_in">PPtr</span>&lt;Object&gt;(instanceID);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dynamic_pptr_cast</span>&lt;T&gt;(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> U&gt;</span></span><br><span class="line"><span class="function">PPtr&lt;T&gt; <span class="title">assert_pptr_cast</span><span class="params">(<span class="type">const</span> PPtr&lt;U&gt;&amp; ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE</span></span><br><span class="line">    U* u = ptr;</span><br><span class="line">    <span class="built_in">Assert</span>(!(<span class="built_in">dynamic_pptr_cast</span>&lt;U*&gt;(u) == <span class="literal">NULL</span> &amp;&amp; u != <span class="literal">NULL</span>));</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">PPtr</span>&lt;T&gt;(ptr.<span class="built_in">GetInstanceID</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enables boost::mem_fn to use PPtr properly, needed for boost::bind</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T * <span class="title">get_pointer</span><span class="params">(PPtr&lt;T&gt; <span class="type">const</span> &amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> PPtr&lt;T&gt;::<span class="built_in">AssignObject</span>(<span class="type">const</span> Object* o)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">NULL</span>)</span><br><span class="line">        m_InstanceID = InstanceID_None;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        m_InstanceID = o-&gt;<span class="built_in">GetInstanceID</span>();</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(o);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line">T* PPtr&lt;T&gt;::<span class="built_in">ForceLoadPtr</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetInstanceID</span>() == InstanceID_None)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointer</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        temp = <span class="built_in">ReadObjectFromPersistentManager</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted == temp)</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line">PPtr&lt;T&gt;::<span class="keyword">operator</span> T*() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetInstanceID</span>() == InstanceID_None)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointer</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> ALLOW_AUTOLOAD_PPTR_DEREFERNCE</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        temp = <span class="built_in">ReadObjectFromPersistentManager</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted == temp)</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line">T* PPtr&lt;T&gt;::<span class="keyword">operator</span>-&gt;() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointer</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> ALLOW_AUTOLOAD_PPTR_DEREFERNCE</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        temp = <span class="built_in">ReadObjectFromPersistentManager</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ErrorString</span>(<span class="string">&quot;Dereferencing NULL PPtr!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line">T&amp; PPtr&lt;T&gt;::<span class="keyword">operator</span>*() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointer</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> ALLOW_AUTOLOAD_PPTR_DEREFERNCE</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        temp = <span class="built_in">ReadObjectFromPersistentManager</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> *casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ErrorString</span>(<span class="string">&quot;Dereferencing NULL PPtr!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ANALYSIS_ASSUME</span>(casted);</span><br><span class="line">        <span class="keyword">return</span> *casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line"><span class="type">bool</span> PPtr&lt;T&gt;::<span class="built_in">IsNull</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    T* casted = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> casted == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line"><span class="type">bool</span> PPtr&lt;T&gt;::<span class="built_in">IsValid</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    T* casted = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> casted != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* PPtr&lt;T&gt;::<span class="built_in">GetTypeString</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> T::<span class="built_in">GetPPtrTypeString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">TransferFunction</span>&gt; <span class="keyword">inline</span></span><br><span class="line"><span class="type">void</span> PPtr&lt;T&gt;::<span class="built_in">Transfer</span>(TransferFunction&amp; transfer)</span><br><span class="line">&#123;</span><br><span class="line">    LocalSerializedObjectIdentifier localIdentifier;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (transfer.<span class="built_in">NeedsInstanceIDRemapping</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Assert</span>(transfer.<span class="built_in">IsWriting</span>() || transfer.<span class="built_in">IsReading</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (transfer.<span class="built_in">IsReading</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localSerializedFileIndex, <span class="string">&quot;m_FileID&quot;</span>, kHideInEditorMask);</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localIdentifierInFile, <span class="string">&quot;m_PathID&quot;</span>, kHideInEditorMask);</span><br><span class="line">            <span class="built_in">LocalSerializedObjectIdentifierToInstanceID</span>(localIdentifier, m_InstanceID);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (transfer.<span class="built_in">IsWriting</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">InstanceIDToLocalSerializedObjectIdentifier</span>(m_InstanceID, localIdentifier);</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localSerializedFileIndex, <span class="string">&quot;m_FileID&quot;</span>, kHideInEditorMask);</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localIdentifierInFile, <span class="string">&quot;m_PathID&quot;</span>, kHideInEditorMask);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localSerializedFileIndex, <span class="string">&quot;m_FileID&quot;</span>, kHideInEditorMask);</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localIdentifierInFile, <span class="string">&quot;m_PathID&quot;</span>, kHideInEditorMask);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        transfer.<span class="built_in">Transfer</span>(m_InstanceID, <span class="string">&quot;m_FileID&quot;</span>, kHideInEditorMask);</span><br><span class="line">        transfer.<span class="built_in">Transfer</span>(localIdentifier.localIdentifierInFile, <span class="string">&quot;m_PathID&quot;</span>, kHideInEditorMask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T* <span class="title">PPtrToObjectDontLoadNoThreadCheck</span><span class="params">(PPtr&lt;T&gt; pptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pptr.<span class="built_in">GetInstanceID</span>() == InstanceID_None)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointerNoThreadCheck</span>(pptr.<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted == temp)</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Scripting家族&lt;/h1&gt;
&lt;h1&gt;PPtr&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UnitySourceCode——Coroutine</title>
    <link href="https://soincredible.github.io/posts/da596cf9/"/>
    <id>https://soincredible.github.io/posts/da596cf9/</id>
    <published>2025-09-11T11:52:27.000Z</published>
    <updated>2025-09-13T07:19:23.814Z</updated>
    
    <content type="html"><![CDATA[<p>翻一下这段代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WXGameCaptureProcess</span> : <span class="title">IEnumerator</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">bool</span> shareOver;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">object</span> Current</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> WaitForEndOfFrame();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">WXGameCaptureProcess</span>(<span class="params">Rect captureRect, Action&lt;<span class="built_in">string</span>&gt; callback</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DDZ_WXMINIGAME</span></span><br><span class="line">                WXCanvas.ToTempFilePath(<span class="keyword">new</span> WXToTempFilePathParam()</span><br><span class="line">                &#123;</span><br><span class="line">                    x = (<span class="built_in">int</span>)captureRect.x,</span><br><span class="line">                    y = (<span class="built_in">int</span>)(Screen.height - captureRect.y - captureRect.height),</span><br><span class="line">                    width = (<span class="built_in">int</span>)captureRect.width,</span><br><span class="line">                    height = (<span class="built_in">int</span>)captureRect.height,</span><br><span class="line">                    destWidth = (<span class="built_in">int</span>)captureRect.width,</span><br><span class="line">                    destHeight = (<span class="built_in">int</span>)captureRect.height,</span><br><span class="line">                    success = (ret) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        Debug.Log(<span class="string">&quot;Screenshot saved: &quot;</span> + ret.tempFilePath);</span><br><span class="line">                        callback?.Invoke(ret.tempFilePath);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    fail = (msg) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        callback?.Invoke(<span class="literal">null</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    complete = (msg) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        shareOver = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">                callback?.Invoke(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> !shareOver;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                shareOver = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在Unity的MonoBehaviour中, 会获得IEnumerator的Current的类型, 然后根据Current的类型判断要执行什么处理</p><p>你问得很有针对性，来看你的问题：</p><hr><p><strong>问题简述：</strong><br>你定义了一个 <code>WXGameCaptureProcess</code> 继承自 <code>IEnumerator</code>。<br>在 Unity 协程中，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WXGameCaptureProcess</span>(<span class="params">...</span>)</span>;</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>()</span>;</span><br></pre></td></tr></table></figure><p>有什么关系？二者等价吗？它们行为有何区别？</p><hr><h2 id="1-yield-return-new-WaitForEndOfFrame">1. yield return new WaitForEndOfFrame()</h2><ul><li><strong>行为：</strong> 等待 <strong>本帧渲染</strong> 结束后，协程继续进行。</li><li><strong>效果</strong>：只“暂停”一帧，马上进入下一步代码。</li></ul><hr><h2 id="2-yield-return-new-WXGameCaptureProcess-…">2. yield return new WXGameCaptureProcess(…)</h2><p>这是个自定义的 IEnumerator，分析其实现：</p><h3 id="关键实现">关键实现</h3><ul><li><code>MoveNext</code>：只要 <code>!shareOver</code> 为真，就会在协程里不停“等待”。</li><li><code>Current</code>：每次等待，返回的对象是 <code>new WaitForEndOfFrame()</code></li><li>只有当你传入的 <code>callback</code> 的 success、fail、complete 被触发（间接导致 <code>shareOver = true</code>），<code>MoveNext</code> 返回 false，协程才开始执行下一条语句。</li></ul><h3 id="表现">表现</h3><p>这个自定义迭代器，在业务事件没完成之前（比如截图还没保存），每一帧返回 <code>WaitForEndOfFrame()</code>，<strong>让协程等待“若干帧”</strong>，直到业务事件完成。完成后协程才往下走。</p><hr><h3 id="直观说明">直观说明</h3><ul><li><p><code>yield return new WaitForEndOfFrame();</code></p><ul><li>等一帧。</li></ul></li><li><p><code>yield return new WXGameCaptureProcess(...);</code></p><ul><li><strong>其实是“每帧都 yield return new WaitForEndOfFrame()”，直到捕获（截图操作）状态 shareOver==true，才继续协程下去。等待的是一个“异步事件”的完成！</strong></li></ul></li></ul><hr><h2 id="3-是否等价？">3. 是否等价？</h2><p><strong>结论：</strong></p><ul><li><code>yield return new WXGameCaptureProcess(...)</code> <strong>绝不等价于</strong> 只 <code>yield return new WaitForEndOfFrame();</code><ul><li>前者是：<strong>等待“多帧”——每帧结尾都 yield — 直到外部异步事件结束</strong></li><li>后者是：<strong>只暂停一帧</strong></li></ul></li><li><strong>WXGameCaptureProcess</strong> 可以等待一个异步回调，比如截图、网络、动画等，适合等待“非立即完成”的业务。</li></ul><hr><h2 id="4-形式总结">4. 形式总结</h2><p>实际上，你的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WXGameCaptureProcess</span>(<span class="params">...</span>)</span>;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码示意，效果类似于：</span></span><br><span class="line"><span class="keyword">while</span> (!shareOver) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// shareOver==true 时继续协程</span></span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>()</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="【专业英文结论】">【专业英文结论】</h3><blockquote><p><code>yield return new WXGameCaptureProcess(...)</code> is <strong>not equivalent</strong> to <code>yield return new WaitForEndOfFrame();</code>. The first form will keep yielding <code>WaitForEndOfFrame</code> each frame until the async capture process is finished (<code>shareOver == true</code>), while the latter only waits for one frame.</p></blockquote><hr><p>如果你想等待一个异步操作的完成而不是只暂停一帧，这种自定义 <code>IEnumerator</code> 写法是业界常用套路。这种写法扩展性也很强。</p><hr><p>Coroutine中会持有m_Current字段, 然后通过如下的接口判断m_Current的类型<br>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityPrefix.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Coroutine.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Misc/AsyncOperation.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Mono/MonoBehaviour.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Mono/MonoScript.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Mono/MonoIncludes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Mono/MonoManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/GameCode/CallDelayed.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Scripting/ScriptingUtility.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/ScriptingBackend/ScriptingApi.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Scripting/ScriptingObjectWithIntPtrField.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_IPHONE_API</span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;Runtime/Input/OnScreenKeyboard.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/ScriptingBackend/ScriptingApi.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// copied from MonoBehaviour.cpp</span></span><br><span class="line"><span class="comment">// if they should be synced - blame the author not me ;-)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_COROUTINE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_COROUTINE_LEAK 0</span></span><br><span class="line"></span><br><span class="line">Coroutine::<span class="built_in">Coroutine</span>()</span><br><span class="line">    : <span class="built_in">m_DoneRunning</span>(<span class="literal">false</span>)</span><br><span class="line">    , <span class="built_in">m_CoroutineEnumeratorGCHandle</span>()</span><br><span class="line">    , <span class="built_in">m_IsIEnumeratorCoroutine</span>(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> coroutineCounter = <span class="number">0</span>;</span><br><span class="line">    coroutineCounter++;</span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;Allocating coroutine %d --- %d : 0x%x\n&quot;</span>, <span class="keyword">this</span>, coroutineCounter, &amp;m_RefCount);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Coroutine::~<span class="built_in">Coroutine</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Assert</span>(!m_CoroutineEnumeratorGCHandle.<span class="built_in">HasTarget</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;Deconstructor coroutine %d\n&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::SetMoveNextMethod</span><span class="params">(ScriptingMethodPtr method)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_MoveNext = method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::SetCurrentMethod</span><span class="params">(ScriptingMethodPtr method)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_Current = method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CallObjectState <span class="title">Coroutine::ContinueCoroutine</span><span class="params">(Object* o, <span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)userData;</span><br><span class="line">    <span class="built_in">Assert</span>(coroutine-&gt;m_RefCount &gt; <span class="number">0</span> &amp;&amp; coroutine-&gt;m_RefCount &lt; <span class="number">1000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((Object*)coroutine-&gt;m_Behaviour != o)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorString</span>(<span class="string">&quot;Coroutine continue failure&quot;</span>);</span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">        <span class="keyword">if</span> ((Object*)coroutine-&gt;m_Behaviour != o)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf_console</span>(<span class="string">&quot;continue Coroutine corruption %d refcount: %d behaviour: %d \n&quot;</span>, coroutine, coroutine-&gt;m_RefCount, coroutine-&gt;m_Behaviour);</span><br><span class="line">            <span class="built_in">printf_console</span>(<span class="string">&quot;continue Coroutine corruption name: %s methodname\n&quot;</span>, ((MonoBehaviour*)(o))-&gt;<span class="built_in">GetScript</span>()-&gt;<span class="built_in">GetName</span>());</span><br><span class="line">            <span class="keyword">if</span> (!coroutine-&gt;m_CoroutineMethod.<span class="built_in">IsNull</span>())</span><br><span class="line">                <span class="built_in">printf_console</span>(<span class="string">&quot;continue Coroutine methodname: %s\n&quot;</span>, <span class="built_in">scripting_method_get_name</span>(coroutine-&gt;m_CoroutineMethod));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> coroutine-&gt;<span class="built_in">Run</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CallObjectState <span class="title">Coroutine::CleanupCoroutine</span><span class="params">(<span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)userData;</span><br><span class="line">    <span class="built_in">Assert</span>(coroutine-&gt;m_RefCount &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Assert</span>(coroutine-&gt;m_RefCount &lt;= <span class="number">1000000</span>);</span><br><span class="line">    coroutine-&gt;m_RefCount--;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;decrease refcount %d - active: %d \n&quot;</span>, coroutine, coroutine-&gt;m_RefCount);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_RefCount &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line"></span><br><span class="line">    coroutine-&gt;m_DoneRunning = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;CleanupCoroutine %d\n&quot;</span>, coroutine);</span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_Behaviour &amp;&amp; <span class="built_in">GetDelayedCallManager</span>().<span class="built_in">HasDelayedCall</span>(coroutine-&gt;m_Behaviour, Coroutine::ContinueCoroutine, CompareCoroutineMethodName, coroutine))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf_console</span>(<span class="string">&quot;CORRUPTION is still in delayed call manager%d!\n&quot;</span>, coroutine-&gt;m_Behaviour);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_ContinueWhenFinished)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CleanupCoroutine</span>(coroutine-&gt;m_ContinueWhenFinished);</span><br><span class="line">        coroutine-&gt;m_ContinueWhenFinished = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_WaitingFor)</span><br><span class="line">    &#123;</span><br><span class="line">        coroutine-&gt;m_WaitingFor-&gt;m_ContinueWhenFinished = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//Set the WaitingFor variable to NULL. Otherwise it might happen that a coroutine is cleaned up because another coroutine has it set as its m_ContinueWhenFinished.</span></span><br><span class="line">        <span class="comment">//If then this coroutine is cleaned up using MonoBehaviour::StopCoroutine, it will be cleaned up again and trigger asserts</span></span><br><span class="line">        coroutine-&gt;m_WaitingFor = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    coroutine-&gt;<span class="built_in">RemoveFromList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_AsyncOperation)</span><br><span class="line">    &#123;</span><br><span class="line">        coroutine-&gt;m_AsyncOperation-&gt;<span class="built_in">SetCoroutineCallback</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        coroutine-&gt;m_AsyncOperation-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        coroutine-&gt;m_AsyncOperation = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Assert</span>(coroutine-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">HasTarget</span>());</span><br><span class="line">    coroutine-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">ReleaseAndClear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!coroutine-&gt;m_IsReferencedByMono)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> coroutine;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE_LEAK</span></span><br><span class="line">        gCoroutineCounter--;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">return</span> kCallObjectDestroyed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::CleanupCoroutineGC</span><span class="params">(<span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)userData;</span><br><span class="line">    <span class="keyword">if</span> (!coroutine-&gt;m_IsReferencedByMono)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_RefCount != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        coroutine-&gt;m_IsReferencedByMono = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ErrorIf</span>(coroutine-&gt;<span class="built_in">IsInList</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> coroutine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;GC free coroutine: %d\n&quot;</span>, coroutine);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE_LEAK</span></span><br><span class="line">    gCoroutineCounter--;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Coroutine::CompareCoroutineMethodName</span><span class="params">(<span class="type">void</span>* callBackUserData, <span class="type">void</span>* cancelUserdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)callBackUserData;</span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_CoroutineMethod.<span class="built_in">IsNull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(<span class="built_in">scripting_method_get_name</span>(coroutine-&gt;m_CoroutineMethod), (<span class="type">const</span> <span class="type">char</span>*)cancelUserdata) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">ScriptingObjectPtrsEqual</span><span class="params">(ScriptingObjectPtr o1, ScriptingObjectPtr o2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ENABLE_DOTNET</span></span><br><span class="line">    <span class="keyword">return</span> WinRT::Bridge::<span class="built_in">GetUtils</span>()-&gt;<span class="built_in">CompareObjects</span>(o1, o2);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> o1 == o2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Coroutine::CompareCoroutineEnumerator</span><span class="params">(<span class="type">void</span>* callBackUserData, <span class="type">void</span>* cancelUserdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)callBackUserData;</span><br><span class="line">    <span class="keyword">if</span> (!coroutine-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">HasTarget</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    ScriptingObjectPtr* handle = (ScriptingObjectPtr*)cancelUserdata;</span><br><span class="line">    <span class="keyword">if</span> (!handle)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ScriptingObjectPtrsEqual</span>(coroutine-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>(), *handle))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!coroutine-&gt;m_IsIEnumeratorCoroutine)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_ContinueWhenFinished == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ScriptingObjectPtrsEqual</span>(coroutine-&gt;m_ContinueWhenFinished-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>(), *handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Coroutine::CompareCoroutineDirect</span><span class="params">(<span class="type">void</span>* callBackUserData, <span class="type">void</span>* cancelUserdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* callBackCoroutine = (Coroutine*)callBackUserData;</span><br><span class="line">    Coroutine* cancelCoroutine = (Coroutine*)cancelUserdata;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callBackCoroutine == cancelCoroutine)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!callBackCoroutine-&gt;m_IsIEnumeratorCoroutine)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callBackCoroutine-&gt;m_ContinueWhenFinished == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callBackCoroutine-&gt;m_ContinueWhenFinished == cancelCoroutine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Coroutine::InvokeMoveNext</span><span class="params">(ScriptingExceptionPtr* exception)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">    <span class="function">ScriptingInvocation <span class="title">invocation</span><span class="params">(GetCoreScriptingClasses().invokeMoveNext)</span></span>;</span><br><span class="line">    invocation.<span class="built_in">AddObject</span>(m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>());</span><br><span class="line">    invocation.<span class="built_in">AddIntPtr</span>(&amp;result);</span><br><span class="line">    invocation.classContextForProfiler = m_Behaviour-&gt;<span class="built_in">GetClass</span>();</span><br><span class="line">    invocation.methodContextForProfiler = m_MoveNext;</span><br><span class="line">    invocation.objectInstanceIDContextForException = m_Behaviour-&gt;<span class="built_in">GetInstanceID</span>();</span><br><span class="line">    invocation.<span class="built_in">Invoke</span>(exception);</span><br><span class="line">    <span class="keyword">return</span> result &amp;&amp; *exception == SCRIPTING_NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CallObjectState <span class="title">Coroutine::Run</span><span class="params">(<span class="type">bool</span> *exceptionThrown)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Assert</span>(m_RefCount != <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Assert</span>(m_Behaviour != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">Assert</span>(!<span class="built_in">GetDelayedCallManager</span>().<span class="built_in">HasDelayedCall</span>(m_Behaviour, Coroutine::ContinueCoroutine, CompareCoroutineMethodName, <span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">if</span> (m_Behaviour == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf_console</span>(<span class="string">&quot;Coroutine error %d refcount: %d behaviour%d\n&quot;</span>, <span class="keyword">this</span>, m_RefCount, m_Behaviour);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// - Call MoveNext (This processes the function until the next yield!)</span></span><br><span class="line">    <span class="comment">// - Call Current (This returns condition when to continue the coroutine next.)</span></span><br><span class="line">    <span class="comment">//   -&gt; Queue it based on the continue condition</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Temporarily increase refcount so the object will not get destroyed during the m_MoveNext call</span></span><br><span class="line">    m_RefCount++;</span><br><span class="line">    ScriptingExceptionPtr exception = SCRIPTING_NULL;</span><br><span class="line">    <span class="type">bool</span> keepLooping = <span class="built_in">InvokeMoveNext</span>(&amp;exception);</span><br><span class="line">    <span class="built_in">Assert</span>(m_RefCount &gt; <span class="number">0</span> &amp;&amp; m_RefCount &lt;= <span class="number">10000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> coroutineWasDestroyedDuringMoveNext = m_RefCount == <span class="number">1</span>;</span><br><span class="line">    Coroutine* continueWhenFinished = m_ContinueWhenFinished;</span><br><span class="line">    <span class="comment">// Decrease temporary refcount so the object will not get destroyed during the m_MoveNext call</span></span><br><span class="line">    <span class="built_in">CleanupCoroutine</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The coroutine has been destroyed in the mean time, probably due to a call to StopAllCoroutines, stop executing further</span></span><br><span class="line">    <span class="keyword">if</span> (coroutineWasDestroyedDuringMoveNext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Assert</span>(continueWhenFinished == <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> kCallObjectDestroyed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exceptionThrown)</span><br><span class="line">        *exceptionThrown = exception != SCRIPTING_NULL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != SCRIPTING_NULL)</span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Are we done with this coroutine?</span></span><br><span class="line">    <span class="keyword">if</span> (!keepLooping)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If there is a coroutine waiting for this one to finish Run it!</span></span><br><span class="line">        <span class="keyword">if</span> (m_ContinueWhenFinished)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Assert</span>(<span class="keyword">this</span> == m_ContinueWhenFinished-&gt;m_WaitingFor);</span><br><span class="line">            Coroutine* continueWhenFinished = m_ContinueWhenFinished;</span><br><span class="line">            m_ContinueWhenFinished-&gt;m_WaitingFor = <span class="literal">NULL</span>;</span><br><span class="line">            m_ContinueWhenFinished = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="comment">// The coroutine might have been stopped inside of the last coroutine invokation</span></span><br><span class="line">            <span class="keyword">if</span> (continueWhenFinished-&gt;m_Behaviour)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// If the continuation coroutine yields waiting for this coroutine, it must know that this coroutine is finished</span></span><br><span class="line">                m_DoneRunning = <span class="literal">true</span>;</span><br><span class="line">                continueWhenFinished-&gt;<span class="built_in">Run</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">CleanupCoroutine</span>(continueWhenFinished);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_Behaviour == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ProcessCoroutineCurrent</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::ProcessCoroutineCurrent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ScriptingExceptionPtr exception = SCRIPTING_NULL;</span><br><span class="line"></span><br><span class="line">    <span class="function">ScriptingInvocation <span class="title">invocation</span><span class="params">(m_Current)</span></span>;</span><br><span class="line">    invocation.objectInstanceIDContextForException = m_Behaviour-&gt;<span class="built_in">GetInstanceID</span>();</span><br><span class="line">    invocation.classContextForProfiler = m_Behaviour-&gt;<span class="built_in">GetClass</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !ENABLE_DOTNET</span></span><br><span class="line">    ScriptingClassPtr methodKlass = <span class="built_in">scripting_method_get_class</span>(m_Current);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_valuetype</span>(methodKlass))</span><br><span class="line">        invocation.<span class="built_in">SetTarget</span>(<span class="built_in">scripting_object_unbox</span>(m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>()));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        invocation.<span class="built_in">SetTarget</span>(m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ScriptingObjectPtr monoWait = invocation.<span class="built_in">Invoke</span>(&amp;exception);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Assert</span>(m_RefCount &gt; <span class="number">0</span> &amp;&amp; m_RefCount &lt;= <span class="number">10000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != SCRIPTING_NULL)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (monoWait == SCRIPTING_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line">        <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">HandleIEnumerableCurrentReturnValue</span>(monoWait);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::HandleIEnumerableCurrentReturnValue</span><span class="params">(ScriptingObjectPtr monoWait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AsyncOperation* async = <span class="literal">NULL</span>;</span><br><span class="line">    ScriptingClassPtr waitClass = <span class="built_in">scripting_object_get_class</span>(monoWait);</span><br><span class="line">    <span class="type">const</span> CommonScriptingClasses&amp; classes = <span class="built_in">GetMonoManager</span>().<span class="built_in">GetCommonClasses</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue the coroutine in &#x27;wait&#x27; seconds</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().waitForSeconds))</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line"></span><br><span class="line">        ScriptingWaitForSeconds wait;</span><br><span class="line">        <span class="built_in">MarshallManagedStructIntoNative</span>(monoWait, &amp;wait);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsNAN</span>(wait.m_Seconds))</span><br><span class="line">            <span class="built_in">ErrorString</span>(<span class="string">&quot;float.NaN has been passed into WaitForSeconds which will result in an infinite wait time.&quot;</span>);</span><br><span class="line">        <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, wait.m_Seconds, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue the coroutine on the next fixed update</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().waitForFixedUpdate))</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line">        <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunFixedFrameRate);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue the coroutine at the end of frame</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().waitForEndOfFrame))</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line">        <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">-1.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kEndOfFrame);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, classes.iEnumerator))</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">        <span class="keyword">if</span> (m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>() == monoWait)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">char</span>* className = <span class="built_in">scripting_class_get_name</span>(waitClass);</span><br><span class="line">            <span class="built_in">WarningStringMsg</span>(<span class="string">&quot;IEnumerator class %s is returning this (itself) in %s.Current, which can lead to infinite recursion.&quot;</span>, className, className);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        m_RefCount++;</span><br><span class="line"></span><br><span class="line">        Coroutine* waitForCoroutine;</span><br><span class="line">        <span class="keyword">if</span> (!m_Behaviour-&gt;<span class="built_in">TryCreateAndRunCoroutine</span>(monoWait, <span class="literal">NULL</span>, &amp;waitForCoroutine))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// coroutine has already finished (empty enumerator block); just reschedulle current one..</span></span><br><span class="line">        <span class="keyword">if</span> (waitForCoroutine == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">AssertMsg</span>(!waitForCoroutine-&gt;m_DoneRunning, <span class="string">&quot;Coroutine initialized incorrectly&quot;</span>);</span><br><span class="line">        <span class="built_in">AssertMsg</span>(waitForCoroutine-&gt;m_ContinueWhenFinished == <span class="literal">NULL</span>, <span class="string">&quot;Coroutine initialized incorrectly&quot;</span>);</span><br><span class="line"></span><br><span class="line">        waitForCoroutine-&gt;m_IsIEnumeratorCoroutine = <span class="literal">true</span>;</span><br><span class="line">        waitForCoroutine-&gt;m_ContinueWhenFinished = <span class="keyword">this</span>;</span><br><span class="line">        m_IsIEnumeratorCoroutine = <span class="literal">true</span>;</span><br><span class="line">        m_WaitingFor = waitForCoroutine;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue after another coroutine is finished</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().coroutine))</span><br><span class="line">    &#123;</span><br><span class="line">        Coroutine* waitForCoroutine;</span><br><span class="line">        <span class="built_in">MarshallManagedStructIntoNative</span>(monoWait, &amp;waitForCoroutine);</span><br><span class="line">        <span class="keyword">if</span> (waitForCoroutine-&gt;m_DoneRunning)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// continue executing.</span></span><br><span class="line">            <span class="built_in">ContinueCoroutine</span>(m_Behaviour, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (waitForCoroutine-&gt;m_ContinueWhenFinished != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LogStringObject</span>(<span class="string">&quot;Another coroutine is already waiting for this coroutine!\nCurrently only one coroutine can wait for another coroutine!&quot;</span>, m_Behaviour);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_RefCount++;</span><br><span class="line">        waitForCoroutine-&gt;m_ContinueWhenFinished = <span class="keyword">this</span>;</span><br><span class="line">        m_WaitingFor = waitForCoroutine;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().asyncOperation)) &amp;&amp; (async = <span class="built_in">ScriptingObjectWithIntPtrField</span>&lt;AsyncOperation&gt;(monoWait).<span class="built_in">GetPtr</span>()) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (async-&gt;<span class="built_in">IsDone</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use AysncOperation ContinueCoroutine - default path</span></span><br><span class="line">        <span class="keyword">if</span> (async-&gt;<span class="built_in">HasCoroutineCallback</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">////@<span class="doctag">TODO:</span> Throw exception?</span></span><br><span class="line">            <span class="built_in">ErrorString</span>(<span class="string">&quot;This asynchronous operation is already being yielded from another coroutine. An asynchronous operation can only be yielded once.&quot;</span>);</span><br><span class="line">            <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        async-&gt;<span class="built_in">SetCoroutineCallback</span>(ContinueCoroutine, m_Behaviour, <span class="keyword">this</span>, CleanupCoroutine);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_AsyncOperation != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_AsyncOperation-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_AsyncOperation = async;</span><br><span class="line">        m_AsyncOperation-&gt;<span class="built_in">AddRef</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue the coroutine on the next dynamic frame update</span></span><br><span class="line">    m_RefCount++;</span><br><span class="line">    <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">    <span class="comment">//Ext_MarshalMap_Release_ScriptingObject(monoWait);//RH TODO : RELEASE THE MONOWAIT OBJECTS SOMEWHERE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C++到C#的理解有些难度, 我们可以实现一个纯C#的协程:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;翻一下这段代码&lt;/p&gt;
&lt;figure class=&quot;highlight c#&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>迷思——关于工作规范</title>
    <link href="https://soincredible.github.io/posts/fcb99509/"/>
    <id>https://soincredible.github.io/posts/fcb99509/</id>
    <published>2025-09-11T02:24:20.000Z</published>
    <updated>2025-09-28T07:59:32.071Z</updated>
    
    <content type="html"><![CDATA[<p>在英文的开发和测试流程中，<strong>描述bug复现路径或原因，常用的专业名词主要有以下几种：</strong></p><hr><h3 id="1-Reproduction-Steps-Steps-to-Reproduce">1. <strong>Reproduction Steps / Steps to Reproduce</strong></h3><ul><li><strong>解释</strong>：最常用的术语，意为“复现步骤”，即详细记录让bug发生的具体操作或条件。</li><li><strong>实例</strong>：<ul><li><em>“Please provide detailed <strong>reproduction steps</strong> so we can investigate the issue.”</em></li><li><em>“Steps to reproduce: 1. Open menu. 2. Click Save. 3. Observe crash.”</em></li></ul></li></ul><h3 id="2-Reproducibility">2. <strong>Reproducibility</strong></h3><ul><li><strong>解释</strong>：指该bug能否稳定或偶然被复现的特性。有时也写成repro rate（复现概率）。</li><li><strong>实例</strong>：<ul><li><em>“The reproducibility of this bug is 100%.”</em></li><li><em>“Please indicate the reproducibility in your bug report.”</em></li></ul></li></ul><h3 id="3-Root-Cause">3. <strong>Root Cause</strong></h3><ul><li><strong>解释</strong>：表示bug的根本原因。通常用于描述究竟是哪个逻辑/代码/条件导致此bug产生。</li><li><strong>实例</strong>：<ul><li><em>“After analysis, the <strong>root cause</strong> of the issue was found to be a missing null check.”</em></li></ul></li></ul><h3 id="4-Issue-Trigger-Trigger-Condition">4. <strong>Issue Trigger/Trigger Condition</strong></h3><ul><li><strong>解释</strong>：有时候会用trigger（触发条件）描述能导致这个问题的具体条件或动作。</li><li><strong>实例</strong>：<ul><li><em>“The trigger for this issue is clicking the submit button twice.”</em></li></ul></li></ul><h3 id="5-Repro-Case-Test-Case">5. <strong>Repro Case / Test Case</strong></h3><ul><li><strong>解释</strong>：&quot;Repro case&quot;指的是能精确复现bug的测试用例，在自动化或详细调查时使用。<ul><li><em>“I’ve attached a minimal repro case for this bug.”</em></li></ul></li></ul><hr><h2 id="总结推荐">总结推荐</h2><p><strong>你如果指的是“复现路径/步骤”，最常用的专业词汇就是：</strong></p><ul><li><strong>Steps to Reproduce</strong></li><li><strong>Reproduction Steps</strong></li></ul><p><strong>你如果强调“原因”，最标准的术语是：</strong></p><ul><li><strong>Root Cause</strong></li></ul><hr><h2 id="参考格式（英文Bug报告标准模版）">参考格式（英文Bug报告标准模版）</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Summary: [brief bug description]</span><br><span class="line"></span><br><span class="line">Steps to Reproduce:</span><br><span class="line">1. ...</span><br><span class="line">2. ...</span><br><span class="line">3. ...</span><br><span class="line"></span><br><span class="line">Expected Result: ...</span><br><span class="line">Actual Result: ...</span><br><span class="line"></span><br><span class="line">Reproducibility: (Always/Sometimes/Random)</span><br><span class="line">Root Cause: [if known]</span><br></pre></td></tr></table></figure><hr><p>如要表达&quot;复现路径&quot;，就用__Steps to Reproduce__或__Reproduction Steps__；<br>如要表达&quot;原因&quot;，用__Root Cause__。</p><hr><p>补充：<br>更口语一点，也可说*“how to reproduce” this bug*。<br>但<strong>正式术语</strong>永远是 <em>Steps to Reproduce</em>。</p><p>很好的问题！</p><p>在英文开发及测试流程中，**“解决方案”“如何解决这个问题”**的专业术语和表达方式如下：</p><hr><h2 id="1-Solution">1. <strong>Solution</strong></h2><ul><li>最直接、最广泛的术语，意为“解决方案”。</li><li>常用表达：<ul><li><em>“Proposed solution:”</em></li><li><em>“The solution is to…”</em></li></ul></li></ul><h2 id="2-Fix-Bug-Fix">2. <strong>Fix / Bug Fix</strong></h2><ul><li>更偏工程实践，用于指“修复措施”或具体的“修复点”。</li><li>常用表达：<ul><li><em>“The fix for this issue is…”</em></li><li><em>“Bug fix implemented by…”</em></li></ul></li></ul><h2 id="3-Resolution">3. <strong>Resolution</strong></h2><ul><li>一般用于bug状态流转（比如Jira、Bugzilla），表示“最终解决方式”或“已解决”。</li><li>常用表达：<ul><li><em>“Resolution: Fixed”</em></li><li><em>“Resolution: Won’t Fix”</em></li></ul></li></ul><h2 id="4-Remediation">4. <strong>Remediation</strong></h2><ul><li>偏正式、用于安全领域或大公司的报告，指“补救措施”或“缓解办法”。</li><li>常用表达：<ul><li><em>“Recommended remediation:”</em></li></ul></li></ul><h2 id="5-Mitigation">5. <strong>Mitigation</strong></h2><ul><li>如果不是彻底修复，而是降低影响，叫“缓解措施”。</li><li>常用表达：<ul><li><em>“Mitigation step:”</em></li><li><em>“Mitigation: Limit the input size to 256 characters.”</em></li></ul></li></ul><h2 id="6-Workaround">6. <strong>Workaround</strong></h2><ul><li>如果还没修好，但可以临时规避，用“临时解决办法”。</li><li>常用表达：<ul><li><em>“Workaround: Restart the application.”</em></li></ul></li></ul><hr><h2 id="常用专业表达">常用专业表达</h2><ul><li><strong>How to solve this issue?</strong></li><li><strong>The solution to this problem is…</strong></li><li><strong>Resolution:</strong> (在bug报告表单上)</li><li><strong>Proposed fix:</strong> 或 <strong>Fix:</strong> （开发者描述修复思路）</li><li><strong>Remediation:</strong> (正式或安全相关写法)</li><li><strong>Mitigation:</strong> (只能缓解，不能根治时)</li><li><strong>Workaround:</strong> (临时办法)</li></ul><hr><h2 id="典型Bug-Report模板片段（英语专业表达）">典型Bug Report模板片段（英语专业表达）</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Issue Summary: [description of the problem]</span><br><span class="line"></span><br><span class="line">Steps to Reproduce: [how to trigger the bug]</span><br><span class="line"></span><br><span class="line">Expected Result: [what should happen]</span><br><span class="line">Actual Result: [what happens]</span><br><span class="line">Root Cause: [why it happens]</span><br><span class="line"></span><br><span class="line">Solution / Fix / Resolution:</span><br><span class="line">- [How to fix / what code change / what configuration to adjust / etc.]</span><br></pre></td></tr></table></figure><hr><h2 id="总结">总结</h2><h3 id="你问“解决方案-如何解决这个问题”，专业术语可以用：">你问“解决方案/如何解决这个问题”，专业术语可以用：</h3><ul><li><strong>Solution</strong></li><li><strong>Fix</strong></li><li><strong>Resolution</strong></li><li><strong>Remediation</strong></li><li>（如果是临时措施，则用 Mitigation 或 Workaround）</li></ul><hr><p><strong>最常见的表达：</strong></p><blockquote><p><strong>Solution:</strong><br><strong>Proposed Fix:</strong><br><strong>Resolution:</strong></p></blockquote><hr><p>如果需要写code review、bug报告、提交日志，建议用这些标准词汇。<br>如要具体场景举例或更深入用法，可以继续问！</p><h1>复现的英文为reproduce</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在英文的开发和测试流程中，&lt;strong&gt;描述bug复现路径或原因，常用的专业名词主要有以下几种：&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;1-Reproduction-Steps-Steps-to-Reproduce&quot;&gt;1. &lt;strong&gt;Reproduct</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>RPG游戏开发记录(五)：接入YooAsset</title>
    <link href="https://soincredible.github.io/posts/564f2f1d/"/>
    <id>https://soincredible.github.io/posts/564f2f1d/</id>
    <published>2025-09-10T11:22:57.000Z</published>
    <updated>2025-09-11T01:44:39.371Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>C#中的序列化</title>
    <link href="https://soincredible.github.io/posts/57ac4e9b/"/>
    <id>https://soincredible.github.io/posts/57ac4e9b/</id>
    <published>2025-09-10T02:09:10.000Z</published>
    <updated>2025-09-10T06:40:47.710Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>作家们</title>
    <link href="https://soincredible.github.io/posts/2375413b/"/>
    <id>https://soincredible.github.io/posts/2375413b/</id>
    <published>2025-09-10T00:25:23.000Z</published>
    <updated>2025-09-10T06:40:47.711Z</updated>
    
    <content type="html"><![CDATA[<p>阿瑟克拉克 《与罗摩相会》</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;阿瑟克拉克 《与罗摩相会》&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>迷思——关于拖延与生活的充实感</title>
    <link href="https://soincredible.github.io/posts/360942ff/"/>
    <id>https://soincredible.github.io/posts/360942ff/</id>
    <published>2025-09-10T00:21:49.000Z</published>
    <updated>2025-09-10T09:44:05.914Z</updated>
    
    <content type="html"><![CDATA[<h1>不想洗澡</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;不想洗澡&lt;/h1&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>迷思——是要过程还是要结果</title>
    <link href="https://soincredible.github.io/posts/8518d869/"/>
    <id>https://soincredible.github.io/posts/8518d869/</id>
    <published>2025-09-09T02:02:54.000Z</published>
    <updated>2025-09-09T10:30:20.761Z</updated>
    
    <content type="html"><![CDATA[<p>要做一个transform从某点移动到某点的效果, 两种方式, 第一种在Update里面每帧去更新位置, 第二种使用DoTween, 给一个起始点, 给一个终点就完事了.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;要做一个transform从某点移动到某点的效果, 两种方式, 第一种在Update里面每帧去更新位置, 第二种使用DoTween, 给一个起始点, 给一个终点就完事了.&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UnityEditorUITookit开发</title>
    <link href="https://soincredible.github.io/posts/7c88a7b8/"/>
    <id>https://soincredible.github.io/posts/7c88a7b8/</id>
    <published>2025-09-09T01:05:50.000Z</published>
    <updated>2025-09-09T10:30:20.759Z</updated>
    
    
    
    
    <category term="UnityEditor" scheme="https://soincredible.github.io/categories/UnityEditor/"/>
    
    
  </entry>
  
  <entry>
    <title>UnityEditorIMGUI开发</title>
    <link href="https://soincredible.github.io/posts/7f55a4b3/"/>
    <id>https://soincredible.github.io/posts/7f55a4b3/</id>
    <published>2025-09-09T01:05:37.000Z</published>
    <updated>2025-09-10T06:40:29.370Z</updated>
    
    <content type="html"><![CDATA[<h1>何为IMGUI</h1><p>IMGUI即Immediate Mode GUI 随着Unity的版本更新, Unity官方逐渐抛弃IMGUI, 转用UITookit</p><h1>一些疑问</h1><h1>1. Editor GUI（OnGUI）模式</h1><p>Unity 的 Editor 扩展（EditorWindow、Editor、CustomInspector 等）使用的是<strong>Immediate Mode GUI</strong>，即 IMGUI。</p><ul><li>在 IMGUI（OnGUI）里，每次要显示控件都必须重新绘制一遍，所以 _textArea = GUILayout.TextArea(_textArea); 这种写法是<strong>必要的</strong>，也是推荐的。</li><li>只要你需要文本输入框能保存、显示、修改文本，就必须把每帧 OnGUI 返回的最新字符串赋值回来，否者控件无法响应用户输入。</li><li>OnGUI 并不是像 Update 那样只做逻辑运算，它是“每帧重画+同步最新值”的机制。</li></ul><p><strong>这个流程虽然“每帧赋值”，但实际上是：</strong></p><ul><li>用户输入 → 控件更新，控件的内容通过 TextArea 的返回值传递出来。</li><li>你用一个变量保存起来，下次再传进去，循环往复。</li></ul><p>实际上，这样的“赋值”并不是真正“每帧都做了无用功”，它不涉及复杂逻辑，只是保证数据同步，很轻量。</p><hr><h1>2. UGUI（UnityEngine.UI）模式</h1><p>UGUI 使用的是<strong>Retained Mode GUI</strong>，即“保持式 GUI”。</p><ul><li>UGUI（比如 InputField）是 GameObject，上面挂着脚本组件（InputField、Text 等），值都是挂在对象内部，“实时绑定、事件驱动”，只有当用户输入发生变化时才会更新内部值。</li><li>你<strong>不需要每帧赋值 InputField.text</strong>，通常只在初始化或特定逻辑中赋值，或者通过事件（onValueChanged）处理输入变化。</li></ul><p>例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InputField input;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    input.onValueChanged.AddListener(OnInputChanged);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnInputChanged</span>(<span class="params"><span class="built_in">string</span> newText</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 这里只在用户输入改变时触发一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每帧 Update 时 <strong>并不需要 assign</strong>。</p><hr><h2 id="3-为什么-Editor-要这样写？">3. 为什么 Editor 要这样写？</h2><p>因为 IMGUI 的机制只能你自己手动接管“可视控件内容”和“你的变量”，<br>每帧同步其实只是“状态同步”，并不是做大量冗余逻辑。所以<strong>IMGUI风格就该每帧赋值；UGUI则用事件驱动。</strong></p><hr><h2 id="4-有没有“更优雅”的写法？">4. 有没有“更优雅”的写法？</h2><ul><li>在 Editor .OnGUI，没有更优雅的方案，这就是官方推荐用法（<strong>赋值其实就1条指令，性能压力很小</strong>）。</li><li>如果你只想提高代码“观感”，可以包装一层函数，但底层逻辑还是要你管数据同步。</li><li>UGUI、EditorGUILayout、Runtime GUI，没有更优雅方案，因为机制不同。</li></ul><hr><h2 id="结论">结论</h2><ul><li><strong>Editor IMGUI 就要每帧赋值，这是机制要求。</strong></li><li><strong>UGUI/InputField等只在需要时赋值，不必每帧。</strong></li><li><strong>赋值本身只是同步文本状态，不是无用功，也不影响性能。</strong></li></ul><hr><h3 id="延伸阅读">延伸阅读</h3><p>官方说明：<br><a href="https://docs.unity3d.com/Manual/UI-system-compare.html">IMGUI Vs Retained Mode</a><br><a href="https://docs.unity3d.com/ScriptReference/GUILayout.TextArea.html">Editor scripting: Immediate/Retained GUI</a></p><hr><p><strong>简明一句话：IMGUI 每帧赋值是必要的，就是它的机制设计；UGUI只在需要转移数据时才赋值，不是每帧。</strong></p><h1>GUI都有哪些控件</h1><ul><li>Button 在用户点击按钮**（按下并抬起）**时，GUILayout.Button 返回 true</li><li>RepeatButton 在用户按住按钮时，GUILayout.RepeatButton 每帧都返回 true。</li><li>Label</li><li>TextArea</li><li>Toggle</li><li>Box</li></ul><h1>GUIStyleState</h1><h1>GUIContent</h1><p>看一下源码就可以发现, 当我们调用<code>GUI.Label(&quot;Hello&quot;)</code>这样的接口时, GUI内部都是将传入的字符串专成一个GUIContent. 这是一种便捷的写法</p><p>GUIContent决定渲染什么<br>GUIStyle决定如何渲染</p><h1>GUIStyle</h1><p>Style</p><p>有一些代表状态的字段 这些状态是给固定的控件使用的.</p><ul><li>active Button</li><li>onHover</li></ul><p>GUIStyle像是一个上下文, 或者状态机里面的Blackboard, 所有的UI控件, 能够呈现的样式, GUIStyle中的字段全部包含, 一个UI控件能表现的效果所需要的字段, 只是GUIStyle的子集.</p><p>比如GUI.Label</p><h1>布局对齐有两种范畴</h1><p>第一是一个组件内 比如Box组件内部的Text和Icon 使用GUIStyle的alignment来对齐, 第二是整个Box组件在窗口中的对齐方式, 使用GUILayout.FlexibleSpace() + GUILayout.BeginHorizontal()来实现布局</p><h1>GUI、EditorGUI、GUILayout、EditorGUILayout、EditorGUIUtility、GUIUtility</h1><p>GUI附带的还有GUIGroup、GUIStyle等 EditorGUI好像没有?<br>在UnityEditor开发中下面这些类型都是可以用的<br><a href="https://docs.unity3d.com/ScriptReference/GUI.html">https://docs.unity3d.com/ScriptReference/GUI.html</a><br><a href="https://docs.unity3d.com/ScriptReference/GUIContent.html">https://docs.unity3d.com/ScriptReference/GUIContent.html</a><br><a href="https://docs.unity3d.com/ScriptReference/GUISkin.html">https://docs.unity3d.com/ScriptReference/GUISkin.html</a><br><a href="https://docs.unity3d.com/ScriptReference/GUIStyle.html">https://docs.unity3d.com/ScriptReference/GUIStyle.html</a><br><a href="https://docs.unity3d.com/ScriptReference/EditorGUI.html">https://docs.unity3d.com/ScriptReference/EditorGUI.html</a><br><a href="https://docs.unity3d.com/ScriptReference/EditorStyles.html">https://docs.unity3d.com/ScriptReference/EditorStyles.html</a></p><h1>EditorToolBar</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;何为IMGUI&lt;/h1&gt;
&lt;p&gt;IMGUI即Immediate Mode GUI 随着Unity的版本更新, Unity官方逐渐抛弃IMGUI, 转用UITookit&lt;/p&gt;
&lt;h1&gt;一些疑问&lt;/h1&gt;
&lt;h1&gt;1. Editor GUI（OnGUI）模式&lt;/h1&gt;
&lt;p</summary>
      
    
    
    
    <category term="UnityEditor" scheme="https://soincredible.github.io/categories/UnityEditor/"/>
    
    
  </entry>
  
  <entry>
    <title>UnityEditor下异步的设计</title>
    <link href="https://soincredible.github.io/posts/1302a241/"/>
    <id>https://soincredible.github.io/posts/1302a241/</id>
    <published>2025-09-09T00:27:17.000Z</published>
    <updated>2025-09-10T02:16:24.516Z</updated>
    
    <content type="html"><![CDATA[<p>参考框架: FigmaConvertToUnity、FindReference2、I2</p><p>Editor模式下没办法使用MonoBehaviour那套协程来实现异步, I2用了点奇技淫巧, 在需要执行异步的时候, 在场景上挂载一个Mono的脚本, 用这个Mono脚本驱动协程的执行</p><h1>FR2</h1><p>使用的是伪异步, 在EditorUpdate里面做</p><h1>Figma插件</h1><p>这个用到的是C#的Task, 因为它里面的一些异步操作都是向网络请求, 下载数据, 不是操作Unity里面的一些东西, 所以可以放心放到别的线程里面去做.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考框架: FigmaConvertToUnity、FindReference2、I2&lt;/p&gt;
&lt;p&gt;Editor模式下没办法使用MonoBehaviour那套协程来实现异步, I2用了点奇技淫巧, 在需要执行异步的时候, 在场景上挂载一个Mono的脚本, 用这个Mono脚</summary>
      
    
    
    
    <category term="UnityEditor" scheme="https://soincredible.github.io/categories/UnityEditor/"/>
    
    
  </entry>
  
  <entry>
    <title>Unity插件合集</title>
    <link href="https://soincredible.github.io/posts/3248703d/"/>
    <id>https://soincredible.github.io/posts/3248703d/</id>
    <published>2025-09-05T01:12:08.000Z</published>
    <updated>2025-09-10T01:48:58.098Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://assetstore.unity.com/packages/tools/utilities/vfolders-2-255470">vFolders 2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://assetstore.unity.com/packages/tools/utilities/vfolders-2-255470&quot;&gt;vFolders 2&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Unity渲染合集</title>
    <link href="https://soincredible.github.io/posts/b20b7f63/"/>
    <id>https://soincredible.github.io/posts/b20b7f63/</id>
    <published>2025-09-05T01:10:15.000Z</published>
    <updated>2025-09-05T01:43:31.410Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
