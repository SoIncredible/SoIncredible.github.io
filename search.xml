<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随记</title>
      <link href="/posts/f211d1c6/"/>
      <url>/posts/f211d1c6/</url>
      
        <content type="html"><![CDATA[<p>父亲过分地夸大了人际关系在人事业中的占比, 可是个人能力才是一切的基础, 即使有贵人相助, 没有能力, 机会来了, 贵人也没办法把你托举上去.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3D数学基础——线性代数的起源</title>
      <link href="/posts/f9ac7a69/"/>
      <url>/posts/f9ac7a69/</url>
      
        <content type="html"><![CDATA[<p>线性代数起源于对线性方程组的分析, 处理空间中的变换就是在解线性方程组. 空间中的任意点$(x, y, z)$, 经过任意操作A变换成$(x_1, y_1, z_1)$, 那么操作A可以通过一个矩阵来描述.</p><p>操作的分类</p><p>旋转<br>平移<br>缩放<br>错切<br>反射</p><h1>使用高斯消元法求解线性方程组</h1><p>使用矩阵表示旋转, 在三维空间的左手坐标系中, 以绕着y轴顺时针旋转$\theta$度, 注意左手系中, 顺时针旋转为正向旋转. 来构建方程组<br>设点$P_1(x_1, y_1, z_1)$, 经过上述所说的旋转矩阵M, 旋转到$P_2(x_2, y_2, z_2)$, $P_1$、$P_2$已知, 求旋转矩阵M.</p><p>构建方程组<br>已知向量$\vec{OP_1}$、$\vec{OP_2}$<br>根据向量内积(点积)<br>$$ \vec{OP_1} \cdot \vec{OP_2} = |\vec{OP_1}||\vec{OP_2}|cos\theta $$<br>根据向量外积(叉积)<br>$$ \begin{bmatrix}<br>x_1\<br>y_1\<br>z_1<br>\end{bmatrix}^T<br>\times<br>\begin{bmatrix}<br>x_2\<br>y_2\<br>z_2<br>\end{bmatrix}^T<br>= \begin{bmatrix}<br>y_1z_2 - z_1y_2\<br>z_1x_2 - x_1z_2\<br>x_1y_2 - y_1x_2<br>\end{bmatrix}^T<br>$$</p><h1>参考资料</h1><p><a href="https://www.ebsco.com/research-starters/mathematics/linear-algebra">Linear algebra</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>游戏开发中的设计模式——双缓冲</title>
      <link href="/posts/2c673fe4/"/>
      <url>/posts/2c673fe4/</url>
      
        <content type="html"><![CDATA[<p>双缓冲的关键是, 对外部的使用者来说, 外部使用者永远都是和buffer1进行沟通, buffer2不会暴露在外部.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>经济学</title>
      <link href="/posts/d315c0a7/"/>
      <url>/posts/d315c0a7/</url>
      
        <content type="html"><![CDATA[<p>我们想赚的不是钱本身, 而是钱背后的东西: 资源、产品和服务</p><p>银行的储蓄低, 就需要鼓励民众存钱, 就得提高储蓄的利率, 因为银行本身储蓄就低, 借贷给创业者的钱就少, 抗风险能力低, 并且银行需要要求创业者返还贷款的利息也就更高了.<br>银行储蓄高, 就需要鼓励民众投资, 降低储蓄的利率, 从而降低民众的储蓄意愿. 借贷给创业者的钱就多, 抗风险能力高, 银行需要要求创业者返还贷款的利息也就更低了.</p><p>生产力的提高是通货紧缩的充分不必要条件, 前提是货币供应量不变、社会总需求不变, 货币的供应量变小, 变相得让货币的购买力提升了, 所以也会造成通货紧缩</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSharp中的GC</title>
      <link href="/posts/aa627dfb/"/>
      <url>/posts/aa627dfb/</url>
      
        <content type="html"><![CDATA[<h1>基于代的垃圾回收机制</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——异步</title>
      <link href="/posts/519cf715/"/>
      <url>/posts/519cf715/</url>
      
        <content type="html"><![CDATA[<p>代码是真的要去写才能有深刻体会</p><h1>看两个Unity的异步接口</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerator <span class="title">LoadSceneAsync</span>(<span class="params"><span class="built_in">string</span> sceneName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> YooAssets.LoadSceneAsync(sceneName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadSceneAsync</span>(<span class="params"><span class="built_in">string</span> sceneName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> handle = YooAssets.LoadSceneAsync(sceneName);</span><br><span class="line">    GameManager.Instance.StartCoroutine(handle);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上哪种是真正的异步呢? 所谓异步, 我们可以这样理解: 我在一段业务代码中, 有操作A、B、C、D, 其中操作B有可能十分耗时, 而且 A、B、C、D之间没有任何的依赖关系, 那么我们肯定是希望这段逻辑越快执行完越好.</p><p>异步的顶层要由StartCoroutine终结, 哪里调用了StartCoroutine, 哪里就是真正异步操作的入口. 以此类推 在async/await编程模型中, 哪里调用了Task.Start, 哪里才是异步真正的入口<br>UniTask中的终结是在哪里?</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2025书单</title>
      <link href="/posts/c56dc2fa/"/>
      <url>/posts/c56dc2fa/</url>
      
        <content type="html"><![CDATA[<p>《Unity3D网络游戏实战(第二版)》<br>《以日为鉴》</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnitySourceCode——C++与C#之间的通讯</title>
      <link href="/posts/21f751b8/"/>
      <url>/posts/21f751b8/</url>
      
        <content type="html"><![CDATA[<h1>Scripting家族</h1><h1>PPtr</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/BaseClasses/BaseObject.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ALLOW_AUTOLOAD_PPTR_DEREFERNCE (UNITY_EDITOR || 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PPtr</span></span><br><span class="line">&#123;</span><br><span class="line">    InstanceID  m_InstanceID;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    <span class="keyword">mutable</span> T*          m_DEBUGPtr;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">AssignObject</span><span class="params">(<span class="type">const</span> Object* o)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* <span class="title">GetTypeString</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">MightContainPPtr</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">AllowTransferOptimization</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> TransferFunction&gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">Transfer</span><span class="params">(TransferFunction&amp; transfer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assignment</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">PPtr</span><span class="params">(InstanceID instanceID)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_InstanceID = instanceID;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">        m_DEBUGPtr = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PPtr</span>(<span class="type">const</span> T* o)                               &#123; <span class="built_in">AssignObject</span>(o); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">U</span>&gt;</span><br><span class="line">    <span class="built_in">PPtr</span>&lt;T&gt;(<span class="type">const</span> PPtr&lt;U&gt;&amp;o)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_RELEASE</span></span><br><span class="line">        <span class="comment">// This is here to force a compile error in case a down cast from U to T is attempted</span></span><br><span class="line">        T* dummy = <span class="built_in">reinterpret_cast</span>&lt;U*&gt;(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">UNUSED</span>(dummy);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        m_DEBUGPtr = o.<span class="built_in">GetDEBUGPtr</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        m_InstanceID = o.<span class="built_in">GetInstanceID</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">PPtr</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">        m_DEBUGPtr = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        m_InstanceID = InstanceID_None;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> T* o)                   &#123; <span class="built_in">AssignObject</span>(o); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">U</span>&gt;</span><br><span class="line">    PPtr&amp; <span class="keyword">operator</span>=(<span class="type">const</span> PPtr&lt;U&gt;&amp; o)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_RELEASE</span></span><br><span class="line">        <span class="comment">// This is here to force a compile error in case a down cast from U to T is attempted</span></span><br><span class="line">        T* dummy = <span class="built_in">reinterpret_cast</span>&lt;U*&gt;(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">UNUSED</span>(dummy);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        m_DEBUGPtr = o.<span class="built_in">GetDEBUGPtr</span>();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        m_InstanceID = o.<span class="built_in">GetInstanceID</span>();</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetInstanceID</span><span class="params">(InstanceID instanceID)</span>      </span>&#123; m_InstanceID = instanceID; &#125;</span><br><span class="line">    <span class="function">InstanceID <span class="title">GetInstanceID</span><span class="params">()</span> <span class="type">const</span>               </span>&#123; <span class="keyword">return</span> m_InstanceID; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    <span class="function">T* <span class="title">GetDEBUGPtr</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_DEBUGPtr; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AssignObjectFromInstanceID</span><span class="params">(InstanceID instanceID, <span class="type">bool</span> threadedLoading)</span> </span>&#123; m_InstanceID = instanceID; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Comparison</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> PPtr&amp; p) <span class="type">const</span>   &#123; <span class="keyword">return</span> m_InstanceID &lt; p.m_InstanceID; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> PPtr&amp; p) <span class="type">const</span>   &#123; <span class="keyword">return</span> m_InstanceID == p.m_InstanceID; &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> PPtr&amp; p) <span class="type">const</span>   &#123; <span class="keyword">return</span> m_InstanceID != p.m_InstanceID; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MSVC gets confused whether it should use operator bool(), or operator T* with implicit</span></span><br><span class="line">    <span class="comment">// comparison to NULL. So we add explicit functions and use them instead.</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsNull</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsValid</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">T* <span class="title">ForceLoadPtr</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> T*() <span class="type">const</span>;</span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="type">const</span>;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="type">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">PtrToType</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">PtrToType</span>&lt;T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">class</span> <span class="title class_">PtrToType</span>&lt;<span class="type">const</span> T*&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> U&gt;</span></span><br><span class="line"><span class="function">T <span class="title">dynamic_pptr_cast</span><span class="params">(U* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> PtrToType&lt;T&gt;::value_type Type;</span><br><span class="line">    T castedPtr = (T)(ptr);</span><br><span class="line">    <span class="keyword">if</span> (castedPtr &amp;&amp; castedPtr-&gt;<span class="keyword">template</span> <span class="built_in">IsDerivedFrom</span>&lt;Type&gt;())</span><br><span class="line">        <span class="keyword">return</span> castedPtr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> U&gt;</span></span><br><span class="line"><span class="function">T <span class="title">dynamic_pptr_cast</span><span class="params">(<span class="type">const</span> PPtr&lt;U&gt;&amp; ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    U* o = ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dynamic_pptr_cast</span>&lt;T&gt;(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt; <span class="keyword">inline</span></span></span><br><span class="line"><span class="function">T <span class="title">dynamic_instanceID_cast</span><span class="params">(InstanceID instanceID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Object* o = <span class="built_in">PPtr</span>&lt;Object&gt;(instanceID);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dynamic_pptr_cast</span>&lt;T&gt;(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> U&gt;</span></span><br><span class="line"><span class="function">PPtr&lt;T&gt; <span class="title">assert_pptr_cast</span><span class="params">(<span class="type">const</span> PPtr&lt;U&gt;&amp; ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE</span></span><br><span class="line">    U* u = ptr;</span><br><span class="line">    <span class="built_in">Assert</span>(!(<span class="built_in">dynamic_pptr_cast</span>&lt;U*&gt;(u) == <span class="literal">NULL</span> &amp;&amp; u != <span class="literal">NULL</span>));</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">PPtr</span>&lt;T&gt;(ptr.<span class="built_in">GetInstanceID</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enables boost::mem_fn to use PPtr properly, needed for boost::bind</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T * <span class="title">get_pointer</span><span class="params">(PPtr&lt;T&gt; <span class="type">const</span> &amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">void</span> PPtr&lt;T&gt;::<span class="built_in">AssignObject</span>(<span class="type">const</span> Object* o)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">NULL</span>)</span><br><span class="line">        m_InstanceID = InstanceID_None;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        m_InstanceID = o-&gt;<span class="built_in">GetInstanceID</span>();</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(o);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line">T* PPtr&lt;T&gt;::<span class="built_in">ForceLoadPtr</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetInstanceID</span>() == InstanceID_None)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointer</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        temp = <span class="built_in">ReadObjectFromPersistentManager</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted == temp)</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line">PPtr&lt;T&gt;::<span class="keyword">operator</span> T*() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetInstanceID</span>() == InstanceID_None)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointer</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> ALLOW_AUTOLOAD_PPTR_DEREFERNCE</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        temp = <span class="built_in">ReadObjectFromPersistentManager</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted == temp)</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line">T* PPtr&lt;T&gt;::<span class="keyword">operator</span>-&gt;() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointer</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> ALLOW_AUTOLOAD_PPTR_DEREFERNCE</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        temp = <span class="built_in">ReadObjectFromPersistentManager</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ErrorString</span>(<span class="string">&quot;Dereferencing NULL PPtr!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line">T&amp; PPtr&lt;T&gt;::<span class="keyword">operator</span>*() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointer</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> ALLOW_AUTOLOAD_PPTR_DEREFERNCE</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line">        temp = <span class="built_in">ReadObjectFromPersistentManager</span>(<span class="built_in">GetInstanceID</span>());</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !UNITY_RELEASE</span></span><br><span class="line">    m_DEBUGPtr = (T*)(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> *casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ErrorString</span>(<span class="string">&quot;Dereferencing NULL PPtr!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ANALYSIS_ASSUME</span>(casted);</span><br><span class="line">        <span class="keyword">return</span> *casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> *<span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line"><span class="type">bool</span> PPtr&lt;T&gt;::<span class="built_in">IsNull</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    T* casted = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> casted == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line"><span class="type">bool</span> PPtr&lt;T&gt;::<span class="built_in">IsValid</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    T* casted = *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> casted != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt; <span class="keyword">inline</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* PPtr&lt;T&gt;::<span class="built_in">GetTypeString</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> T::<span class="built_in">GetPPtrTypeString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">TransferFunction</span>&gt; <span class="keyword">inline</span></span><br><span class="line"><span class="type">void</span> PPtr&lt;T&gt;::<span class="built_in">Transfer</span>(TransferFunction&amp; transfer)</span><br><span class="line">&#123;</span><br><span class="line">    LocalSerializedObjectIdentifier localIdentifier;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (transfer.<span class="built_in">NeedsInstanceIDRemapping</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Assert</span>(transfer.<span class="built_in">IsWriting</span>() || transfer.<span class="built_in">IsReading</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (transfer.<span class="built_in">IsReading</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localSerializedFileIndex, <span class="string">&quot;m_FileID&quot;</span>, kHideInEditorMask);</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localIdentifierInFile, <span class="string">&quot;m_PathID&quot;</span>, kHideInEditorMask);</span><br><span class="line">            <span class="built_in">LocalSerializedObjectIdentifierToInstanceID</span>(localIdentifier, m_InstanceID);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (transfer.<span class="built_in">IsWriting</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">InstanceIDToLocalSerializedObjectIdentifier</span>(m_InstanceID, localIdentifier);</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localSerializedFileIndex, <span class="string">&quot;m_FileID&quot;</span>, kHideInEditorMask);</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localIdentifierInFile, <span class="string">&quot;m_PathID&quot;</span>, kHideInEditorMask);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localSerializedFileIndex, <span class="string">&quot;m_FileID&quot;</span>, kHideInEditorMask);</span><br><span class="line">            transfer.<span class="built_in">Transfer</span>(localIdentifier.localIdentifierInFile, <span class="string">&quot;m_PathID&quot;</span>, kHideInEditorMask);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        transfer.<span class="built_in">Transfer</span>(m_InstanceID, <span class="string">&quot;m_FileID&quot;</span>, kHideInEditorMask);</span><br><span class="line">        transfer.<span class="built_in">Transfer</span>(localIdentifier.localIdentifierInFile, <span class="string">&quot;m_PathID&quot;</span>, kHideInEditorMask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T* <span class="title">PPtrToObjectDontLoadNoThreadCheck</span><span class="params">(PPtr&lt;T&gt; pptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pptr.<span class="built_in">GetInstanceID</span>() == InstanceID_None)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    Object* temp = Object::<span class="built_in">IDToPointerNoThreadCheck</span>(pptr.<span class="built_in">GetInstanceID</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUGMODE || UNITY_EDITOR</span></span><br><span class="line">    T* casted = <span class="built_in">dynamic_pptr_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="keyword">if</span> (casted == temp)</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;PPtr cast failed when dereferencing! Casting from %s to %s!&quot;</span>, temp-&gt;<span class="built_in">GetTypeName</span>(), <span class="built_in">TypeOf</span>&lt;T&gt;()-&gt;<span class="built_in">GetName</span>()), temp);</span><br><span class="line">        <span class="keyword">return</span> casted;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;T*&gt;(temp);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnitySourceCode——Coroutine</title>
      <link href="/posts/da596cf9/"/>
      <url>/posts/da596cf9/</url>
      
        <content type="html"><![CDATA[<p>翻一下这段代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WXGameCaptureProcess</span> : <span class="title">IEnumerator</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">bool</span> shareOver;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">object</span> Current</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> WaitForEndOfFrame();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">WXGameCaptureProcess</span>(<span class="params">Rect captureRect, Action&lt;<span class="built_in">string</span>&gt; callback</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DDZ_WXMINIGAME</span></span><br><span class="line">                WXCanvas.ToTempFilePath(<span class="keyword">new</span> WXToTempFilePathParam()</span><br><span class="line">                &#123;</span><br><span class="line">                    x = (<span class="built_in">int</span>)captureRect.x,</span><br><span class="line">                    y = (<span class="built_in">int</span>)(Screen.height - captureRect.y - captureRect.height),</span><br><span class="line">                    width = (<span class="built_in">int</span>)captureRect.width,</span><br><span class="line">                    height = (<span class="built_in">int</span>)captureRect.height,</span><br><span class="line">                    destWidth = (<span class="built_in">int</span>)captureRect.width,</span><br><span class="line">                    destHeight = (<span class="built_in">int</span>)captureRect.height,</span><br><span class="line">                    success = (ret) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        Debug.Log(<span class="string">&quot;Screenshot saved: &quot;</span> + ret.tempFilePath);</span><br><span class="line">                        callback?.Invoke(ret.tempFilePath);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    fail = (msg) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        callback?.Invoke(<span class="literal">null</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    complete = (msg) =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        shareOver = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">                callback?.Invoke(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> !shareOver;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                shareOver = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在Unity的MonoBehaviour中, 会获得IEnumerator的Current的类型, 然后根据Current的类型判断要执行什么处理</p><p>你问得很有针对性，来看你的问题：</p><hr><p><strong>问题简述：</strong><br>你定义了一个 <code>WXGameCaptureProcess</code> 继承自 <code>IEnumerator</code>。<br>在 Unity 协程中，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WXGameCaptureProcess</span>(<span class="params">...</span>)</span>;</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>()</span>;</span><br></pre></td></tr></table></figure><p>有什么关系？二者等价吗？它们行为有何区别？</p><hr><h2 id="1-yield-return-new-WaitForEndOfFrame">1. yield return new WaitForEndOfFrame()</h2><ul><li><strong>行为：</strong> 等待 <strong>本帧渲染</strong> 结束后，协程继续进行。</li><li><strong>效果</strong>：只“暂停”一帧，马上进入下一步代码。</li></ul><hr><h2 id="2-yield-return-new-WXGameCaptureProcess-…">2. yield return new WXGameCaptureProcess(…)</h2><p>这是个自定义的 IEnumerator，分析其实现：</p><h3 id="关键实现">关键实现</h3><ul><li><code>MoveNext</code>：只要 <code>!shareOver</code> 为真，就会在协程里不停“等待”。</li><li><code>Current</code>：每次等待，返回的对象是 <code>new WaitForEndOfFrame()</code></li><li>只有当你传入的 <code>callback</code> 的 success、fail、complete 被触发（间接导致 <code>shareOver = true</code>），<code>MoveNext</code> 返回 false，协程才开始执行下一条语句。</li></ul><h3 id="表现">表现</h3><p>这个自定义迭代器，在业务事件没完成之前（比如截图还没保存），每一帧返回 <code>WaitForEndOfFrame()</code>，<strong>让协程等待“若干帧”</strong>，直到业务事件完成。完成后协程才往下走。</p><hr><h3 id="直观说明">直观说明</h3><ul><li><p><code>yield return new WaitForEndOfFrame();</code></p><ul><li>等一帧。</li></ul></li><li><p><code>yield return new WXGameCaptureProcess(...);</code></p><ul><li><strong>其实是“每帧都 yield return new WaitForEndOfFrame()”，直到捕获（截图操作）状态 shareOver==true，才继续协程下去。等待的是一个“异步事件”的完成！</strong></li></ul></li></ul><hr><h2 id="3-是否等价？">3. 是否等价？</h2><p><strong>结论：</strong></p><ul><li><code>yield return new WXGameCaptureProcess(...)</code> <strong>绝不等价于</strong> 只 <code>yield return new WaitForEndOfFrame();</code><ul><li>前者是：<strong>等待“多帧”——每帧结尾都 yield — 直到外部异步事件结束</strong></li><li>后者是：<strong>只暂停一帧</strong></li></ul></li><li><strong>WXGameCaptureProcess</strong> 可以等待一个异步回调，比如截图、网络、动画等，适合等待“非立即完成”的业务。</li></ul><hr><h2 id="4-形式总结">4. 形式总结</h2><p>实际上，你的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WXGameCaptureProcess</span>(<span class="params">...</span>)</span>;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码示意，效果类似于：</span></span><br><span class="line"><span class="keyword">while</span> (!shareOver) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// shareOver==true 时继续协程</span></span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>()</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="【专业英文结论】">【专业英文结论】</h3><blockquote><p><code>yield return new WXGameCaptureProcess(...)</code> is <strong>not equivalent</strong> to <code>yield return new WaitForEndOfFrame();</code>. The first form will keep yielding <code>WaitForEndOfFrame</code> each frame until the async capture process is finished (<code>shareOver == true</code>), while the latter only waits for one frame.</p></blockquote><hr><p>如果你想等待一个异步操作的完成而不是只暂停一帧，这种自定义 <code>IEnumerator</code> 写法是业界常用套路。这种写法扩展性也很强。</p><hr><p>Coroutine中会持有m_Current字段, 然后通过如下的接口判断m_Current的类型<br>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UnityPrefix.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Coroutine.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Misc/AsyncOperation.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Mono/MonoBehaviour.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Mono/MonoScript.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Mono/MonoIncludes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Mono/MonoManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/GameCode/CallDelayed.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Scripting/ScriptingUtility.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/ScriptingBackend/ScriptingApi.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Scripting/ScriptingObjectWithIntPtrField.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_IPHONE_API</span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;Runtime/Input/OnScreenKeyboard.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/ScriptingBackend/ScriptingApi.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// copied from MonoBehaviour.cpp</span></span><br><span class="line"><span class="comment">// if they should be synced - blame the author not me ;-)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_COROUTINE 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_COROUTINE_LEAK 0</span></span><br><span class="line"></span><br><span class="line">Coroutine::<span class="built_in">Coroutine</span>()</span><br><span class="line">    : <span class="built_in">m_DoneRunning</span>(<span class="literal">false</span>)</span><br><span class="line">    , <span class="built_in">m_CoroutineEnumeratorGCHandle</span>()</span><br><span class="line">    , <span class="built_in">m_IsIEnumeratorCoroutine</span>(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> coroutineCounter = <span class="number">0</span>;</span><br><span class="line">    coroutineCounter++;</span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;Allocating coroutine %d --- %d : 0x%x\n&quot;</span>, <span class="keyword">this</span>, coroutineCounter, &amp;m_RefCount);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Coroutine::~<span class="built_in">Coroutine</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">Assert</span>(!m_CoroutineEnumeratorGCHandle.<span class="built_in">HasTarget</span>());</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;Deconstructor coroutine %d\n&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::SetMoveNextMethod</span><span class="params">(ScriptingMethodPtr method)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_MoveNext = method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::SetCurrentMethod</span><span class="params">(ScriptingMethodPtr method)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_Current = method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CallObjectState <span class="title">Coroutine::ContinueCoroutine</span><span class="params">(Object* o, <span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)userData;</span><br><span class="line">    <span class="built_in">Assert</span>(coroutine-&gt;m_RefCount &gt; <span class="number">0</span> &amp;&amp; coroutine-&gt;m_RefCount &lt; <span class="number">1000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((Object*)coroutine-&gt;m_Behaviour != o)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorString</span>(<span class="string">&quot;Coroutine continue failure&quot;</span>);</span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">        <span class="keyword">if</span> ((Object*)coroutine-&gt;m_Behaviour != o)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf_console</span>(<span class="string">&quot;continue Coroutine corruption %d refcount: %d behaviour: %d \n&quot;</span>, coroutine, coroutine-&gt;m_RefCount, coroutine-&gt;m_Behaviour);</span><br><span class="line">            <span class="built_in">printf_console</span>(<span class="string">&quot;continue Coroutine corruption name: %s methodname\n&quot;</span>, ((MonoBehaviour*)(o))-&gt;<span class="built_in">GetScript</span>()-&gt;<span class="built_in">GetName</span>());</span><br><span class="line">            <span class="keyword">if</span> (!coroutine-&gt;m_CoroutineMethod.<span class="built_in">IsNull</span>())</span><br><span class="line">                <span class="built_in">printf_console</span>(<span class="string">&quot;continue Coroutine methodname: %s\n&quot;</span>, <span class="built_in">scripting_method_get_name</span>(coroutine-&gt;m_CoroutineMethod));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> coroutine-&gt;<span class="built_in">Run</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CallObjectState <span class="title">Coroutine::CleanupCoroutine</span><span class="params">(<span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)userData;</span><br><span class="line">    <span class="built_in">Assert</span>(coroutine-&gt;m_RefCount &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Assert</span>(coroutine-&gt;m_RefCount &lt;= <span class="number">1000000</span>);</span><br><span class="line">    coroutine-&gt;m_RefCount--;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;decrease refcount %d - active: %d \n&quot;</span>, coroutine, coroutine-&gt;m_RefCount);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_RefCount &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line"></span><br><span class="line">    coroutine-&gt;m_DoneRunning = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;CleanupCoroutine %d\n&quot;</span>, coroutine);</span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_Behaviour &amp;&amp; <span class="built_in">GetDelayedCallManager</span>().<span class="built_in">HasDelayedCall</span>(coroutine-&gt;m_Behaviour, Coroutine::ContinueCoroutine, CompareCoroutineMethodName, coroutine))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf_console</span>(<span class="string">&quot;CORRUPTION is still in delayed call manager%d!\n&quot;</span>, coroutine-&gt;m_Behaviour);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_ContinueWhenFinished)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CleanupCoroutine</span>(coroutine-&gt;m_ContinueWhenFinished);</span><br><span class="line">        coroutine-&gt;m_ContinueWhenFinished = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_WaitingFor)</span><br><span class="line">    &#123;</span><br><span class="line">        coroutine-&gt;m_WaitingFor-&gt;m_ContinueWhenFinished = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//Set the WaitingFor variable to NULL. Otherwise it might happen that a coroutine is cleaned up because another coroutine has it set as its m_ContinueWhenFinished.</span></span><br><span class="line">        <span class="comment">//If then this coroutine is cleaned up using MonoBehaviour::StopCoroutine, it will be cleaned up again and trigger asserts</span></span><br><span class="line">        coroutine-&gt;m_WaitingFor = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    coroutine-&gt;<span class="built_in">RemoveFromList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_AsyncOperation)</span><br><span class="line">    &#123;</span><br><span class="line">        coroutine-&gt;m_AsyncOperation-&gt;<span class="built_in">SetCoroutineCallback</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        coroutine-&gt;m_AsyncOperation-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        coroutine-&gt;m_AsyncOperation = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Assert</span>(coroutine-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">HasTarget</span>());</span><br><span class="line">    coroutine-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">ReleaseAndClear</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!coroutine-&gt;m_IsReferencedByMono)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> coroutine;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE_LEAK</span></span><br><span class="line">        gCoroutineCounter--;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">return</span> kCallObjectDestroyed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::CleanupCoroutineGC</span><span class="params">(<span class="type">void</span>* userData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)userData;</span><br><span class="line">    <span class="keyword">if</span> (!coroutine-&gt;m_IsReferencedByMono)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_RefCount != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        coroutine-&gt;m_IsReferencedByMono = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ErrorIf</span>(coroutine-&gt;<span class="built_in">IsInList</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> coroutine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">printf_console</span>(<span class="string">&quot;GC free coroutine: %d\n&quot;</span>, coroutine);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE_LEAK</span></span><br><span class="line">    gCoroutineCounter--;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Coroutine::CompareCoroutineMethodName</span><span class="params">(<span class="type">void</span>* callBackUserData, <span class="type">void</span>* cancelUserdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)callBackUserData;</span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_CoroutineMethod.<span class="built_in">IsNull</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strcmp</span>(<span class="built_in">scripting_method_get_name</span>(coroutine-&gt;m_CoroutineMethod), (<span class="type">const</span> <span class="type">char</span>*)cancelUserdata) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">ScriptingObjectPtrsEqual</span><span class="params">(ScriptingObjectPtr o1, ScriptingObjectPtr o2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> ENABLE_DOTNET</span></span><br><span class="line">    <span class="keyword">return</span> WinRT::Bridge::<span class="built_in">GetUtils</span>()-&gt;<span class="built_in">CompareObjects</span>(o1, o2);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> o1 == o2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Coroutine::CompareCoroutineEnumerator</span><span class="params">(<span class="type">void</span>* callBackUserData, <span class="type">void</span>* cancelUserdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = (Coroutine*)callBackUserData;</span><br><span class="line">    <span class="keyword">if</span> (!coroutine-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">HasTarget</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    ScriptingObjectPtr* handle = (ScriptingObjectPtr*)cancelUserdata;</span><br><span class="line">    <span class="keyword">if</span> (!handle)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">ScriptingObjectPtrsEqual</span>(coroutine-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>(), *handle))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!coroutine-&gt;m_IsIEnumeratorCoroutine)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (coroutine-&gt;m_ContinueWhenFinished == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ScriptingObjectPtrsEqual</span>(coroutine-&gt;m_ContinueWhenFinished-&gt;m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>(), *handle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Coroutine::CompareCoroutineDirect</span><span class="params">(<span class="type">void</span>* callBackUserData, <span class="type">void</span>* cancelUserdata)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* callBackCoroutine = (Coroutine*)callBackUserData;</span><br><span class="line">    Coroutine* cancelCoroutine = (Coroutine*)cancelUserdata;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callBackCoroutine == cancelCoroutine)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!callBackCoroutine-&gt;m_IsIEnumeratorCoroutine)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (callBackCoroutine-&gt;m_ContinueWhenFinished == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callBackCoroutine-&gt;m_ContinueWhenFinished == cancelCoroutine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Coroutine::InvokeMoveNext</span><span class="params">(ScriptingExceptionPtr* exception)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">    <span class="function">ScriptingInvocation <span class="title">invocation</span><span class="params">(GetCoreScriptingClasses().invokeMoveNext)</span></span>;</span><br><span class="line">    invocation.<span class="built_in">AddObject</span>(m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>());</span><br><span class="line">    invocation.<span class="built_in">AddIntPtr</span>(&amp;result);</span><br><span class="line">    invocation.classContextForProfiler = m_Behaviour-&gt;<span class="built_in">GetClass</span>();</span><br><span class="line">    invocation.methodContextForProfiler = m_MoveNext;</span><br><span class="line">    invocation.objectInstanceIDContextForException = m_Behaviour-&gt;<span class="built_in">GetInstanceID</span>();</span><br><span class="line">    invocation.<span class="built_in">Invoke</span>(exception);</span><br><span class="line">    <span class="keyword">return</span> result &amp;&amp; *exception == SCRIPTING_NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">CallObjectState <span class="title">Coroutine::Run</span><span class="params">(<span class="type">bool</span> *exceptionThrown)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Assert</span>(m_RefCount != <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Assert</span>(m_Behaviour != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> DEBUG_COROUTINE</span></span><br><span class="line">    <span class="built_in">Assert</span>(!<span class="built_in">GetDelayedCallManager</span>().<span class="built_in">HasDelayedCall</span>(m_Behaviour, Coroutine::ContinueCoroutine, CompareCoroutineMethodName, <span class="keyword">this</span>));</span><br><span class="line">    <span class="keyword">if</span> (m_Behaviour == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf_console</span>(<span class="string">&quot;Coroutine error %d refcount: %d behaviour%d\n&quot;</span>, <span class="keyword">this</span>, m_RefCount, m_Behaviour);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// - Call MoveNext (This processes the function until the next yield!)</span></span><br><span class="line">    <span class="comment">// - Call Current (This returns condition when to continue the coroutine next.)</span></span><br><span class="line">    <span class="comment">//   -&gt; Queue it based on the continue condition</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Temporarily increase refcount so the object will not get destroyed during the m_MoveNext call</span></span><br><span class="line">    m_RefCount++;</span><br><span class="line">    ScriptingExceptionPtr exception = SCRIPTING_NULL;</span><br><span class="line">    <span class="type">bool</span> keepLooping = <span class="built_in">InvokeMoveNext</span>(&amp;exception);</span><br><span class="line">    <span class="built_in">Assert</span>(m_RefCount &gt; <span class="number">0</span> &amp;&amp; m_RefCount &lt;= <span class="number">10000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> coroutineWasDestroyedDuringMoveNext = m_RefCount == <span class="number">1</span>;</span><br><span class="line">    Coroutine* continueWhenFinished = m_ContinueWhenFinished;</span><br><span class="line">    <span class="comment">// Decrease temporary refcount so the object will not get destroyed during the m_MoveNext call</span></span><br><span class="line">    <span class="built_in">CleanupCoroutine</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The coroutine has been destroyed in the mean time, probably due to a call to StopAllCoroutines, stop executing further</span></span><br><span class="line">    <span class="keyword">if</span> (coroutineWasDestroyedDuringMoveNext)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Assert</span>(continueWhenFinished == <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> kCallObjectDestroyed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exceptionThrown)</span><br><span class="line">        *exceptionThrown = exception != SCRIPTING_NULL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != SCRIPTING_NULL)</span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Are we done with this coroutine?</span></span><br><span class="line">    <span class="keyword">if</span> (!keepLooping)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If there is a coroutine waiting for this one to finish Run it!</span></span><br><span class="line">        <span class="keyword">if</span> (m_ContinueWhenFinished)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Assert</span>(<span class="keyword">this</span> == m_ContinueWhenFinished-&gt;m_WaitingFor);</span><br><span class="line">            Coroutine* continueWhenFinished = m_ContinueWhenFinished;</span><br><span class="line">            m_ContinueWhenFinished-&gt;m_WaitingFor = <span class="literal">NULL</span>;</span><br><span class="line">            m_ContinueWhenFinished = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="comment">// The coroutine might have been stopped inside of the last coroutine invokation</span></span><br><span class="line">            <span class="keyword">if</span> (continueWhenFinished-&gt;m_Behaviour)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// If the continuation coroutine yields waiting for this coroutine, it must know that this coroutine is finished</span></span><br><span class="line">                m_DoneRunning = <span class="literal">true</span>;</span><br><span class="line">                continueWhenFinished-&gt;<span class="built_in">Run</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">CleanupCoroutine</span>(continueWhenFinished);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_Behaviour == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ProcessCoroutineCurrent</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> kCallObjectAlive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::ProcessCoroutineCurrent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ScriptingExceptionPtr exception = SCRIPTING_NULL;</span><br><span class="line"></span><br><span class="line">    <span class="function">ScriptingInvocation <span class="title">invocation</span><span class="params">(m_Current)</span></span>;</span><br><span class="line">    invocation.objectInstanceIDContextForException = m_Behaviour-&gt;<span class="built_in">GetInstanceID</span>();</span><br><span class="line">    invocation.classContextForProfiler = m_Behaviour-&gt;<span class="built_in">GetClass</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !ENABLE_DOTNET</span></span><br><span class="line">    ScriptingClassPtr methodKlass = <span class="built_in">scripting_method_get_class</span>(m_Current);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_valuetype</span>(methodKlass))</span><br><span class="line">        invocation.<span class="built_in">SetTarget</span>(<span class="built_in">scripting_object_unbox</span>(m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>()));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        invocation.<span class="built_in">SetTarget</span>(m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ScriptingObjectPtr monoWait = invocation.<span class="built_in">Invoke</span>(&amp;exception);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Assert</span>(m_RefCount &gt; <span class="number">0</span> &amp;&amp; m_RefCount &lt;= <span class="number">10000000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (exception != SCRIPTING_NULL)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (monoWait == SCRIPTING_NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line">        <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">HandleIEnumerableCurrentReturnValue</span>(monoWait);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Coroutine::HandleIEnumerableCurrentReturnValue</span><span class="params">(ScriptingObjectPtr monoWait)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AsyncOperation* async = <span class="literal">NULL</span>;</span><br><span class="line">    ScriptingClassPtr waitClass = <span class="built_in">scripting_object_get_class</span>(monoWait);</span><br><span class="line">    <span class="type">const</span> CommonScriptingClasses&amp; classes = <span class="built_in">GetMonoManager</span>().<span class="built_in">GetCommonClasses</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue the coroutine in &#x27;wait&#x27; seconds</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().waitForSeconds))</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line"></span><br><span class="line">        ScriptingWaitForSeconds wait;</span><br><span class="line">        <span class="built_in">MarshallManagedStructIntoNative</span>(monoWait, &amp;wait);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsNAN</span>(wait.m_Seconds))</span><br><span class="line">            <span class="built_in">ErrorString</span>(<span class="string">&quot;float.NaN has been passed into WaitForSeconds which will result in an infinite wait time.&quot;</span>);</span><br><span class="line">        <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, wait.m_Seconds, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue the coroutine on the next fixed update</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().waitForFixedUpdate))</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line">        <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunFixedFrameRate);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue the coroutine at the end of frame</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().waitForEndOfFrame))</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line">        <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">-1.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kEndOfFrame);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, classes.iEnumerator))</span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">        <span class="keyword">if</span> (m_CoroutineEnumeratorGCHandle.<span class="built_in">Resolve</span>() == monoWait)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">char</span>* className = <span class="built_in">scripting_class_get_name</span>(waitClass);</span><br><span class="line">            <span class="built_in">WarningStringMsg</span>(<span class="string">&quot;IEnumerator class %s is returning this (itself) in %s.Current, which can lead to infinite recursion.&quot;</span>, className, className);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        m_RefCount++;</span><br><span class="line"></span><br><span class="line">        Coroutine* waitForCoroutine;</span><br><span class="line">        <span class="keyword">if</span> (!m_Behaviour-&gt;<span class="built_in">TryCreateAndRunCoroutine</span>(monoWait, <span class="literal">NULL</span>, &amp;waitForCoroutine))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// coroutine has already finished (empty enumerator block); just reschedulle current one..</span></span><br><span class="line">        <span class="keyword">if</span> (waitForCoroutine == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">AssertMsg</span>(!waitForCoroutine-&gt;m_DoneRunning, <span class="string">&quot;Coroutine initialized incorrectly&quot;</span>);</span><br><span class="line">        <span class="built_in">AssertMsg</span>(waitForCoroutine-&gt;m_ContinueWhenFinished == <span class="literal">NULL</span>, <span class="string">&quot;Coroutine initialized incorrectly&quot;</span>);</span><br><span class="line"></span><br><span class="line">        waitForCoroutine-&gt;m_IsIEnumeratorCoroutine = <span class="literal">true</span>;</span><br><span class="line">        waitForCoroutine-&gt;m_ContinueWhenFinished = <span class="keyword">this</span>;</span><br><span class="line">        m_IsIEnumeratorCoroutine = <span class="literal">true</span>;</span><br><span class="line">        m_WaitingFor = waitForCoroutine;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue after another coroutine is finished</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().coroutine))</span><br><span class="line">    &#123;</span><br><span class="line">        Coroutine* waitForCoroutine;</span><br><span class="line">        <span class="built_in">MarshallManagedStructIntoNative</span>(monoWait, &amp;waitForCoroutine);</span><br><span class="line">        <span class="keyword">if</span> (waitForCoroutine-&gt;m_DoneRunning)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// continue executing.</span></span><br><span class="line">            <span class="built_in">ContinueCoroutine</span>(m_Behaviour, <span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (waitForCoroutine-&gt;m_ContinueWhenFinished != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">LogStringObject</span>(<span class="string">&quot;Another coroutine is already waiting for this coroutine!\nCurrently only one coroutine can wait for another coroutine!&quot;</span>, m_Behaviour);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_RefCount++;</span><br><span class="line">        waitForCoroutine-&gt;m_ContinueWhenFinished = <span class="keyword">this</span>;</span><br><span class="line">        m_WaitingFor = waitForCoroutine;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">scripting_class_is_subclass_of</span>(waitClass, <span class="built_in">GetCoreScriptingClasses</span>().asyncOperation)) &amp;&amp; (async = <span class="built_in">ScriptingObjectWithIntPtrField</span>&lt;AsyncOperation&gt;(monoWait).<span class="built_in">GetPtr</span>()) != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_RefCount++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (async-&gt;<span class="built_in">IsDone</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use AysncOperation ContinueCoroutine - default path</span></span><br><span class="line">        <span class="keyword">if</span> (async-&gt;<span class="built_in">HasCoroutineCallback</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">////@<span class="doctag">TODO:</span> Throw exception?</span></span><br><span class="line">            <span class="built_in">ErrorString</span>(<span class="string">&quot;This asynchronous operation is already being yielded from another coroutine. An asynchronous operation can only be yielded once.&quot;</span>);</span><br><span class="line">            <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        async-&gt;<span class="built_in">SetCoroutineCallback</span>(ContinueCoroutine, m_Behaviour, <span class="keyword">this</span>, CleanupCoroutine);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_AsyncOperation != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_AsyncOperation-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_AsyncOperation = async;</span><br><span class="line">        m_AsyncOperation-&gt;<span class="built_in">AddRef</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Continue the coroutine on the next dynamic frame update</span></span><br><span class="line">    m_RefCount++;</span><br><span class="line">    <span class="built_in">CallDelayed</span>(ContinueCoroutine, m_Behaviour, <span class="number">0.0F</span>, <span class="keyword">this</span>, <span class="number">0.0F</span>, CleanupCoroutine, DelayedCallManager::kRunDynamicFrameRate | DelayedCallManager::kWaitForNextFrame);</span><br><span class="line">    <span class="comment">//Ext_MarshalMap_Release_ScriptingObject(monoWait);//RH TODO : RELEASE THE MONOWAIT OBJECTS SOMEWHERE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C++到C#的理解有些难度, 我们可以实现一个纯C#的协程:</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——关于工作规范</title>
      <link href="/posts/fcb99509/"/>
      <url>/posts/fcb99509/</url>
      
        <content type="html"><![CDATA[<p>在英文的开发和测试流程中，<strong>描述bug复现路径或原因，常用的专业名词主要有以下几种：</strong></p><hr><h3 id="1-Reproduction-Steps-Steps-to-Reproduce">1. <strong>Reproduction Steps / Steps to Reproduce</strong></h3><ul><li><strong>解释</strong>：最常用的术语，意为“复现步骤”，即详细记录让bug发生的具体操作或条件。</li><li><strong>实例</strong>：<ul><li><em>“Please provide detailed <strong>reproduction steps</strong> so we can investigate the issue.”</em></li><li><em>“Steps to reproduce: 1. Open menu. 2. Click Save. 3. Observe crash.”</em></li></ul></li></ul><h3 id="2-Reproducibility">2. <strong>Reproducibility</strong></h3><ul><li><strong>解释</strong>：指该bug能否稳定或偶然被复现的特性。有时也写成repro rate（复现概率）。</li><li><strong>实例</strong>：<ul><li><em>“The reproducibility of this bug is 100%.”</em></li><li><em>“Please indicate the reproducibility in your bug report.”</em></li></ul></li></ul><h3 id="3-Root-Cause">3. <strong>Root Cause</strong></h3><ul><li><strong>解释</strong>：表示bug的根本原因。通常用于描述究竟是哪个逻辑/代码/条件导致此bug产生。</li><li><strong>实例</strong>：<ul><li><em>“After analysis, the <strong>root cause</strong> of the issue was found to be a missing null check.”</em></li></ul></li></ul><h3 id="4-Issue-Trigger-Trigger-Condition">4. <strong>Issue Trigger/Trigger Condition</strong></h3><ul><li><strong>解释</strong>：有时候会用trigger（触发条件）描述能导致这个问题的具体条件或动作。</li><li><strong>实例</strong>：<ul><li><em>“The trigger for this issue is clicking the submit button twice.”</em></li></ul></li></ul><h3 id="5-Repro-Case-Test-Case">5. <strong>Repro Case / Test Case</strong></h3><ul><li><strong>解释</strong>：&quot;Repro case&quot;指的是能精确复现bug的测试用例，在自动化或详细调查时使用。<ul><li><em>“I’ve attached a minimal repro case for this bug.”</em></li></ul></li></ul><hr><h2 id="总结推荐">总结推荐</h2><p><strong>你如果指的是“复现路径/步骤”，最常用的专业词汇就是：</strong></p><ul><li><strong>Steps to Reproduce</strong></li><li><strong>Reproduction Steps</strong></li></ul><p><strong>你如果强调“原因”，最标准的术语是：</strong></p><ul><li><strong>Root Cause</strong></li></ul><hr><h2 id="参考格式（英文Bug报告标准模版）">参考格式（英文Bug报告标准模版）</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Summary: [brief bug description]</span><br><span class="line"></span><br><span class="line">Steps to Reproduce:</span><br><span class="line">1. ...</span><br><span class="line">2. ...</span><br><span class="line">3. ...</span><br><span class="line"></span><br><span class="line">Expected Result: ...</span><br><span class="line">Actual Result: ...</span><br><span class="line"></span><br><span class="line">Reproducibility: (Always/Sometimes/Random)</span><br><span class="line">Root Cause: [if known]</span><br></pre></td></tr></table></figure><hr><p>如要表达&quot;复现路径&quot;，就用__Steps to Reproduce__或__Reproduction Steps__；<br>如要表达&quot;原因&quot;，用__Root Cause__。</p><hr><p>补充：<br>更口语一点，也可说*“how to reproduce” this bug*。<br>但<strong>正式术语</strong>永远是 <em>Steps to Reproduce</em>。</p><p>很好的问题！</p><p>在英文开发及测试流程中，**“解决方案”“如何解决这个问题”**的专业术语和表达方式如下：</p><hr><h2 id="1-Solution">1. <strong>Solution</strong></h2><ul><li>最直接、最广泛的术语，意为“解决方案”。</li><li>常用表达：<ul><li><em>“Proposed solution:”</em></li><li><em>“The solution is to…”</em></li></ul></li></ul><h2 id="2-Fix-Bug-Fix">2. <strong>Fix / Bug Fix</strong></h2><ul><li>更偏工程实践，用于指“修复措施”或具体的“修复点”。</li><li>常用表达：<ul><li><em>“The fix for this issue is…”</em></li><li><em>“Bug fix implemented by…”</em></li></ul></li></ul><h2 id="3-Resolution">3. <strong>Resolution</strong></h2><ul><li>一般用于bug状态流转（比如Jira、Bugzilla），表示“最终解决方式”或“已解决”。</li><li>常用表达：<ul><li><em>“Resolution: Fixed”</em></li><li><em>“Resolution: Won’t Fix”</em></li></ul></li></ul><h2 id="4-Remediation">4. <strong>Remediation</strong></h2><ul><li>偏正式、用于安全领域或大公司的报告，指“补救措施”或“缓解办法”。</li><li>常用表达：<ul><li><em>“Recommended remediation:”</em></li></ul></li></ul><h2 id="5-Mitigation">5. <strong>Mitigation</strong></h2><ul><li>如果不是彻底修复，而是降低影响，叫“缓解措施”。</li><li>常用表达：<ul><li><em>“Mitigation step:”</em></li><li><em>“Mitigation: Limit the input size to 256 characters.”</em></li></ul></li></ul><h2 id="6-Workaround">6. <strong>Workaround</strong></h2><ul><li>如果还没修好，但可以临时规避，用“临时解决办法”。</li><li>常用表达：<ul><li><em>“Workaround: Restart the application.”</em></li></ul></li></ul><hr><h2 id="常用专业表达">常用专业表达</h2><ul><li><strong>How to solve this issue?</strong></li><li><strong>The solution to this problem is…</strong></li><li><strong>Resolution:</strong> (在bug报告表单上)</li><li><strong>Proposed fix:</strong> 或 <strong>Fix:</strong> （开发者描述修复思路）</li><li><strong>Remediation:</strong> (正式或安全相关写法)</li><li><strong>Mitigation:</strong> (只能缓解，不能根治时)</li><li><strong>Workaround:</strong> (临时办法)</li></ul><hr><h2 id="典型Bug-Report模板片段（英语专业表达）">典型Bug Report模板片段（英语专业表达）</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Issue Summary: [description of the problem]</span><br><span class="line"></span><br><span class="line">Steps to Reproduce: [how to trigger the bug]</span><br><span class="line"></span><br><span class="line">Expected Result: [what should happen]</span><br><span class="line">Actual Result: [what happens]</span><br><span class="line">Root Cause: [why it happens]</span><br><span class="line"></span><br><span class="line">Solution / Fix / Resolution:</span><br><span class="line">- [How to fix / what code change / what configuration to adjust / etc.]</span><br></pre></td></tr></table></figure><hr><h2 id="总结">总结</h2><h3 id="你问“解决方案-如何解决这个问题”，专业术语可以用：">你问“解决方案/如何解决这个问题”，专业术语可以用：</h3><ul><li><strong>Solution</strong></li><li><strong>Fix</strong></li><li><strong>Resolution</strong></li><li><strong>Remediation</strong></li><li>（如果是临时措施，则用 Mitigation 或 Workaround）</li></ul><hr><p><strong>最常见的表达：</strong></p><blockquote><p><strong>Solution:</strong><br><strong>Proposed Fix:</strong><br><strong>Resolution:</strong></p></blockquote><hr><p>如果需要写code review、bug报告、提交日志，建议用这些标准词汇。<br>如要具体场景举例或更深入用法，可以继续问！</p><h1>复现的英文为reproduce</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RPG游戏开发记录(五)：接入YooAsset</title>
      <link href="/posts/564f2f1d/"/>
      <url>/posts/564f2f1d/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#中的序列化</title>
      <link href="/posts/57ac4e9b/"/>
      <url>/posts/57ac4e9b/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>作家们</title>
      <link href="/posts/2375413b/"/>
      <url>/posts/2375413b/</url>
      
        <content type="html"><![CDATA[<p>阿瑟克拉克 《与罗摩相会》</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——关于拖延与生活的充实感</title>
      <link href="/posts/360942ff/"/>
      <url>/posts/360942ff/</url>
      
        <content type="html"><![CDATA[<h1>不想洗澡</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——是要过程还是要结果</title>
      <link href="/posts/8518d869/"/>
      <url>/posts/8518d869/</url>
      
        <content type="html"><![CDATA[<p>要做一个transform从某点移动到某点的效果, 两种方式, 第一种在Update里面每帧去更新位置, 第二种使用DoTween, 给一个起始点, 给一个终点就完事了.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityEditorUITookit开发</title>
      <link href="/posts/7c88a7b8/"/>
      <url>/posts/7c88a7b8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> UnityEditor </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityEditorIMGUI开发</title>
      <link href="/posts/7f55a4b3/"/>
      <url>/posts/7f55a4b3/</url>
      
        <content type="html"><![CDATA[<h1>何为IMGUI</h1><p>IMGUI即Immediate Mode GUI 随着Unity的版本更新, Unity官方逐渐抛弃IMGUI, 转用UITookit</p><h1>一些疑问</h1><h1>1. Editor GUI（OnGUI）模式</h1><p>Unity 的 Editor 扩展（EditorWindow、Editor、CustomInspector 等）使用的是<strong>Immediate Mode GUI</strong>，即 IMGUI。</p><ul><li>在 IMGUI（OnGUI）里，每次要显示控件都必须重新绘制一遍，所以 _textArea = GUILayout.TextArea(_textArea); 这种写法是<strong>必要的</strong>，也是推荐的。</li><li>只要你需要文本输入框能保存、显示、修改文本，就必须把每帧 OnGUI 返回的最新字符串赋值回来，否者控件无法响应用户输入。</li><li>OnGUI 并不是像 Update 那样只做逻辑运算，它是“每帧重画+同步最新值”的机制。</li></ul><p><strong>这个流程虽然“每帧赋值”，但实际上是：</strong></p><ul><li>用户输入 → 控件更新，控件的内容通过 TextArea 的返回值传递出来。</li><li>你用一个变量保存起来，下次再传进去，循环往复。</li></ul><p>实际上，这样的“赋值”并不是真正“每帧都做了无用功”，它不涉及复杂逻辑，只是保证数据同步，很轻量。</p><hr><h1>2. UGUI（UnityEngine.UI）模式</h1><p>UGUI 使用的是<strong>Retained Mode GUI</strong>，即“保持式 GUI”。</p><ul><li>UGUI（比如 InputField）是 GameObject，上面挂着脚本组件（InputField、Text 等），值都是挂在对象内部，“实时绑定、事件驱动”，只有当用户输入发生变化时才会更新内部值。</li><li>你<strong>不需要每帧赋值 InputField.text</strong>，通常只在初始化或特定逻辑中赋值，或者通过事件（onValueChanged）处理输入变化。</li></ul><p>例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> InputField input;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    input.onValueChanged.AddListener(OnInputChanged);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnInputChanged</span>(<span class="params"><span class="built_in">string</span> newText</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 这里只在用户输入改变时触发一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每帧 Update 时 <strong>并不需要 assign</strong>。</p><hr><h2 id="3-为什么-Editor-要这样写？">3. 为什么 Editor 要这样写？</h2><p>因为 IMGUI 的机制只能你自己手动接管“可视控件内容”和“你的变量”，<br>每帧同步其实只是“状态同步”，并不是做大量冗余逻辑。所以<strong>IMGUI风格就该每帧赋值；UGUI则用事件驱动。</strong></p><hr><h2 id="4-有没有“更优雅”的写法？">4. 有没有“更优雅”的写法？</h2><ul><li>在 Editor .OnGUI，没有更优雅的方案，这就是官方推荐用法（<strong>赋值其实就1条指令，性能压力很小</strong>）。</li><li>如果你只想提高代码“观感”，可以包装一层函数，但底层逻辑还是要你管数据同步。</li><li>UGUI、EditorGUILayout、Runtime GUI，没有更优雅方案，因为机制不同。</li></ul><hr><h2 id="结论">结论</h2><ul><li><strong>Editor IMGUI 就要每帧赋值，这是机制要求。</strong></li><li><strong>UGUI/InputField等只在需要时赋值，不必每帧。</strong></li><li><strong>赋值本身只是同步文本状态，不是无用功，也不影响性能。</strong></li></ul><hr><h3 id="延伸阅读">延伸阅读</h3><p>官方说明：<br><a href="https://docs.unity3d.com/Manual/UI-system-compare.html">IMGUI Vs Retained Mode</a><br><a href="https://docs.unity3d.com/ScriptReference/GUILayout.TextArea.html">Editor scripting: Immediate/Retained GUI</a></p><hr><p><strong>简明一句话：IMGUI 每帧赋值是必要的，就是它的机制设计；UGUI只在需要转移数据时才赋值，不是每帧。</strong></p><h1>GUI都有哪些控件</h1><ul><li>Button 在用户点击按钮**（按下并抬起）**时，GUILayout.Button 返回 true</li><li>RepeatButton 在用户按住按钮时，GUILayout.RepeatButton 每帧都返回 true。</li><li>Label</li><li>TextArea</li><li>Toggle</li><li>Box</li></ul><h1>GUIStyleState</h1><h1>GUIContent</h1><p>看一下源码就可以发现, 当我们调用<code>GUI.Label(&quot;Hello&quot;)</code>这样的接口时, GUI内部都是将传入的字符串专成一个GUIContent. 这是一种便捷的写法</p><p>GUIContent决定渲染什么<br>GUIStyle决定如何渲染</p><h1>GUIStyle</h1><p>Style</p><p>有一些代表状态的字段 这些状态是给固定的控件使用的.</p><ul><li>active Button</li><li>onHover</li></ul><p>GUIStyle像是一个上下文, 或者状态机里面的Blackboard, 所有的UI控件, 能够呈现的样式, GUIStyle中的字段全部包含, 一个UI控件能表现的效果所需要的字段, 只是GUIStyle的子集.</p><p>比如GUI.Label</p><h1>布局对齐有两种范畴</h1><p>第一是一个组件内 比如Box组件内部的Text和Icon 使用GUIStyle的alignment来对齐, 第二是整个Box组件在窗口中的对齐方式, 使用GUILayout.FlexibleSpace() + GUILayout.BeginHorizontal()来实现布局</p><h1>GUI、EditorGUI、GUILayout、EditorGUILayout、EditorGUIUtility、GUIUtility</h1><p>GUI附带的还有GUIGroup、GUIStyle等 EditorGUI好像没有?<br>在UnityEditor开发中下面这些类型都是可以用的<br><a href="https://docs.unity3d.com/ScriptReference/GUI.html">https://docs.unity3d.com/ScriptReference/GUI.html</a><br><a href="https://docs.unity3d.com/ScriptReference/GUIContent.html">https://docs.unity3d.com/ScriptReference/GUIContent.html</a><br><a href="https://docs.unity3d.com/ScriptReference/GUISkin.html">https://docs.unity3d.com/ScriptReference/GUISkin.html</a><br><a href="https://docs.unity3d.com/ScriptReference/GUIStyle.html">https://docs.unity3d.com/ScriptReference/GUIStyle.html</a><br><a href="https://docs.unity3d.com/ScriptReference/EditorGUI.html">https://docs.unity3d.com/ScriptReference/EditorGUI.html</a><br><a href="https://docs.unity3d.com/ScriptReference/EditorStyles.html">https://docs.unity3d.com/ScriptReference/EditorStyles.html</a></p><h1>EditorToolBar</h1>]]></content>
      
      
      <categories>
          
          <category> UnityEditor </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityEditor下异步的设计</title>
      <link href="/posts/1302a241/"/>
      <url>/posts/1302a241/</url>
      
        <content type="html"><![CDATA[<p>参考框架: FigmaConvertToUnity、FindReference2、I2</p><p>Editor模式下没办法使用MonoBehaviour那套协程来实现异步, I2用了点奇技淫巧, 在需要执行异步的时候, 在场景上挂载一个Mono的脚本, 用这个Mono脚本驱动协程的执行</p><h1>FR2</h1><p>使用的是伪异步, 在EditorUpdate里面做</p><h1>Figma插件</h1><p>这个用到的是C#的Task, 因为它里面的一些异步操作都是向网络请求, 下载数据, 不是操作Unity里面的一些东西, 所以可以放心放到别的线程里面去做.</p>]]></content>
      
      
      <categories>
          
          <category> UnityEditor </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity插件合集</title>
      <link href="/posts/3248703d/"/>
      <url>/posts/3248703d/</url>
      
        <content type="html"><![CDATA[<p><a href="https://assetstore.unity.com/packages/tools/utilities/vfolders-2-255470">vFolders 2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity渲染合集</title>
      <link href="/posts/b20b7f63/"/>
      <url>/posts/b20b7f63/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——日本经济洞察</title>
      <link href="/posts/1d74c8db/"/>
      <url>/posts/1d74c8db/</url>
      
        <content type="html"><![CDATA[<p>今天和同事交流的时候, 讨论到了渲染岗位, 听同事答疑解惑说 做渲染的工作就是 你得知道真实的光、水在物理上的表达, 然后你还能知道怎么造个假的出来, 以假乱真, 作为一个程序员, 除了要具备基本的计算机知识, 竟然还要对物理有深刻的理解,<br>日本在经济泡沫破碎之后推出的乡村振兴计划, 在乡村大搞基建, 让建筑类专业很吃香, 可是这轮乡村振兴只持续了七年不到, 那些高考完大学报志愿的人在看到土木专业就业前景时选择报名的 估计怎么也想不到 毕了业之后已经赶不上好的行情了, 两者好像有什么共同点?</p><h1>1985年广场协议</h1><p>日本经济泡沫破裂发生在20世纪90年代, 自1975年石油危机之后日本进入高速发展.</p><h1>日本“窗边族”文化</h1><p>日本社会价值观与欧美不同, 企业是终生雇佣制度, 企业对于员工来说是第二个家, 因此企业裁员倒闭 不被日本主流价值观所接受</p><h1>日本政府为什么要保老员工 而放弃刚毕业大学生</h1><p>因为老员工身上背负着巨额的房贷, 如果让老员工失业, 银行将有大量的坏账, 现在企业端已经有太多爆雷了, 因此不能再让居民端出现问题, 否则日本银行业将尸骨无存</p><h1>住专公司问题</h1><h1>基于日本的历史 推测东大的历史轨迹 机遇在哪里? 以后的社会会是怎样的社会?</h1><h1>覆巢之下 安有完卵</h1><p>考公热的问题</p><h1>历史循环</h1><h1>参考资料</h1><p><a href="https://weread.qq.com/web/reader/77d32440813aba4e2g01644a">以日为鉴</a><br><a href="">时势</a><br><a href="">大衰退 经济学圣杯</a></p>]]></content>
      
      
      <categories>
          
          <category> 迷思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——工作迷思</title>
      <link href="/posts/d649707a/"/>
      <url>/posts/d649707a/</url>
      
        <content type="html"><![CDATA[<h1>对近期工作的反思</h1><p>Figma Convert Unity插件, 明知道有说明文档, 却就是不看, 或者说到手一个插件或者某一个Unity库, 因为是自己不属于的领域, 就算没有说明文档, 也要先尽量去找说明文档, 而不是先去看代码</p><p>整个流程是<br>先看说明文档-&gt;根据说明文档实操-&gt;根据操作的流程以这条线为脉络看代码-&gt;抽象这个库的设计思路和架构-&gt;思考化为己用、考虑如何扩展.</p><p>这个流程不能变, 不论是在任何情况下都是这样, 要做的是要提高自己阅读文档、梳理代码的速度, 指导方针来自于《程序员超强大脑这本书》, 如果时间不紧急的话可以通过画UML图和时序图的方式熟悉代码, 如果时间紧急, 需要找一个更高效的方法.</p><h1>行动方针</h1><p>如果一个插件有说明文档, 先好好地看一遍说明文档, 不要一上来先看代码, 避免重复造轮子, 想要装逼, 占有欲很强, 希望自己修改过的代码就完全变成自己的. 这种思想不可取, 但目前我还没有找到能说服我的新思想.</p><h1>如何保持好奇心</h1><p>在工作中遇到不属于自己的bug或者问题时, 又没有阻碍自己的进程</p><p>或者在看Log的时候, 发现被打了两次</p><h1>如何看Log</h1><p>不要觉得Log多, 出现问题的时候这些Log能帮你<br>看的不只是自己打的Log, 别人打的Log也会帮助你<br>每条Log中的每个数据都有其含义<br>通过看Log排查bug就像是当侦探 拼凑线索 还原案发现场.</p><h1>以微信营销平台上的配置为例子</h1><p>在获得新角色的时候, 会在本地截图, 不会用营销平台上配置的图片, 因此需要和后台定义一个标识, 当这个<br>但是由于config是引用类型, 如果一个玩家在一个Session内多次触发获得角色的分享, 那么在第一次分享之后, 这套配置中的图片就会被写入并覆盖, 导致和后端定义的标识被破坏了, 新的角色截图也不会被写入</p><h1>为什么总是觉得 Tuyoo这边的代码写得很屎</h1><h1>面对很屎的代码 我该怎么做? 不管他嘛?</h1><h1>思考地主牌桌可以用哪些设计模式, 一方面是一直新增的新牌桌玩法, 一方面是在牌桌中塞入新的小功能, 我觉得, 肯定不能把这么多小功能全都写到一个个牌桌类里面, 因为新牌桌是要从老牌桌里面复制出来的, 这些小功能又反反复复上线和下线. 因此会在牌桌里面产生大量的垃圾代码, 该怎么样才能避免这种情况呢?</h1><p>从参与牌桌的几个成员来看, 分析一下各自的职责是什么</p><p>预制体层</p><p>预制体挂载的UI脚本</p><p>牌桌对应的Mgr层</p><h1>协议请求和页面打开的逻辑</h1><p>有些协议 隐含着请求该协议 就要打开页面的逻辑 但是在一些场景下 请求该协议要求不打开页面和打开页面并存 如何设计呢?</p><h1>资源从一个文件夹移动到另外一个文件夹 应该把这个成本弄的高一点, 不能说拖就拖了</h1>]]></content>
      
      
      <categories>
          
          <category> 迷思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UnitySourceCode——bindings</title>
      <link href="/posts/958d72fd/"/>
      <url>/posts/958d72fd/</url>
      
        <content type="html"><![CDATA[<p>Unity中有一种<code>.bindings </code>格式的文件, 这类文件经过某种处理会转换为C#文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line">C++RAW</span><br><span class="line"></span><br><span class="line">#include &quot;UnityPrefix.h&quot;</span><br><span class="line">#include &quot;Configuration/UnityConfigure.h&quot;</span><br><span class="line">#include &quot;Runtime/Mono/MonoBehaviour.h&quot;</span><br><span class="line">#include &quot;Runtime/UI/Canvas.h&quot;</span><br><span class="line">#include &quot;Runtime/UI/UIStructs.h&quot;</span><br><span class="line">#include &quot;Runtime/UI/BatchGenerator.h&quot;</span><br><span class="line"></span><br><span class="line">#if ENABLE_PROFILER</span><br><span class="line">#include &quot;Modules/Profiler/Public/ProfilerImpl.h&quot;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">CSRAW</span><br><span class="line">using System;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using Object = UnityEngine.Object;</span><br><span class="line"></span><br><span class="line">namespace UnityEngine</span><br><span class="line">&#123;</span><br><span class="line">    ENUM RenderMode</span><br><span class="line">        ScreenSpaceOverlay = 0,</span><br><span class="line">        ScreenSpaceCamera = 1,</span><br><span class="line">        WorldSpace = 2</span><br><span class="line">    END</span><br><span class="line"></span><br><span class="line">    [Flags]</span><br><span class="line">    ENUM AdditionalCanvasShaderChannels</span><br><span class="line">        None = 0,</span><br><span class="line">        TexCoord1 = 1 &lt;&lt; 0,</span><br><span class="line">        TexCoord2 = 1 &lt;&lt; 1,</span><br><span class="line">        TexCoord3 = 1 &lt;&lt; 2,</span><br><span class="line">        Normal = 1 &lt;&lt; 3,</span><br><span class="line">        Tangent = 1 &lt;&lt; 4,</span><br><span class="line">    END</span><br><span class="line"></span><br><span class="line">    // CanvasRenderer is the C++ rendering backend for the UI system.</span><br><span class="line">    [RequireComponent(typeof(RectTransform))]</span><br><span class="line">    [NativeClass(&quot;UI::Canvas&quot;)]</span><br><span class="line">    CLASS Canvas : Behaviour</span><br><span class="line"></span><br><span class="line">        AUTO_PROP RenderMode renderMode GetRenderMode SetRenderMode</span><br><span class="line">        AUTO_PROP bool isRootCanvas GetIsRootCanvas</span><br><span class="line">        AUTO_PTR_PROP Camera worldCamera GetCamera SetCamera</span><br><span class="line">        AUTO_PROP Rect pixelRect GetPixelRect</span><br><span class="line">        AUTO_PROP float scaleFactor GetScaleFactor SetScaleFactor</span><br><span class="line">        AUTO_PROP float referencePixelsPerUnit GetReferencePixelsPerUnit SetReferencePixelsPerUnit</span><br><span class="line">        AUTO_PROP bool overridePixelPerfect GetOverridePixelPerfect SetOverridePixelPerfect</span><br><span class="line">        AUTO_PROP bool pixelPerfect GetPixelPerfect SetPixelPerfect</span><br><span class="line">        AUTO_PROP float planeDistance GetPlaneDistance SetPlaneDistance</span><br><span class="line"></span><br><span class="line">        AUTO_PROP int renderOrder GetRenderOrder</span><br><span class="line"></span><br><span class="line">        AUTO_PROP bool overrideSorting GetOverrideSorting SetOverrideSorting</span><br><span class="line">        AUTO_PROP int sortingOrder GetSortingOrder SetSortingOrder</span><br><span class="line">        AUTO_PROP int targetDisplay GetTargetDisplay SetTargetDisplay</span><br><span class="line"></span><br><span class="line">        OBSOLETE warning Setting normalizedSize via a int is not supported. Please use normalizedSortingGridSize</span><br><span class="line">        AUTO_PROP int sortingGridNormalizedSize GetSortingBucketNormalizedSize SetSortingBucketNormalizedSize</span><br><span class="line"></span><br><span class="line">        AUTO_PROP float normalizedSortingGridSize GetSortingBucketNormalizedSize SetSortingBucketNormalizedSize</span><br><span class="line"></span><br><span class="line">        AUTO_PROP int sortingLayerID GetSortingLayerID SetSortingLayerID</span><br><span class="line">        AUTO_PROP int cachedSortingLayerValue GetCachedSortingLayerValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AUTO_PROP AdditionalCanvasShaderChannels additionalShaderChannels GetAdditionalShaderChannels SetAdditionalShaderChannels</span><br><span class="line"></span><br><span class="line">        CUSTOM_PROP string sortingLayerName</span><br><span class="line">        &#123;</span><br><span class="line">            return scripting_string_new(self-&gt;GetSortingLayerName());</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            self-&gt;SetSortingLayerName(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM_PROP Canvas rootCanvas</span><br><span class="line">        &#123;</span><br><span class="line">            UI::Canvas* root = self-&gt;GetRootCanvas();</span><br><span class="line">            return Scripting::ScriptingWrapperFor(root == NULL ? self : root);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM static Material GetDefaultCanvasMaterial()</span><br><span class="line">        &#123;</span><br><span class="line">            return Scripting::ScriptingWrapperFor(UI::GetDefaultUIMaterial());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM static Material GetETC1SupportedCanvasMaterial()</span><br><span class="line">        &#123;</span><br><span class="line">            return Scripting::ScriptingWrapperFor(UI::GetETC1SupportedCanvasMaterial());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        OBSOLETE warning Shared default material now used for text and general UI elements, call Canvas.GetDefaultCanvasMaterial()</span><br><span class="line">        CUSTOM static Material GetDefaultCanvasTextMaterial()</span><br><span class="line">        &#123;</span><br><span class="line">            return Scripting::ScriptingWrapperFor(UI::GetDefaultUIMaterial());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CSRAW</span><br><span class="line">        public delegate void WillRenderCanvases();</span><br><span class="line">        public static event WillRenderCanvases willRenderCanvases;</span><br><span class="line">        [RequiredByNativeCode]</span><br><span class="line">        private static void SendWillRenderCanvases() &#123; if (willRenderCanvases != null) willRenderCanvases(); &#125;</span><br><span class="line">        public static void ForceUpdateCanvases() &#123; SendWillRenderCanvases(); &#125;</span><br><span class="line">    END</span><br><span class="line"></span><br><span class="line">    CLASS UISystemProfilerApi</span><br><span class="line">        C++RAW</span><br><span class="line">        enum SampleType &#123; Layout, Render &#125;;</span><br><span class="line">        ENUM SampleType</span><br><span class="line">            Layout,</span><br><span class="line">            Render,</span><br><span class="line">        END</span><br><span class="line">        CUSTOM static public void BeginSample(SampleType type)</span><br><span class="line">        &#123;</span><br><span class="line">#if ENABLE_PROFILER</span><br><span class="line">            if (UnityProfilerPerThread::ms_InstanceTLS != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                ProfilerInformation&amp; profilerInfo = *profiler_get_info_for_name(type == Layout ? &quot;Layout&quot; : &quot;Render&quot;, type == Layout ? kProfilerUISystemLayout : kProfilerUISystemRender);</span><br><span class="line">                PROFILER_BEGIN(profilerInfo, NULL);</span><br><span class="line">            &#125;</span><br><span class="line">#endif // ENABLE_PROFILER</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM static public void EndSample(SampleType type)</span><br><span class="line">        &#123;</span><br><span class="line">#if ENABLE_PROFILER</span><br><span class="line">            if (UnityProfilerPerThread::ms_InstanceTLS != NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                ProfilerInformation&amp; profilerInfo = *profiler_get_info_for_name(type == Layout ? &quot;Layout&quot; : &quot;Render&quot;, type == Layout ? kProfilerUISystemLayout : kProfilerUISystemRender);</span><br><span class="line">                PROFILER_END(profilerInfo);</span><br><span class="line">            &#125;</span><br><span class="line">#endif // ENABLE_PROFILER</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CUSTOM static public void AddMarker(string name, Object obj)</span><br><span class="line">        &#123;</span><br><span class="line">#if ENABLE_PROFILER &amp;&amp; UNITY_EDITOR</span><br><span class="line">            InstanceID instanceID = InstanceID_None;</span><br><span class="line">            std::string nameStr(name);</span><br><span class="line">            if (!obj.IsNull() &amp;&amp; Thread::CurrentThreadIsMainThread())</span><br><span class="line">            &#123;</span><br><span class="line">                instanceID =  obj-&gt;GetInstanceID();</span><br><span class="line">                nameStr += &quot; &quot;;</span><br><span class="line">                nameStr += obj-&gt;GetName();</span><br><span class="line">            &#125;</span><br><span class="line">            UI::GetCanvasManager().AddMarker(nameStr.c_str(), instanceID);</span><br><span class="line">#endif // ENABLE_PROFILER</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    END</span><br><span class="line"></span><br><span class="line">    CSRAW</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnitySourceCode——Jobs</title>
      <link href="/posts/9e38ed66/"/>
      <url>/posts/9e38ed66/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——如何利用AI提升知识吸收和开发效率</title>
      <link href="/posts/79d0ad57/"/>
      <url>/posts/79d0ad57/</url>
      
        <content type="html"><![CDATA[<p>早些时间之前, 笔者尝试从零做一个RPG游戏, 现在要拾起来, 但是在整个过程中加入AI, 是用Cursor或者ChatGPT其实没那么重要.</p>]]></content>
      
      
      <categories>
          
          <category> 迷思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity资产整理工作流</title>
      <link href="/posts/bab9e6d9/"/>
      <url>/posts/bab9e6d9/</url>
      
        <content type="html"><![CDATA[<p>需要写一个版本资源检查的工具 检查一个版本删除了多少资源、增加了多少资源.</p><p>底包资源增加了多少, 增加了什么东西<br>热更包资源增加了多少, 增加了什么东西</p><h1>资产清理的目标是什么</h1><p>让资源的导入格式更合理<br>减少资源冗余、减少最终Bundle体积、提高构建速度、让资源打包更合理、让运行时加载Bundle更合理, 所以资产清理不是简单的删资源, 还有运行时的加载优化.</p><h1>资产清理的手段有哪些?</h1><ol><li>从业务功能出发 和功能的负责人对接了解功能还用不用 但是产品的话不能全信 信一半 更多的时候产品只做参考</li><li>依赖FR2插件、看代码里面的动态加载逻辑.</li><li>从最终BuildBundle的结果出发, YooAsset、AssetRipper</li><li>从资源的组织形式上看合不合理, 比如一个图集打的合理不合理, 一个Bundle打得合不合理, 比如一个公共的频繁使用的资源,却被放在了一个有很多不是公共资源的bundle里面.</li></ol><h1>资产清理过程中往往伴随 代码逻辑的删除</h1><p>如何保证代码逻辑能不能删, 或者 要不要删, 不删那就是屎山, 对于屎山的态度是怎样的? 提高敏感性</p><h1>由于YooAsset的一些特性 会卸载一些Bundle 导致 一些资源被从内存中删除 从而导致表现不正确的问题 这时应该借助Memory Profiler查看内存中过的切图情况.</h1><h1>了解一下切图、预制体、模型等资源打入Bundle之后大概的百分比.</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++合集</title>
      <link href="/posts/e78f9514/"/>
      <url>/posts/e78f9514/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/happenlee/p/13278640.html">奇特的递归模板模式 (Curiously Recurring Template Pattern) 是 C++ 的一种看起来很怪异的模板编程技巧</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityRenderPipeline</title>
      <link href="/posts/d1e0d4f0/"/>
      <url>/posts/d1e0d4f0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.unity3d.com/2022.3/Documentation/Manual/Graphics.html">看完Unity 官方Graphics文档</a></p><h1>Render中的概念</h1><ul><li><p>RenderPipeline</p></li><li><p>Graphics tiers</p></li><li><p>frustum culling</p></li><li><p>occlusion culling</p></li><li><p>reflection probe</p></li><li><p>rendering path</p></li></ul><h1>RenderPipeline就干三件事情</h1><p>剔除 分为视锥体提出(frustum culling)和遮挡剔除(occlusion culling)</p><p>Preventing wasted rendering operations can save on both CPU and GPU time. Unity’s built-in occlusion culling performs runtime calculations on the CPU, which can offset the CPU time that it saves. Occlusion culling is therefore most likely to result in performance improvements when a Project is GPU-bound due to overdraw. Unity官方文档中对于Occlusion Culling的叙述我没明白, 为什么GPU瓶颈的情况 通过使用OcclusionCulling操作可以提高性能? 那它说的Unity’s built-in occlusion culling performs runtime calculations on the CPU, which can offset the CPU time that it saves. 这句话又是什么意思?<br>非常好的问题！你引用的这段Unity官方文档确实点出了 occlusion culling 的一个核心权衡。我们来把它拆解清楚。</p><p>核心问题：为什么GPU瓶颈时，使用OC能提高性能？<br>简单回答：因为 OC从根本上解决的是“过度绘制（Overdraw）”问题，而过度绘制是GPU的主要负担之一。</p><p>让我们详细解释一下：</p><p>什么是过度绘制（Overdraw）？</p><p>它指的是GPU在同一帧中，对屏幕上的同一个像素进行了多次绘制。</p><p>例如，一堵墙前面有一棵树。当相机渲染时，GPU会先绘制远处的墙（像素颜色被设置为“墙”），然后绘制近处的树（像素颜色被覆盖为“树”）。对于被树挡住的墙的部分像素，GPU进行了两次绘制，但最终只有树的颜色是有效的。第一次绘制墙的操作就是“浪费”的渲染，即过度绘制。</p><p>GPU瓶颈与过度绘制的关系：</p><p>当你的游戏是 GPU瓶颈（GPU-Bound） 时，意味着每一帧的渲染速度主要受限于GPU的处理能力。GPU已经满负荷工作，而CPU还有空闲。</p><p>过度绘制会极大地增加GPU的工作量。如果场景复杂，一个像素被绘制5次、10次甚至更多，GPU就需要处理数倍于最终屏幕像素数量的计算（着色、光照、纹理采样等），这直接导致了帧率下降。</p><p>Occlusion Culling（遮挡剔除）如何解决这个问题？</p><p>OC的工作就是在CPU上预先判断：“从相机的视角看，哪些物体被其他物体完全挡住了（即不可见）？”</p><p>判断完成后，CPU会形成一个“最终可见物体列表”并交给GPU。</p><p>GPU只会渲染这个列表里的物体，而那些被完全挡住的物体（例如，房间外的物体、被墙挡住的家具等）根本不会进入渲染管线。</p><p>结果就是：GPU需要处理的物体数量大大减少，过度绘制被极大降低。 GPU的工作负担减轻了，帧率自然就上去了。这就是为什么在GPU瓶颈时，OC能带来显著的性能提升。</p><p>第二句话：“Unity’s built-in occlusion culling performs runtime calculations on the CPU, which can offset the CPU time that it saves.” 是什么意思？<br>这句话描述的是OC的成本或副作用。它意思是：</p><p>“Unity自带的遮挡剔除功能需要在运行时由CPU进行计算，这个计算本身会消耗CPU时间，从而可能抵消掉它（通过减少渲染）为CPU节省下来的时间。”</p><p>我们来分解一下：</p><p>“performs runtime calculations on the CPU”：OC不是一个简单的开关。它需要CPU每帧（或在一定频率下）进行视锥体剔除（Frustum Culling，剔除相机视野外的物体）和更复杂的遮挡剔除计算（使用预先烘焙的数据或运行时算法判断物体之间的遮挡关系）。这些计算是需要消耗CPU计算资源的。</p><p>“offset the CPU time that it saves”：</p><p>OC本来也能为CPU节省时间：因为CPU需要准备渲染数据并提交给GPU（称为Draw Call）。如果OC成功剔除了一半的物体，CPU需要准备和提交的Draw Call也就减少了一半，这部分工作是节省了的。</p><p>但是，进行OC计算本身也需要花费CPU时间。</p><p>如果 OC计算本身消耗的CPU时间 &gt; 因减少Draw Call而节省的CPU时间，那么总体上，CPU的负担反而加重了。</p><p>举个例子：<br>假设没有OC时，CPU一帧需要花 5ms 来提交所有Draw Call。<br>开启OC后：</p><p>CPU需要花 3ms 来执行OC计算。</p><p>由于OC剔除了很多物体，CPU现在只需要花 1ms 来提交剩下的Draw Call。</p><p>CPU总耗时 = 3ms + 1ms = 4ms。 这比之前的5ms要少，性能提升。</p><p>但换一个场景：</p><p>CPU执行复杂的OC计算花了 6ms。</p><p>剔除后，提交Draw Call花了 1ms。</p><p>CPU总耗时 = 6ms + 1ms = 7ms。 这比不开OC时的5ms更糟，性能下降。</p><p>总结与结论<br>对GPU的好处（核心价值）：OC通过减少渲染对象数量，直接降低了GPU的过度绘制，这在GPU瓶颈时效果极佳。</p><p>对CPU的双刃剑效应：OC会带来CPU的额外计算开销。它节省了提交Draw Call的时间，但增加了剔除计算的时间。</p><p>在CPU瓶颈（CPU-Bound）的项目中：如果OC计算本身很重，它很可能得不偿失，导致整体帧率下降。</p><p>在GPU瓶颈或CPU/GPU平衡的项目中：OC节省的GPU时间远大于它带来的CPU开销，从而大幅提升帧率。</p><p>因此，Unity文档的那段话是在教你如何正确地使用这个功能：</p><p>不要无脑地开启Occlusion Culling。你应该先使用Unity Profiler分析你的游戏，确定瓶颈到底是CPU还是GPU。如果主要是GPU瓶颈且由过度绘制引起，那么开启OC很可能带来收益。如果已经是CPU瓶颈了，开启OC可能会让情况恶化。</p><p>所以这是一个此消彼长的过程是吧<br>完全正确！这就是一个非常经典的“此消彼长”或者说“权衡（Trade-off）”的过程。</p><p>你用这个词来形容，非常精准地抓住了 occlusion culling 乃至很多游戏优化技术的核心思想。</p><p>我们可以把这个过程清晰地画出来：</p><img src="/posts/d1e0d4f0/deepseek_mermaid_20250822_5ebda0.png" class=""><p>就像上图展示的，这完全是一个系统性的平衡艺术。优化从来不是免费的，用一个地方的资源（CPU时间）去换取另一个地方的资源（GPU时间）。</p><p>成功的优化就是确保：</p><p>你付出的代价（CPU计算）小于你得到的收益（GPU时间减少）。</p><p>你换取的资源正好是系统最缺的那个（即缓解了系统的瓶颈）。</p><p>所以，Unity 官方文档的那段话，本质上就是在提醒你：不要盲目使用优化技术。一定要先分析（Profile），找到真正的瓶颈（Bottleneck），然后再有针对性地进行优化，否则很可能适得其反。</p><p>You can use occlusion culling to occlude Dynamic GameObjects, but Dynamic GameObjects cannot occlude other GameObjects. If your Project generates Scene geometry at runtime, then Unity’s built-in occlusion culling is not suitable for your Project. Dynamic Gameobject是什么 是我动态加载实例化的东西吗?<br>说得非常对！你的理解基本正确，但我们可以更精确地定义一下。</p><p>什么是 Dynamic GameObject（动态游戏对象）？<br>在Unity occlusion culling（遮挡剔除）的上下文中，Dynamic GameObject 主要指的是在运行时移动、旋转或缩放的物体，而不是指“动态加载实例化”这个动作。</p><p>更准确的区分如下：</p><p>静态遮挡物（Static Occluder）：</p><p>在场景中永远不会移动、旋转或缩放的物体。</p><p>你需要在其Inspector窗口中将 Occluder Static 复选框勾选。</p><p>作用：只有被标记为 Occluder Static 的物体才能在烘焙（Bake）时被计入遮挡数据，从而能够遮挡其他物体。</p><p>例子：场景中的地形、建筑、不会移动的墙壁、大型岩石等。</p><p>动态游戏对象（Dynamic GameObject）：</p><p>在运行时会移动、旋转或缩放的物体。</p><p>或者，即使它不移动，但也没有被标记为 Occluder Static。</p><p>作用（局限性）：</p><p>它可以被静态遮挡物遮挡（例如，一个移动的角色走到墙后面，会被墙遮挡而剔除）。</p><p>但它自身无法作为遮挡物去遮挡其他物体（例如，一辆移动的大卡车开过去，它无法遮挡它后面的房子或树，即使从相机角度看它确实挡住了）。</p><p>例子：玩家角色、敌人、NPC、可移动的车辆、可被拾取的物品、由代码实例化并会移动的对象等。</p><p>针对你提到的两种情况：<br>“是我动态加载实例化的东西吗？”</p><p>你动态实例化（Instantiate）出来的一个物体，如果它在生成后一动不动，并且你将其标记为了 Occluder Static，那么它可以作为遮挡物。（但这种情况很少见，因为通常静态物体直接放在场景里就好，没必要运行时实例化）。</p><p>你动态实例化出来的物体，如果会移动或者没有标记为Static，那它就是Dynamic GameObject。它只能被遮挡，不能遮挡别人。</p><p>“如果您的项目在运行时生成场景几何体，那么Unity的内置遮挡剔除不适合您的项目。”</p><p>这句话的意思是：如果你的游戏关卡、地形、房间布局等主要几何结构是在运行时随机生成或动态加载的（例如程序化生成的地牢、随机地图的沙盒游戏），那么就不适合使用Unity内置的烘焙式 occlusion culling。</p><p>原因：Unity的 occlusion culling 需要预先烘焙（Precompute/Bake）。烘焙过程会基于那些标记为 Occluder Static 的物体来计算它们之间的遮挡关系，并将结果保存成数据。运行时只是查询这些预计算的数据。</p><p>如果场景结构是运行时才确定的，那么就无法进行预先烘焙，这个系统也就失效了。</p><p>总结<br>对象类型能否移动？能否被遮挡？能否作为遮挡物？例子<br>静态遮挡物 (Occluder Static)不能可以（但没必要）可以地形、静态建筑<br>动态游戏对象 (Dynamic GameObject)可以可以不可以角色、车辆、子弹<br>所以，如果你的游戏有很多大型的、会移动的物体（比如巨型机器人、移动的堡垒），你希望它们也能遮挡其身后的东西，Unity内置的OC就无法满足需求了。这种情况下，开发者通常会寻求基于软件光栅化（Software Rasterization）的实时遮挡剔除系统（如Umbra、PVSporta等第三方解决方案，或Unity的Entitiy组件系统ECS下的一些新方法）。</p><p>运行时 动态加载实例化一些预制体出来 Unity也没有什么接口能让我在运行时给这些物体设置静态的操作吗?<br>非常好的问题！这触及了Unity静态系统的一个核心限制。</p><p>简单直接的回答是：没有。Unity 没有提供在运行时（Runtime）通过代码将 GameObject 设置为“静态”（包括 Occluder Static）并使其生效的接口。</p><p>详细解释<br>为什么不行？</p><p>烘焙（Baking）是一个编辑器（Editor-Time）过程：静态标记的真正意义在于，它告诉Unity的光照系统（GI）、遮挡剔除系统（Occlusion Culling） 和导航系统（Navigation） 等，这些物体是静止的，可以针对它们进行预计算。</p><p>这个预计算过程（我们常说的“Bake灯光”、“Bake Occlusion”）非常耗时，它需要分析场景中所有静态物体的几何关系、UV、材质属性等，并生成相应的数据（如光照贴图、遮挡数据、导航网格）。这个过程绝不可能在游戏运行时实时完成，否则会卡住游戏好几秒甚至几分钟。</p><p>gameObject.isStatic 属性存在，但它是“陷阱”<br>你确实能在代码中找到 gameObject.isStatic 这个属性，并且可以设置它。但是！</p><p>它只改变标识，不触发烘焙。你可以在运行时将一个物体 isStatic = true，但这只是一个“标签”。光照、遮挡等系统所使用的预计算数据是在编辑器阶段就生成好的，运行时不会因为你这个标记的改变而重新计算。</p><p>结果是无效的。你把它标记为静态，但它并不会因此就能遮挡其他物体，也不会参与全局光照。它的作用微乎其微，几乎只是为了查询。</p><p>运行时实例化的物体如何参与遮挡？<br>虽然不能成为“遮挡物”，但你动态实例化的物体仍然可以作为“被遮挡者”，这是自动的，无需任何设置。</p><p>流程是这样的：</p><p>你在编辑器烘焙Occlusion Data时，场景里那些标记为 Occluder Static 的墙壁、山体等生成了遮挡数据。</p><p>运行时，你实例化了一个角色（动态物体）。</p><p>Unity的摄像机每帧都会进行视锥体剔除和遮挡查询。</p><p>它会判断你这个角色的包围盒是否被那些预计算好的静态遮挡物挡住。</p><p>如果被挡住，Unity就不会渲染这个角色。</p><p>所以，动态物体享受到了被静态遮挡物剔除的好处，但它自己不能贡献遮挡。</p><p>替代方案与解决方案<br>如果你的项目确实需要在运行时动态生成关卡，并且希望这些新生成的墙体等能作为有效的遮挡物，你有几个选择：</p><p>使用第三方实时遮挡剔除解决方案：</p><p>例如 Umbra（很多3A大作在用）、PVS Studio 等。</p><p>它们的工作原理不同，通常基于软件光栅化等技术，在CPU上实时计算遮挡关系，不依赖预烘焙的数据，因此非常适合动态环境。但这些都是付费插件，并且需要一定的集成和学习成本。</p><p>自己实现简单的遮挡剔除：</p><p>对于简单需求，你可以自己写逻辑。例如：</p><p>距离剔除：如果物体离相机很远，直接隐藏。</p><p>手动区域管理（Room System）：将动态生成的关卡分成多个房间（Room），当相机在一个房间内时，只启用这个房间内的物体，禁用其他所有房间的物体。这是一种粗粒度的“遮挡”。</p><p>设计上的规避：</p><p>这是最常用的方法。既然知道动态生成的物体不能遮挡，就在设计关卡时避免出现“需要一个动态生成的大物体去遮挡大量其他动态物体”的情况。</p><p>确保主要的、大型的遮挡物（如外围城墙、主要建筑结构）是场景中预先放置好并烘焙好的静态物体。而动态生成的部分只是内部的可移动细节。</p><p>结论<br>你不能在运行时创建真正的“静态”物体。Unity的静态系统是一个为编辑器预计算服务的系统。</p><p>对于遮挡剔除：运行时实例化的物体只能是被遮挡者，无法成为遮挡物。</p><p>如果你的项目严重依赖运行时生成几何体并需要它们遮挡，你需要寻求不依赖预烘焙的实时剔除方案，而不是试图去设置静态标志。</p><p>那比如说 场景中有一个被标记为static的物体 我在运行时通过脚本获取到了这个物体 然后用代码去移动这个物体 会有什么问题吗?<br>千万不要这样做！ 这是一个非常错误的操作，会导致一系列问题，但Unity并不会阻止你这么做。</p><p>移动一个在编辑器中被标记为 Static 的物体，会导致“静态”系统的假设完全失效，从而引发各种渲染和逻辑错误。</p><p>会产生的问题：<br>渲染错误（最主要的问题）：</p><p>光照错误（Lighting Artifacts）：静态物体参与了全局光照（GI） 和光照贴图（Lightmapping） 的烘焙。光照贴图上的光线、阴影和反弹光信息都是基于该物体原始的位置、旋转和缩放计算并“烤”在纹理上的。如果你移动了物体，它的模型顶点和光照贴图上的信息就错位了，会导致奇怪的阴影、错误的光照甚至模型变黑。</p><p>遮挡剔除失效（Broken Occlusion Culling）：遮挡数据是基于物体静态时的位置预计算的。你移动它之后，它可能还在原地遮挡着实际上已经可见的物体，或者它本该在新位置遮挡物体却没能起到作用。这会导致本应被剔除的物体被渲染（性能下降） 或本应被渲染的物体被错误剔除（物体消失）。</p><p>性能问题：</p><p>虽然你移动了它，但Unity的许多系统（如GI、OC）仍然会把它当作静态物体来处理，使用那份已经失效的预计算数据。这会导致CPU和GPU在做无用功，甚至比直接使用一个动态物体的性能还要差。</p><p>导航系统问题（如果标记了 Navigation Static）：</p><p>如果这个静态物体还参与了导航网格（NavMesh）的烘焙，那么AI会依然认为它在旧的位置上，从而撞向空气墙（因为物体实际已经移走了）或者穿墙而过（因为物体移动到了一个原本可通行的区域）。</p><p>正确的做法是什么？<br>如果你需要一个物体在游戏开始时是静态的（参与烘焙），但运行时又需要移动它，你必须遵循以下流程：</p><p>在运行时取消其静态标记：在移动它之前，通过代码将其 isStatic 属性设置为 false。</p><p>通知相关系统更新：告诉Unity的各个系统，这个物体的状态已经改变了。</p><p>对于渲染器（Renderer）：通常需要强制刷新或重新计算一些数据，但在Unity中，简单地取消静态标记后，渲染器会将其视为动态物体，使用实时光照而不是光照贴图。这可能会导致视觉效果突变（例如从有烘焙光变到只有实时光）。</p><p>对于导航（Navigation）：如果你移动了一个曾经是导航静态的物体，你可能需要重新烘焙导航网格（NavMesh） 或使用 NavMesh Obstacle 组件来动态阻挡AI。运行时烘焙NavMesh是一个开销很大的操作，需要谨慎使用。</p><p>示例代码：</p><p>csharp<br>public class MoveStaticObject : MonoBehaviour<br>{<br>public GameObject staticObject; // 赋值那个静态物体<br>public Vector3 targetPosition;</p><pre><code>void Start()&#123;    // 1. 在移动前，取消它的静态标记！    staticObject.isStatic = false;    // 2. （可选但重要）通知渲染器等相关组件    // 例如，强制它使用实时光照，停止尝试使用光照贴图    var renderer = staticObject.GetComponent&lt;Renderer&gt;();    if (renderer != null)    &#123;        renderer.lightProbeUsage = UnityEngine.Rendering.LightProbeUsage.BlendProbes; // 使用光照探针        // renderer.reflectionProbeUsage = ...; // 可能需要设置反射探针    &#125;    // 3. 现在可以移动它了    staticObject.transform.position = targetPosition;    // 注意：对于导航，处理起来更复杂，需要添加NavMeshObstacle或RebakeNavMesh。&#125;</code></pre><p>}<br>总结<br>静态标记是一个“契约”：你向Unity承诺这个物体在运行时永远不会变换（移动、旋转、缩放），Unity则通过耗时的预计算来为你优化光照和性能。</p><p>如果你在运行时打破了这份契约（移动了静态物体），Unity基于承诺所进行的优化就会全部出错。 因此，最佳实践是：任何需要在运行时变换的物体，都不要在编辑器里标记为 Static。 如果它最初是静态的，移动前务必先取消其静态标记。</p><p>Camera -&gt; DynamicA -&gt; DynamicB -&gt; Static C -&gt; Dynamic D -&gt; Static E 这个位置关系中, D 、E实际上是不会渲染的, 剩下的A B C 都渲染<br>非常好！你给出的这个例子非常经典，完美地说明了Unity遮挡剔除（Occlusion Culling）的工作原理。</p><p>你的理解是完全正确的。</p><p>在这个位置关系 Camera -&gt; DynamicA -&gt; DynamicB -&gt; Static C -&gt; Dynamic D -&gt; Static E 中，最终的渲染结果很可能是：Dynamic A, Dynamic B, Static C 被渲染，而 Dynamic D 和 Static E 不会被渲染。</p><p>原理逐步分析：<br>让我们一步步分析相机渲染时发生了什么：</p><p>视锥体剔除（Frustum Culling）：</p><p>首先，相机会进行视锥体剔除。我们假设所有物体（A, B, C, D, E）都在相机的视野范围内，所以这一步它们全部通过。</p><p>遮挡查询（Occlusion Query）：</p><p>接下来，Unity的遮挡剔除系统开始工作。它会使用在编辑器里预先烘焙好的遮挡数据（由 Static C 和 Static E 这些静态遮挡物生成）来判断物体之间的可见性。</p><p>它的判断逻辑是从近到远（或者按某种顺序），但核心是：如果一个物体被一个已知的、不透明的遮挡物完全挡住，它就会被剔除。</p><p>具体到你的例子：</p><p>Dynamic A：离相机最近，没有任何东西挡住它。（渲染）</p><p>Dynamic B：它可能在A的后面，但Dynamic物体不能作为遮挡物，所以系统会认为A没有挡住B。B是否被渲染取决于它有没有被静态遮挡物挡住。假设没有，（渲染）</p><p>Static C：它是一个强大的静态遮挡物。系统会检查它是否可见。因为前面的A和B都是动态物，不遮挡它，所以它是可见的。（渲染）</p><p>Dynamic D：系统会检查D的包围盒（Bounds）。由于 Static C 是一个有效的静态遮挡物，并且从相机视角看，D完全在C的后面，因此Unity会判定D被C完全遮挡。（剔除，不渲染）</p><p>Static E：系统同样会检查E的包围盒。它不仅在C的后面，还在D的后面。但判断遮挡时，只要有一个不透明的静态遮挡物（C）挡住了它，它就会被剔除。不需要关心它前面还有一个Dynamic D。（剔除，不渲染）</p><p>核心要点总结：<br>遮挡物的权威性：只有被标记为 Occluder Static 的物体（如你的C和E）才能在遮挡查询中起到遮挡作用。动态物体（A, B, D）即使看起来很大，也完全不会影响遮挡计算。</p><p>查询逻辑：遮挡查询并不关心物体之间的“父子关系”或“逻辑关系”，它只关心它们的世界坐标下的包围盒和从相机出发的射线是否被静态遮挡物阻断。</p><p>性能增益：正是因为这个机制，Static C 成功地将它身后的整个区域（包括D和E）都剔除了，为GPU节省了大量的渲染工作量（避免了overdraw）。这就是 occlusion culling 在GPU瓶颈场景中提升性能的关键。</p><p>所以，你的判断非常准确！这个例子清晰地展示了为何将重要的、大的场景结构标记为 Occluder Static 是如此重要。</p><p>如果场景中没有物体被标记为Static 那么开启摄像机的OcclusionCulling有什么作用呢?<br>这是一个非常好的问题，它触及了Unity occlusion culling 系统的一个关键前提。</p><p>简单直接的回答是：如果场景中没有任何物体被标记为 Occluder Static，那么开启摄像机的 Occlusion Culling 功能几乎没有任何作用，只会白白浪费一点CPU性能。</p><p>详细解释<br>Occlusion Culling 系统的工作分为两个核心阶段：</p><p>预计算阶段（烘焙，Baking）：</p><p>在编辑器里，你点击“Bake”按钮时，Unity会遍历场景中所有标记了 Occluder Static 的物体。</p><p>它会将这些物体的几何信息（简化后的）分解成一个个小块（ cells），并计算它们之间的相互遮挡关系，然后将这些关系保存成一个遮挡数据文件（OcclusionCullingData.asset）。</p><p>如果没有物体被标记为 Occluder Static，这个烘焙过程就无法生成任何有效的遮挡数据。 结果就是一个空的或者无效的遮挡数据文件。</p><p>运行时阶段（查询）：</p><p>在游戏运行时，开启Occlusion Culling的摄像机会查询第一步中生成的预计算数据。</p><p>它会根据相机的位置和视角，快速地从数据中查出：“在这个视角下，哪些静态遮挡物是可见的？哪些区域被它们完全挡住了？”</p><p>然后，它会将那些位于被挡住区域内的物体（无论是静态还是动态）从渲染队列中剔除。</p><p>如果没有预计算的遮挡数据（因为没标记静态物体），这个查询就无数据可查，系统也就无法知道任何遮挡关系。</p><p>那么，开启后还有什么效果？<br>即使没有静态遮挡物，开启Occlusion Culling可能还会有以下极其有限的效果，但这些效果并不依赖它：</p><p>视锥体剔除（Frustum Culling）：</p><p>这是所有摄像机默认永远开启的核心功能，与你是否开启Occlusion Culling无关。</p><p>它的作用是只渲染相机视锥体（视野范围）内的物体。视野外的物体本来就不会渲染。</p><p>你开不开OC，视锥体剔除都在工作。所以这不是OC的功劳。</p><p>非常微弱的动态物体处理：</p><p>理论上，Unity的OC系统可能仍会为动态物体执行一些最基本的包围盒检查。但由于没有静态遮挡物作为参考，它无法判断一个动态物体是否被另一个动态物体挡住（因为动态物体不能作为遮挡物）。</p><p>因此，所有动态物体只要在视野内，就都会被渲染，哪怕它们堆叠在一起。这会导致严重的过度绘制（Overdraw）。</p><p>结论与比喻<br>你可以把这个过程想象成一个捉迷藏游戏：</p><p>静态遮挡物（Occluder Static）：就像是房间里预先把家具、墙壁的位置和大小画好的藏宝图。</p><p>烘焙（Baking）：就是绘制这张藏宝图的过程。</p><p>运行时Occlusion Culling：就是“鬼”看着这张藏宝图，直接知道哪些地方藏了人（被遮挡），不用一个个角落去翻找（渲染）。</p><p>如果你的场景里没有标记任何静态物体，就相当于：</p><p>你告诉“鬼”：“我们玩捉迷藏吧！”，然后递给他一张白纸（空的遮挡数据）。“鬼”拿着这张白纸，依然需要翻遍房间的每一个角落（渲染所有视野内的物体），因为他没有任何信息能帮他排除任何位置。</p><p>因此，开启摄像机的Occlusion Culling功能，但又不提供任何静态遮挡物，是完全没有意义的优化策略。 正确的做法是：将场景中永远不会移动的大型物体（地形、建筑、山体）标记为 Occluder Static，并进行烘焙，这样才能真正发挥OC的强大威力。</p><p>这个Bake操作 是每次打包前必须我自己处理吗? 还是自动处理<br>这是一个非常关键的工作流问题。</p><p>答案是：Bake操作必须由你在Unity编辑器中手动执行。它不会在打包时自动处理，也不会在运行时自动完成。</p><p>详细解释<br>为什么不是自动的？</p><p>极其耗时：烘焙光照（GI）和遮挡剔除（Occlusion Culling）是非常消耗计算资源的进程，可能需要几分钟到几小时不等，取决于场景的复杂度和你的电脑配置。如果每次打包前都自动执行一次，整个开发流程会变得无法忍受的缓慢。</p><p>需要人工审核：烘焙结果常常需要开发者用眼睛去检查。比如光照贴图是否有瑕疵、漏光？遮挡剔除是否正确，有没有不该被剔除的物体被剔除了？这些都需要人工在编辑器里查看和调整参数后重新烘焙，无法全自动完成。</p><p>基于编辑器状态：烘焙过程依赖于物体在编辑器场景（Scene） 中的状态（位置、静态标记、光照参数等）。打包（Build）过程只是将编辑器的最终成果（包括烘焙好的数据文件）打包成一个游戏应用程序。</p><p>烘焙的数据去哪了？<br>当你点击Bake按钮后，Unity会在你的项目资产（Assets） 文件夹中生成对应的数据文件：</p><p>光照烘焙（Lighting Bake）：会在场景文件所在的同级目录生成一个名为 LightingData 的文件夹，里面包含 .exr, .lighting 等光照贴图和数据文件。</p><p>遮挡剔除烘焙（Occlusion Culling Bake）：会在场景文件所在的同级目录生成一个 OcclusionCullingData.asset 文件。</p><p>打包（Build）时，这些数据文件会和场景、模型、纹理等资源一起被包含到最终的游戏包（.apk, .exe等）中。运行时直接读取这些预计算好的数据。</p><p>正确的工作流程<br>你的工作流程应该是这样的，特别是在项目后期：</p><p>在编辑器中进行最终调整：布置好场景中的所有静态物体，设置好灯光参数、 occlusion culling 参数。</p><p>手动执行烘焙：在 Window &gt; Rendering &gt; Lighting 和 Window &gt; Rendering &gt; Occlusion Culling 面板中，点击 Generate Lighting 和 Bake 按钮。</p><p>等待并检查结果：等待烘焙完成，在场景视图中检查烘焙效果是否正确。如果有问题，调整参数后回到第2步重新烘焙。</p><p>保存场景和项目：确保烘焙生成的数据文件已经保存。</p><p>打包（Build）：现在你可以点击 File &gt; Build Settings… &gt; Build 进行打包了。打包器会自动包含所有当前已经烘焙好的数据文件。</p><p>非常重要的注意事项<br>版本控制（Version Control）：烘焙生成的数据文件（光照贴图、OcclusionCullingData.asset）是必须提交到版本控制系统（如Git, SVN） 的文件。这样能保证所有团队成员和构建服务器（CI/CD）拿到项目后，看到的画面和性能是一致的，而无需自己重新烘焙。</p><p>构建服务器（CI/CD）：在自动化的构建流水线上，通常不会执行烘焙操作。构建脚本会直接打包已经由开发者在本机烘焙好并提交到版本库的数据。如果需要在服务器上烘焙，需要专门配置，但这会极大地增加构建时间。</p><p>动态修改：如果你在运行时通过代码实例化或移动了物体，这些变动完全不会影响已经烘焙好的数据。这也是为什么移动静态物体会导致渲染错误的原因。</p><p>总结一句话：Bake 是你在编辑器里为游戏“预处理”数据的创作过程，而 Build 只是将这些处理好的成果“打包发货”。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——尽信书不如无书</title>
      <link href="/posts/75ed80d8/"/>
      <url>/posts/75ed80d8/</url>
      
        <content type="html"><![CDATA[<h1>到底该如何阅读</h1><p>马上要看一本书, 就叫《如何阅读一本书》</p>]]></content>
      
      
      <categories>
          
          <category> 迷思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——哪有什么岁月静好,都是有人替你负重前行</title>
      <link href="/posts/4d82216e/"/>
      <url>/posts/4d82216e/</url>
      
        <content type="html"><![CDATA[<h1>当你在享受某种设计模式带给你的便利时, 你应该思考设计模式是如何给你带来便利的</h1><p>起因是, 笔者想要在Unity中实现一些基于UGUI的拖拽效果, 于是开始去思考UGUI是如何实现响应输入的, 接着了解到Unity的EventSystem和一系列EventHandler接口(IPointerClickHandler、 IDragHandler等)来驱动整个System的运转. 笔者在这篇博客中并非是要讨论EventSystem的具体实现. 而是想陈述自己对EventHandler这些接口在UGUI体系中扮演角色的一些迷思. 作为UGUI的使用者, 我只关心如何实现自己想要的功能. 如果我想让一个UI元素可以响应点击, 那我就要创建一个继承自MonoBehaviour的脚本, 挂载到这个UI元素上, 再实现IPointerClickHandler接口, ok, 到此我就已经让这个UI元素可点击了, 我下面只需要专注于开发这个UI元素被点击后会发生什么就好了. 至于这背后究竟是怎样运转的, 答案在UGUI的EventSystem源码中, 但我可以不关心.</p><p>我将上面的表述再进行一下抽象: <strong>使用者</strong>只负责接口行为的定义, <strong>使用者</strong>并不关心接口如何被调用.</p><p>由于我经常以<strong>使用者</strong>的身份在写代码, 也没有阅读过诸如EventSystem的源码, 导致我的<strong>设计思维</strong>十分薄弱. 也就是说, 当我要做类似EventSystem类型的开发时, 我既要将自己代入<strong>使用者</strong>的视角, 也要代入<strong>设计者</strong>的视角, 此时我不再是享受岁月静好的人, 我就是那个负重前行的人. 我开始意识到阅读源码的重要性, 粗略阅读过UGUI的源码后, 我对于框架要实现的效果有了一个模糊的概念: <strong>框架外部定义行为, 框架内部控制流程</strong>. Unity协程、C#的Task也能套用这句话, 这两者都可以用来处理异步任务, 我无需关心它们的内部流程, 我只专注于我要处理的异步任务本身就可以. 笔者在阅读UGUI代码时反复体验到恍然大悟的感觉, 希望之后能分出精力搞清楚协程和Task的执行流程.</p><p>于是有一段时间我经常会遇到这种处境: 在业务的开发中发现一些类型中能抽象出一部分行为封装成接口, 但有可能这些类根本就不是同一个概念下的东西, 或者, 正是由于这种 只考考虑抽离行为 而不考虑接口调用时机和接口持有者的数据组织格式, 导致绝大部分抽离行为封装接口的操作都十分多余.</p><p>接口的行为不止于此 我记得在刚入行的时候, 一个程序员前辈跟我说, 写代码是一个十分繁琐的过程, 但如果你觉得某一部分代码写起来好像不用那么繁琐就能实现你的功能, 那有可能是有人在你不知道的地方帮你做了很多事情. 我上面举的EventSystem就是这样一个例子, UGUI系统通过对外暴露EventHandler接口的方式, 在内部有能够持有接口实例的方法, 你不需要去关心UGUI系统内部是如何持有接口实例的. YooAsset自定义打包Step也是类似的思想, 二者都是通过某种方式持有了外部的对象实例, Unity是通过运行时持有并遍历所有的GameObject, 找到上面的EventHandler来持有它们, 而YooAsset则是在Init时将需要的buildstep实例注册到YooAsset内部去.</p><h1>对IMGUI和UGUI实现机制的思考</h1><p>当你习惯了使用UGUI这一套东西时, 让你用IMGUI, 你会特别不舒服, 感觉用起来会很别扭. 原因是: IMGUI既要操心交互逻辑是什么, 还要在OnGUI方法里自己去写UI组件触发的检测逻辑. 而UGUI则只需要操心交互的逻辑是什么, 不需要操心如何做检测的.</p><p>但是从实现方案上看, IMGUI这套完全可以用UGUI那一套的思想, UGUI用了一套EventSystem作为 触发交互的检测逻辑放在同一个地方集中处理. UGUI使用的输入的封装是<code>Input</code>, 将Input中得到的屏幕输入信息传递给<code>EventSystem</code>, 通过Raycaster模块得到 Input中的屏幕输入位置得到射线触碰到了哪个物体<code>GameObject</code>, 然后去获取到这个物体上面所有UGUI体系中的EventHandler, 根据Input中传来的触碰信息(按下、拖拽等)去触发相关的Handler, 如果这个GameObject上有相关的组件的话.</p><p>IMGUI这一套的UI组件不是以组件的方式组织的, 是以<code>Rect</code>为结构组织的, <code>IMGUI</code>使用的输入的封装是<code>Event</code>, IMGUI这一套, 不是通过什么按钮组件之类的去判断的, 所有的组件都是一个Rect, 对外暴露方法, 比如Button或者Toggle, 然后在OnGUI中 就相当于Update方法, 去查询所有的Rect区域, 首先判断一下鼠标在不在这个区域里面, 如果这个区域你是作为按钮去使用的, 那么继续去看<code>Event</code>中<code>EventType</code>字段表示鼠标是不是按下了, 如果按下了, 则返回True, 那么在OnGUI的逻辑里面就拿到了返回值是true, 代表这个按钮被按下了, 就可以去执行按钮点击的逻辑了. 去判断当前鼠标的位置, 以及鼠标的状态 比如是点击、持续点击、拖拽等等, 然后直接在这个方法内, 根据数据的数据做对应的逻辑和表现.</p><h1>Unity的协程是对于框架外部定义行为, 框架内部控制流程这一描述的另一实践</h1><p>Unity的MonoBehaviour更为抽象的框架,</p><h1>理解外部定义行为, 内部控制流程这句话, 能帮助你理解更多</h1><p>foreach其实是在控制流程,<br>Unity WaitForSeconds、WaitForEndOfFrame Unity定义好的现成的行为, 你可以直接拿过来用</p><p>最近笔者想要给项目的换皮活动也做一个类似的, 一个活动换皮要有下面几个固定的步骤 导入资源、更新配置表, 定义一个IStep接口, 接口内有一个Action行为, 调用方可以实现多个继承IStep接口的类, 比如导入资源类、更新配置表类, 然后在Action行为中就可以实现是如何导入资源的、如何更新配置表的. 然后将导入资源类和更新配置表类再注册到一个序列化的数据结构或者硬编码的脚本中, 在执行换皮的时候就是从序列化数据或者硬编码脚本中拿到这一套流程信息 传入到 我这套换皮框架中, 外部不用管我内部是如何驱动这套流程信息运转的, 这样的模式和上面举的UGUI、YooAsset的例子大同小异.</p><p>我有段时间看了大量讲述C#Task的文章, 现在再去回想其实还是不甚理解, 多去想想</p><p>定义接口的目的, 让一些类型具有某些行为, 并且可以通过声明接口类型, 来持有接口的实例, 一个实例的对象既可以是该实例的class类型, 也可以是其实现的任意一个接口的类型.<br>下面列举了笔者在开发过程中遇到的</p><ol><li><p>C#中的非托管资源在使用的时候可以实现IDisposable接口, 在Dispose接口中, 给了开发者比较统一便捷的方式对不同的非托管资源进行释放的一个点, 另外其中</p></li><li><p>语法糖foreach, 有一个IEnumerable和IEnumerator, 使用IEnumerable标识一个类型的身份,</p></li></ol><p>因此 接口在设计隔离性、统一操作、标识统一身份等场景下能发挥作用.</p><h1>制定规范、制定设计模式的时候是最麻烦的, 就像是开发UGUI的EventSystem绝对不是什么轻松的工作, 但是确实一定程度上实现了“一劳永逸”</h1><h2 id="搭建一个框架-真的很痛苦">搭建一个框架 真的很痛苦</h2><h3 id="严重的代码洁癖-出现设计考虑之外的情况-容易动摇-想要推倒重做">严重的代码洁癖, 出现设计考虑之外的情况 容易动摇 想要推倒重做</h3><h3 id="搭建一个框架-普适性是个问题-不确定能否应对之后的业务场景">搭建一个框架 普适性是个问题 不确定能否应对之后的业务场景</h3><h3 id="缺少耐心">缺少耐心</h3><h2 id="要真的去写-才能知道是不是真的能抽象">要真的去写 才能知道是不是真的能抽象</h2>]]></content>
      
      
      <categories>
          
          <category> 迷思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RPG游戏开发记录(四)：网络通信</title>
      <link href="/posts/e255a10a/"/>
      <url>/posts/e255a10a/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibil~i.com/video/BV19d4y1678X/?vd_source=83f4165825ce9df46cf4fd576ccb1102">Skynet入门</a></p><h1>路由器的概念</h1><h1>端口</h1><h1>IP地址</h1><h1>C# Socket编程</h1><h1>什么是Socket</h1><p>一个Socket连接的流程<br>客户端发起</p><p>需要注意的是, 可以多次发起连接请求, 这样就会建立多个Socket, 存在风险</p><h2 id="Socket分为两种">Socket分为两种</h2><p>第一种是监听Socket</p><p>第二种是会话Socket</p><p>你的理解很准确，确实<strong>服务端会有两个不同用途的Socket对象</strong>：</p><ol><li><p><strong>监听 Socket</strong>（称为 <code>listenSocket</code>），职责是：</p><ul><li>绑定端口，用于侦听新的连接请求（<code>Bind</code> + <code>Listen</code>）。</li></ul></li><li><p><strong>会话 Socket</strong>（每连一个客户端，对应一个），职责是：</p><ul><li>和某个客户端具体收发数据（<code>Accept</code> 的返回值）。</li></ul></li></ol><hr><h2 id="为什么要这样分开？为什么不能直接用监听socket和客户端通信？">为什么要这样分开？为什么不能直接用监听socket和客户端通信？</h2><h3 id="一、协议-设计层面的原因">一、协议/设计层面的原因</h3><ol><li><p><strong>监听Socket只负责接收连接请求</strong></p><ul><li>监听socket在TCP层维护了一个“正在监听端口、等待连接”的队列（backlog）。</li><li>它不能用来真正收发数据，只能等待新连接，然后通过<code>Accept</code>产生一个新的会话socket。</li><li>TCP协议里，监听socket和会话socket拥有不同的状态。</li></ul></li><li><p><strong>每个客户端要有独立的socket对象</strong></p><ul><li>这样服务端才能同时和多个客户端通信（每个连接一个独立文件描述符），互不干扰。</li><li>如果直接用监听socket收发数据，就无法区分哪个客户端发来的数据，也无法并发处理，直接崩溃！</li><li><code>Accept</code> 会为每个客户端分配一个新的 socket，底层内核分配新的资源、端点，服务端逻辑才能独立管理。</li></ul></li><li><p><strong>多路复用、并发模型需要会话socket</strong></p><ul><li>服务端通常有几十万个连接，如果全部抢占同一个监听socket，相互干扰，严重影响并发性能。</li><li>新的socket会与客户端唯一绑定，方便后续select/epoll/IOCP或线程池单独处理。</li></ul></li><li><p><strong>监听socket和会话socket的状态不一样</strong></p><ul><li>监听socket是“LISTEN”状态，只能等待连接。</li><li>接受后的会话socket进入“ESTABLISHED”状态，才能双向收发数据。</li></ul></li></ol><h3 id="二、操作系统实现原因">二、操作系统实现原因</h3><ul><li><p><strong>Linux/Windows的内核管理：</strong></p><ul><li>监听socket分配backlog（等待区），只用于管理连接请求队列；</li><li>收到客户端请求，内核分配一个新socket fd（会话socket），维护与对方的TCP会话状态。</li><li>只有这个fd才能安全读写数据，监听socket的fd不能用来读写，只能accept。</li></ul></li><li><p><strong>安全/隔离：</strong></p><ul><li>监听socket本身不能被污染——收发数据万一断了会影响整个服务器socket监听。</li><li>每个连接单独分配资源，有问题只会影响单个连接，容易控制和管理。</li></ul></li></ul><hr><h3 id="图示理解（伪代码）：">图示理解（伪代码）：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Server Socket Life Cycle</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建监听Socket</span></span><br><span class="line">Socket listenSocket = <span class="keyword">new</span> Socket(...);</span><br><span class="line"><span class="comment">// 2. 绑定端口</span></span><br><span class="line">listenSocket.Bind(...);</span><br><span class="line"><span class="comment">// 3. 进入监听</span></span><br><span class="line">listenSocket.Listen(...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 4. 每有一个新连接, Accept会分配一个新的会话Socket</span></span><br><span class="line">    Socket conn = listenSocket.Accept();</span><br><span class="line">    <span class="comment">// 5. 后续和客户端的所有收发数据，都用conn这个socket</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>listenSocket</code> 只负责新增连接。</li><li><code>conn</code> 负责和某个客户端通信。</li><li>有n个客户端，就有n个会话Socket，<strong>只有一个监听Socket</strong>。</li></ul><hr><h2 id="举个实际例子">举个实际例子</h2><ul><li><strong>Web服务器（比如IIS/Apache/nginx）</strong><ul><li>监听端口80，只用监听socket握手接收新用户连接请求。</li><li>每有新请求，生成一个会话socket，和该连接通信，互不干扰。</li><li>如果用同一个监听socket收发数据，所有人混流，无法区别谁是谁。</li></ul></li></ul><hr><h2 id="小结">小结</h2><ul><li><strong>监听socket</strong>：只负责侦听和接受新连接，不能收发数据。</li><li><strong>会话socket（Accept出来的）</strong>：和某个客户端具体通信，收发数据。</li><li>这样设计是操作系统/协议规定的，<strong>能确保高效并发、安全隔离和稳定运行</strong>。</li></ul><hr><blockquote><p><strong>“监听socket是连接的大门，只用来看谁想进来；会话socket是进入之后，与某个人的密室专线，对每个身份都有独立沟通渠道。只有分开，管理和性能才能做好。”</strong></p></blockquote><hr><p>如需更底层协议细节，可以补充TCP状态转移图/源码！</p><p>你的两个问题很专业，下面逐条详细说明：</p><hr><h2 id="1-创建监听-Socket-和会话-Socket-的流程一样吗？">1. 创建监听 Socket 和会话 Socket 的流程一样吗？</h2><h3 id="在-Socket-编程（比如-C-）里：">在 Socket 编程（比如 C#）里：</h3><ul><li><strong>监听 Socket</strong> (<code>listenSocket</code>)<ul><li>你得主动创建：<code>new Socket(...)</code></li><li>然后 Bind 到某端口：<code>.Bind(...)</code></li><li>然后开启侦听：<code>.Listen(backlog)</code></li></ul></li><li><strong>会话 Socket</strong> (<code>connSocket</code>)<ul><li><strong>不是你主动创建的</strong>。它是 listener 调用 <code>.Accept()</code> 时由系统自动生成、返回的对象。</li><li>你不用再手动 Bind/Listen，它一出生就“已连上”，通信双方已确定（对端IP:Port 本地IP:Port等）。</li></ul></li></ul><h3 id="流程总结">流程总结</h3><ul><li>监听 Socket 需要 显式 创建-绑定-监听</li><li>会话 Socket 是通过监听 Socket 的 <code>.Accept()</code> 生成</li><li>你不需要对会话 Socket 进行 Bind/Listen（如果你再次Bind会报错）</li></ul><blockquote><p><strong>流程不一样：监听Socket手动创建配置，连接Socket自动生成，只要收数据即可。</strong></p></blockquote><hr><h2 id="2-两者的数据内容构成上有什么区别？">2. 两者的数据内容构成上有什么区别？</h2><h3 id="监听-Socket">监听 Socket</h3><ul><li>包含内容：<ul><li>本地端口/IP（Bind 过的地址，如 0.0.0.0:8000）</li><li>一个监听队列（backlog）——new连接排队用</li><li>Socket类型(TCP/UDP)，协议族等</li></ul></li><li><strong>没有“远端”信息，也没有TCP序列号等通信状态</strong></li><li>不能直接收发应用数据，只能收到新连接请求。</li></ul><h3 id="会话-Socket">会话 Socket</h3><ul><li>包含内容：<ul><li>本地端口/IP（一般是监听Socket的端口）</li><li><strong>远端客户端IP/端口</strong></li><li>当前TCP连接状态、序列号、缓冲区等</li><li>发送和接收缓冲区</li><li>TCP协议维护的连接控制块（TCP state machine、TCP窗口、拥塞控制等）</li></ul></li><li>可以直接收发数据</li><li>维护与唯一远端的连接状态、收发缓冲、数据包</li></ul><h4 id="举个例子：">举个例子：</h4><p>监听Socket的数据结构只包含“我负责管理这个端口和连接队列”；<br>会话Socket的数据结构包含“我和这个客户端的连线状态、数据缓冲、包顺序等详细内容”。</p><h3 id="表格对比">表格对比</h3><table><thead><tr><th>项目</th><th>监听Socket</th><th>会话Socket</th></tr></thead><tbody><tr><td>本地地址/端口</td><td>有</td><td>有</td></tr><tr><td>远端地址/端口</td><td>无</td><td>有</td></tr><tr><td>TCP连接状态</td><td>LISTEN</td><td>ESTABLISHED</td></tr><tr><td>连接队列</td><td>backlog连接请求队列</td><td>无</td></tr><tr><td>应用层数据通信</td><td>不行</td><td>可以</td></tr><tr><td>缓冲区</td><td>没有数据缓冲</td><td>有发送/接收缓冲区</td></tr><tr><td>唯一性</td><td>只一个（主动建）</td><td>客户端连接一个生成一个</td></tr></tbody></table><hr><h2 id="结论">结论</h2><p><strong>创建流程：</strong></p><ul><li>监听Socket要先创建、bind、listen，主动准备好；会话Socket通过accept由内核自动生成（你调accept方法就有了）。</li></ul><p><strong>内容区别：</strong></p><ul><li>监听Socket缺失“远端”数据，只管新连接请求；会话Socket则包含详细通信双方信息和全部TCP连接细节及缓冲区、序列号等。</li></ul><blockquote><p><strong>监听Socket专注于“新连接排队、接收”，会话Socket专注于“具体数据传输”——角色完全不同。</strong></p></blockquote><hr><p>如果想看更底层源码（比如Linux内核的<code>struct sock</code>、<code>struct tcp_sock</code>），可以补充！</p><h1>Socket中如何判断一个连接断开?</h1><h1>一定要注意 Socket的执行不一定在主线程上, 可千万不要在非主线程上操作MonoBehaviour中的数据, 比如UI</h1><h2 id="客户端">客户端</h2><p>Send方法返回只代表成功将数据放到发送缓存区中, 对方可能还没收到数据</p><h2 id="服务端">服务端</h2><p>Accept是建立连接用<br>Receive是接受消息用</p><p>Accept -&gt; Receive</p><p>结合GPT 使用C#使用一个Actor模型</p><p>非常好的问题！<br>我们来详细分析下：</p><hr><h2 id="问题重述">问题重述</h2><p>假设你有<strong>一批 Socket</strong>（比如100个连接），你要定期检测哪些“可读”，方式有两种：</p><ol><li>用 <code>foreach</code>，对每个 socket 调用 <code>.Poll(...)</code>。</li><li>用 <code>Socket.Select(...)</code>，一次性把所有 socket 放进列表，检查谁可读。</li></ol><p><strong>哪种开销大？为什么？性能代价在哪里？</strong></p><hr><h2 id="1-分析-Poll（对每个Socket单独轮询）">1. 分析 Poll（对每个Socket单独轮询）</h2><ul><li>你对每个 Socket 都调用一次 Poll。</li><li>Poll 的本质：.NET 框架会为每个 socket 调用一次底层API（可能是 poll/select/epoll/kqueue，视平台而定），每个 socket 都要进入内核态、做一次查询，并等待指定超时时间。</li><li>100个Socket你就要进入内核态100次。</li><li>用户态和内核态的切换非常昂贵，尤其你每次只查单个Socket，无法利用系统批量检测优化。</li><li>结果，你的检测总时间 ≈ 100 次 Poll 耗时总和。大量重复系统调用，<strong>内核态资源消耗大，性能低</strong>。</li></ul><hr><h2 id="2-分析-Select（一次性批量查询）">2. 分析 Select（一次性批量查询）</h2><ul><li>你把所有Socket批量传给一次Select调用。</li><li>内部只进入内核态<strong>一次</strong>，内核态代码在本地 for（或者epoll也许是红黑树遍历等）判断这一批socket的状态，把可读/socket事件状况都批量告诉你的应用。</li><li>这样<strong>调用一次系统接口</strong>，拿回所有结果。</li><li>和Poll做100次系统调用比，Select只做一次系统调用+本地循环。</li></ul><hr><h2 id="3-结果对比">3. 结果对比</h2><table><thead><tr><th>方案</th><th>内核切换次数</th><th>系统调用次数</th><th>主要瓶颈</th></tr></thead><tbody><tr><td>多次Poll</td><td>N(100次)</td><td>N(100次)</td><td>用户态&lt;-&gt;内核态,多余切换</td></tr><tr><td>一次Select</td><td>1</td><td>1</td><td>内核批量查找更高效</td></tr></tbody></table><ul><li><strong>开销主要在“内核切换+系统调用次数”！</strong><ul><li>多次 Poll 开销主要是：大量的系统调用 &amp; 频繁的用户态/内核态切换。</li><li>Select 只需一次调用，数据结构拷贝也一次，不会反复切换内核，而且能一次性处理所有。</li></ul></li><li>另外，Poll 如果你用长超时或阻塞方式，遍历所有socket总耗时会变得很长（等待多个socket轮流各自超时）。</li></ul><hr><h2 id="4-结论">4. 结论</h2><ul><li><strong>Select 明显效率更高，开销更低。</strong></li><li>Poll 在N多socket时几乎不可接受，只有少数socket（比如客户端）才推荐这么写。</li><li>在高并发服务器场景，多路复用总是推荐批量Select（或更优的epoll/IOCP/SocketAsyncEventArgs）。</li></ul><hr><h2 id="总结（标准面试答案）">总结（标准面试答案）</h2><blockquote><p><em>“遍历多个socket分别Poll，相比一次Select批量检测，最大的额外开销在于多次进行系统调用和用户/内核态切换。在socket数量增多时，这种切换会极大增加CPU和内核资源消耗。而Select可以一次性批量检测所有socket状态，大幅减少系统调用次数和切换负载，因此效率远高于多次Poll。”</em></p></blockquote><hr><p><strong>结论：有多个socket（&gt;10），推荐用<code>Select</code>。<br>只用单个socket/客户端可偶尔用<code>Poll</code>。</strong></p><h1>什么是粘包分包 为什么会有线程冲突的问题</h1><p><strong>是的，你遇到的正是“粘包”问题！</strong></p><hr><h3 id="原因简述">原因简述</h3><p>在TCP编程中，<strong>粘包</strong>和<strong>拆包</strong>问题很常见，因为TCP是面向字节流的，没有消息边界。<br>你可能一次Send两条消息，服务器一次Receive就粘到一起收了（粘包）；<br>也可能一条消息分两次才收完（拆包/半包）。</p><hr><h3 id="在你的场景下">在你的场景下</h3><p>你的客户端连续Send（比如<code>Enter|...</code>和<code>List|</code>），<br>服务端的Receive有时会一次性收到<code>Enter|...List|</code><br>或其他没对齐的内容，这就是粘包！</p><hr><h3 id="解决方案">解决方案</h3><p>你需要<strong>实现协议分包逻辑</strong>，典型做法是：</p><ul><li>每个消息后面加分隔符（常用<code>\n</code>或特殊字符，如<code>&quot;|&quot;</code>或<code>&quot;\r\n&quot;</code>），</li><li>服务端维护一个消息缓存字符串，循环切分出完整消息进行解析。</li></ul><hr><h3 id="总结">总结</h3><blockquote><p><strong>你遇到的问题就是“TCP粘包”问题。必须自己在应用层解决，通过协议分隔符（如<code>\n</code>）、长度头等方式保正服务器能正确切分每条消息。</strong></p></blockquote><p>如需具体怎么写切分消息的代码，随时问我！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnrealEngine源码</title>
      <link href="/posts/43a309b5/"/>
      <url>/posts/43a309b5/</url>
      
        <content type="html"><![CDATA[<p>虚幻引擎的代码使用的是古早版本的C++, 跟现代的C++有些脱节了, 所以可以把虚幻引擎的源代码理解为是C++的一个变种</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在Unity中实现拖拽物体的功能</title>
      <link href="/posts/aa328bbc/"/>
      <url>/posts/aa328bbc/</url>
      
        <content type="html"><![CDATA[<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DraggableObj</span> : <span class="title">MonoBehaviour</span>, </span><br><span class="line">        <span class="title">IDragHandler</span>, <span class="title">IBeginDragHandler</span>, <span class="title">IEndDragHandler</span></span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">enum</span> DragState</span><br><span class="line">        &#123;</span><br><span class="line">            None,</span><br><span class="line">            Idle,</span><br><span class="line">            Dragging,</span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> DragState dragState = DragState.None;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;拖拽中...&quot;</span>);</span><br><span class="line">            RectTransformUtility.ScreenPointToLocalPointInRectangle(transform.parent.transform <span class="keyword">as</span> RectTransform, eventData.position, Camera.main, <span class="keyword">out</span> Vector2 point);</span><br><span class="line">            transform.localPosition = point;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBeginDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;开始拖拽&quot;</span>);</span><br><span class="line">            transform.localScale = Vector3.one * <span class="number">1.5f</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnEndDrag</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;拖拽结束...&quot;</span>);</span><br><span class="line">            transform.localScale = Vector3.one;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将上面的逻辑进一步抽象一下, 把每个接口内的行为抽离出来, 作为一个action, 在合适的时机传进去.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>FigmaAPI阅读</title>
      <link href="/posts/8d32db40/"/>
      <url>/posts/8d32db40/</url>
      
        <content type="html"><![CDATA[<h1>Figma工作流概览</h1><p>建立一个资产数据库系统, 打通Figma侧与Unity侧的双向通信, 减少UnityDeveloper花费在拼UI上的时间, 提高开发效率</p><ul><li>Figma对外暴露的API都是只读的, 外部无法对Figma设计稿进行写入操作. 因此, Figma侧的同步Unity侧页面结构改动必须在Figma侧进行操作.</li></ul><p>要实现同步, 必须要在unity侧和Figma侧协同配合</p><h1>参考资料</h1><ul><li><a href="https://www.figma.com/developers/api#intro">https://www.figma.com/developers/api#intro</a></li><li><a href="https://developers.figma.com/docs/rest-api/">https://developers.figma.com/docs/rest-api/</a> 之前有一个FCU插件里面的Figma API的文档找不见了, 这个文档可能内容与找不到的那篇文档差不多</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity源码阅读</title>
      <link href="/posts/4d404b8c/"/>
      <url>/posts/4d404b8c/</url>
      
        <content type="html"><![CDATA[<p>初看Unity的PlayerLoop逻辑, 像是在业务开发中常用的事件中心的编程模型类似</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">PlayerLoop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ReentrancyChecker <span class="title">checker</span><span class="params">(&amp;s_InsidePlayerLoop)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!checker.<span class="built_in">IsOK</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorString</span>(<span class="string">&quot;An abnormal situation has occurred: the PlayerLoop internal function has been called recursively. &quot;</span></span><br><span class="line">            <span class="string">&quot;Please contact Customer Support with a sample project so that we can reproduce the problem and troubleshoot it.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> FRAME_DEBUGGER_REMOTE_PLAYER</span></span><br><span class="line">    <span class="keyword">if</span> (FrameDebugger::<span class="built_in">IsLocalEnabled</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        FrameDebugger::<span class="built_in">PlayerLoop</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    ::<span class="built_in">SetWorldPlayingThisFrame</span>(<span class="built_in">IsWorldPlaying</span>());   <span class="comment">// The IsWorldPlaying state can potentially be</span></span><br><span class="line">                                                    <span class="comment">// modified inside the loop, so to ensure consistency</span></span><br><span class="line">                                                    <span class="comment">// we need to store it for the duration of the frame.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//          ---                                               ----</span></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Do NOT add any logic or branches below, any new code MUST use callbacks</span></span><br><span class="line">    <span class="comment">//          ---                                               ----</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// The time should be updated as early as possible to allow the rest of the</span></span><br><span class="line">    <span class="comment">// loop logic to be on the same time for this loop. It is also a must before</span></span><br><span class="line">    <span class="comment">// calling SynchronizeState (used in cluster mode).</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(Initialization, PlayerUpdateTime);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(Initialization, AsyncUploadTimeSlicedUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(Initialization, SynchronizeInputs);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(Initialization, SynchronizeState);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(Initialization, XREarlyUpdate);             <span class="comment">// Potentially invalidates our GfxDevice!</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, PollPlayerConnection);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, ProfilerStartFrame);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, GpuTimestamp);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, UnityConnectClientUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, CloudWebServicesUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, NScreenUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, UnityWebRequestUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, ExecuteMainThreadJobs);        <span class="comment">// Update background tasks</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, ProcessMouseInWindow);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, ClearIntermediateRenderers);   <span class="comment">// In the editor, clear intermediate renderers before loop.</span></span><br><span class="line">                                                                    <span class="comment">// So that in paused state or when resizing windows,</span></span><br><span class="line">                                                                    <span class="comment">// we can still draw the previous ones.</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, ClearLines);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, PresentBeforeUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, ResetFrameStatsAfterPresent);  <span class="comment">// Reset frame stats after present (case 496221)</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, UpdateAllUnityWebStreams);</span><br><span class="line"></span><br><span class="line">    <span class="comment">////@<span class="doctag">TODO:</span> CLeanup code where input is processed after scene loading</span></span><br><span class="line">    <span class="comment">/// All input should be processed prior to scene loading</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, UpdateTextureStreamingManager);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, UpdatePreloading);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, RendererNotifyInvisible);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, PlayerCleanupCachedData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure the screen manager uses the correct Game View size, which is only known on the managed side.</span></span><br><span class="line">    <span class="comment">// We query it in the game loop rather than setting it from the Game View. This prevents multiple Game Views overwriting the value,</span></span><br><span class="line">    <span class="comment">// or none setting it because no Game View has its tab in front.</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, UpdateMainGameViewRect);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// UpdateCanvasRectTransform modifies the RectTransform of the Canvas.</span></span><br><span class="line">    <span class="comment">// It is done before all Update functions so that UI elements can react to the change in the same frame.</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, UpdateCanvasRectTransform);</span><br><span class="line"></span><br><span class="line">    <span class="comment">////@<span class="doctag">TODO:</span> CLeanup code where input is processed after scene loading</span></span><br><span class="line">    <span class="comment">/// All input should be processed prior to scene loading</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, UpdateInputManager);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, ProcessRemoteInput);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, XRUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, TangoUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, ScriptRunDelayedStartupFrame);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, UpdateKinect);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, DeliverIosPlatformEvents);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, DispatchEventQueueEvents);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, DirectorSampleTime);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, PhysicsResetInterpolatedTransformPosition); <span class="comment">// Initializes fixed time step loop</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, NewInputBeginFrame);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, SpriteAtlasManagerUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(EarlyUpdate, PerformanceAnalyticsUpdate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This is what fixed time stepping is doing</span></span><br><span class="line"><span class="comment">    float time = GetProfilerTime ();</span></span><br><span class="line"><span class="comment">    while (fixedTime &lt; time)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        fixedTime += fixedDeltaTime;</span></span><br><span class="line"><span class="comment">        UpdateFixedBehaviours ();</span></span><br><span class="line"><span class="comment">        UdateDynamicsManager ();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Which means:</span></span><br><span class="line"><span class="comment">      - fixed timestep is always larger than dynamic timestep</span></span><br><span class="line"><span class="comment">      - fixed delta time is always the same</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fixed framerate loop (fixed behaviours, dynamics, delayed calling)</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">GetTimeManager</span>().<span class="built_in">StepFixedTime</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, ClearLines);                       <span class="comment">// Placed here so we ensure it is also called</span></span><br><span class="line">                                                                            <span class="comment">// in edit-mode (fix for case 379024: pressing</span></span><br><span class="line">                                                                            <span class="comment">// stop did not properly clear fixedStepLines)</span></span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, NewInputEndFixedUpdate);</span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, DirectorFixedSampleTime);</span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, AudioFixedUpdate);</span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, ScriptRunBehaviourFixedUpdate);    <span class="comment">// Script.FixedUpdate</span></span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, DirectorFixedUpdate);</span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, LegacyFixedAnimationUpdate);       <span class="comment">// Animation (Root motion)</span></span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, XRFixedUpdate);</span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, PhysicsFixedUpdate);               <span class="comment">// 3D Physics</span></span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, Physics2DFixedUpdate);             <span class="comment">// 2D Physics</span></span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, DirectorFixedUpdatePostPhysics);   <span class="comment">// Animation IK and write bones</span></span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, ScriptRunDelayedFixedFrameRate);   <span class="comment">// Script Coroutines</span></span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, ScriptRunDelayedTasks);            <span class="comment">// Tasks on Synchronization Context</span></span><br><span class="line">        <span class="built_in">CALL_UPDATE_MODULAR</span>(FixedUpdate, NewInputBeginFixedUpdate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dynamics, animation, behaviours</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreUpdate, PhysicsUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreUpdate, Physics2DUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreUpdate, CheckTexFieldInput);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreUpdate, IMGUISendQueuedEvents);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreUpdate, NewInputUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreUpdate, SendMouseEvents);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreUpdate, AIUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreUpdate, WindUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreUpdate, UpdateVideo);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(Update, ScriptRunBehaviourUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(Update, DirectorUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(Update, ScriptRunDelayedDynamicFrameRate);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, AIUpdatePostScript);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, DirectorUpdateAnimationBegin);       <span class="comment">// Dynamic Step Animation Update</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, LegacyAnimationUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, DirectorUpdateAnimationEnd);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, DirectorDeferredEvaluate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, UpdateNetworkManager);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, UpdateMasterServerInterface);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, UNetUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, EndGraphicsJobsLate);                <span class="comment">// Latest possible time to end graphics jobs of the previous frame. Must run before any graphics callbacks.</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, ParticleSystemBeginUpdateAll);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PreLateUpdate, ScriptRunBehaviourLateUpdate);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, PlayerSendFrameStarted);            <span class="comment">// For Editor, we call begin frame just before starting</span></span><br><span class="line">                                                                            <span class="comment">// rendering RepaintController. For Runtime we start here.</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, DirectorLateUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ScriptRunDelayedDynamicFrameRate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, PhysicsSkinnedClothBeginUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateCanvasRectTransform);         <span class="comment">// UI update here after late update</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, PlayerUpdateCanvases);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateAudio);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ParticlesLegacyUpdateAllParticleSystems);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ParticleSystemEndUpdateAll);        <span class="comment">// We need to sync particle systems here to</span></span><br><span class="line">                                                                            <span class="comment">// make sure they update their renderers properly</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateSubstance);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateCustomRenderTextures);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateAllRenderers);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, EnlightenRuntimeUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateAllSkinnedMeshes);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ProcessWebSendMessages);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, SortingGroupsUpdate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// removed because nothing seems to actually register at this manager</span></span><br><span class="line">    <span class="comment">//GetUpdateManager ().Update ();</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateVideoTextures);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateVideo);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, DirectorRenderImage);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ExecuteOneJobInMainThread);         <span class="comment">// Execute one job from the main thread</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, PlayerEmitCanvasGeometry);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, PhysicsSkinnedClothFinishUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, FinishFrameRendering);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, BatchModeUpdate);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, PlayerSendFrameComplete);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateCaptureScreenshot);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, PresentAfterDraw);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ClearImmediateRenderers);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, PlayerSendFramePostPresent);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, UpdateResolution);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, InputEndFrame);                     <span class="comment">// Clear the input string and the key-down events at the end</span></span><br><span class="line">                                                                            <span class="comment">// of the Loop. This makes sure all input string is cleared.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// We have two UI systems. IM GUI &amp; the new component based UI system.</span></span><br><span class="line">    <span class="comment">// IM GUI doesn&#x27;t consume the move events. They are consumed by the player loop.</span></span><br><span class="line">    <span class="comment">// But there might be no scripts popping the vents. So clear them at the end of the frame.</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, GUIClearEvents);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ShaderHandleErrors);                <span class="comment">// Handle any shaders with errors discovered</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ResetInputAxis);                    <span class="comment">// We entered Text Field input this frame, Game mode input</span></span><br><span class="line">                                                                            <span class="comment">// is disabled. Reset axes, so they don&#x27;t stick.</span></span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ThreadedLoadingDebug);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ProfilerSynchronizeStats);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, MemoryFrameMaintenance);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ExecuteGameCenterCallbacks);</span><br><span class="line">    <span class="built_in">CALL_UPDATE_MODULAR</span>(PostLateUpdate, ProfilerEndFrame);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_PLAYERLOOP_CALL(TYPE_, NAME_, BODY_, ...)                       \</span></span><br><span class="line"><span class="meta">    struct TYPE_##NAME_##Registrator                                             \</span></span><br><span class="line"><span class="meta">    &#123;                                                                            \</span></span><br><span class="line"><span class="meta">        static void Forward (__VA_ARGS__)                                        \</span></span><br><span class="line"><span class="meta">        &#123;                                                                        \</span></span><br><span class="line"><span class="meta">            PROFILE_CALLBACK_AUTO(TYPE_##NAME_##Registrator, #TYPE_ <span class="string">&quot;.&quot;</span> #NAME_); \</span></span><br><span class="line"><span class="meta">            BODY_;                                                               \</span></span><br><span class="line"><span class="meta">        &#125;                                                                        \</span></span><br><span class="line"><span class="meta">    &#125;;                                                                           \</span></span><br><span class="line"><span class="meta">    gPlayerLoopCallbacks.TYPE_.NAME_ = TYPE_##NAME_##Registrator::Forward;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityUGUI解构(二)-EventSystem</title>
      <link href="/posts/28d70de0/"/>
      <url>/posts/28d70de0/</url>
      
        <content type="html"><![CDATA[<h1>GraphicRaycaster</h1><p>为什么在创建Canvas节点的时候, 都要GrapihcRaycaster会自动创建<br>GrapihcRaycaster组件不是必须的, 删除掉之后这个Canvas就不能响应点击了.</p><p>要看明白下面这段逻辑是在干什么</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">bool</span> <span class="title">Raycast</span>(<span class="params">Vector2 sp, Camera eventCamera</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isActiveAndEnabled)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> t = transform;</span><br><span class="line">    <span class="keyword">var</span> components = ListPool&lt;Component&gt;.Get();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bool</span> ignoreParentGroups = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">bool</span> continueTraversal = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (t != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t.GetComponents(components);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; components.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> canvas = components[i] <span class="keyword">as</span> Canvas;</span><br><span class="line">            <span class="keyword">if</span> (canvas != <span class="literal">null</span> &amp;&amp; canvas.overrideSorting)</span><br><span class="line">                continueTraversal = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> filter = components[i] <span class="keyword">as</span> ICanvasRaycastFilter;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (filter == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> raycastValid = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">group</span> = components[i] <span class="keyword">as</span> CanvasGroup;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">group</span> != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">group</span>.enabled)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ignoreParentGroups == <span class="literal">false</span> &amp;&amp; <span class="keyword">group</span>.ignoreParentGroups)</span><br><span class="line">                &#123;</span><br><span class="line">                    ignoreParentGroups = <span class="literal">true</span>;</span><br><span class="line">                    raycastValid = filter.IsRaycastLocationValid(sp, eventCamera);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!ignoreParentGroups)</span><br><span class="line">                    raycastValid = filter.IsRaycastLocationValid(sp, eventCamera);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                raycastValid = filter.IsRaycastLocationValid(sp, eventCamera);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!raycastValid)</span><br><span class="line">            &#123;</span><br><span class="line">                ListPool&lt;Component&gt;.Release(components);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t = continueTraversal ? t.parent : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListPool&lt;Component&gt;.Release(components);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>EventSystem的触发机理</h1><p>依赖Raycast给的一些数据, 用这些数据找到Raycast命中的gameobject, 找到这些gameObject上的Handler组件, 触发这些Handler.</p><p>不管市面上的UnityUI的方案(比如FGUI)多炫酷, 最终到Unity中都是要走UGUI的底层</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Actor模型</title>
      <link href="/posts/d6fe94a3/"/>
      <url>/posts/d6fe94a3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>迷思——欲速则不达</title>
      <link href="/posts/5b1bb5d7/"/>
      <url>/posts/5b1bb5d7/</url>
      
        <content type="html"><![CDATA[<h1>坚持下去 总会有成效的</h1><p>跑步跟看代码是差不多的 一开始的时候会有一段阵痛期, 但是稳住心态, 坚持一下熬过了阵痛期, 就会有豁然开朗的感觉了</p><p>短期内看不到成效<br>看代码也是 画UML图 画着画着 画到一定规模 YooAsset的架构就豁然开朗了</p><p>看不懂的代码, 画UML图, 画着画着, 就清楚了,</p><h1>学吉他</h1><p>缺少耐心了</p><h1>要吃屎</h1><p>对一些业务不感兴趣 不行 要硬着头皮去做一些不想做的事情</p>]]></content>
      
      
      <categories>
          
          <category> 迷思 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityUGUI解构(一)——RectTransform</title>
      <link href="/posts/67d7d086/"/>
      <url>/posts/67d7d086/</url>
      
        <content type="html"><![CDATA[<p>RectTransform继承自Transform, 并没有包含在UGUI体系里面, 但是RectTransform的字段绝大多数情况下只在UGUI体系中才有意义.  因此我们可以将RectTransform看作是Unity UGUI的一部分, 并且将其作为UGUI系列中首个分析的对象.</p><h1>锚点(Anchor)与中心点(Pivot)</h1><h2 id="锚点Anchor">锚点Anchor</h2><p>这个Anchor并不是直接参与位置信息运算的数据, Unity会先根据这个信息计算出一个anchorReferencePosition, 再用这个值进行其他的运算.<br>在Unity中 锚点是可以至多被分成四个角的, 并不是一个点. 而在计算一个RectTransform中的一些属性时需要把锚点作为一个&quot;点&quot; 参与运算, 作为四个角不重合的情况, 需要有一个Anchor Reference Position来作为锚点,<br>Anchor Reference Position的计算公式如下:<br>$$ AnchorReferencePosition_x = (1 - pivot_x) \times x_0 + pivot_x \times x_1 $$<br>$$ AnchorReferencePosition_y = (1 - pivot_y) \times y_0 + pivot_y \times y_1 $$<br>其中 (x0, y0)代表的是AnchorMin在该RectTransform的父节点中的位置, (x1, y1)代表的是AnchorMax在该RectTransform的父节点中的位置, (pivotx, pivoty)指的是中心点的归一化位置坐标</p><p>有一个概念叫AnchoredPosition, 这个值的含义是Pivot点相对于<code>Anchor Reference Position</code>的距离, 当锚点的四个角没有重合在一点时, 我们可能会以为Anchor Reference Position</p><p>AnchoredPosition和Local Position的区别是什么?<br>在Transform(非RectTransform)体系中, 子物体的localPosition只能通过调整其和父物体的相对位置来实现变化, 在RectTransform体系下, 子物体的localPosition除了受相对位置的影响, 还与父物体的width、子物体本身的pivot有关</p><h1>RectTransform中的字段</h1><blockquote><p>💡本文我们只讨论RectTransform中有而Transform中没有的字段</p></blockquote><ul><li>rect Rect 注意RectTransform中的rect成员不支持直接修改注意以上字段都是不可以通过RectTransform操作其值的., 因为没有set属性, 外部没有对它的访问权限<ul><li>xMin, 代表的是rect围成矩形区域的左下角的横坐标值, 坐标系原点是这个rect围成的矩形区域的中心点,</li><li>yMin, 代表的是rect围成矩形区域的左下角的纵坐标值, 坐标系原点是这个rect围成的矩形区域的中心点,</li><li>mHeight, 这个rect围成矩形的高</li><li>mWidth, 这个rect围成矩形的宽</li></ul></li><li>anchorMin Vector2 以当前RectTransform的父节点的rect的左下角为坐标原点, 锚点左下角的归一化位置坐标</li><li>anchorMax Vector2 以当前RectTransform的父节点的rect的左下角为坐标原点, 锚点右上角的归一化位置坐标</li><li>sizeDelta Vector2 当锚点四角重合时, sizeDelta.x=rect.width=(offsetMax-offsetMin).x, sizeDelta.y=rect.height=(offsetMax-offsetMin).y 当不重合时 sizeDelta.x=(offsetMax-offsetMin).x, sizeDelta.y=(offsetMax-offsetMin).y</li><li>offsetMin Vector2 指锚点左下角与rect的左下角的偏移值 以当前RectTransform的父节点的rect的左下角为坐标原点</li><li>offsetMax Vector2  指锚点右上角与rect的右上角的偏移值 以当前RectTransform的父节点的rect的左下角为坐标原点</li><li>anchoredPosition Vector2</li><li>anchoredPosition3D Vector3 包含anchoredPosition的xy分量, 增加了z分量 一般用不到<br>localPosition的含义是当前RectTransform的pivot相对于该RectTransform的父节点rect的中心点的位置, 由于可以调整父节点的rect, 所以可以间接影响子物体的localPosition属性, 而我也可以让rect的绝对位置不变 通过改变pivot的位置来影响localPosition的值, 这在Transform(非RectTransform)体系下是不太可能做到的,</li></ul><p>锚点(Anchor)描述的是当前UI节点和其父节点的位置关系, 锚点虽然叫点, 但是会存在锚点的四个角没有重合的情况. 只不过锚点的四角重合时anchor reference position和该点重合了而已 unity会计算出一个anchor reference point, 和pivot做运算得到anchored position<br>中心点(Pivot)描述的是当前UI节点的轴心位置 与父节点无关</p><h1>IDragHandler</h1><p>在此猜测 , IDragHandler的生效逻辑是什么</p><p>每一帧 Unity都会从摄像机出发生成一个射线 由你的pointer投射到场景中的gameObject上, 每一帧你都会拿到这些信息 拿到这些物体, 查看这些物体上挂载的组件有没有实现IDragHandler接口, 如果有, 出发这个IDragHnader的fafa</p><p>在Unity源码中 搜 localIdentifierInFile</p><p>BuildSerialization.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ConvertSceneObjectsToInstanceIDBuildRemap</span><span class="params">(<span class="type">const</span> core::string&amp; path, <span class="type">const</span> WriteDataArray&amp; sceneObjects, InstanceIDBuildRemap&amp; output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> pathIndex = <span class="built_in">GetPersistentManager</span>().<span class="built_in">GetSerializedFileIndexFromPath</span>(path);</span><br><span class="line"></span><br><span class="line">    output.<span class="built_in">reserve</span>(output.<span class="built_in">size</span>() + sceneObjects.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span> (WriteDataArray::const_iterator i = sceneObjects.<span class="built_in">begin</span>(); i != sceneObjects.<span class="built_in">end</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Assert</span>(i-&gt;localIdentifierInFile != <span class="number">0</span>);</span><br><span class="line">        output.<span class="built_in">push_unsorted</span>(i-&gt;instanceID, <span class="built_in">SerializedObjectIdentifier</span>(pathIndex, i-&gt;localIdentifierInFile));</span><br><span class="line">    &#125;</span><br><span class="line">    output.<span class="built_in">sort</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ResourceManager.cpp中的void BuiltinResourceManager::InitializeResources()方法</p><p>下面这段代码, 推测应该是Unity给资产生成FileId的逻辑<br>明天验证一下 对于大部分的FBX中的mesh资源, 他们应该都是叫同样的名字, 又因为他们都是mesh, 所以传入的参数一样, 所以在meta文件中, 你可以看到, 即便是引用了不同的fbx的mesh, 变的只有guid, fileid都是一样了<br>明天验证一下, 两个mesh名不一样的fbx, 应该fileId就会不一样, 而且改了mesh的名字, fileId的名字也就会跟着变</p><h1>说说RectTransform中的更新逻辑</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RectTransform::InitializeClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">RegisterAllowNameConversion</span>(<span class="built_in">TypeOf</span>&lt;RectTransform&gt;()-&gt;<span class="built_in">GetName</span>(), <span class="string">&quot;m_Position&quot;</span>, <span class="string">&quot;m_AnchoredPosition&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">REGISTER_MESSAGE</span>(kTransformChanged, OnTransformChanged, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">InitializeRectTransformAnimationBindingInterface</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RectTransform::OnTransformChanged</span><span class="params">(<span class="type">int</span> mask)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// If reparenting then simply dirty the rectangle.</span></span><br><span class="line">    <span class="keyword">if</span> (mask &amp; Transform::kParentingChanged)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">UpdatePosAndRectRecursive</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Only update if transform position changed.</span></span><br><span class="line">    <span class="keyword">if</span> (!(mask &amp; Transform::kPositionChanged))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Don&#x27;t process rect-updates otherwise we&#x27;ll get infinite recursion.</span></span><br><span class="line">    <span class="comment">// Don&#x27;t process parent-changes as these will come from the prefab-merging code when it is dealing with sibling positioning which causes positioning issues.</span></span><br><span class="line">    <span class="keyword">if</span> (mask &amp; (Transform::kDontUpdateRect | Transform::kSiblingOrderChanged))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    Vector3f targetLocalPosition = <span class="built_in">GetLocalPosition</span>();</span><br><span class="line">    Vector2f rectLocalPosition = <span class="built_in">CalculateLocalPosition2</span>();</span><br><span class="line">    Vector2f anchoredPosition = <span class="built_in">Vector2f</span>(m_AnchoredPosition.x + targetLocalPosition.x - rectLocalPosition.x, m_AnchoredPosition.y + targetLocalPosition.y - rectLocalPosition.y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mask &amp; Transform::kReceivedDueToCameraTRSChanged)</span><br><span class="line">        <span class="built_in">SetAnchoredPositionWithoutNotification</span>(anchoredPosition);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">SetAnchoredPosition</span>(anchoredPosition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RectTransform::UpdatePosAndRectRecursive</span><span class="params">(<span class="type">bool</span> sendTransformChange, <span class="type">const</span> Rectf* forceRect)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UInt32 changeMask = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (forceRect)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_CachedRect != *forceRect)</span><br><span class="line">        &#123;</span><br><span class="line">            changeMask |= kLocalRectChanged;</span><br><span class="line">            m_CachedRect = *forceRect;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        changeMask = <span class="built_in">UpdatePosAndRect</span>(sendTransformChange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (changeMask &amp; kLocalPositionChange)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (sendTransformChange)</span><br><span class="line">            <span class="built_in">SendTransformChanged</span>(Transform::kPositionChanged | Transform::kDontUpdateRect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Recursively update the cached rect if the local rect has changed</span></span><br><span class="line">    <span class="keyword">if</span> (changeMask &amp; kLocalRectChanged)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> childCount = <span class="built_in">GetChildrenCount</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; childCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Transform&amp; child = <span class="built_in">GetChild</span>(i);</span><br><span class="line">            RectTransform* childRect = <span class="built_in">dynamic_pptr_cast</span>&lt;RectTransform*&gt;(&amp;child);</span><br><span class="line">            <span class="keyword">if</span> (childRect != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                childRect-&gt;<span class="built_in">UpdatePosAndRectRecursive</span>(sendTransformChange);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sendTransformChange)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// LocalPosition or local Rect has changed, all geometry must be recomputed.</span></span><br><span class="line">            <span class="comment">// We send the message kOnRectTransformDimensionsChange  to children first, and then to their parents and so on.</span></span><br><span class="line">            <span class="built_in">SendMessage</span>(kOnRectTransformDimensionsChange);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSharp合集</title>
      <link href="/posts/d97e22f1/"/>
      <url>/posts/d97e22f1/</url>
      
        <content type="html"><![CDATA[<p>CSharp问题杂记<br><a href="20505312">CSharp前传</a><br>CSharp中的委托<br>CSharp中的CancellationToken<br>CSharp中的Task<br>Dissecting-the-async-methods-in-CSharp<br>Extending-the-asynce-methods-in-CSharp-译</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码热更新合集</title>
      <link href="/posts/99b1bffa/"/>
      <url>/posts/99b1bffa/</url>
      
        <content type="html"><![CDATA[<h1>XLua、ILRuntime、HybridCLR热更原理</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSharp前传</title>
      <link href="/posts/20505312/"/>
      <url>/posts/20505312/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《CLR via C#》这本书帮助读者建立起了C#的知识框架, 是笔者职业生涯中功不可没的好书, 不过本书的作者Jeffrey <a href="http://xn--Richter-oc5k144o.Net">Richter是以.Net</a> Framework框架在Windows平台进行开发的视角上介绍.Net的一些特性的, 而笔者作为一个Unity入门C#的半吊子在最初阅读本书的很长一段时间内是没有真正理解.Net的核心特性的. 在本篇博客中, 笔者尝试基于这本书, 加上笔者对Unity的理解, 站在Unity开发者的视角上, 诠释.Net中的一些关键性概念.</p></blockquote><h1>.NET往事</h1><p>在《CLR via C#》<a href="http://xn--1jq840bfog6d140aln3a9iqxvd2rli4epa472o.Net">这本书里面并没有详细解释.Net</a>、.NetCore、.Net Standard、.Net Framework一系列的概念, 之所以有这么多的概念, 也是有历史原因的, 了解.Net的发展史能帮我们更好地理解这些概念、<br>.Net是.Net C#是C#, .Net是一套支持C#代码运行的框架体系, 除此之外.Net还支持F#、VB等语言</p><p>.Net Framework、 .NetCore、 .Net这三者是对同一个对象在不同发展时期的不同称谓, 这一对象在不同发展时期具有不同的特点.<br>他们是同种概念的不同形态</p><h2 id="Net-Framework时期">.Net Framework时期</h2><p>早期的.Net只能运行在<br>此时的.Net只能够运行在Windows上, 而且C#代码的运行方式是JIT模式</p><h2 id="Mono的出现">Mono的出现</h2><p>由于.Net完全闭源, 有一群人从零手搓了一个, 使用体验跟.Net一模一样的Mono, 而且还支持跨平台, 就跟汉堡王和肯德基一样, 都是汉堡薯条, 吃起来大同小异, 但是做法原料可能完全不同, 也就是说, Mono和.Net可能底层实现不一样, 但是上层要实现的功能是完全一样的: 为C#(笔者这里就只说C#了)提供一套能够正确运行的环境, 知道这个就行了.</p><h2 id="Net-Core是啥">.Net Core是啥</h2><p>.Net Core在原来.NetFramework的基础上, 增加了对于跨平台的支持</p><h2 id="Net-是啥">.Net 是啥</h2><p><a href="http://xn--6kqv66j.Net">至于.Net</a>, 是目前的大一统状态, 里面</p><p>经过一段时间的演变, .Net <a href="http://xn--Core-ts5fw5zn9ou7k.Net">Core就变成了.Net</a></p><table><thead><tr><th>组件名称</th><th>作用</th><th>说明</th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>CoreCLR / .NET Runtime</td><td>托管运行时/虚拟机，负责执行IL，中间语言JIT，GC</td><td><a href="https://github.com/dotnet/runtime%EF%BC%88%E5%B7%B2%E5%BC%80%E6%BA%90%EF%BC%89">https://github.com/dotnet/runtime（已开源）</a></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>CoreFX / 基类库（Base Class Library, BCL）</td><td>常用系统API：IO、网络、集合、字符串等</td><td>现代叫runtime中的“libraries”</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><a href="http://ASP.NET">ASP.NET</a> Core</td><td>Web开发框架</td><td>支持Web服务器、API、MVC、Blazor、SignalR、gRPC等平台</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Entity Framework Core</td><td>对象关系映射（ORM）数据库组件</td><td>支持SQLServer、SQLite、MySQL等主流数据库</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>WinForms、WPF（Windows Only）</td><td>桌面GUI开发</td><td>.NET 5+支持基本移植，但仅限Windows</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>MSBuild</td><td>构建系统</td><td>dotnet build 就是用的这个</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Roslyn</td><td>C#、VB.NET编译器和代码分析器</td><td><a href="https://github.com/dotnet/roslyn">https://github.com/dotnet/roslyn</a></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>NuGet</td><td>包管理工具</td><td>在线/本地包管理</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>CLI</td><td>命令行工具（dotnet）</td><td>包括dotnet、dotnet build、dotnet run等基础命令</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Mono是啥">Mono是啥</h2><p>Mono 项目始于 2001 年，由 Ximian 公司的创始人 Miguel de Icaza 领导。Ximian 是一家专注于 Linux 和开源软件的公司。Miguel de Icaza <a href="http://xn--4gqvd70lutrsxi5wc1t2biya.NET">的目标是创建一个.NET</a> 框架的开源实现，以便在 Linux 上运行。</p><p>.NET 框架最初由微软开发，主要用于构建 Windows 应用程序。<a href="http://xn--6kqu55g.NET">由于.NET</a> 框架的闭源性，它无法直接在其他操作系统上运行。Mono 项目的出现打破了这一限制，<a href="http://xn--2rq350b.NET">使得.NET</a> 开发者的代码能够在多种平台上运行。</p><p>随着时间的推移，Mono 项目得到了广泛的社区支持，并且不断发展和完善。它支持多种编程语言，包括 C#、Visual <a href="http://Basic.NET">Basic.NET</a> 和 F#，<a href="http://xn--phqsk73ztrc71ev35bpf9a.NET">并且实现了许多.NET</a> 框架的功能。Mono <a href="http://xn--fiqqezet6cs0gs0ag5r80qxpgh48a7jsgeb81q2u9fc90a.NET">项目在开源社区中的成功也促进了.NET</a> 技术在非 Windows 平台上的普及。</p><p><a href="http://xn--xft85uwsaj08j.xn--Net-6g3ei87f2r7a.Net">还有就是.Net升级是.Net</a> C# language升级是language<br>一般来说, 先是C#的语言有更新, 必须新增了某种语法或者语言特性 那么配套的.Net中就需要支持能够识别并驱动这些语法, 因此一般C#有新特性增加对应的.Net也有新的升级</p><p>说白了 .Net、.NetCore、.NetFramework、Mono每一个都是一套让C#代码能够运行跑起来的平台. 这就好比各家虚拟机平台, 而C#就像是你在微软官网上下载的Windows操作系统的镜像文件, 你可以将这个镜像文件挂载在VMWare平台上, 也可以挂载在Parallel Desktop平台上, 即便平台的底层实现不同, 但是因为它们都遵循同样的规范, 因此同样的一操作系统镜像文件可以跑在不同的虚拟机平台上, 这些平台遵循的规范, 类比到.Net中也就是<code>.Net Standard</code></p><h2 id="Net-Standard">.Net Standard</h2><p>.Net Standard 是针对多个 .Net实现推出的一套正式的.Net API规范. 推出.NetStandard的背后动机是要提高.Net生态系统中的一致性.<br>由上面的陈述可知, .Net有很多的实现, 为了能够让不同实现的.Net能够协同工作, .Net Standard出现了. 比如在Unity开发中, 你需要使用一个托管的dll, 这个dll使用.Net环境开发, 而Unity是Mono环境, 为了让dll中的代码能够和Unity中的代码正确协同, <a href="http://xn--Unitydll-b50n2ky0c413fdixom8b6r7cmhhzivd30a.Net">只需要让Unity和dll遵循同样的.Net</a> Standard版本就可以了. 在Unity的BuildSettings中的APICompatibilityLevel就是这个作用, 不同的Unity版本可以对标的.Net版本也不太一样. 比如在<code>2020.3.48</code>版本中, <code>API Compatibility Level</code>的选项是<code>.Net 4.X</code>和<code>.Net Standard 2.0</code>, 而在<code>2022.3.15</code>版本中, <code>API Compatibility Level</code>的选项则变成了<code>.Net Standard 2.1</code>和<code>.Net Framework</code>. 所以这么一看你所使用的插件必须要有<code>API Compatibility Level</code>相对应的版本才能够在Unity中使用.<br><a href="http://xn--zbs584j.Net">说回.Net</a>, .Net5采用的不同的方法来建立一致性, <a href="http://xn--ghqe42iv2dxrl2vvsdhtrtvcvrs3cu50i0xyjnofs9cchveoes67a.Net">这种新方法在很多情况下都不需要使用到.Net</a> Standard.</p><p>你的Unity工程，允许代码能用（兼容）的 .NET（或Mono）API集合的标准程度。</p><p>Unity的脚本运行环境（Scripting Backend）是基于Mono（或IL2CPP）来实现C#环境的；<br>但Mono和微软官方.NET实现的API/标准并不是完全一致的，有新有旧、有全有残；<br>API Compatibility Level，就是让你指定用哪一套标准的API接口子集：<br>比如：.NET 2.0 Subset<br>又比如：.NET 4.x / .NET Standard 2.0<br>或者更高（随着Unity版本演进而变化）<br>这些选项，<a href="http://xn--Unity-fg1hjcs88bgjegyy9a11h01wpp1glkcu71cohh804h.NET">实际上背后对应着一组Unity定制的.NET</a> Base Class Library (BCL)，决定你在C#脚本里能不能引用、编译、反射、调用某些标准库功能。</p><p>新项目：优先选“.NET 4.x”或“.NET Standard 2.0”。<br>项目中有现代C#语法（如async/await、LINQ等）：必须选新标准。<br>做插件/SDK跨Unity兼容：优先考虑“.NET Standard 2.0”。<br>有老DLL、Asset Store资产只支持2.0，且不想升级：临时用“.NET 2.0”。<br>手机版本极度精简、追求最小包体：用Subset，但很少有这种极端需求。</p><h1>一个C#工程使用的.Net版本怎么看?</h1><p>注意.Net版本和C#LanguageVersion是两个东西,<br>对于使用Rider创建的C#项目,</p><p>Unity的.NetVersion能不能改?</p><h1>一个C#工程使用的.Net版本怎么修改?</h1><h1>C#项目的组织结构</h1><h1>Unity项目的代码组织结构</h1><h2 id="sln-csproj-dll-asmdef-pdb的区别和联系">.sln .csproj .dll .asmdef .pdb的区别和联系</h2><h2 id="dll">.dll</h2><p>如果你的C#项目选择的是ClassLibrary, 那么构建这个C#项目的时候, 构建结果就是.dll,<br><a href="https://github.com/shimat/opencvsharp/releases">这是C#版本的OpenCV库</a>, 下载他的release你会发现,里面还带一个pdb文件.<br>.sln 是<br>.csproj 一个sln下会有多个csproj<br>.asmdef 这是Unity中的一个概念, 每创建一个asmdef, Unity都会自动生成这个asmdef对应的csproj<br>.dll dll一般有两种: 使用C#编译生成的dll, 这类dll属于托管类dll, 导入Unity能够直接被Unity编译器识别; 还有一类是使用c/c++等非托管类语言编译生成的dll, 这类dll需要C#具有能够调用原生(native)代码的能力, 需要使用<code>[DLLImport]</code>属性来导入方法</p><p>对于简单的项目 完全没必要创建sln 但是像Rider、Visual Studio这些IDE是没有提供只创建csproj的选项的, 这就有点大材小用了 我们可以通过使用命令行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建后是一个dll</span></span><br><span class="line">dotnet new classlib</span><br></pre></td></tr></table></figure><p>这种方式只创建csproj, 然后使用Rider或者VS打开这个csproj, 就可以绕过生成sln文件<br>.sln（Solution）文件是 Visual Studio/VS Code/Coderush Rider 等IDE用来管理一组相关项目（.csproj）的容器。比如你要做大型架构、包括多个类库、应用，以及单元测试项目时，.sln文件可以统一管理它们的依赖与结构。<br>但是，小项目、单个项目时，完全可以不建 .sln，只用一个 csproj 文件照样编译、运行、开发（如命令行下dotnet build XX.csproj，VS Code 也能直接打开）。<br>实例1：你在任意文件夹里新建dotnet new console，它会创建Program.cs和XX.csproj，没有.sln，也能正常dotnet run/build。<br>只有需要管理多个项目（比如引用类库或测试工程等），用.sln会更方便。</p><p>pdb 文件是什么？</p><p>PDB（Program Database）是Windows/Visual Studio环境下的“程序数据库”文件。<br>内容：主要存储了可执行文件（exe/dll等）的调试信息，如：<br>源文件名/路径<br>行号<br>局部变量、函数参数名<br>类型信息<br>符号表、断点等信息<br>目的是：进行调试时，IDE/调试器能还原源代码对应关系、栈、变量名等，是“调试辅助文件”。<br>3. dll 和 pdb 的关系</p><p>当你用 Visual Studio 编译一个 dll 时（Debug 模式），通常会生成同名的 pdb 文件。<br>这个 dll 文件是真正的动态库，pdb 文件不给程序加载，只在调试/分析时让开发者用。<br>没有 pdb，发布的 dll 依然可以运行，只是调试难度大。</p><h1>C#代码是怎么跑起来的?</h1><p>在《CLR via C#》中, 作者只提及了JIT, 因为AOT方式是在2022年在.Net7发布的, 本书的成书时间应该是2014年, 没有提及AOT也是很正常的</p><h2 id="JIT模式">JIT模式</h2><p>在Unity中, 这对应的就是Mono的构建方式</p><p>JIT方式打包, 在打包阶段, 我们编写的C#代码会被编译成IL, 打入一个.dll的文件, 这就是Mono的打包方式, 使用这种方式打的包, 包体小, 但是由于其代码不是原生的, 所以运行时需要依赖CLR将IL代码编译成原生代码执行, 比起AOT方式 在启动时间上会久一点, 因为需要编译, 但是只要编译了一次之后, 执行效率和AOT是没什么区别的</p><p>笔者认为在一开始.Net可能就只支持JIT的方式执行C#代码, 而AOT和解释器方式则是跨平台的概念引入到.Net中后, 才出现的概念.</p><p>随着.Net支持跨平台. 想要在MacOS、iOS上运行.Net程序, 使用JIT的方式就不行了, 因为苹果是不允许程序运行时动态加载代码的, 所有代码必须被编译成机器码原生地执行. 这就是AOT模式</p><h2 id="AOT模式">AOT模式</h2><p>微软是在.Net7版本中实现了AOT功能.</p><p>在Unity中, 这对应的就是IL2CPP的构建方式</p><p>我们就拿Unity开发举例子, 如果使用AOT的方式打包, 那么在打包阶段, 我们编写的C#代码就会全部被编译成机器码, 也就是.so文件, 这种代码就是原生的代码, 丢到机器上就就能立刻运行, 不需要编译, 但是机器码都是01, 存储效率低, 由我们的C#脚本转成机器码会造成代码膨胀, 听起来是不是很像IL2CPP?</p><p>那在AOT推出之前, Unity是怎么实现在iOS平台上发布的呢? Mono是专门提供了</p><h1>代码热更</h1><h2 id="Interpreter模式">Interpreter模式</h2><p>解释器, 笔者第一次看到这个概念出现在C#中时, 是非常疑惑的, 因为笔者理解的解释器, 是像Python那种解释型语言才会使用到的东西, 而C#作为一个编译型语言, 其实C#并不是传统意义上的编译型语言, 因为C#是先编译成IL中间语言, 然后在运行时通过JITCompiler将中间语言编译成机器码执行的方式.</p><p>也就是, C#不解释型语言那样直接解释源代码执行, 也不像C++那样一次性把源代码编译成机器码执行.</p><p>解释器模式可以理解为是在Unity开发中代码热更新场景下, 业内开发者为了能够执行热更代码(dll)而开发的一种迷你版的CLR(虚拟机).<br>我再理解一下解释器的角色, 解释器就是在AOT打包方式下, 主包的.Net的虚拟机被剔除丧失了解析编译IL(dll)的能力, 需要一个迷你版的虚拟机(也就是解释器)来执行IL代码</p><h1>JIT和解释器的区别是啥呢? 不都是运行时编译代码嘛?</h1><p>JIT方式是有完整的Mono或者CLR虚拟机的机制, 而解释器则是一种针对Unity热更场景下的迷你版虚拟机机制.</p><h2 id="Lua、XLua">Lua、XLua</h2><h2 id="ILRuntime">ILRuntime</h2><h2 id="HybridCLR">HybridCLR</h2><h1>C#的执行机制</h1><p>C#代码会被编译成IL语言, 在运行的时候, 通过一个Interpreter(解释器)逐行解释IL指令运行<br>在IOS上, 是不允许JIT的方式运行代码的, 只能使用AOT的方式运行<br>在Android等其他设备上AOT和JIT都是可以的</p><h1>如今行业内主流的热更方案究竟是怎么形成的?</h1><ul><li>由于IOS对于JIT的限制, 导致主包必须使用AOT的方式打包, <a href="http://xn--AOT-0y9d42pwx1aclan9eb47e78s.Net">而AOT打包会直接把.Net</a> Mono虚拟机剔除掉, 将C#直接转成C++原生代码. 这就会导致主包不具备识别dll能力</li><li>接着, 由于各个操作系统平台对于原生代码的动态加载是有限制的（比如 dlopen 加新 so/dll）, 所以想要在运行时动态的加载一段逻辑进来, 只能使用非原生代码, 于是热更通常选择DLL（IL）</li><li>要让底包能认识和运行“热更dll”里的 C# 代码，就得有.NET虚拟机。但AOT打包让虚拟机相关能力被移除/阉割，不认dll。 但是虚拟机在AOT打包的时候已经几乎被完全剔除掉了, 因此我们必须让它恢复识别dll的功能,</li><li>要想恢复识别dll的能力，就得集成新的虚拟机或解释能力（比如ILRuntime/HybridCLR）。HybridCLR的意义就是让AOT包恢复充分甚至很大程度原生的DLL识别/运行能力。这就是HybridCLR所做的事情在AOT打包模式剔除掉Mono虚拟机识别dll代码能力的情况下, 重写AOT的打包方式, 让其保留能够识别dll代码的能力.</li></ul><h1>代码热更新</h1><p>为什么代码热更新都选择使用JIT(将热更代码编译成dll)的方式, 而不选择AOT原生方式呢?</p><h1>热更的代码和热更的资源 哪个应该先加载?</h1><p>热更代码的调用方式<br>有一种很取巧的方式加载热更代码, 那就是把热更代码挂载到某一个预制体上, 通过Unity的Awake方法调用热更代码的入口<br>AOT程序集 就是底包程序集 AOT是一种代码编译方式 它会</p><p>什么是streaming path? 什么是persistent path?</p><h1>一些Unity中无法内置的dll的处理</h1><p><a href="https://blog.csdn.net/lanchunhui/article/details/53239441">https://blog.csdn.net/lanchunhui/article/details/53239441</a></p><p><a href="https://zh.wikipedia.org/zh-hans/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83">https://zh.wikipedia.org/zh-hans/正态分布</a></p><p><a href="https://blog.csdn.net/qq_17347313/article/details/106995687">https://blog.csdn.net/qq_17347313/article/details/106995687</a><br>C#中正态分布的第三方库</p><h1>正态分布</h1><h2 id="标准正态分布">标准正态分布</h2><h1>正偏态分布</h1><h1>累积分布函数</h1><h1>参考</h1><ul><li><a href="https://www.cnblogs.com/SunSpring/p/15047424.html">.net 温故知新：【2】 .Net Framework 、.Net 、 .NET Standard的概念与区别</a></li><li><a href="https://blog.csdn.net/codywangziham01/article/details/123689658">AOT 和 JIT、 IL2CPP和Mono、 CLR、 ILRuntime热更新原理</a></li><li><a href="https://www.cnblogs.com/fly-100/p/4594380.html">Unity跨平台原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/88692056">Unity从发布到流行经历了什么重大变化（2）</a></li><li><a href="https://blog.csdn.net/gz_huangzl/article/details/52486255">Unity将来时：IL2CPP是什么？有了Mono为什么还需要IL2CPP?</a></li><li><a href="https://blog.csdn.net/Funniyuan/article/details/136002603">.NET 发展历程与未来</a></li><li><a href="https://my.oschina.net/emacs_9244658/blog/18230886">Mono 软件发展历程详解</a></li><li><a href="https://www.cnblogs.com/willick/p/15038133.html">.NET 的发展简史</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3D数学基础-多个坐标空间</title>
      <link href="/posts/109e75d5/"/>
      <url>/posts/109e75d5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityEditor开发中Singleton的设计</title>
      <link href="/posts/1477ebaf/"/>
      <url>/posts/1477ebaf/</url>
      
        <content type="html"><![CDATA[<h1>在Editor下创建单例</h1><p>灵感来自Unity的<a href="https://sites.google.com/view/monkey-user-guide/getting-started">MonKey插件</a></p><h2 id="使用场景">使用场景</h2><p>我有一些由<code>ScriptableObject</code>、<code>json</code>或者别的格式组织的一组数据, 我希望在Editor模式下开发一套工具, 能让我对这一组数据进行增删改查, 根据MVC架构的思想, 必须有一个<code>Manager</code>来维护这一组数据的增删改查, 并且该<code>Manager</code>的生命周期需要和Unity Editor的生命周期保持一致.</p><h2 id="关键角色">关键角色</h2><ul><li><a href="https://docs.unity3d.com/ScriptReference/InitializeOnLoadAttribute.html"><code>InitializeOnLoad</code></a>属性, 根据官方的描述, 该属性会在UnityEditor打开和代码重新编译的时候初始化Editor脚本. 你需要给这个Editor脚本提供一个静态的构造函数, <strong>注意</strong> 官方提到了 应该避免在InitialzeOnLoad中进行资产加载的操作, 因为InitialzeOnLoad是在资产导入完成前被调用的, 该操作有可能会导致资产加载失败. 要在需要进行资产操作的域重载后进行初始化, 可以使用<code>AssetPostprocessor.OnPostprocessAllAssets</code>回调. 但Unity2020版本中是没有这个接口的, 该回调支持所有资产操作, 并有一个参数提示是否进行了域重载. Unity不能保证 因此使用懒汉模式, 将在初始化操作中不能加载资源的操作变为了在初始化的过程中不能访问Instance的操作, 将加载资源的操作放在首次访问Instance之后 对于一个Editor单例, 如果该单例需要做一些加载操作, 那么就让这个单例实现IAssetProcess接口,</li></ul><p>EditorSingleton的实现</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这是Monkey插件的Singleton实现:</span><br><span class="line"></span><br><span class="line">```C<span class="meta">#</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">EditorSingleton</span>&lt;<span class="title">T</span>&gt; : ScriptableObject</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> T : ScriptableObject, IMonKeySingleton</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T Instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!instance)</span><br><span class="line">                FindInstance();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!instance)</span><br><span class="line">                    <span class="keyword">return</span> CreateInstance&lt;T&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ReSharper disable once StaticMemberInGenericType</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="built_in">string</span> SessionID = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ReSharper disable once StaticMemberInGenericType</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="built_in">bool</span> DebugLog = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FindInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DebugLog)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Looking for instance of &quot;</span> + <span class="keyword">typeof</span>(T));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> id = SessionState.GetInt(SessionID, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span> (id == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                CreateNewInstance();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (DebugLog)</span><br><span class="line">                &#123;</span><br><span class="line">                    Debug.Log(<span class="string">&quot;Instance found! Hurray! &quot;</span> + <span class="keyword">typeof</span>(T));</span><br><span class="line">                    Debug.Log(EditorUtility.InstanceIDToObject(id));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                instance = (T)EditorUtility.InstanceIDToObject(id);</span><br><span class="line">                <span class="keyword">if</span> (!instance)</span><br><span class="line">                    CreateNewInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception )</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateNewInstance</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DebugLog)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Creating new instance of &quot;</span> + <span class="keyword">typeof</span>(T));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        instance = CreateInstance&lt;T&gt;();</span><br><span class="line">        SessionState.SetInt(SessionID, instance.GetInstanceID());</span><br><span class="line">        instance.PostInstanceCreation();</span><br><span class="line">        DontDestroyOnLoad(instance);</span><br><span class="line">        instance.hideFlags = HideFlags.HideAndDontSave;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UnityEditor </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityUGUIText实现描边</title>
      <link href="/posts/9125ebdc/"/>
      <url>/posts/9125ebdc/</url>
      
        <content type="html"><![CDATA[<h1>通过顶点方式实现描边</h1><h2 id="UGUI中自带的Outline">UGUI中自带的Outline</h2><h1>通过Shader方式实现描边</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityUGUI解构</title>
      <link href="/posts/e0e34b4b/"/>
      <url>/posts/e0e34b4b/</url>
      
        <content type="html"><![CDATA[<h1>引子——UGUI中的Text如何被绘制到屏幕上?</h1><p>参与绘制Text的角色:</p><ul><li>VertexHelper</li><li>TextGenerator</li><li>Font和FontData</li><li>BaseMeshEffect</li></ul><p>这是字体使用的Shader</p><figure class="highlight plaintext"><figcaption><span>Shader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)</span><br><span class="line"></span><br><span class="line">Shader &quot;GUI/Text Shader&quot; &#123;</span><br><span class="line">    Properties &#123;</span><br><span class="line">        _MainTex (&quot;Font Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Color (&quot;Text Color&quot;, Color) = (1,1,1,1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader &#123;</span><br><span class="line"></span><br><span class="line">        Tags &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;PreviewType&quot;=&quot;Plane&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        Lighting Off Cull Off ZTest Always ZWrite Off</span><br><span class="line">        Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line"></span><br><span class="line">        Pass &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #pragma multi_compile _ UNITY_SINGLE_PASS_STEREO STEREO_INSTANCING_ON STEREO_MULTIVIEW_ON</span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">            struct appdata_t &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                fixed4 color : COLOR;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">                UNITY_VERTEX_INPUT_INSTANCE_ID</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f &#123;</span><br><span class="line">                float4 vertex : SV_POSITION;</span><br><span class="line">                fixed4 color : COLOR;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">                UNITY_VERTEX_OUTPUT_STEREO</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            uniform float4 _MainTex_ST;</span><br><span class="line">            uniform fixed4 _Color;</span><br><span class="line"></span><br><span class="line">            v2f vert (appdata_t v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                UNITY_SETUP_INSTANCE_ID(v);</span><br><span class="line">                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);</span><br><span class="line">                o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.color = v.color * _Color;</span><br><span class="line">                o.texcoord = TRANSFORM_TEX(v.texcoord,_MainTex);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag (v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 col = i.color;</span><br><span class="line">                col.a *= tex2D(_MainTex, i.texcoord).a;</span><br><span class="line">                return col;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是所有的UGUI默认使用的Shader</p><figure class="highlight plaintext"><figcaption><span>Shader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)</span><br><span class="line"></span><br><span class="line">Shader &quot;UI/Default&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        [PerRendererData] _MainTex (&quot;Sprite Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Color (&quot;Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line"></span><br><span class="line">        _StencilComp (&quot;Stencil Comparison&quot;, Float) = 8</span><br><span class="line">        _Stencil (&quot;Stencil ID&quot;, Float) = 0</span><br><span class="line">        _StencilOp (&quot;Stencil Operation&quot;, Float) = 0</span><br><span class="line">        _StencilWriteMask (&quot;Stencil Write Mask&quot;, Float) = 255</span><br><span class="line">        _StencilReadMask (&quot;Stencil Read Mask&quot;, Float) = 255</span><br><span class="line"></span><br><span class="line">        _ColorMask (&quot;Color Mask&quot;, Float) = 15</span><br><span class="line"></span><br><span class="line">        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (&quot;Use Alpha Clip&quot;, Float) = 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;PreviewType&quot;=&quot;Plane&quot;</span><br><span class="line">            &quot;CanUseSpriteAtlas&quot;=&quot;True&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stencil</span><br><span class="line">        &#123;</span><br><span class="line">            Ref [_Stencil]</span><br><span class="line">            Comp [_StencilComp]</span><br><span class="line">            Pass [_StencilOp]</span><br><span class="line">            ReadMask [_StencilReadMask]</span><br><span class="line">            WriteMask [_StencilWriteMask]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Cull Off</span><br><span class="line">        Lighting Off</span><br><span class="line">        ZWrite Off</span><br><span class="line">        ZTest [unity_GUIZTestMode]</span><br><span class="line">        Blend One OneMinusSrcAlpha</span><br><span class="line">        ColorMask [_ColorMask]</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Name &quot;Default&quot;</span><br><span class="line">        CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #pragma target 2.0</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line">            #include &quot;UnityUI.cginc&quot;</span><br><span class="line"></span><br><span class="line">            #pragma multi_compile_local _ UNITY_UI_CLIP_RECT</span><br><span class="line">            #pragma multi_compile_local _ UNITY_UI_ALPHACLIP</span><br><span class="line"></span><br><span class="line">            struct appdata_t</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex   : POSITION;</span><br><span class="line">                float4 color    : COLOR;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">                UNITY_VERTEX_INPUT_INSTANCE_ID</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex   : SV_POSITION;</span><br><span class="line">                fixed4 color    : COLOR;</span><br><span class="line">                float2 texcoord  : TEXCOORD0;</span><br><span class="line">                float4 worldPosition : TEXCOORD1;</span><br><span class="line">                float4  mask : TEXCOORD2;</span><br><span class="line">                UNITY_VERTEX_OUTPUT_STEREO</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            fixed4 _TextureSampleAdd;</span><br><span class="line">            float4 _ClipRect;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            float _UIMaskSoftnessX;</span><br><span class="line">            float _UIMaskSoftnessY;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_t v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f OUT;</span><br><span class="line">                UNITY_SETUP_INSTANCE_ID(v);</span><br><span class="line">                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);</span><br><span class="line">                float4 vPosition = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                OUT.worldPosition = v.vertex;</span><br><span class="line">                OUT.vertex = vPosition;</span><br><span class="line"></span><br><span class="line">                float2 pixelSize = vPosition.w;</span><br><span class="line">                pixelSize /= float2(1, 1) * abs(mul((float2x2)UNITY_MATRIX_P, _ScreenParams.xy));</span><br><span class="line"></span><br><span class="line">                float4 clampedRect = clamp(_ClipRect, -2e10, 2e10);</span><br><span class="line">                float2 maskUV = (v.vertex.xy - clampedRect.xy) / (clampedRect.zw - clampedRect.xy);</span><br><span class="line">                OUT.texcoord = TRANSFORM_TEX(v.texcoord.xy, _MainTex);</span><br><span class="line">                OUT.mask = float4(v.vertex.xy * 2 - clampedRect.xy - clampedRect.zw, 0.25 / (0.25 * half2(_UIMaskSoftnessX, _UIMaskSoftnessY) + abs(pixelSize.xy)));</span><br><span class="line"></span><br><span class="line">                OUT.color = v.color * _Color;</span><br><span class="line">                return OUT;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f IN) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                half4 color = IN.color * (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd);</span><br><span class="line"></span><br><span class="line">                #ifdef UNITY_UI_CLIP_RECT</span><br><span class="line">                half2 m = saturate((_ClipRect.zw - _ClipRect.xy - abs(IN.mask.xy)) * IN.mask.zw);</span><br><span class="line">                color.a *= m.x * m.y;</span><br><span class="line">                #endif</span><br><span class="line"></span><br><span class="line">                #ifdef UNITY_UI_ALPHACLIP</span><br><span class="line">                clip (color.a - 0.001);</span><br><span class="line">                #endif</span><br><span class="line"></span><br><span class="line">                color.rgb *= color.a;</span><br><span class="line"></span><br><span class="line">                return color;</span><br><span class="line">            &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考资料</h1><ul><li><a href="https://docs.unity3d.com/2022.3/Documentation/ScriptReference/TextGenerator.html">Unity TextGenerator API</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数在游戏开发中的应用</title>
      <link href="/posts/fd0318d/"/>
      <url>/posts/fd0318d/</url>
      
        <content type="html"><![CDATA[<h1>判断一个向量与坐标轴的重合度</h1><p>向量与每个坐标轴向量进行点积, 注意这里要求参与运算的所有向量都是归一化的, 点积结果会得到一个常数, 对这个常数取绝对值, 结果越大代表与该周向量越重合, 常数的正负代表的是与坐标轴的正方向还是负方向重合度更高.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSharp中的CancellationToken</title>
      <link href="/posts/7331d0f1/"/>
      <url>/posts/7331d0f1/</url>
      
        <content type="html"><![CDATA[<h1>参考资料</h1><p><a href="https://medium.com/@mitesh_shah/a-deep-dive-into-c-s-cancellationtoken-44bc7664555f">A Deep Dive into C#’s CancellationToken</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SVN——SubVersion学习记录</title>
      <link href="/posts/fb782408/"/>
      <url>/posts/fb782408/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2025.10.23<br>我收回对SVN的成见, Rider中集成的Subversion插件还是相当好用的, 除了基础的拉取提交, 还可以切换分支、创建分支、合并分支, 以及有类似git的贮存操作.<br>成见大纯属是因为Mac上的CornerStone太卡太垃圾, Windows上的小乌龟又没有一个像git的Fork一样的可视化图形界面.</p></blockquote><blockquote><p>注意, 本文全程使用Rider中集成的Subversion插件</p></blockquote><h1>SVN中的一些操作</h1><h2 id="Create-Patch">Create Patch</h2><h2 id="Patch与Shelve的区别">Patch与Shelve的区别</h2><p><strong>SVN Create Patch（SVN 生成补丁）</strong> 是用来生成你本地文件修改差异（diff）的一个文件，常被称为“补丁文件”或“差异包”。补丁文件可以让别人（或自己）在另一台电脑上、或者另一份代码仓库中<strong>还原/应用这些修改</strong>，而不用你手动合并每一处改动，非常适合代码评审/协作/临时转移代码用。</p><hr><h1>具体作用</h1><h3 id="1-将本地改动导出为补丁文件">1. <strong>将本地改动导出为补丁文件</strong></h3><ul><li>包含你对代码的所有增删改内容（不包括没被 <code>svn add</code> 的新文件，以及未提交的删除）。</li><li>补丁本质就是一份标准 <strong>diff 格式</strong>文本。</li></ul><h3 id="2-便于代码评审和团队协作">2. <strong>便于代码评审和团队协作</strong></h3><ul><li>你可以把补丁文件发给同事，让他先“尝试应用”，看到所有修改内容，决定是否合并。</li><li>比如 <code>xxx.patch</code> 或 <code>xxx.diff</code> 文件。</li></ul><h3 id="3-临时保存修改">3. <strong>临时保存修改</strong></h3><ul><li>有时候你本地已经有多个大改动，不方便直接提交，也可以先生成补丁，转移到其他机器或版本，避免丢失工作。</li></ul><hr><h1>用法举例</h1><h2 id="A-命令行方式">A. 命令行方式</h2><p>生成补丁：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn diff &gt; my_change.patch</span><br></pre></td></tr></table></figure><ul><li>这个命令将你所有未提交的变动和文件状态写到 patch 文件里。</li></ul><h2 id="B-GUI工具（如-TortoiseSVN、Rider）">B. GUI工具（如 TortoiseSVN、Rider）</h2><p>一般右键项目，选择 <code>Create Patch</code> 或 <code>生成补丁</code>，会弹出内容选择和保存位置的窗口。</p><hr><h2 id="应用补丁（Apply-Patch）">应用补丁（Apply Patch）</h2><ul><li>如果收到一个 patch 文件，可以用 <code>svn patch my_change.patch</code> 或者用 TortoiseSVN 的 <code>Apply Patch</code> 功能，将它自动合并到你的工作副本。</li><li>只有你本地是同一目录结构，补丁才会无冲突自动应用。</li></ul><hr><h1>总结小结</h1><ul><li><strong>Create Patch</strong> 就是把你对代码的改动（还没提交的差异）导出为补丁文件，便于分享、评审、迁移等。</li><li>和“直接提交”区别是，补丁只是一个文本diff，没有正式加入仓库历史。</li><li>通常用于跨团队沟通、代码评审（有时就是“发补丁”而不是“拉分支合并”）、或者对比本地改动等场景。</li></ul><hr><p>如需举例某工具/某场景下的使用方法，可继续追问！</p><p>关于 SVN 中的 <strong>Shelve</strong>（暂存），这里详细解答：</p><hr><h2 id="1-Shelve-是什么？">1. Shelve 是什么？</h2><p><strong>SVN Shelve</strong> 作用就是把你当前的代码改动（未提交的、本地的）<strong>临时存起来</strong>，就像 git 的“stash”。这样你可以清理工作副本（回到干净状态），之后再把 shelve 的内容取出来（unshelve/apply），恢复这些改动。</p><p>更简单地说：<br>就是<strong>把当前没提交的修改“铲到一边”</strong>，等你需要时再拿回来，比 Create Patch 更自动、易用、不怕遗漏。</p><hr><h2 id="2-Shelve-的主要用途">2. Shelve 的主要用途</h2><ul><li><strong>临时保存本地改动</strong>，不想提交、不想丢掉，也不想影响后面别的操作（比如拉分支、合并代码）。</li><li><strong>切换任务</strong>：比如你正在开发A功能，突然急需切回主分支修B bug，就可以 shelve 当前A的改动，然后恢复成干净副本去修BUG，修好再unshelve回来继续搞A。</li><li><strong>多人评审/调试</strong>：个别工具支持把 shelve 内容发给同事。</li></ul><hr><h2 id="3-Shelve-和-Patch-有什么区别？">3. Shelve 和 Patch 有什么区别？</h2><table><thead><tr><th>功能</th><th>Shelve</th><th>Create Patch</th></tr></thead><tbody><tr><td>保存形式</td><td>在本地工作副本（或特殊文件夹）</td><td>生成一个 diff 文件</td></tr><tr><td>还原方式</td><td>一键 Unshelve</td><td>手动 Apply Patch</td></tr><tr><td>是否便于分享</td><td>不易直接分享（仅本机用）</td><td>可发给别人用</td></tr><tr><td>操作命令</td><td><code>svn shelve</code> / GUI Shelve</td><td><code>svn diff &gt; patch</code></td></tr><tr><td>遗漏风险</td><td>自动识别全部改动，不容易遗漏</td><td>需手动选取内容</td></tr></tbody></table><hr><h2 id="4-Shelve-命令行用法">4. Shelve 命令行用法</h2><p>需要 SVN 1.10 以上版本（旧版本没有），常用命令：</p><h3 id="保存当前改动">保存当前改动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn shelve <span class="string">&quot;名称&quot;</span></span><br></pre></td></tr></table></figure><ul><li>举例：<code>svn shelve &quot;working-on-BUG-123&quot;</code></li></ul><h3 id="查看-shelve-记录">查看 shelve 记录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn shelve --list</span><br></pre></td></tr></table></figure><h3 id="取回（恢复）改动">取回（恢复）改动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn unshelve <span class="string">&quot;名称&quot;</span></span><br></pre></td></tr></table></figure><h3 id="删除-shelve">删除 shelve</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn shelve --delete <span class="string">&quot;名称&quot;</span>`</span><br></pre></td></tr></table></figure><hr><h2 id="5-在图形工具-IDE（如-Rider、TortoiseSVN）如何用？">5. 在图形工具/IDE（如 Rider、TortoiseSVN）如何用？</h2><ul><li>右键项目目录，通常有 Shelve/Unshelve/管理Shelves 的菜单。</li><li>操作都在本地，不影响仓库历史，不会推送到远端。</li></ul><hr><h2 id="6-Shelve的典型工作流举例">6. Shelve的典型工作流举例</h2><ol><li>你改了若干代码，临时有新优先任务。</li><li>用 Shelve 先把当前改动全部“暂存”。</li><li>SVN 自动还原工作副本为最近提交的干净状态。</li><li>处理新任务，修完相关内容并提交。</li><li>再 Unshelve 刚才 shelve 的内容，恢复原代码进度继续开发。</li></ol><hr><h2 id="7-总结理解">7. 总结理解</h2><ul><li><strong>Shelve</strong> 是把本地未提交改动临时“备份”起来，避免干扰别的操作，之后随时可以拿回这些改动。</li><li>适合频繁切换任务、不能马上提交但又不想丢失的开发场景。</li><li>Patch 适合分享，Shelve 适合自己临时切换。</li></ul><hr><p>如需具体某工具的菜单、操作图或者命令行举例，请继续问！</p><h2 id="Shelve">Shelve</h2><p>看起来有点类似git的贮藏</p><h2 id="创建不同的ChangeList">创建不同的ChangeList</h2><p>使用场景是 你在开发着某一个功能, 有别的产品来找你修改另外的东西, 如果两个工作同时推进的话要改动的东西可能有很多, 所有修改的文件又杂又乱, Svn提供了一个分支的功能, 能创建多个ChangeList在里面放不同的修改文件</p><h2 id="切换分支">切换分支</h2><p>当需要多个版本并行开发的时候, 我最一开始以为每拉取一个新的分支, 我本地就要同步地创建一个该分支的拷贝, 但其实Svn是支持在一个WorkingCopy中进行分支切换的操作的. 有一个Switch命令. 知道有这个功能就好, 因为切换分支会导致Unity的AssetDatabase重新构建, 切换分支的时间开销甚至可能大于额外拉一个新的分支到本地打开这个工程的时间了. 需要权衡.</p><h1>使用Tips</h1><p>如果要拉一个分支, 不一定要在Terminal里面输入<code>svn checkout</code>命令, 可直接在Rider进行下面的操作</p><img src="/posts/fb782408/image.png" class=""><img src="/posts/fb782408/image2.png" class=""><h1>问题</h1><h2 id=""></h2><p>SVN中的两种冲突</p><h2 id="1-文件冲突（file-conflict）是什么？">1. 文件冲突（file conflict）是什么？</h2><ul><li><strong>文件冲突</strong>指的是：<br>多人对<strong>同一个文件的同一个部分</strong>进行了不同修改。</li><li>例如：你和同事同时编辑 <code>a.txt</code> 的第5行内容，提交更新时就会发生文件冲突。</li></ul><h3 id="常见表现">常见表现</h3><ul><li>SVN 会把有冲突的部分插入一些 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>、<code>=======</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 标记，等你手动合并/选择。</li><li>你需要打开文件合并或直接重新编辑。</li></ul><hr><h2 id="2-树冲突（tree-conflict）是什么？">2. 树冲突（tree conflict）是什么？</h2><ul><li><strong>树冲突</strong>是 SVN 1.6 及以后的概念。</li><li>所谓“树”其实指<strong>目录结构/文件结构（不是树状控件，也不是数据结构的树，而是整个项目的文件、文件夹组成的目录树）</strong>。</li><li><strong>树冲突出现在：</strong><br>针对目录结构操作（如文件/文件夹的新增、重命名、删除、移动）时，不同人对同一部分目录树做了<strong>结构性变化</strong>，并发生了冲突。</li></ul><h3 id="典型例子">典型例子</h3><ol><li><strong>你删除了某个文件/文件夹，同事修改了这个文件</strong><ul><li>你删了<code>A/B/C.cs</code>，同事还在同一版本上编辑<code>C.cs</code>，你们都提交，然后更新。你就会遇到<code>tree conflict</code>。</li></ul></li><li><strong>一方移动/重命名目录，另一方在原地新建或修改文件</strong></li><li><strong>父目录被删除、子文件被修改或反之</strong></li><li><strong>任何目录或者文件在结构上发生变化，而非内容修改</strong></li></ol><h1>SVN撤回某一次提交</h1><p>你想撤销130次提交的内容（可能此后还有131、132、133…的正常提交），只撤销这次的内容，其后的变动继续存在。<br>操作命令</p><p>svn merge -c -130 你的工作副本目录<br>svn commit -m “撤销r130提交内容”<br>-c参数后面加上负号-130，表示“撤销 r130”的变更。<br>执行后记得到工作副本看下变动，再commit。<br>举例</p><p>如你的项目地址为http://xxx.com/svn/project/trunk，你在trunk目录下：</p><p>svn merge -c -130 .<br>svn commit -m “撤销第130次提交”</p><h1>SVN查看当前Revision</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn info</span><br></pre></td></tr></table></figure><h1>写一个可以查询当天提交记录的shell脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用法: ./svn_tag_summary.sh /path/to/your/svn/working_copy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SVN_PATH=&quot;$1&quot;</span><br><span class="line"></span><br><span class="line">AUTHOR=&quot;liyinuo@tuyoogame.com&quot;</span><br><span class="line"></span><br><span class="line">TODAY=$(date +&quot;%Y-%m-%d&quot;)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [[ ! -d &quot;$SVN_PATH/.svn&quot; ]]; then</span><br><span class="line"></span><br><span class="line">echo &quot;路径 $SVN_PATH 不是svn仓库&quot;</span><br><span class="line"></span><br><span class="line">exit 1</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">cd &quot;$SVN_PATH&quot; || exit 1</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取今天该作者的提交记录</span></span><br><span class="line"></span><br><span class="line">svn log -r &#123;$&#123;TODAY&#125;T00:00:00&#125;:&#123;$&#123;TODAY&#125;T23:59:59&#125; --search &quot;$AUTHOR&quot; --verbose --xml &gt; __svn_today.xml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if ! grep -q &quot;&lt;logentry&quot; __svn_today.xml; then</span><br><span class="line"></span><br><span class="line">echo &quot;没有今天作者 $AUTHOR 的提交记录&quot;</span><br><span class="line"></span><br><span class="line">rm -f __svn_today.xml</span><br><span class="line"></span><br><span class="line">exit 0</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">取所有 commit message</span></span><br><span class="line"></span><br><span class="line">msgs=$(xmllint --xpath &#x27;//logentry[author=&quot;&#x27;$AUTHOR&#x27;&quot;]/msg/text()&#x27; __svn_today.xml 2&gt;/dev/null | grep -v &#x27;^$&#x27;)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">各分类字符串</span></span><br><span class="line"></span><br><span class="line">feat_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">fix_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">refactor_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">docs_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">test_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">chore_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">other_msgs=&quot;&quot;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">while IFS= read -r line; do</span><br><span class="line"></span><br><span class="line">if [[ &quot;$line&quot; =~ ^\[feat\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">feat_msgs=&quot;$&#123;feat_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[fix\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">fix_msgs=&quot;$&#123;fix_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[refactor\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">refactor_msgs=&quot;$&#123;refactor_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[docs\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">docs_msgs=&quot;$&#123;docs_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[test\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">test_msgs=&quot;$&#123;test_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">elif [[ &quot;$line&quot; =~ ^\[chore\][[:space:]]*[:：]? ]]; then</span><br><span class="line"></span><br><span class="line">chore_msgs=&quot;$&#123;chore_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">other_msgs=&quot;$&#123;other_msgs&#125;$&#123;line&#125;&quot;$&#x27;\n&#x27;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">done &lt;&lt;&lt; &quot;$msgs&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;作者: $AUTHOR 今天的提交分类如下：&quot;</span><br><span class="line"></span><br><span class="line">echo</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$feat_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [feat] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$feat_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$fix_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [fix] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$fix_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$refactor_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [refactor] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$refactor_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$docs_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [docs] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$docs_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$test_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [test] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$test_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$chore_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [chore] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$chore_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">if [ -n &quot;$other_msgs&quot; ]; then</span><br><span class="line"></span><br><span class="line">echo &quot;---------------- [other] ----------------&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$other_msgs&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">rm -f __svn_today.xml</span><br></pre></td></tr></table></figure><h3 id="1-SVN-删除一个文件后如何用命令行提交这个修改">1. SVN 删除一个文件后如何用命令行提交这个修改</h3><p>删除文件后，请按以下步骤操作：</p><h4 id="（1）删除文件">（1）删除文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn delete 文件名</span><br><span class="line"># 比如</span><br><span class="line">svn delete test.txt</span><br></pre></td></tr></table></figure><p>或者直接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn del test.txt</span><br></pre></td></tr></table></figure><h4 id="（2）提交删除操作">（2）提交删除操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn commit -m &quot;删除了test.txt文件&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="2-SVN-使用命令行-Add-to-working-copy">2. SVN 使用命令行 Add to working copy</h3><p>如果您想将某个文件或目录添加到您的工作副本（working copy），即包含到版本控制，命令如下：</p><h4 id="（1）添加文件或目录">（1）添加文件或目录</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn add 文件名或目录名</span><br><span class="line"># 比如</span><br><span class="line">svn add newfile.txt</span><br></pre></td></tr></table></figure><p>如果是新文件夹，可以递归添加内部全部新文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn add newfolder --force</span><br></pre></td></tr></table></figure><h4 id="（2）提交添加操作">（2）提交添加操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn commit -m &quot;添加了新文件（或文件夹）&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="总结">总结</h3><ul><li><p><strong>删除后提交：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn delete 文件</span><br><span class="line">svn commit -m &quot;说明&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>新增后提交：</strong></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svn add 文件</span><br><span class="line">svn commit -m &quot;说明&quot;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 版本管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员超强大脑</title>
      <link href="/posts/823ad99a/"/>
      <url>/posts/823ad99a/</url>
      
        <content type="html"><![CDATA[<h1>剖析程序设计之惑</h1><h2 id="阅读代码中遇到的三种困惑">阅读代码中遇到的三种困惑</h2><ul><li>缺乏知识, 不了解正在阅读的编程语言、算法或领域.</li><li>缺乏信息, 无法获得理解代码所需的全部信息, 尤其是如今的代码经常使用各种库、模块或包, 想读懂代码就需要检索大量信息, 而在收集新信息的同时还不能忘记原本应该完成的任务. 代码中看到一个接口不清楚他的作用是属于缺乏信息</li><li>缺乏加工能力, 代码有时过于复杂, 超出了大脑的加工能力.</li></ul><h2 id="影响程序设计的不同认知过程">影响程序设计的不同认知过程</h2><ul><li>长时记忆(long-term memory), 可以无限期存储所有记忆, 缺乏知识意味着长时记忆中缺少足够的相关事实. 长时记忆会存储几类相关的编程信息, 例如成功运用某种编程技巧的记忆、Java关键字的含义、英语单词的含义或者Java中int型变量的最大值(2147483647).</li><li>短时记忆(short-term memory), 大脑获取的信息暂时存储于短时记忆, 大脑接受外部的信息时, 不会直接进入长时记忆, 而是首先进入容量有限的短时记忆. 短时记忆的容量众说纷纭, 但是大多数科学家认为这种记忆只能存储少量的信息元素, 通常不会超过12个. 例如, 在阅读程序时, 大脑会把程序使用的关键字、变量名和数据结构暂时保存在短时记忆中.</li><li>工作记忆(working memory), 如果把长时记忆比做硬盘, 短时记忆比做内存, 那么工作记忆就相当于大脑的“处理器”. 在阅读代码的过程中, 大脑还会进行更多的活动. 程序员会尝试心算并梳理代码的执行结果, 这个过程称为<strong>追踪</strong>, 也就是在脑海里编译并执行代码. 大脑内部用于追踪以及进行其他复杂认知活动的机制称为工作记忆, 这种记忆相当于计算机用来执行计算任务的处理器. 如果大脑感觉需要借助外部媒介来存储信息, 则可能意味着工作记忆的负担过重, 难以加工更多的信息.</li></ul><p>长时记忆、短时记忆、工作记忆这三种认知过程在阅读代码的过程中都会参与、相辅相成.</p><img src="/posts/823ad99a/image.png" class=""><h1>小节</h1><ul><li>缺乏知识会影响长时记忆.</li><li>缺乏信息会影响短时记忆.</li><li>缺乏加工能力会影响工作记忆.</li></ul><h1>快速阅读代码</h1><p>提高快速查找相关信息的能力有助于减少反复浏览代码的次数. 如果代码阅读水平很高, 那么还可以降低浏览代码以查找其他信息的频率. 花在阅读代码方面的时间越少, 留给修复错误或者添加新功能的时间就越多, 程序员的效率因而越高.</p><h2 id="快速阅读代码">快速阅读代码</h2><h2 id="弥补记忆容量不足的短板">弥补记忆容量不足的短板</h2><p>既然缺乏信息会影响短时记忆, 因为短时记忆的容量十分有限. 想到提升短时记忆的容量并不容易, 我们更应该去提高自己把零散的小块变成组块(chunk), 虽然我们能够持有的信息素没有变, 但是单个信息元素包含的内容更丰富, 更集成, 更模块化</p><h2 id="看到的代码比读到的代码多">看到的代码比读到的代码多</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSharp中的委托</title>
      <link href="/posts/4f9ac505/"/>
      <url>/posts/4f9ac505/</url>
      
        <content type="html"><![CDATA[<h1>委托</h1><p>一篇很好的博客https://www.cnblogs.com/skysoot/archive/2012/04/05/2433639.html</p><p>C#中的委托类似于C或C++中的函数指针。委托是存有对某个方法的引用的一种引用类型变量，引用可在运行时被改变。</p><p>委托特别用于实现事件和回调方法。所有的委托都派生自<code>System.Delegate</code>类。</p><h2 id="从实际问题出发来理解委托">从实际问题出发来理解委托</h2><h3 id="将方法作为方法的参数">将方法作为方法的参数</h3><p>这个标题非常地拗口，但我们先不管它，来看两个方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">EnglishGreeting(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnglishGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">  Console.WriteLine(<span class="string">&quot;Good Moring,&quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先不管这两个方法有没有实际的意义，我们现在想通过这两个方法来向某人问好，当传入某人的姓名时，比如说&quot;Joe&quot;进去的时候，在这个方法中将调用EnglishGreeting方法，再次传递name参数，EnglishGreeting方法则用于向屏幕输出&quot;Good Moring, Joe&quot;。</p><p>那么现在，假设这个程序要进行全球化了，我作为一个中国人，我不理解&quot;Good Moring&quot;是什么意思，那我就只能再加一个中文的问候方法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ChineseGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;早上好，&quot;</span>+name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候GreetPeople也需要改一下了，不然如何判断到底用哪个版本的Greeting问候方法合适呢？当然在进行这个之前，我们最好再定义一个枚举作为判断的依据：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Language&#123;</span><br><span class="line">English, Chinese</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, Language lang</span>)</span>&#123;</span><br><span class="line"><span class="keyword">switch</span>(lang)&#123;</span><br><span class="line"><span class="keyword">case</span> Language.English:</span><br><span class="line">EnglishGreeting(name);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Language.Chinese:</span><br><span class="line">    ChineseGreeting(name);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，尽管这样解决了问题，但是这个方法的可扩展性太差了，如果之后我们还要再添加韩文版、日文版，我们就不得不反复修改枚举和GreetPeople的方法，来适应新的需求。</p><p>那么在考虑新的解决方案之前，我们先来看看GreetPeople的方法签名：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, Language lang</span>)</span>;</span><br></pre></td></tr></table></figure><p>我们只看<code>string name</code>，在这里，string是参数类型，name是参数变量，当我们赋给name字符串&quot;Joe&quot;时，他就代表了&quot;Joe&quot;这个值；当我们赋给他&quot;周杰伦&quot;时，它又代表着&quot;周杰伦&quot;这个值。然后，我们可以在这个方法体内对这个name进行其他的操作。</p><p>那我们再仔细想一想，假如GreetPeople方法可以接受一个参数变量，这个变量可以代表另一个方法，当我们给这个变量赋值EnglishGreeting的时候它代表着EnglishGreeting()这个方法；当我们给它赋值ChineseGreeting的时候，它又代表着ChineseGreeting()的方法，我们将这个参数变量命名为MakeGreeting，那么不是可以如同给name赋值的时候一样，在调用Greet People()方法的时候，给这个MakeGreeting参数也附上值么，然后我们在方法体内，也可以像使用别的参数一样使用MakeGreeting。但是，由于MakeGreeting代表着一个方法，它的使用方式应该和它被赋的方法是一样的，比如<code>MakeGreeting(name)</code>；</p><p>好了，有了思路了，我们现在就来改改GreetPeople()方法，那么它应该是这个样子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, *** MakeGreeting</span>)</span>&#123;</span><br><span class="line">MakeGreeting(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到 ***，这个位置通常放置的应该是参数的类型，但是到目前为止，我们仅仅想到的是应该有一个方法，并且按照这个思路去改写GreetPeople方法，现在就出现了一个大问题：这个代表着方法的MakeGreeting参数应该是什么类型的？</p><p>**说明：**这里已经不再需要枚举了，因为在给MakeGreeting赋值的时候动态地决定使用哪个方法，是ChineseGreeting还是EnglishGreeting，而在这两个方法内部，已经对使用GroodMoring还是早上好做了区分。</p><p>下面就该委托出场了：</p><p>我们MakeGreeting代表的两个方法的签名如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnglishGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chineseGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br></pre></td></tr></table></figure><p>如同<code>name</code>可以接受string类型的数据一样，MakeGreeting它也代表着接受相同的一类数据，再进一步讲，就是MakeGreeting代表了参数类型和返回类型都相同的一类方法。本例中委托的定义如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">GreetingDelegate</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br></pre></td></tr></table></figure><p>与上面EnglishGreeting()方法的签名对比一下，出了加入delegate关键字以外，其他的部分都是完全一样的，那么再次调用GreetPeople方法，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Greetingdelegate</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, Greetingdelegate MakeGreeting</span>)</span>&#123;</span><br><span class="line">MakeGreeting(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>委托Greeting Delegat出现的位置和string相同，string是一个类型，Greeting Delegate也是一个类型，或者说是一个类。但是委托的声明方式和类完全不同。实际上，委托在编译的时候确实会被编译成类。因为Delegate是一个类，所以在任何可以声明类的地方都可以声明委托。下面是一个完整的代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">GreetingDelegate</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">EnglishGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Good Morning, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ChineseGreeting</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;早上好, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GreetPeople</span>(<span class="params"><span class="built_in">string</span> name, GreetingDelegate MakeGreeting</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MakeGreeting(name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        GreetPeople(<span class="string">&quot;Joe&quot;</span>, EnglishGreeting);</span><br><span class="line">        GreetPeople(<span class="string">&quot;周杰伦&quot;</span>, ChineseGreeting);</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合游戏开发中的实际应用，我们经常讲委托和单例模式、观察者模式等设计模式结合在一起使用，下面我将尝试抽象出一个事件中心的类，它专门负责处理各种委托事件，由于在一个游戏进程中只会有一个<strong>事件处理中心</strong>，所以我要将它设计成<a href="http://soincredible777.com.cn/posts/279644bd/">单例模式</a>。</p><p><strong>我们现在对委托做一个总结：委托是一个类，它定义了方法的类型，使得可以将方法作为另一个方法的参数来进行传递，这种将方法动态地赋给参数的做法，可以避免在程序中大量地使用if-else(switch)语句，同时使得程序具有更好的可扩展性。</strong></p><h2 id="声明委托">声明委托</h2><p>委托声明决定了可由该委托引用的方法。委托可指向一个与其具有相同标签的方法。</p><p>假设有一个委托：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br></pre></td></tr></table></figure><p>上面的委托可被用于引用任何一个带有一个单一的string参数的方法，并返回一个int 类型的变量。</p><p>声明委托的语法如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delegate</span> &lt;<span class="keyword">return</span> type&gt;&lt;<span class="built_in">delegate</span>-name&gt;&lt;parameter list&gt;</span><br></pre></td></tr></table></figure><h2 id="实例化委托">实例化委托</h2><p>一旦声明了委托类型，委托对象就必须使用new关键字来创建，并且与一个特定的方法有关，当委托创建时，传递到new语句的参数就像方法调用一样书写，但是不带有参数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">printString</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line">pringString ps1 = <span class="keyword">new</span> printString(WriteToScreen);</span><br><span class="line">printString ps2 = <span class="keyword">new</span> printString(WriteToFile);</span><br></pre></td></tr></table></figure><p>下面的实例演示了委托的声明、实例化和使用，该委托可用于引用带有一个整形参数的方法，并返回一个整型值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DelegateAppl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">TestDelegate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            num += p;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MultNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            num *= q;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getNum</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            NumberChanger nc1 = <span class="keyword">new</span> NumberChanger(AddNum);</span><br><span class="line">            NumberChanger nc2 = <span class="keyword">new</span> NumberChanger(MultNum);</span><br><span class="line">            nc1(<span class="number">25</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());</span><br><span class="line">            nc2(<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面代码被编译和执行的时候，它会产生如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Value of Num: 35</span><br><span class="line">Value of Num: 175</span><br></pre></td></tr></table></figure><p><strong>补充：</strong></p><ol><li>委托里面存储的方法可以是静态方法也可以是非静态的方法。</li><li>当声明的委托包含返回值的时候，不能直接调用Invoke方法，否则只会得到最后一个方法的结果。</li><li>定义委托与定义方法相比，一是没有方法体，而是多用了delegate修饰。</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Test1</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Test2</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Program program = <span class="keyword">new</span> Program();</span><br><span class="line">        MyDelegate myDelegate = <span class="keyword">new</span> MyDelegate(program.Test1);</span><br><span class="line">        myDelegate += program.Test2;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 将delegate存放到一个数组中才能依次获取每一个方法的返回值。</span></span><br><span class="line">        Delegate[] delegates = myDelegate.GetInvocationList();</span><br><span class="line">        <span class="keyword">foreach</span> (MyDelegate item <span class="keyword">in</span> delegates)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(item(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托的多播-Multicasting-of-a-Delegate">委托的多播(Multicasting of a Delegate)</h2><p>委托对象可以使用&quot;+“运算符进行合并。一个合并委托调用它所合并的两个委托。只有相同类型的委托可以被合并。”-&quot;运算符可用于从合并的委托中移除组件委托。</p><p>使用委托的这个特点，我们可以创建一个委托被调用时要调用的方法的调用列表，这种行为被称为委托的多播(multicasting)，也叫组播。下面的程序演示了委托的多播：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="built_in">int</span> <span class="title">NumberChanger</span>(<span class="params"><span class="built_in">int</span> n</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DelegateAppl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">testdelegate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">AddNum</span>(<span class="params"><span class="built_in">int</span> p</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            num += p;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">MultNum</span>(<span class="params"><span class="built_in">int</span> q</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            num *= q;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">getNum</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            NumberChanger nc;</span><br><span class="line">            NumberChanger nc1 = <span class="keyword">new</span> NumberChanger(AddNum);</span><br><span class="line">            NumberChanger nc2 = <span class="keyword">new</span> NumberChanger(MultNum);</span><br><span class="line"></span><br><span class="line">            nc = nc1;</span><br><span class="line">            nc += nc2;</span><br><span class="line">            nc += AddNum;</span><br><span class="line">            nc(<span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Value of Num: &#123;0&#125;&quot;</span>, getNum());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="委托的用途">委托的用途</h2><p>下面实际演示了委托的用法，委托<code>printString</code>可用于引用带有一个字符串作为输入的方法，并不返回任何东西。</p><p>我们使用这个委托来调用两个方法，第一个把字符串打印到控制台，第二个把字符串打印到文件：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DelegateAppl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">PrintString</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> FileStream fs;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> StreamWriter sw;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">printString</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteToScreen</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;The String is:&#123;0&#125;&quot;</span>, str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteToFile</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;./message.txt&quot;</span>, FileMode.Append, FileAccess.Write);</span><br><span class="line">            sw = <span class="keyword">new</span> StreamWriter(fs);</span><br><span class="line">            sw.WriteLine(s);</span><br><span class="line">            sw.Flush();</span><br><span class="line">            sw.Close();</span><br><span class="line">            fs.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendString</span>(<span class="params">printString ps</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ps(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            printString ps1 = <span class="keyword">new</span> printString(WriteToScreen);</span><br><span class="line">            printString ps2 = <span class="keyword">new</span> printString(WriteToFile);</span><br><span class="line">            sendString(ps1);</span><br><span class="line">            sendString(ps2);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>事件</h1><p>事件基本上说是一个用户的操作，比如按键、点击、鼠标移动等等，或者是一些提示信息，如系统生成的通知。应用程序需要在事件发生时响应事件，比如中断。</p><p>C#中使用事件机制实现线程间的通信。</p><p>事件是一个受限制的委托，先看如下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">MyDelegateClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> MyDelegate? myDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (myDelegate != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            myDelegate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegateClass delegateClass = <span class="keyword">new</span> MyDelegateClass();</span><br><span class="line">        delegateClass.myDelegate += Run;</span><br><span class="line">        delegateClass.myDelegate.Invoke();</span><br><span class="line">        delegateClass.Test();</span><br><span class="line">        delegateClass.myDelegate = <span class="keyword">new</span> MyDelegate(Run);</span><br><span class="line">        delegateClass.myDelegate();</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Running.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码运行时没有问题的，也就是说，我们在MyDelegateClass中声明的委托，既可以在当前类中执行，也可以在其他的类中执行，还可以在其他的类中重新赋值后再被调用执行。</p><p>接下来我们看看事件声明的情况：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">MyDelegateClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> MyDelegate? myDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (myDelegate != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            myDelegate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegateClass delegateClass = <span class="keyword">new</span> MyDelegateClass();</span><br><span class="line">        delegateClass.myDelegate += Run;</span><br><span class="line">        delegateClass.myDelegate.Invoke();</span><br><span class="line">        delegateClass.Test();</span><br><span class="line">        delegateClass.myDelegate = <span class="keyword">new</span> MyDelegate(Run);</span><br><span class="line">        delegateClass.myDelegate();</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Running.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们看到声明事件其实就是在声明委托变量的条件下，只用了个<code>event</code>修饰而已，即<code>myDelegate</code>现在是一个事件变量，而不是一个委托变量了，我们发现它仍然能在当前类中被执行，但是在另外的一个类中，既不能被直接调用执行，也不能被重新赋值了，只能通过<code>+=</code>或者<code>-=</code>来增减函数，这就是事件存在的必要，因为事件的这两个限制条件，在某种程度上会更安全。</p><p>**疑问：**如果我在类中声明了一个委托，那么在实例化这个对象的时候，我并没有显式地给给这个委托赋值，<s>为什么不会报错呢</s>？但是如果我们在Main函数中实例化一个委托，不给他赋值的话，就会报错，为什么？</p><p>下面的代码给出了答案，上面说的两种情况都会报错的，但是在实例化对象的时候还需要手动地加一个判断条件，判断实例化的对象中的委托是不是空的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">MyDelegateClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span> MyDelegate? myDelegate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RegitserDelegate</span>(<span class="params">MyDelegate mmm</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        myDelegate += mmm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InvokeDelegate</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (myDelegate == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;委托是空的！不能调用！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            myDelegate.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Run</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Running.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Func</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegateClass delegateClass = <span class="keyword">new</span> MyDelegateClass();</span><br><span class="line">        delegateClass.InvokeDelegate();</span><br><span class="line">        MyDelegate mm = <span class="keyword">new</span> MyDelegate(MyDelegateClass.Run);</span><br><span class="line">        delegateClass.RegitserDelegate(mm);</span><br><span class="line">        delegateClass.InvokeDelegate();</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中用到了一些访问修饰符</p><ul><li><code>public</code>: 公有访问，不受任何限制</li><li><code>private</code>: 私有访问，只限于本类成员访问，子类、实例都不能访问</li><li><code>protected</code>: 保护访问，只限于本类和子类访问，实例不能访问</li><li><code>internal</code>: 内部访问， 只限于本项目内访问，其他不能访问</li></ul><p>**TIPS：**在计算机科学领域，<code>声明(Decalration)</code>指的是向编译器说明一个变量或者函数信息，包活：名字、类型、初始值等等，即声明变量、函数的属性细节；而<code>定义(Definition)</code>则指明变量、函数存储在哪里，当定义发生时，系统为变量或者函数分配内存单元。</p><h2 id="通过事件使用委托">通过事件使用委托</h2><p>事件在类中声明且生成，且通过使用同一个类或者其他类中的委托与事件处理程序关联。包含事件的类用于发布事件，它被称为发布器(publisher)类。其他接受该事件的类被称为订阅器(subscriber)类。事件使用发布-订阅(publisher-subscriber)模型。</p><p>发布器(publisher)是一个包含事件和委托定义的对象。事件和委托之间的联系也定义在这个对象中。发布器类的对象调用这个事件，并通知其他的对象。</p><p>订阅器(subscriber)是一个接受事件并提供事件处理程序的对象。在发布器类中的委托调用订阅器类中。</p><h2 id="声明事件-Event">声明事件(Event)</h2><p>在类的内部声明事件，首先必须声明该事件的委托类型。如：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">BoilerLogHandler</span>(<span class="params"><span class="built_in">string</span> status</span>)</span>;</span><br></pre></td></tr></table></figure><p>然后，声明事件本身，使用event关键字：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">event</span> BoilerLogHandler BoilerEventLog;</span><br></pre></td></tr></table></figure><p>上面的代码定义了一个名为BoilerLogHandler的委托和一个名为BoilerEventLog的事件，该事件在生成的时候会调用委托。</p><h2 id="实例">实例</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SimpleEvent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/******发布器类*******/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EventTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">NumManipulationHandler</span>()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> NumManipulationHandler ChangeNum;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnNumChanged</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ChangeNum != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ChangeNum(); <span class="comment">// 事件被触发</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Event not fire&quot;</span>);</span><br><span class="line">                Console.ReadKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EventTest</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> n = <span class="number">5</span>;</span><br><span class="line">            SetValue(<span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"><span class="built_in">int</span> n</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> != n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">value</span> = n;</span><br><span class="line">                OnNumChanged();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/********订阅器类********/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">subscribEvent</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printf</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;event fire&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/********触发********/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            EventTest e = <span class="keyword">new</span> EventTest(); <span class="comment">// 实例化对象，第一次没有触发事件</span></span><br><span class="line">            subscribEvent v = <span class="keyword">new</span> subscribEvent();</span><br><span class="line">            e.ChangeNum += <span class="keyword">new</span> EventTest.NumManipulationHandler(v.printf); <span class="comment">// 注册</span></span><br><span class="line">            e.SetValue(<span class="number">7</span>);</span><br><span class="line">            e.SetValue(<span class="number">11</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小故事：">小故事：</h2><p>曾经.NET只有一个Delegate，别人想要使用委托的时候，必须使用delegate关键字来定义一个委托，但是这样有一个弊端，那就是delegate可以使用<code>=</code>将所有已经订阅的取消，也可以使用<code>+</code>和<code>-</code>对订阅进行合并和删除，只保留<code>=</code>之后的新的订阅，这就给了犯罪分子可乘之机。所以event应运而生，event是一种特殊的委托，它只能使用<code>+=</code>、<code>-=</code>，而不能直接使用<code>=</code>，也就是说，event在定义类（发布者）中是可以直接<code>=</code>的，但是在其他类中（订阅者）就只能使用<code>+=</code>、<code>-=</code>了，也就是说发布者发布了一个事件之后，订阅者针对他只能进行自身的订阅和取消。但是在事件发布和订阅的过程中，定义事件的原型委托类型常常是一件重复性的工作。所以<code>Event Handler</code>应运而生，它的出现就是为了避免这种重复性的工作，并建议尽量使用该类型作为事件的原型。</p><p>下面是EvenHandler的实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TeacherArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler acthandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;老师来了&quot;</span>);</span><br><span class="line">        TeacherArgs args = <span class="keyword">new</span> TeacherArgs() &#123; Name = Name &#125;;</span><br><span class="line">        acthandler(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HeadArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> MedalCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Headmaster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> MedalCount;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Headmaster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        MedalCount = medalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长来了&quot;</span>);</span><br><span class="line">        HeadArgs args = <span class="keyword">new</span> HeadArgs() &#123; Name = Name, MedalCount = MedalCount &#125;;</span><br><span class="line">        actHandler(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Teacher</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        TeacherArgs args = e <span class="keyword">as</span> TeacherArgs;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好！&quot;</span>, args.Name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Master</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        HeadArgs args = e <span class="keyword">as</span> HeadArgs;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好&quot;</span>, args.Name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长获奖数为：&#123;0&#125;&quot;</span>, args.MedalCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Monitor</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MonitorArgs args = e <span class="keyword">as</span> MonitorArgs;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是没有任何参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonitorArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是什么参数都没有&quot;</span>);</span><br><span class="line">        MonitorArgs args = <span class="keyword">new</span> MonitorArgs() &#123; &#125;;</span><br><span class="line">        actHandler(<span class="literal">null</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Students students = <span class="keyword">new</span> Students();</span><br><span class="line">        Headmaster headmaster = <span class="keyword">new</span> Headmaster(<span class="string">&quot;孙校长&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;刘老师&quot;</span>);</span><br><span class="line">        Monitor monitor = <span class="keyword">new</span> Monitor();</span><br><span class="line">        headmaster.actHandler += students.Action_Master;</span><br><span class="line">        teacher.acthandler += students.Action_Teacher;</span><br><span class="line">        monitor.actHandler += students.Action_Monitor;</span><br><span class="line">        teacher.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        headmaster.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        monitor.Come();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**总结：**使用EventHandler可以</p><ol><li>标准化</li><li>可以省略定义委托这一步，不必定义多个不同类型的委托</li><li>搭配EventArgs，可以传递多个信息</li></ol><p>下面的代码是不使用EventHandler的实现：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Diagnostics.Metrics;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">TeacherDelegate</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">HeadMasterDelegate</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MonitorDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> TeacherDelegate acthandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;老师来了&quot;</span>);</span><br><span class="line">        acthandler(Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Headmaster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> MedalCount;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> HeadMasterDelegate actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Headmaster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        MedalCount = medalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长来了&quot;</span>);</span><br><span class="line">        actHandler(Name, MedalCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> MonitorDelegate actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是什么参数都没有&quot;</span>);</span><br><span class="line">        actHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好！&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Master</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好&quot;</span>, name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长获奖数为：&#123;0&#125;&quot;</span>, medalCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Monitor</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是没有任何参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Students students = <span class="keyword">new</span> Students();</span><br><span class="line">        Headmaster headmaster = <span class="keyword">new</span> Headmaster(<span class="string">&quot;孙校长&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;刘老师&quot;</span>);</span><br><span class="line">        Monitor monitor = <span class="keyword">new</span> Monitor();</span><br><span class="line">        headmaster.actHandler += students.Action_Master;</span><br><span class="line">        teacher.acthandler += students.Action_Teacher;</span><br><span class="line">        monitor.actHandler += students.Action_Monitor;</span><br><span class="line">        teacher.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        headmaster.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        monitor.Come();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续回到小故事：在这个故事中，Delegate是老大哥，但是EventHandler是event的小弟，老大哥不太高兴了，说我也要有小弟，但更重要的原因是每次定义Delegate也是很麻烦的，所以Action应运而生，Action是系统预定义的一种委托，没有<strong>返回值</strong>，参数在<code>&lt;&gt;</code>中传入，下面就是使用Action的方法来实现上面的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">string</span>&gt; acthandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;老师来了&quot;</span>);</span><br><span class="line">        acthandler(Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Headmaster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> MedalCount;</span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Headmaster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        MedalCount = medalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长来了&quot;</span>);</span><br><span class="line">        actHandler(Name, MedalCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Action actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是什么参数都没有&quot;</span>);</span><br><span class="line">        actHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好！&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Master</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好&quot;</span>, name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长获奖数为：&#123;0&#125;&quot;</span>, medalCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action_Monitor</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是没有任何参数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Students students = <span class="keyword">new</span> Students();</span><br><span class="line">        Headmaster headmaster = <span class="keyword">new</span> Headmaster(<span class="string">&quot;孙校长&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;刘老师&quot;</span>);</span><br><span class="line">        Monitor monitor = <span class="keyword">new</span> Monitor();</span><br><span class="line">        headmaster.actHandler += students.Action_Master;</span><br><span class="line">        teacher.acthandler += students.Action_Teacher;</span><br><span class="line">        monitor.actHandler += students.Action_Monitor;</span><br><span class="line">        teacher.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        headmaster.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        monitor.Come();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这段代码是用Func的方式实现的，Fun<code>&lt;&gt;</code>中比注册的函数的参数多1个，最后一个是参数是函数的返回类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">string</span>, <span class="built_in">bool</span>&gt; acthandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;老师来了&quot;</span>);</span><br><span class="line">        acthandler(Name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Headmaster</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> MedalCount;</span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">string</span>, <span class="built_in">int</span>, <span class="built_in">bool</span>&gt; actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Headmaster</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Name = name;</span><br><span class="line">        MedalCount = medalCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长来了&quot;</span>);</span><br><span class="line">        actHandler(Name, MedalCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Monitor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="built_in">bool</span>&gt; actHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Come</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是什么参数都没有&quot;</span>);</span><br><span class="line">        actHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Action_Teacher</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好！&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Action_Master</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> medalCount</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;全体起立，喊：&#123;0&#125;好&quot;</span>, name);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;校长获奖数为：&#123;0&#125;&quot;</span>, medalCount);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Action_Monitor</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;班长来了，但是没有任何参数&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Students students = <span class="keyword">new</span> Students();</span><br><span class="line">        Headmaster headmaster = <span class="keyword">new</span> Headmaster(<span class="string">&quot;孙校长&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">&quot;刘老师&quot;</span>);</span><br><span class="line">        Monitor monitor = <span class="keyword">new</span> Monitor();</span><br><span class="line">        headmaster.actHandler += students.Action_Master;</span><br><span class="line">        teacher.acthandler += students.Action_Teacher;</span><br><span class="line">        monitor.actHandler += students.Action_Monitor;</span><br><span class="line">        teacher.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        headmaster.Come();</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        monitor.Come();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>写一个带有事件中心的发布、订阅系统</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualBasic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerState</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayerDeath</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;玩家死亡！向事件中心发送消息！&quot;</span>);</span><br><span class="line">        MessageCenter.Instance.SendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AudioManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AudioManager Instance = <span class="keyword">new</span> AudioManager();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">AudioManager</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是AudioManager，我已经创建完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PlayDeathAudio</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;执行死亡音效&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DataManager Instance = <span class="keyword">new</span> DataManager();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DataManager</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是DataManager，我已经创建完毕！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ResetData</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;玩家死亡，执行数据重制&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EnenyManager</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnenyManager Instance = <span class="keyword">new</span> EnenyManager();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EnenyManager</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是EnemyManager，我已经创建完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnemyVictory</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;玩家死亡，敌人胜利！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageCenter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 这里是事件中心，处理游戏中各类事件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MessageCenter Instance = <span class="keyword">new</span> MessageCenter();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MessageCenter</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 构造函数使用private关键字就可以避免在别的类中使用new实例化对象了</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我是事件中心，我已经初始化完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">PlayerDeathDelegate</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PlayerDeathDelegate DeathDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SendMessage</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (DeathDelegate == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;委托是空的！没有什么好执行的！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            DeathDelegate.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params">PlayerDeathDelegate deathDelegate</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        DeathDelegate += deathDelegate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameStart</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PlayerState player = <span class="keyword">new</span> PlayerState();</span><br><span class="line">        <span class="comment">// 游戏开始后要先将函数注册到事件中心去</span></span><br><span class="line">        MessageCenter.Instance.Register(AudioManager.Instance.PlayDeathAudio);</span><br><span class="line">        MessageCenter.Instance.Register(DataManager.Instance.ResetData);</span><br><span class="line">        MessageCenter.Instance.Register(EnenyManager.Instance.EnemyVictory);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        player.PlayerDeath();</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码还不够完善，比如现在只是处理了玩家死亡这一种事件，那如何处理玩家其他状态的事件呢？还有如果不是玩家，是别的什么比如宝物、使用药水等等各种的委托，该怎么实现？这都是后话了，委托的学习到此可以先告一段落了。</p><h1>项目中的按钮响应点击事件的方法</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ButtonUI</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Button btn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UI.Extension;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ButtonPage</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> ButtonUI _ui;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _ui = gameObject.GetComponent&lt;ButtonUI&gt;();</span><br><span class="line">        _ui.btn.onClick.AddListener(OnBtnClicked);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnBtnClicked</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;我被点击了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PhysX笔记</title>
      <link href="/posts/6f4ce0cc/"/>
      <url>/posts/6f4ce0cc/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ProjectO</title>
      <link href="/posts/8a8aad75/"/>
      <url>/posts/8a8aad75/</url>
      
        <content type="html"><![CDATA[<h1>索引</h1><p><a href="https://soincredible.github.io/posts/20505312">代码热更新</a><br><a href="https://soincredible.github.io/posts/ae5b3442">资源加载</a><br><a href="https://soincredible.github.io/posts/ff09e316">ET框架8.1</a><br><a href="https://soincredible.github.io/posts/6f4ce0cc">物理模拟</a><br><a href="">动画</a><br><a href="">技能编辑器</a><br><a href="">数据库MongoDB</a><br><a href="">渲染</a></p><p>OW中的英雄角色和运载目标之间是存在碰撞的, 运载目标和生命之树之间 如果生命之树生成在地上运载目标不会和树发生碰撞 生成在车上就会有碰撞 角色和生命之树有碰撞</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The performance characteristics of async methods in C#</title>
      <link href="/posts/4b84508e/"/>
      <url>/posts/4b84508e/</url>
      
        <content type="html"><![CDATA[<p>在最近的两篇博客文章中，我们深入探讨了C#异步方法的内部实现机制，并详细分析了C#编译器提供的扩展点如何调整异步方法的行为。今天，我们将重点研究异步方法的性能特征。</p><p>正如本系列第一篇文章所述，编译器进行了大量转换工作，使异步编程体验几乎与同步编程无异。但为了实现这一点，编译器需要创建状态机实例、将其传递给异步方法生成器、调用任务等待器等。显然，所有这些逻辑都会带来性能开销，但具体代价有多大呢？</p><p>在TPL（任务并行库）出现之前，异步操作通常粒度较粗，因此其开销往往可以忽略不计。但在现代应用中，即使相对简单的程序每秒也可能执行成百上千次异步操作。TPL虽然针对这种工作负载进行了优化设计，但它并非魔法，仍然存在一定开销。</p><p>为了准确测量异步方法的开销，我们将对首篇博客中的示例进行适当调整后作为测试基准。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StockPrices</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">int</span> Count = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;(<span class="built_in">string</span> name, <span class="built_in">decimal</span> price)&gt; _stockPricesCache;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Async version</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">decimal</span>&gt; <span class="title">GetStockPriceForAsync</span>(<span class="params"><span class="built_in">string</span> companyId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> InitializeMapIfNeededAsync();</span><br><span class="line">        <span class="keyword">return</span> DoGetPriceFromCache(companyId);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Sync version that calls async init</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">GetStockPriceFor</span>(<span class="params"><span class="built_in">string</span> companyId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeMapIfNeededAsync().GetAwaiter().GetResult();</span><br><span class="line">        <span class="keyword">return</span> DoGetPriceFromCache(companyId);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Purely sync version</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">decimal</span> <span class="title">GetPriceFromCacheFor</span>(<span class="params"><span class="built_in">string</span> companyId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        InitializeMapIfNeeded();</span><br><span class="line">        <span class="keyword">return</span> DoGetPriceFromCache(companyId);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">decimal</span> <span class="title">DoGetPriceFromCache</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> kvp <span class="keyword">in</span> _stockPricesCache)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (kvp.name == name)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> kvp.price;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">$&quot;Can&#x27;t find price for &#x27;<span class="subst">&#123;name&#125;</span>&#x27;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    [<span class="meta">MethodImpl(MethodImplOptions.NoInlining)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializeMapIfNeeded</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Similar initialization logic.</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">InitializeMapIfNeededAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_stockPricesCache != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">42</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Getting the stock prices from the external source.</span></span><br><span class="line">        <span class="comment">// Generate 1000 items to make cache hit somewhat expensive</span></span><br><span class="line">        _stockPricesCache = Enumerable.Range(<span class="number">1</span>, Count)</span><br><span class="line">            .Select(n =&gt; (name: n.ToString(), price: (<span class="built_in">decimal</span>)n))</span><br><span class="line">            .ToList();</span><br><span class="line">        _stockPricesCache.Add((name: <span class="string">&quot;MSFT&quot;</span>, price: <span class="number">42</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#中的Task</title>
      <link href="/posts/323f6783/"/>
      <url>/posts/323f6783/</url>
      
        <content type="html"><![CDATA[<h1>关于TaskScheduler</h1><p>TaskScheduler是C#<code>System.Threading.Tasks</code>命名空间下的一个抽象类, 在<code>.Net Framework 4.8</code>中C#内置了三个TaskScheduler的派生类: <code>ConcurrentExclusiveScheduler</code>、<code>SynchronizationContextTaskScheduler</code>、<code>ThreadPoolTaskScheduler</code>.</p><p>其中的<code>ThreadPoolTaskScheduler</code>, 被设置为了Default TaskScheduler</p><h1>ExecutionContext</h1><p>执行上下文,</p><h1>StackCrawlMark</h1><h1>关于Thread</h1><h1>调用Task.Run的时候 发生了什么</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Extending the asynce methods in CSharp(译)</title>
      <link href="/posts/40aca622/"/>
      <url>/posts/40aca622/</url>
      
        <content type="html"><![CDATA[<p>首先要搞清楚, 为什么要实现我们自己的异步, 我们可以使用Task来完成我们的异步操作, 我们将需要异步的操作用Task包装, Task(Awaiter)何时结束、如何调度都是TaskScheduler做的, 我们没有太多权限干预 我们能做的只是告诉Task 等你的任务完成之后 你需要调用stateMachiner的MoveNext方法, 如果我要实现自己的类似ETTask的功能, 我希望我能自己决定如何调度这些ETTask, 要不然实现自己的ETTask的意义就没有了. C#中异步操作到这里就已经揭示地比较清楚了, 只是Task的调度目前对我们来说还是黑盒, 最好它也只是黑盒</p><p>因此, 在笔者看来, 要实现自己的异步, 就是要实现如何调度这些异步操作, 即我们要实现TaskScheduler的功能.</p><p>我们使用Task包装一些操作, 这些操作可能是<code>ComputeBound</code>类型或者<code>IOBound</code>类型, 也可能只是一个延时<code>Task.Delay</code>操作, 甚至可能就是一个简单的同步方法. 不论是什么操作, 你只要将该操作使用Task包装, 并且调用了该Task, 那么你就可以通过获取<code>Task.GetAwaiter()</code>接口获取到该Task的Awaiter, 然后通过调用Awaiter.IsComplete来判断包装进该Task的操作有没有完成.</p><p>我们希望的是Task可以被await, 那么Task中就要有一个<code>GetAwaiter()</code>方法<br>那么task的GetAwaiter方法返回回来的是一个TaskAwaiter类型<br>所以是TaskAwaiter类型实现了INotifyCompletion接口、 且TaskAwaiter中有<code>bool IsComplete &#123;get;&#125;</code>属性和<code>T GetResult()</code>方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static async Task Foo()</span><br><span class="line">&#123;</span><br><span class="line">    var lazy = new Lazy&lt;int&gt;(() =&gt; 42);</span><br><span class="line">    var result = await lazy;</span><br><span class="line">    Console.WriteLine(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中() =&gt; 42 的含义<br>()：表示一个没有参数的匿名方法（类似无参函数）。</p><p>=&gt;：Lambda 运算符，分隔参数和方法体。</p><p>42：方法的返回值（此处直接返回常量值 42）。</p><p>Lazy<T> 的构造函数接受一个 Func<T> 委托（即一个无参且返回 T 类型的方法）。Lambda 表达式 () =&gt; 42 正好匹配这个委托类型：</p><p>Func<int> 的签名是 int Func()，而 () =&gt; 42 是一个无参且返回 int 的表达式。</p><p>因此，代码可以简化为 Lambda 形式，而不需要显式定义一个单独的方法。</p><p>在之前的博客文章中，我们讨论了C#编译器如何转换异步方法。本文将重点介绍C#编译器提供的扩展点，用于自定义异步方法的行为。</p><p>有三种方式可以控制异步方法的运行机制：</p><ul><li>在System.Runtime.CompilerServices命名空间中提供自定义的异步方法生成器</li><li>使用自定义任务等待器</li><li>定义自己的类任务类型</li></ul><h1>System.Runtime.CompilerServices命名空间中的自定义类型</h1><p>正如我们在上一篇文章中所了解的，C#编译器将异步方法转换为一个生成的状态机，该状态机依赖于一些预定义类型。但C#编译器并不要求这些已知类型必须来自特定程序集。例如，您可以在项目中提供自己的AsyncVoidMethodBuilder实现，C#编译器会将异步机制&quot;绑定&quot;到您的自定义类型。</p><p>这是探索底层转换原理和了解运行时情况的绝佳方式：</p><p>必须要注意, 这种方式你必须将你的builder定义在<code>System.Runtime.CompilerServices</code>命名空间下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">System.Runtime.CompilerServices</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// AsyncVoidMethodBuilder.cs in your project</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AsyncVoidMethodBuilder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AsyncVoidMethodBuilder</span>()</span></span><br><span class="line">            =&gt; Console.WriteLine(<span class="string">&quot;.ctor&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AsyncVoidMethodBuilder <span class="title">Create</span>()</span></span><br><span class="line">            =&gt; <span class="keyword">new</span> AsyncVoidMethodBuilder();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetResult</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;SetResult&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>&lt;<span class="title">TStateMachine</span>&gt;(<span class="params"><span class="keyword">ref</span> TStateMachine stateMachine</span>)</span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TStateMachine : IAsyncStateMachine</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line">            stateMachine.MoveNext();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetStateMachine</span>(<span class="params">IAsyncStateMachine stateMachine</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetException</span>(<span class="params">Exception exception</span>)</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AwaitOnCompleted</span>&lt;<span class="title">TAwaiter</span>, <span class="title">TStateMachine</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">ref</span> TAwaiter awaiter, <span class="keyword">ref</span> TStateMachine stateMachine</span>)</span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TAwaiter : INotifyCompletion</span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TStateMachine : IAsyncStateMachine</span></span><br><span class="line">        &#123;</span><br><span class="line">            stateMachine.MoveNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AwaitUnsafeOnCompleted</span>&lt;<span class="title">TAwaiter</span>, <span class="title">TStateMachine</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">ref</span> TAwaiter awaiter, <span class="keyword">ref</span> TStateMachine stateMachine</span>)</span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TAwaiter : ICriticalNotifyCompletion</span></span><br><span class="line"><span class="function">            <span class="keyword">where</span> TStateMachine : IAsyncStateMachine</span></span><br><span class="line">        &#123;</span><br><span class="line">            stateMachine.MoveNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在, 你项目中所有的异步方法都会使用这个自定义版本的<code>AsyncVoidMethodBuilder</code>. 我们可以用下面的异步方法简单测试一下:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RunAsyncVoid</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Before VoidAsync&quot;</span>);</span><br><span class="line">    VoidAsync();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;After VoidAsync&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">async</span> <span class="keyword">void</span> <span class="title">VoidAsync</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Before VoidAsync</span><br><span class="line">.ctor</span><br><span class="line">Start</span><br><span class="line">SetResult</span><br><span class="line">After VoidAsync</span><br></pre></td></tr></table></figure><p>您可以实现 UnsafeAwaitOnComplete 方法来测试带有 await 子句的异步方法在返回未完成任务时的行为。完整示例可以在 GitHub 上找到。</p><p>要修改 async Task 和 async Task<T> 方法的行为，您需要提供自己的 AsyncTaskMethodBuilder 和 AsyncTaskMethodBuilder<T> 实现。完整的实现示例可以在我的 GitHub 项目 EduAsync(*) 中找到，分别对应文件 AsyncTaskBuilder.cs 和 AsyncTaskMethodBuilderOfT.cs。</p><h1>Custom awaiters</h1><p>前面的示例属于&quot;黑客手段&quot;，并不适合生产环境。虽然我们可以通过这种方式学习异步机制，但您肯定不希望在自己的代码库中看到这样的代码。C# 语言设计者在编译器中内置了正确的扩展点，允许在异步方法中&quot;await&quot;不同的类型。</p><p>要使某个类型成为&quot;可等待的&quot;（即可以在 await 表达式中使用），该类型需要遵循特定模式：</p><p>编译器必须能够找到一个名为 GetAwaiter 的实例方法或扩展方法。该方法的返回类型需要满足以下要求：</p><ul><li>必须实现 INotifyCompletion 接口</li><li>必须包含 bool IsCompleted {get;} 属性</li><li>必须提供 T GetResult() 方法</li></ul><p>这意味着我们可以轻易的将<code>Lazy&lt;T&gt;</code>变得awaitable:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> LazyAwaiter&lt;T&gt; : INotifyCompletion</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Lazy&lt;T&gt; _lazy;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LazyAwaiter</span>(<span class="params">Lazy&lt;T&gt; lazy</span>)</span> =&gt; _lazy = lazy;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetResult</span>()</span> =&gt; _lazy.Value;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsCompleted =&gt; <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCompleted</span>(<span class="params">Action continuation</span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">LazyAwaiterExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">LazyAwaiter</span>&lt;<span class="title">T</span>&gt; <span class="title">GetAwaiter</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> Lazy&lt;T&gt; lazy</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LazyAwaiter&lt;T&gt;(lazy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Foo</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> lazy = <span class="keyword">new</span> Lazy&lt;<span class="built_in">int</span>&gt;(() =&gt; <span class="number">42</span>);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> lazy;</span><br><span class="line">    Console.WriteLine(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例可能看起来有些刻意，但这种扩展机制实际上非常实用，并且已被广泛应用。例如：</p><p>.NET 的 Reactive Extensions 就提供了自定义等待器，允许在异步方法中等待 IObservable<T> 实例</p><p>基础类库(BCL)本身也包含多个实现：</p><p>YieldAwaitable（由 Task.Yield 使用）</p><p>HopToThreadPoolAwaitable</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> HopToThreadPoolAwaitable : INotifyCompletion</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HopToThreadPoolAwaitable <span class="title">GetAwaiter</span>()</span> =&gt; <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsCompleted =&gt; <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCompleted</span>(<span class="params">Action continuation</span>)</span> =&gt; Task.Run(continuation);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetResult</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下单元测试展示了最后一个等待器的实际应用：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Test</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Test</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> testThreadId = Thread.CurrentThread.ManagedThreadId;</span><br><span class="line">    <span class="keyword">await</span> Sample();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">async</span> Task <span class="title">Sample</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Assert.AreEqual(Thread.CurrentThread.ManagedThreadId, testThreadId);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">await</span> <span class="literal">default</span>(HopToThreadPoolAwaitable);</span><br><span class="line">        Assert.AreNotEqual(Thread.CurrentThread.ManagedThreadId, testThreadId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任何异步方法的第一部分（在首个 await 语句之前）都会同步执行。在大多数情况下，这种机制非常适合用于立即进行参数验证，但有时我们需要确保方法体不会阻塞调用者线程。HopToThreadPoolAwaitable 的作用就是确保方法的剩余部分在线程池线程而非调用者线程中执行。</p><h1>Task-Like Types</h1><p>自定义等待器（custom awaiters）从支持 async/await 的编译器最初版本（即 C# 5）就已存在。这种扩展机制虽然很有用，但存在限制——所有异步方法都必须返回 void、Task 或 Task<T>。从 C# 7.2 开始，编译器开始支持类任务类型。</p><p>类任务类型是指具有关联构建器类型的类或结构体，该构建器类型通过 AsyncMethodBuilderAttribute(**) 标识。要使类任务类型真正有用，它必须满足前一节描述的&quot;可等待&quot;条件。本质上，类任务类型整合了前文所述的两种扩展机制，并将第一种方式转化为官方支持方案。</p><p>以下是一个定义为结构体的自定义类任务类型简单示例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">TaskLikeMethodBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TaskLikeMethodBuilder</span>()</span></span><br><span class="line">        =&gt; Console.WriteLine(<span class="string">&quot;.ctor&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskLikeMethodBuilder <span class="title">Create</span>()</span></span><br><span class="line">        =&gt; <span class="keyword">new</span> TaskLikeMethodBuilder();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetResult</span>()</span> =&gt; Console.WriteLine(<span class="string">&quot;SetResult&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>&lt;<span class="title">TStateMachine</span>&gt;(<span class="params"><span class="keyword">ref</span> TStateMachine stateMachine</span>)</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TStateMachine : IAsyncStateMachine</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Start&quot;</span>);</span><br><span class="line">        stateMachine.MoveNext();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> TaskLike Task =&gt; <span class="literal">default</span>(TaskLike);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// AwaitOnCompleted, AwaitUnsafeOnCompleted, SetException </span></span><br><span class="line">    <span class="comment">// and SetStateMachine are empty</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">[<span class="meta">System.Runtime.CompilerServices.AsyncMethodBuilder(typeof(TaskLikeMethodBuilder))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> TaskLike</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskLikeAwaiter <span class="title">GetAwaiter</span>()</span> =&gt; <span class="literal">default</span>(TaskLikeAwaiter);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> TaskLikeAwaiter : INotifyCompletion</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetResult</span>()</span> &#123; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsCompleted =&gt; <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCompleted</span>(<span class="params">Action continuation</span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以定义返回类任务类型（TaskLike）的方法，甚至可以在方法体内使用不同的类任务类型：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> TaskLike <span class="title">FooAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Yield();</span><br><span class="line">    <span class="keyword">await</span> <span class="literal">default</span>(TaskLike);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入类任务类型（task-like types）的主要目的是减少异步操作的开销。每个返回 Task<T> 的异步操作至少会在托管堆上分配一个对象——即任务本身。对于绝大多数应用程序来说，这完全不是问题，尤其是处理粗粒度异步操作时。但对于基础设施级别的代码（每秒可能涉及数千个小型任务）而言，情况则不同。在这类场景下，减少每次调用的内存分配可以显著提升性能。</p><h1>异步模式扩展基础</h1><p>C# 编译器为扩展异步方法提供了多种方式：</p><ul><li>修改现有基于 Task 的异步方法, 通过提供自定义的 AsyncTaskMethodBuilder 类型实现来改变行为</li><li>实现&quot;可等待模式&quot;, 通过实现 “awaitable pattern” 使类型支持 await 操作</li><li>构建自定义类任务类型（C# 7+）, 从 C# 7 开始支持创建自己的类任务类型</li></ul><h1>扩展阅读</h1><p>[深度解析 C# 异步方法](Dissecting the async methods in C#)</p><p>[EduAsync 代码库（GitHub）](EduAsync repo on github)</p><p>[类任务类型详解](Task-like types)</p><p>下一篇博客, 我们将探讨异步方法的性能特征，并分析新型值类型 System.ValueTask 如何影响性能表现。</p><h1>学以致用</h1><p>将Unity异步操作类型变得可以await<br>笔者今天找到的应用场景: 在Unity中, 如果你在Editor模式下执行某些异步操作, 你是没有办法通过MonoBehaviour开启协程来驱动异步操作的, 当然有一些奇技淫巧, 比如I2那个多语言插件, 笔者记得好像是通过在场景中创建一个挂在了其异步操作的MonoBehaviour的节点, 在那个节点上执行异步操作, 但是笔者觉得还是不太优雅, 需要Unity协程驱动的异步操作变成可以被Task await的操作.</p><p>代码如下:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> UnityWebRequestAsyncOperationAwaiter : ICriticalNotifyCompletion</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> UnityWebRequestAsyncOperation _asyncOperation;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnityWebRequestAsyncOperationAwaiter</span>(<span class="params">UnityWebRequestAsyncOperation asyncOperation</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _asyncOperation = asyncOperation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnCompleted</span>(<span class="params">Action continuation</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _asyncOperation.completed += _ =&gt; continuation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnsafeOnCompleted</span>(<span class="params">Action continuation</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _asyncOperation.completed += _ =&gt; continuation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetResult</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_asyncOperation.webRequest.result != UnityWebRequest.Result.Success)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnityWebRequestException(_asyncOperation.webRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsCompleted =&gt; _asyncOperation.isDone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnityWebRequestException</span> : <span class="title">Exception</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnityWebRequestException</span>(<span class="params">UnityWebRequest request</span>) </span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params"><span class="string">$&quot;Error: <span class="subst">&#123;request.error&#125;</span>\nURL: <span class="subst">&#123;request.url&#125;</span>&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">UnityWebRequestAsyncOperationExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UnityWebRequestAsyncOperationAwaiter <span class="title">GetAwaiter</span>(<span class="params"><span class="keyword">this</span> UnityWebRequestAsyncOperation asyncOperation</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UnityWebRequestAsyncOperationAwaiter(asyncOperation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AIDebugger</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Command(<span class="string">&quot;SetAIMatch&quot;</span>, QuickName = <span class="string">&quot;设置匹配AI&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetAIMatch</span>(<span class="params">[CommandParameter(<span class="string">&quot;是否开启AI匹配&quot;</span></span>)]<span class="built_in">bool</span> enableAI)</span></span><br><span class="line">    &#123;</span><br><span class="line">        AIMatchDebugger.PostRequest(UserData.Instance.userId, enableAI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AIMatchDebugger</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;UI Elements&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> InputField userIdInput;</span><br><span class="line">    <span class="keyword">public</span> Toggle needAIToggle;</span><br><span class="line">    <span class="keyword">public</span> Toggle needAIOnlyToggle;</span><br><span class="line">    <span class="keyword">public</span> Button submitButton;</span><br><span class="line">    <span class="keyword">public</span> Text statusText;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Header(<span class="string">&quot;Server Config&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">string</span> serverURL = <span class="string">&quot;http://fhdz3dfzwss.nalrer.cn:8016/gtest/dizhu/aiMatch&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        submitButton.onClick.AddListener(SubmitForm);</span><br><span class="line">        LoadDefaultValues();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LoadDefaultValues</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        userIdInput.text = <span class="string">&quot;72087&quot;</span>;</span><br><span class="line">        needAIToggle.isOn = <span class="literal">true</span>;</span><br><span class="line">        needAIOnlyToggle.isOn = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SubmitForm</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// PostRequest();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">PostRequest</span>(<span class="params"><span class="built_in">int</span> userId, <span class="built_in">bool</span> enableAI</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 准备表单数据</span></span><br><span class="line">            WWWForm form = <span class="keyword">new</span> WWWForm();</span><br><span class="line">            form.AddField(<span class="string">&quot;userId&quot;</span>, userId.ToString());</span><br><span class="line">            form.AddField(<span class="string">&quot;needAI&quot;</span>, enableAI ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">            form.AddField(<span class="string">&quot;needAIOnly&quot;</span>, enableAI ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            QDebug.Log(<span class="string">&quot;请求发出去了&quot;</span>);</span><br><span class="line">            <span class="comment">// 发送请求</span></span><br><span class="line">            <span class="keyword">using</span> (UnityWebRequest www = UnityWebRequest.Post(serverURL, form))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">await</span> www.SendWebRequest();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (www.result != UnityWebRequest.Result.Success)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// statusText.text = $&quot;Error: &#123;www.error&#125;&quot;;</span></span><br><span class="line">                    QDebug.LogError(www.error);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// statusText.text = &quot;修改成功&quot;;</span></span><br><span class="line">                    QDebug.Log(<span class="string">&quot;Form upload complete!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            QDebug.LogError(<span class="string">&quot;发生异常了&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span>; <span class="comment">// TODO handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>总结</h1><p>笔者暂且认为第三种 Task-Like Types是当前主流的C#中实现自定义异步的方式. 想要用这种方式实现异步, 你需要:</p><p>你有很多的操作, 无论是C#提供给你的Task还是你自己基于C#实现的类Task都是把你想要用异步方式执行的操作包装起来.</p><p>构建自己的异步有三个重要角色:</p><ul><li>自己的AsyncMethodBuilder</li><li>自己的Awaiter</li><li>自己的TaskLike类型 这里注意<code>awaiter</code>是<code>awaiter</code>, <code>tasklike</code>是<code>tasklike</code>, 但是ETTask将既是tasklike又是awaiter</li></ul><ol><li>有一个名为<code>TaskLikeMethodBuilder</code>的method builder, 这个Builder里面需要如下接口<ul><li>public static TaskLikeMethodBuilder <strong>Create</strong>()接口</li><li>public void <strong>Start</strong><TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine接口</li><li>public void <strong>SetException</strong>(Exception e)接口</li><li>public void <strong>SetResult</strong>() 接口</li><li>public void <strong>AwaitOnCompleted</strong>&lt;TAwaiter, TStateMachine&gt;(<br>ref TAwaiter awaiter, ref TStateMachine stateMachine)<br>where TAwaiter : INotifyCompletion<br>where TStateMachine : IAsyncStateMachine 接口</li><li>public void <strong>AwaitUnsafeOnCompleted</strong>&lt;TAwaiter, TStateMachine&gt;(<br>ref TAwaiter awaiter, ref TStateMachine stateMachine)<br>where TAwaiter : ICriticalNotifyCompletion<br>where TStateMachine : IAsyncStateMachine 接口</li><li>public void <strong>SetStateMachine</strong>(IAsyncStateMachine stateMachine) 接口</li><li>public TaskLike <strong>Task</strong> // 名字必须是Task</li></ul></li><li>有一个实现了ICriticalNotifyCompletion接口的类<ul><li>OnCompleted(Action continuation)</li><li>UnsafeOnCompleted(Action continuation)</li></ul></li><li>一个Tasklike类<ul><li>有一个GetAwaiter</li><li>GetResult()接口</li><li>IsCompleted属性 注意必须是属性(Property)</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dissecting the async methods in CSharp</title>
      <link href="/posts/72dba58e/"/>
      <url>/posts/72dba58e/</url>
      
        <content type="html"><![CDATA[<h1>关于异步的历史</h1><p>C#开发者在第一次接触异步的概念, 应该是通过Task类型. Task是在<code>.Net 4.0</code>的时候被引入的. 一个task就是一个work单元, 且该task承诺, 在这个task未来完成的时候, 会将结果返回给task的调用者. 这个Task可能是由IO操作支持或者计算密集型操作(这正好对应了笔者在协程部分所说的CPU密集型操作和IO型操作, Unity协程只能用来做IO型的异步操作). 重要的是该操作的结果是自包含的，且具有一等公民身份。你可以自由传递这个&quot;未来&quot;：将其存储在变量中、从方法返回它、或传递给其他方法。你可以将两个&quot;未来&quot;合并形成新的任务，可以同步等待结果，也可以通过添加&quot;延续&quot;来&quot;等待&quot;结果。仅凭任务实例本身，你就能决定在操作成功、失败或被取消时采取何种处理。</p><p>任务并行库 (TPL) 改变了我们对并发编程的认知，而 C# 5 通过引入 async/await 进一步推动了这一发展。async/await 让任务的组合变得更加容易，并允许开发者使用熟悉的代码结构，如 try/catch、using 等。但是async/await也有其开销. 要理解具体开销是什么, 我们需要深入底层机制中.</p><h1>异步方法内部</h1><p>普通方法只有一个入口点和一个退出点（虽然可能有多个 return 语句，但在运行时，每次调用仅有一个实际退出点）。但 异步方法（*） 和 迭代器方法（包含 yield return 的方法）则不同。对于异步方法而言，调用方几乎可以立即获取结果（即 Task 或 Task<T>），然后通过返回的任务（Task）来 “await” 方法的实际执行结果。</p><p>（*）我们定义的 “异步方法” 是指用 async 上下文关键字标记的方法。这并不一定意味着该方法会异步执行，甚至完全不意味着它是异步的。它仅表示 编译器会对该方法进行某些特殊转换。</p><p>看一下下面这个异步方法:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">StockPrices</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">decimal</span>&gt; _stockPrices;</span><br><span class="line">    <span class="comment">// 被标记了async的方法, Compiler会在背后将其内部的逻辑转调用一个状态机</span></span><br><span class="line">    <span class="comment">// 而这个异步方法中原来的逻辑会全部转移到Compiler自动生成的状态机的MoveNext方法中 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="built_in">decimal</span>&gt; <span class="title">GetStockPriceForAsync</span>(<span class="params"><span class="built_in">string</span> companyId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> InitializeMapIfNeededAsync();</span><br><span class="line">        _stockPrices.TryGetValue(companyId, <span class="keyword">out</span> <span class="keyword">var</span> result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 被标记了async的方法, Compiler会在背后将其转换成状态机</span></span><br><span class="line">    <span class="comment">// 而这个异步方法中原来的逻辑会全部转移到Compiler自动生成的状态机的MoveNext方法中 </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">InitializeMapIfNeededAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_stockPrices != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">42</span>);</span><br><span class="line">        <span class="comment">// Getting the stock prices from the external source and cache in memory.</span></span><br><span class="line">        _stockPrices = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">decimal</span>&gt; &#123; &#123; <span class="string">&quot;MSFT&quot;</span>, <span class="number">42</span> &#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>上面这段代码中的两个方法都使用了<code>async</code>标记, 到头来都只是为了<code>await Task.Delay(42)</code>这一行代码服务的.<br>为了更好的理解编译器做了或者能做什么, 让我们尝试着手写一下转换过程</p></blockquote></blockquote><h1>手动解构异步方法</h1><p>TPL（任务并行库）提供了两大核心构建模块，帮助我们构造和组合任务：</p><ul><li>任务延续（Task Continuation）-&gt; 通过 <code>Task.ContinueWith</code>实现</li><li>手动构建任务 -&gt; 通过 <code>TaskCompletionSource&lt;T&gt;</code> 类实现<br>（注：前者用于链式编排任务，后者用于手动控制任务生命周期。）</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">GetStockPriceForAsync_StateMachine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">enum</span> State &#123; Start, Step1, &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> StockPrices @this;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _companyId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> TaskCompletionSource&lt;<span class="built_in">decimal</span>&gt; _tcs;</span><br><span class="line">    <span class="keyword">private</span> Task _initializeMapIfNeededTask;</span><br><span class="line">    <span class="keyword">private</span> State _state = State.Start;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetStockPriceForAsync_StateMachine</span>(<span class="params">StockPrices @<span class="keyword">this</span>, <span class="built_in">string</span> companyId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.@this = @this;</span><br><span class="line">        _companyId = companyId;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_state == State.Start)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// The code from the start of the method to the first &#x27;await&#x27;.</span></span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(_companyId))</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException();</span><br><span class="line"> </span><br><span class="line">                _initializeMapIfNeededTask = @this.InitializeMapIfNeeded();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Update state and schedule continuation</span></span><br><span class="line">                _state = State.Step1;</span><br><span class="line">                _initializeMapIfNeededTask.ContinueWith(_ =&gt; Start());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (_state == State.Step1)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Need to check the error and the cancel case first</span></span><br><span class="line">                <span class="keyword">if</span> (_initializeMapIfNeededTask.Status == TaskStatus.Canceled)</span><br><span class="line">                    _tcs.SetCanceled();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (_initializeMapIfNeededTask.Status == TaskStatus.Faulted)</span><br><span class="line">                    _tcs.SetException(_initializeMapIfNeededTask.Exception.InnerException);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// The code between first await and the rest of the method</span></span><br><span class="line"> </span><br><span class="line">                    @this._stockPrices.TryGetValue(_companyId, <span class="keyword">out</span> <span class="keyword">var</span> result);</span><br><span class="line">                    _tcs.SetResult(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            _tcs.SetException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Task&lt;<span class="built_in">decimal</span>&gt; Task =&gt; _tcs.Task;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Task&lt;<span class="built_in">decimal</span>&gt; <span class="title">GetStockPriceForAsync</span>(<span class="params"><span class="built_in">string</span> companyId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> stateMachine = <span class="keyword">new</span> GetStockPriceForAsync_StateMachine(<span class="keyword">this</span>, companyId);</span><br><span class="line">    stateMachine.Start();</span><br><span class="line">    <span class="keyword">return</span> stateMachine.Task;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码虽然冗长，但逻辑相对直接。原先在 GetStockPriceForAsync 中的所有逻辑都被转移到了 GetStockPriceForAsync_StateMachine.Start 方法中，该方法采用了&quot;延续传递风格&quot;(continuation passing style)。异步转换的核心算法就是将原始方法在 await 边界处分割成若干代码块：</p><ul><li>第一个代码块：从方法开始到第一个 await 之间的代码</li><li>第二个代码块：从第一个 await 到第二个 await 之间的代码</li><li>第三个代码块：从第二个 await 到第三个 await 或方法结束的代码 以此类推</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Step 1 of the generated state machine:</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(_companyId)) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException();</span><br><span class="line">_initializeMapIfNeededTask = @this.InitializeMapIfNeeded();</span><br></pre></td></tr></table></figure><p>每个被 await 的任务现在都变成了状态机的一个字段，而 Start 方法会将自己注册为这些任务的延续（continuation）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_state = State.Step1;</span><br><span class="line">_initializeMapIfNeededTask.ContinueWith(_ =&gt; Start());</span><br></pre></td></tr></table></figure><p>随后，当任务完成时，Start方法会被回调，并通过检查_state字段来确定当前执行阶段。接着，状态机会判断任务是成功完成、被取消还是出现异常。如果是成功完成的情况，状态机就会继续执行下一个代码块。当所有操作都完成后，状态机会设置TaskCompletionSource<T>实例的结果值，此时从GetStockPricesForAsync返回的任务状态就会变更为已完成。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The code between first await and the rest of the method</span></span><br><span class="line"> </span><br><span class="line">@this._stockPrices.TryGetValue(_companyId, <span class="keyword">out</span> <span class="keyword">var</span> result);</span><br><span class="line">_tcs.SetResult(result); <span class="comment">// The caller gets the result back</span></span><br></pre></td></tr></table></figure><p>这种&quot;实现方式&quot;存在几个严重缺陷：</p><ul><li>大量堆内存分配：<ul><li>状态机实例需要1次内存分配</li><li>TaskCompletionSource<T>需要1次分配</li><li>TaskCompletionSource<T>内部任务需要1次分配, 按照GPT的说法<code>TaskCompletionSource&lt;decimal&gt;</code>内部会自动创建一个<code>Task&lt;decimal&gt;</code> 实例（通过其 .Task 属性访问）</li><li>延续委托(delegate)需要1次分配, 指的应该是<code> _initializeMapIfNeededTask.ContinueWith(_ =&gt; Start());</code></li></ul></li><li>缺少&quot;热路径优化&quot;：<br>当被等待的任务已经完成时，完全没有必要创建延续委托</li><li>可扩展性不足：<br>实现与Task类紧密耦合，导致无法用于其他场景，例如：<ul><li>等待非Task类型</li><li>返回非Task/Task<T>类型</li></ul></li></ul><p>下面我们就来看一下上述提到的缺陷在真正的异步机制中是如何被解决的.</p><h1>异步机制</h1><p>编译器执行异步方法转换的整个过程, 其实已经和上面我们手动实现的方式十分接近了. 为了得到预期的行为, 编译器依赖于以下的类型:</p><ul><li>对于一个异步方法的生成的状态机, 其行为会像栈帧一样, 并且该状态机包含原始异步方法中的全部逻辑</li><li><code>AsyncTaskMethodBuilder&lt;T&gt;</code>持有完成的task（与 TaskCompletionSource<T> 类型非常相似）, 并且管理状态机的转换.</li><li><code>TaskAwaiter&lt;T&gt;</code>负责包装task, 并在需要时调度其延续</li><li><code>MoveNetRunner</code>负责在正确的执行上下文中调用<code>IAsyncStateMachine.MoveNext</code>方法</li></ul><p>生成的状态机在Debug模式下是一个类, 在Release模式下则是一个struct. 其他的类型(除了<code>MoveNextRunner</code>类)在BCL中均被定义为了struct.</p><p>编译器生成的状态机类型名称通常类似于<code>&lt;YourMethodNameAsync&gt;d_1</code>, 为了避免名称冲突, 生成的名字中包含了一些无效的标识符字符, 这些字符无法被用户直接定义或引用. 但是为了简化说明, 在后续的所有示例中, 我们还是将使用有效的标识符来替换掉<code>&lt;</code>、<code>&gt;</code>、<code>_</code>这些字符, 并且使用更容易理解的名字.</p><h1>原始方法</h1><p>原始的异步方法会创建一个状态机实例, 用捕获的状态（如果方法非静态，则包括 this 指针）初始化该实例, 通过传递状态机实例的引用并调用<code>AsyncTaskMethodBuilder&lt;T&gt;.Start</code>来启动执行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AsyncStateMachine(typeof(_GetStockPriceForAsync_d__1))</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> Task&lt;<span class="built_in">decimal</span>&gt; <span class="title">GetStockPriceFor</span>(<span class="params"><span class="built_in">string</span> companyId</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _GetStockPriceForAsync_d__1 _GetStockPriceFor_d__;</span><br><span class="line">    _GetStockPriceFor_d__.__this = <span class="keyword">this</span>;</span><br><span class="line">    _GetStockPriceFor_d__.companyId = companyId;</span><br><span class="line">    _GetStockPriceFor_d__.__builder = AsyncTaskMethodBuilder&lt;<span class="built_in">decimal</span>&gt;.Create();</span><br><span class="line">    _GetStockPriceFor_d__.__state = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">var</span> __t__builder = _GetStockPriceFor_d__.__builder;</span><br><span class="line">    __t__builder.Start&lt;_GetStockPriceForAsync_d__1&gt;(<span class="keyword">ref</span> _GetStockPriceFor_d__);</span><br><span class="line">    <span class="keyword">return</span> _GetStockPriceFor_d__.__builder.Task;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递引用是一个重要的优化, 因为一个状态机往往是相对大的结构(大于100bytes), 因此传递引用会避免冗余拷贝.<br>状态机代码如下:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> _GetStockPriceForAsync_d__1 : IAsyncStateMachine</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> StockPrices __this;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> companyId;</span><br><span class="line">    <span class="keyword">public</span> AsyncTaskMethodBuilder&lt;<span class="built_in">decimal</span>&gt; __builder;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> __state;</span><br><span class="line">    <span class="keyword">private</span> TaskAwaiter __task1Awaiter;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">decimal</span> result;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            TaskAwaiter awaiter;</span><br><span class="line">            <span class="keyword">if</span> (__state != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// State 1 of the generated state machine:</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(companyId))</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException();</span><br><span class="line"> </span><br><span class="line">                awaiter = __this.InitializeLocalStoreIfNeededAsync().GetAwaiter();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// Hot path optimization: if the task is completed,</span></span><br><span class="line">                <span class="comment">// the state machine automatically moves to the next step</span></span><br><span class="line">                <span class="keyword">if</span> (!awaiter.IsCompleted)</span><br><span class="line">                &#123;</span><br><span class="line">                    __state = <span class="number">0</span>;</span><br><span class="line">                    __task1Awaiter = awaiter;</span><br><span class="line"> </span><br><span class="line">                    <span class="comment">// The following call will eventually cause boxing of the state machine.</span></span><br><span class="line">                    __builder.AwaitUnsafeOnCompleted(<span class="keyword">ref</span> awaiter, <span class="keyword">ref</span> <span class="keyword">this</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                awaiter = __task1Awaiter;</span><br><span class="line">                __task1Awaiter = <span class="literal">default</span>(TaskAwaiter);</span><br><span class="line">                __state = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// GetResult returns void, but it&#x27;ll throw if the awaited task failed.</span></span><br><span class="line">            <span class="comment">// This exception is catched later and changes the resulting task.</span></span><br><span class="line">            awaiter.GetResult();</span><br><span class="line">            __this._stocks.TryGetValue(companyId, <span class="keyword">out</span> result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Final state: failure</span></span><br><span class="line">            __state = <span class="number">-2</span>;</span><br><span class="line">            __builder.SetException(exception);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Final state: success</span></span><br><span class="line">        __state = <span class="number">-2</span>;</span><br><span class="line">        __builder.SetResult(result);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)</span><br><span class="line">    &#123;</span><br><span class="line">        __builder.SetStateMachine(stateMachine);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的状态机代码看起来比较复杂, 但是本质上, 它和我们手写的那一版的代码是十分相似的.<br>即使两个版本十分相似, 但是还是有一些重要的不同的.</p><ol><li>“Hot Path” 优化</li></ol><p>不像我们原生的方式, 生成的状态机知道一个被awaited的task可能已经完成了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">awaiter = __this.InitializeLocalStoreIfNeededAsync().GetAwaiter();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Hot path optimization: if the task is completed,</span></span><br><span class="line"><span class="comment">// the state machine automatically moves to the next step</span></span><br><span class="line"><span class="keyword">if</span> (!awaiter.IsCompleted)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Irrelevant stuff</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// The following call will eventually cause boxing of the state machine.</span></span><br><span class="line">    __builder.AwaitUnsafeOnCompleted(<span class="keyword">ref</span> awaiter, <span class="keyword">ref</span> <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这个被await的task已经完成了(无论成功与否), 状态机会向前直行下一步</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetResult returns void, but it&#x27;ll throw if the awaited task failed.</span></span><br><span class="line"><span class="comment">// This exception is catched later and changes the resulting task.</span></span><br><span class="line">awaiter.GetResult();</span><br><span class="line">__this._stocks.TryGetValue(companyId, <span class="keyword">out</span> result);</span><br></pre></td></tr></table></figure><p>这就意味着, 如果所有awaited的task都已经完成了, 整个状态机将只会停留在栈上. 一个异步方法甚至在今天如果所有awaited的task都已经完成或者同步完成了, 那么这个异步方法是可以只会造成很小的内存开销的. 仅剩的开销只是这个task本身.</p><ol start="2"><li>错误处理</li></ol><p>当前逻辑并未专门处理任务处于故障状态或已取消状态的情况。状态机通过调用awaiter.GetResult()方法，当任务被取消时将抛出TaskCancelledException，若任务失败则抛出其他异常。这种设计十分优雅，因为GetResult()在错误处理机制上与task.Wait()或task.Result有本质区别。</p><p>无论是task.Wait()还是task.Result，即便任务因单一异常导致失败，它们都会抛出AggregateException。这背后的逻辑很简单：任务不仅可能代表通常只有单一故障的IO操作，也可能是并行计算的结果。后者可能产生多个错误，而AggregateException正是为聚合所有错误而设计。</p><p>但<code>async/await</code>模式专为异步操作设计，这类操作通常最多只会产生一个错误。因此语言设计者认为，若<code>awaiter.GetResult()</code>能对AggregateException进行解包并仅抛出首个异常，将更符合使用场景。这一设计并非完美，我们将在后续文章中看到这种抽象方案可能存在的漏洞。</p><p>异步状态机只是整个拼图的一部分。要完整理解其运作机制，我们还需了解状态机实例如何与<code>TaskAwaiter&lt;T&gt;</code>和<code>AsyncTaskMethodBuilder&lt;T&gt;</code>进行交互。</p><h1>这些模块是如何被联系到一起的呢?</h1><p><a href="https://devblogs.microsoft.com/wp-content/uploads/sites/31/2019/06/Async_sequence_state_machine_thumb.png"></a></p><p>图表看似过于复杂，但每个组件都经过精心设计且扮演着重要角色。最有趣的协作发生在等待的任务尚未完成时（图中用棕色矩形标记）：</p><p>状态机注册任务延续</p><ul><li>状态机调用 <code>__builder.AwaitUnsafeOnCompleted(ref awaiter, ref this)</code>，将自身注册为任务的延续。</li><li><code>AsyncTaskMethodBuilder</code> 确保任务完成后调用 <code>IAsyncStateMachine.MoveNext</code> 方法(译注:这句话的意思是说, 只要你, 更准确地说这段代码是编译器生成的, 调用了<code>AwaitUnsafeOnCompleted</code>接口, 那么编译器就能保证任务完成后会调用<code>IAsyncStateMachine.MoveNext</code>方法了)：<ul><li>捕获当前 执行上下文（ExecutionContext），创建一个 MoveNextRunner 实例，将其与当前状态机实例关联。</li><li>从<code>MoveNextRunner.Run</code>创建一个 Action 委托，用于在捕获的执行上下文中推进状态机。调用 TaskAwaiter.UnsafeOnCompleted(action)，将上述 Action 委托调度为等待任务的延续(译注: 可以去看一下C#源码中的<code>MoveNextRunner</code>和<code>AsyncMethodBuilderCore</code>的实现, 其中清晰地展示了如何捕获当前执行上下文、将<code>IAsyncStateMachine.MoveNext</code>方法和执行上下文一起包装进<code>MoveNextRunner.Run</code>生成的Action中)。<br>当等待的任务完成时，注册的回调（Action 委托）被触发，状态机继续执行异步方法的下一段代码块。</li></ul></li></ul><p>这张时序图中<code>AsyncTaskMethodBuilder</code>的<code>Start</code>方法的具体实现在上面编译器生成的代码中体现, 笔者把这部分代码贴到下面:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>Initiates the builder&#x27;s execution with the associated state machine.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TStateMachine&quot;&gt;</span>Specifies the type of the state machine.<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;stateMachine&quot;&gt;</span>The state machine instance, passed by reference.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">[<span class="meta">SecuritySafeCritical</span>]</span><br><span class="line">[<span class="meta">DebuggerStepThrough</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>&lt;<span class="title">TStateMachine</span>&gt;(<span class="params"><span class="keyword">ref</span> TStateMachine stateMachine</span>) <span class="keyword">where</span> TStateMachine : IAsyncStateMachine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// See comment on AsyncMethodBuilderCore.Start</span></span><br><span class="line">    <span class="comment">// AsyncMethodBuilderCore.Start(ref stateMachine);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (stateMachine == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;stateMachine&quot;</span>);</span><br><span class="line">    Contract.EndContractBlock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Run the MoveNext method within a copy-on-write ExecutionContext scope.</span></span><br><span class="line">    <span class="comment">// This allows us to undo any ExecutionContext changes made in MoveNext,</span></span><br><span class="line">    <span class="comment">// so that they won&#x27;t &quot;leak&quot; out of the first await.</span></span><br><span class="line"></span><br><span class="line">    ExecutionContextSwitcher ecs = <span class="literal">default</span>(ExecutionContextSwitcher);</span><br><span class="line">    RuntimeHelpers.PrepareConstrainedRegions();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        ExecutionContext.EstablishCopyOnWriteScope(<span class="keyword">ref</span> ecs);</span><br><span class="line">        stateMachine.MoveNext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        ecs.Undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是调用了状态机的MoveNext方法, 然后回到编译器为我们生成的代码中, 在状态机的MoveNext方法里, 调用了<code> __builder.AwaitUnsafeOnCompleted(ref awaiter, ref this);</code>我们看一下<code>AsyncTaskMethodBuilder</code>中的<code>AwaitUnsafeOnCompleted</code>的具体实现:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Schedules the specified state machine to be pushed forward when the specified awaiter completes.</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TAwaiter&quot;&gt;</span>Specifies the type of the awaiter.<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TStateMachine&quot;&gt;</span>Specifies the type of the state machine.<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;awaiter&quot;&gt;</span>The awaiter.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;stateMachine&quot;&gt;</span>The state machine.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment">// 状态机调用 `__builder.AwaitUnsafeOnCompleted(ref awaiter, ref this)`，将自身注册为任务的延续。</span></span><br><span class="line">[<span class="meta">SecuritySafeCritical</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AwaitUnsafeOnCompleted</span>&lt;<span class="title">TAwaiter</span>, <span class="title">TStateMachine</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">ref</span> TAwaiter awaiter, <span class="keyword">ref</span> TStateMachine stateMachine</span>)</span></span><br><span class="line"><span class="function">    <span class="keyword">where</span> TAwaiter : ICriticalNotifyCompletion</span></span><br><span class="line"><span class="function">    <span class="keyword">where</span> TStateMachine : IAsyncStateMachine</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 捕获当前 执行上下文（ExecutionContext），创建一个 MoveNextRunner 实例，将其与当前状态机实例关联。</span></span><br><span class="line">        AsyncMethodBuilderCore.MoveNextRunner runnerToInitialize = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> continuation = m_coreState.GetCompletionAction(AsyncCausalityTracer.LoggingOn ? <span class="keyword">this</span>.Task : <span class="literal">null</span>, <span class="keyword">ref</span> runnerToInitialize);</span><br><span class="line">        Contract.Assert(continuation != <span class="literal">null</span>, <span class="string">&quot;GetCompletionAction should always return a valid action.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If this is our first await, such that we&#x27;ve not yet boxed the state machine, do so now.</span></span><br><span class="line">        <span class="keyword">if</span> (m_coreState.m_stateMachine == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Force the Task to be initialized prior to the first suspending await so </span></span><br><span class="line">            <span class="comment">// that the original stack-based builder has a reference to the right Task.</span></span><br><span class="line">            <span class="keyword">var</span> builtTask = <span class="keyword">this</span>.Task;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Box the state machine, then tell the boxed instance to call back into its own builder,</span></span><br><span class="line">            <span class="comment">// so we can cache the boxed reference.</span></span><br><span class="line">            Contract.Assert(!Object.ReferenceEquals((<span class="built_in">object</span>)stateMachine, (<span class="built_in">object</span>)stateMachine), <span class="string">&quot;Expected an unboxed state machine reference&quot;</span>);</span><br><span class="line">            <span class="comment">// 捕获当前 执行上下文（ExecutionContext），创建一个 MoveNextRunner 实例，将其与当前状态机实例关联。 这行代码内部将传入的stateMachine传递给MoveNextRunner的StateMachine</span></span><br><span class="line">            m_coreState.PostBoxInitialization(stateMachine, runnerToInitialize, builtTask);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 TaskAwaiter.UnsafeOnCompleted(action)，将上述 Action 委托调度为等待任务的延续。</span></span><br><span class="line">        awaiter.UnsafeOnCompleted(continuation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        AsyncMethodBuilderCore.ThrowAsync(e, targetContext: <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下就和时序图中的内容对上了:<br><code>var continuation = m_coreState.GetCompletionAction(AsyncCausalityTracer.LoggingOn ? this.Task : null, ref runnerToInitialize);</code> 对应了时序图中<code>MoveNextRunner</code>部分.</p><p><code>awaiter.UnsafeOnCompleted(continuation);</code>对应了时序图中的<code>TaskAwaiter</code>部分, 当这个awaiter complete了之后, 就会触发传入的continuation, 也就是stateMachine的<code>MoveNext</code>. 整个流程就跑通了.</p><p>在我们示例中这个Awaiter是一个<code>TaskAwaiter</code>, 其<code>UnsafeOnCompleted</code>接口的实现如下:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>Schedules the continuation onto the <span class="doctag">&lt;see cref=&quot;System.Threading.Tasks.Task&quot;/&gt;</span> associated with this <span class="doctag">&lt;see cref=&quot;TaskAwaiter&quot;/&gt;</span>.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;continuation&quot;&gt;</span>The action to invoke when the await operation completes.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;System.ArgumentNullException&quot;&gt;</span>The <span class="doctag">&lt;paramref name=&quot;continuation&quot;/&gt;</span> argument is null (Nothing in Visual Basic).<span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;exception cref=&quot;System.InvalidOperationException&quot;&gt;</span>The awaiter was not properly initialized.<span class="doctag">&lt;/exception&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span>This method is intended for compiler user rather than use directly in code.<span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">[<span class="meta">SecurityCritical</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnsafeOnCompleted</span>(<span class="params">Action continuation</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    OnCompletedInternal(m_task, continuation, continueOnCapturedContext:<span class="literal">true</span>, flowExecutionContext:<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnCompletedInternal</span>(<span class="params">Task task, Action continuation, <span class="built_in">bool</span> continueOnCapturedContext, <span class="built_in">bool</span> flowExecutionContext</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (continuation == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="string">&quot;continuation&quot;</span>);</span><br><span class="line">    StackCrawlMark stackMark = StackCrawlMark.LookForMyCaller;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If TaskWait* ETW events are enabled, trace a beginning event for this await</span></span><br><span class="line">    <span class="comment">// and set up an ending event to be traced when the asynchronous await completes.</span></span><br><span class="line">    <span class="keyword">if</span> ( TplEtwProvider.Log.IsEnabled() || Task.s_asyncDebuggingEnabled)</span><br><span class="line">    &#123;</span><br><span class="line">        continuation = OutputWaitEtwEvents(task, continuation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the continuation onto the awaited task.</span></span><br><span class="line">    task.SetContinuationForAwait(continuation, continueOnCapturedContext, flowExecutionContext, <span class="keyword">ref</span> stackMark);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C#源码看到这里其实就差不多了, 再往下看调用对于C#的使用者意义就不是很大了.</p><h1>执行上下文</h1><p>问题：什么是执行上下文？为何需要这种复杂的设计？<br>在同步代码中，每个线程通过 <code>线程本地存储（Thread-Local Storage）</code> 维护环境信息，例如：安全凭据（如 SecurityContext）区域性设置（如 CultureInfo）或者其他上下文数据（如 AsyncLocal<T> 的值）<br>当三个方法在同一个线程中依次调用时，这些信息会自动在方法间流动。但是对于异步方法来说就不再是这样了. 异步方法的每个代码段（如 await 前后的代码）可能在不同线程上执行，<code>线程本地存储(Thread-Local Storage)</code>失效。<br>因此执行上下文派上用场, 它为 一个逻辑控制流 维护上下文信息，即使该控制流跨越多线程。<br>例如，Task.Run 或 ThreadPool.QueueUserWorkItem 会 自动捕获调用线程的执行上下文，并将其与任务绑定。<br>当任务执行时，调度器（如 TaskScheduler）通过 ExecutionContext.Run 在捕获的上下文中运行委托，确保环境信息（如安全凭据）无缝延续。</p><p>通过下面这个例子理解一下:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Task <span class="title">ExecutionContextInAction</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> li = <span class="keyword">new</span> AsyncLocal&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    li.Value = <span class="number">42</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> Task.Run(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Task.Run restores the execution context</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;In Task.Run: &quot;</span> + li.Value);</span><br><span class="line">    &#125;).ContinueWith(_ =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The continuation restores the execution context as well</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;In Task.ContinueWith: &quot;</span> + li.Value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中, 执行上下文通过<code>Task.Run</code>流向了<code>Task.ContinueWith</code>. 因此上面这段代码的执行结果如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In Task.Run: 42</span><br><span class="line">In Task.ContinueWith: 42</span><br></pre></td></tr></table></figure><p>但是不是所有在BCL中的方法都会自动捕获并恢复执行上下文. 两个例外是: <code>TaskAwaiter&lt;T&gt;.UnsafeOnCompledte</code>和<code>AsyncMethodBuilder&lt;T&gt;.AwaitUnsafeOnComplete</code>. 这看起来十分奇怪, 语言设计者决定添加不安全的方法手动使用<code>AsyncMethodBuilder&lt;T&gt;</code>和<code>MoveNetRunner</code>而不是依赖于内建的类似<code>AwaitTaskContinuation</code>这样的机制驱动执行上下文, 猜测这是出于性能问题考虑或者是对现有实现的另一个妥协.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">ExecutionContextInAsyncMethod</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> li = <span class="keyword">new</span> AsyncLocal&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    li.Value = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The context is implicitely captured. li.Value is 42</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;After first await: &quot;</span> + li.Value);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tsk2 = Task.Yield();</span><br><span class="line">    tsk2.GetAwaiter().UnsafeOnCompleted(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The context is not captured: li.Value is 0</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Inside UnsafeOnCompleted: &quot;</span> + li.Value);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> tsk2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The context is captured: li.Value is 42</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;After second await: &quot;</span> + li.Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">After first await: 42</span><br><span class="line">Inside UnsafeOnCompleted: 0</span><br><span class="line">After second await: 42</span><br></pre></td></tr></table></figure><h1>结论</h1><ul><li><p>异步方法（async）的底层行为与同步方法截然不同，其核心机制依赖于编译器生成的 状态机（State Machine）：</p></li><li><p>编译器会为每个异步方法生成一个独立的状态机，将原方法的全部逻辑转移至状态机中。 状态机负责跟踪执行进度（通过状态值）、挂起（await 时）与恢复（任务完成时）的逻辑流转。</p></li><li><p>对同步完成的深度优化. 若所有等待的任务（await 的任务）已同步完成（如缓存命中、内存计算等无阻塞操作），异步方法的性能开销极低，几乎与同步方法无异。<br>此优化避免了不必要的上下文切换或调度，是异步编程高性能的关键保障。<br>异步场景的复杂性</p></li><li><p>当等待的任务未完成（需异步等待）时，状态机依赖一系列辅助类型（如 AsyncTaskMethodBuilder<T>、TaskAwaiter<T>、MoveNextRunner 等）协作完成：</p><ul><li>注册任务延续（Continuation）。</li><li>维护执行上下文（ExecutionContext）。<br>跨线程调度时的状态安全流转。</li></ul></li></ul><p>通过SharpLab, 我们生成了本篇示例中所有的经编译器处理过的异步代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Security;</span><br><span class="line"><span class="keyword">using</span> System.Security.Permissions;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: CompilationRelaxations(8)</span>]</span><br><span class="line">[<span class="meta">assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)</span>]</span><br><span class="line">[<span class="meta">assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.DisableOptimizations)</span>]</span><br><span class="line">[<span class="meta">assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyVersion(<span class="string">&quot;0.0.0.0&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">module: UnverifiableCode</span>]</span><br><span class="line">[<span class="meta">module: RefSafetyRules(11)</span>]</span><br><span class="line"></span><br><span class="line">[<span class="meta">NullableContext(1)</span>]</span><br><span class="line">[<span class="meta">Nullable(0)</span>]</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">StockPrices</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">CompilerGenerated</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> &lt;<span class="title">GetStockPriceForAsync</span>&gt;<span class="title">d__1</span> : <span class="title">IAsyncStateMachine</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Nullable(0)</span>]</span><br><span class="line">        <span class="keyword">public</span> AsyncTaskMethodBuilder&lt;<span class="built_in">decimal</span>&gt; &lt;&gt;t__builder;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Nullable(0)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> companyId;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Nullable(0)</span>]</span><br><span class="line">        <span class="keyword">public</span> StockPrices &lt;&gt;<span class="number">4</span>__this;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">decimal</span> &lt;result&gt;<span class="number">5</span>__1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TaskAwaiter &lt;&gt;u__1;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> num = &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line">            <span class="built_in">decimal</span> result;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TaskAwaiter awaiter;</span><br><span class="line">                <span class="keyword">if</span> (num != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    awaiter = &lt;&gt;<span class="number">4</span>__this.InitializeMapIfNeededAsync().GetAwaiter();</span><br><span class="line">                    <span class="keyword">if</span> (!awaiter.IsCompleted)</span><br><span class="line">                    &#123;</span><br><span class="line">                        num = (&lt;&gt;<span class="number">1</span>__state = <span class="number">0</span>);</span><br><span class="line">                        &lt;&gt;u__1 = awaiter;</span><br><span class="line">                        &lt;GetStockPriceForAsync&gt;d__1 stateMachine = <span class="keyword">this</span>;</span><br><span class="line">                        &lt;&gt;t__builder.AwaitUnsafeOnCompleted(<span class="keyword">ref</span> awaiter, <span class="keyword">ref</span> stateMachine);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    awaiter = &lt;&gt;u__1;</span><br><span class="line">                    &lt;&gt;u__1 = <span class="literal">default</span>(TaskAwaiter);</span><br><span class="line">                    num = (&lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                awaiter.GetResult();</span><br><span class="line">                &lt;&gt;<span class="number">4</span>__this._stockPrices.TryGetValue(companyId, <span class="keyword">out</span> &lt;result&gt;<span class="number">5</span>__1);</span><br><span class="line">                result = &lt;result&gt;<span class="number">5</span>__1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">            &#123;</span><br><span class="line">                &lt;&gt;<span class="number">1</span>__state = <span class="number">-2</span>;</span><br><span class="line">                &lt;&gt;t__builder.SetException(exception);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &lt;&gt;<span class="number">1</span>__state = <span class="number">-2</span>;</span><br><span class="line">            &lt;&gt;t__builder.SetResult(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IAsyncStateMachine.MoveNext()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//ILSpy generated this explicit interface implementation from .override directive in MoveNext</span></span><br><span class="line">            <span class="keyword">this</span>.MoveNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetStateMachine</span>(<span class="params">IAsyncStateMachine stateMachine</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine</span></span><br><span class="line">            <span class="keyword">this</span>.SetStateMachine(stateMachine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="meta">CompilerGenerated</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> &lt;<span class="title">InitializeMapIfNeededAsync</span>&gt;<span class="title">d__2</span> : <span class="title">IAsyncStateMachine</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> AsyncTaskMethodBuilder &lt;&gt;t__builder;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Nullable(0)</span>]</span><br><span class="line">        <span class="keyword">public</span> StockPrices &lt;&gt;<span class="number">4</span>__this;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TaskAwaiter &lt;&gt;u__1;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> num = &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                TaskAwaiter awaiter;</span><br><span class="line">                <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    awaiter = &lt;&gt;u__1;</span><br><span class="line">                    &lt;&gt;u__1 = <span class="literal">default</span>(TaskAwaiter);</span><br><span class="line">                    num = (&lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>);</span><br><span class="line">                    <span class="keyword">goto</span> IL_007c;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (&lt;&gt;<span class="number">4</span>__this._stockPrices == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    awaiter = Task.Delay(<span class="number">42</span>).GetAwaiter();</span><br><span class="line">                    <span class="keyword">if</span> (!awaiter.IsCompleted)</span><br><span class="line">                    &#123;</span><br><span class="line">                        num = (&lt;&gt;<span class="number">1</span>__state = <span class="number">0</span>);</span><br><span class="line">                        &lt;&gt;u__1 = awaiter;</span><br><span class="line">                        &lt;InitializeMapIfNeededAsync&gt;d__2 stateMachine = <span class="keyword">this</span>;</span><br><span class="line">                        &lt;&gt;t__builder.AwaitUnsafeOnCompleted(<span class="keyword">ref</span> awaiter, <span class="keyword">ref</span> stateMachine);</span><br><span class="line">                        <span class="comment">// 从这里返回回去干嘛了呢?</span></span><br><span class="line">                        <span class="comment">// 程序会继续执行下面的语句</span></span><br><span class="line">                        <span class="comment">// Task(Awaiter)何时结束、如何调度都是TaskScheduler做的, 我们没有太多权限干预 我们能做的只是</span></span><br><span class="line">                        <span class="comment">// 告诉Task 等你的任务完成之后 你需要调用stateMachiner的MoveNext方法</span></span><br><span class="line">                        <span class="comment">// 如果我要实现自己的类似ETTask的功能, 我希望我能自己决定如何调度这些ETTask, 要不然实现自己的ETTask的意义就没有了.</span></span><br><span class="line">                        <span class="comment">// C#中异步操作到这里就已经揭示地比较清楚了, 只是Task的调度目前对我们来说还是黑盒, 最好它也只是黑盒</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">goto</span> IL_007c;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">goto</span> end_IL_0007;</span><br><span class="line">                IL_007c:</span><br><span class="line">                awaiter.GetResult();</span><br><span class="line">                StockPrices stockPrices = &lt;&gt;<span class="number">4</span>__this;</span><br><span class="line">                Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">decimal</span>&gt; dictionary = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">decimal</span>&gt;();</span><br><span class="line">                dictionary.Add(<span class="string">&quot;MSFT&quot;</span>, <span class="number">42</span>m);</span><br><span class="line">                stockPrices._stockPrices = dictionary;</span><br><span class="line">                end_IL_0007:;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exception)</span><br><span class="line">            &#123;</span><br><span class="line">                &lt;&gt;<span class="number">1</span>__state = <span class="number">-2</span>;</span><br><span class="line">                &lt;&gt;t__builder.SetException(exception);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &lt;&gt;<span class="number">1</span>__state = <span class="number">-2</span>;</span><br><span class="line">            &lt;&gt;t__builder.SetResult();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IAsyncStateMachine.MoveNext()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//ILSpy generated this explicit interface implementation from .override directive in MoveNext</span></span><br><span class="line">            <span class="keyword">this</span>.MoveNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetStateMachine</span>(<span class="params">IAsyncStateMachine stateMachine</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine</span></span><br><span class="line">            <span class="keyword">this</span>.SetStateMachine(stateMachine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">decimal</span>&gt; _stockPrices;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">AsyncStateMachine(typeof(&lt;GetStockPriceForAsync&gt;d__1))</span>]</span><br><span class="line">    [<span class="meta">DebuggerStepThrough</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task&lt;<span class="built_in">decimal</span>&gt; <span class="title">GetStockPriceForAsync</span>(<span class="params"><span class="built_in">string</span> companyId</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        &lt;GetStockPriceForAsync&gt;d__1 stateMachine = <span class="keyword">new</span> &lt;GetStockPriceForAsync&gt;d__1();</span><br><span class="line">        stateMachine.&lt;&gt;t__builder = AsyncTaskMethodBuilder&lt;<span class="built_in">decimal</span>&gt;.Create();</span><br><span class="line">        stateMachine.&lt;&gt;<span class="number">4</span>__this = <span class="keyword">this</span>;</span><br><span class="line">        stateMachine.companyId = companyId;</span><br><span class="line">        stateMachine.&lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">        stateMachine.&lt;&gt;t__builder.Start(<span class="keyword">ref</span> stateMachine);</span><br><span class="line">        <span class="keyword">return</span> stateMachine.&lt;&gt;t__builder.Task;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">AsyncStateMachine(typeof(&lt;InitializeMapIfNeededAsync&gt;d__2))</span>]</span><br><span class="line">    [<span class="meta">DebuggerStepThrough</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Task <span class="title">InitializeMapIfNeededAsync</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        &lt;InitializeMapIfNeededAsync&gt;d__2 stateMachine = <span class="keyword">new</span> &lt;InitializeMapIfNeededAsync&gt;d__2();</span><br><span class="line">        stateMachine.&lt;&gt;t__builder = AsyncTaskMethodBuilder.Create();</span><br><span class="line">        stateMachine.&lt;&gt;<span class="number">4</span>__this = <span class="keyword">this</span>;</span><br><span class="line">        stateMachine.&lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">        stateMachine.&lt;&gt;t__builder.Start(<span class="keyword">ref</span> stateMachine); <span class="comment">// 这里面会第一次调用StateMachine的MoveNext方法</span></span><br><span class="line">        <span class="keyword">return</span> stateMachine.&lt;&gt;t__builder.Task; <span class="comment">// 会立刻返回Task回去 </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精细化实验策略下一种多策略交叉的美术、动效框架的实现</title>
      <link href="/posts/4bbdbff1/"/>
      <url>/posts/4bbdbff1/</url>
      
        <content type="html"><![CDATA[<h1>笔者对精细化实验的定义</h1><p>当游戏要新增或改动一个功能时, 如果开发者不能确其会对用户体验造成什么影响, 就会用做实验的方式将功能发布到线上, 即将用户分为对照组和实验组, 看两组用户的数据表现, 来判断该功能的好坏. 如果实验组数据好于对照组, 则应用实验组, 反之应用对照组. 不论应用哪一组, 没有被应用的那一组的硬编码就可以删除掉, 因此实验组与对照组逻辑的代码只是会临时插入到项目中, 只要实验应用了之后把非应用实验分支的代码删干净, 长期下来是不会对整个项目代码结构有什么影响. 但是我们团队在按照上述模式推进了一段时间之后发现了这种模式存在问题, 同一个版本上线的多个实验之间存在交叉, 且会对单个实验的结果产生影响, 而且有的实验短期内是实验组的数据好, 而长期又变成了对照组的数据好. 因此, 我们认为之前对实验数据的结论不准确, 我们决定将一段周期内最早的那个版本的项目状态定义为<strong>基线组</strong>, 在这一周期内的每个版本会上线的实验都不会应用, 而是会一直在线上跑, 随着实验越开越多, 实验之间的交叉问题越来越严重, 又因为这些实验的分支代码不会删除, 代码也会变得越来越难以维护, 上述这种在一段周期上线大量不会应用实验, 且希望每个实验都能交叉, 在一段周期后会形成上百、上千条实验分支的实验, 就是<strong>精细化实验</strong>, 对应的, 我们团队就需要一套能够管理精细化实验的框架.</p><h1>精细化框架的实现思路</h1><p>每个实验能够交叉, 是十分美好的愿景. 但是, 在实际开发中我们发现, 经常会有互为互斥关系的实验存在, 比如两个实验同时对模块A做了改动, 或者实验一影响模块ABC, 实验二影响模块ABD, 这种情况是不可避免的, 因此, 精细化框架要做的事情, 不仅仅是驱动这些实验, 还要制定一套规范, 处理实验之间的冲突问题.</p><p>本篇博客笔者会以UI换皮实验和动效换皮实验为例子, 阐述UI框架、动效播放框架的实现思路, 以及这些框架和精细化框架的协同过程.</p><h2 id="从ABTest框架说起">从ABTest框架说起</h2><p>我们最初使用的AB测试系统十分简陋, AB测系统在启动时从磁盘上加载上来所有的AB实验信息, 根据设备的uid, 判断一个用户该表现为对照组还是实验组是根据用户使用设备的uid, 我们在后台配置一个实验的时候, 有多少个实验组就会生成几个“桶”, 这些桶里面装的是用户设备的uid, 用户设备启动游戏的时候, 程序能够知道当前设备在哪个桶里, 但是在某一个桶里并不意味着就一定表现为这个桶所对应的实验组, 还有其他的限制条件, 比如安装版本必须大于某一个版本或者必须是新用户, 或者必须是某一国家地区的等等. 总之, 业务层只需要把它们关系的实验字段传入, 就能够拿到当前设备对应实验所在的实验组是哪一个.</p><h2 id="精细化实验模块登场">精细化实验模块登场</h2><p>精细化实验要做的, 就是把ABTest框架和业务层解耦, 作为两者之间的桥梁. 当你想让两个模块解耦时, 最直接的方式就是在两个模块通讯的接口处增加桥接层, 有了这层桥接, ABTest中庞大的数据不至于一下子涌向业务层, 而是在精细化实验层整合、处理, 精细化实验层会把ABTest中影响同一个业务的实验们按照人为定义的规则进行整合、冲突处理, 然后将结果转换成对应业务能够识别的格式——精细化实验层需要和每一个具体的业务定义一套协议, 这套协议能够描述, 经过多个实验的多重影响, 该业务最终的表现效果是怎样的. 我们计划使用Json作为这些实验配置的载体:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;1024&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;uiTest&quot;,</span><br><span class="line">        &quot;experimentSceneType&quot;: &quot;UIStyle&quot;, </span><br><span class="line">        &quot;experimentParam&quot;: &#123;</span><br><span class="line">            &quot;group1&quot;: [</span><br><span class="line">                [</span><br><span class="line">                    &quot;homePage&quot;,</span><br><span class="line">                    1</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;playPage&quot;,</span><br><span class="line">                    1</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;resultPage&quot;,</span><br><span class="line">                    1</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;settingPage&quot;,</span><br><span class="line">                    1</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            &quot;group2&quot;: [</span><br><span class="line">                [</span><br><span class="line">                    &quot;homePage&quot;,</span><br><span class="line">                    2</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;playPage&quot;,</span><br><span class="line">                    2</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;resultPage&quot;,</span><br><span class="line">                    2</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;settingPage&quot;,</span><br><span class="line">                    2</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">     &quot;1025&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;uiTest2&quot;,</span><br><span class="line">        &quot;experimentSceneType&quot;: &quot;UIStyle&quot;, </span><br><span class="line">        &quot;experimentParam&quot;: &#123;</span><br><span class="line">            &quot;group1&quot;: [</span><br><span class="line">                [</span><br><span class="line">                    &quot;homePage&quot;,</span><br><span class="line">                    1</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;playPage&quot;,</span><br><span class="line">                    2</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;resultPage&quot;,</span><br><span class="line">                    1</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;settingPage&quot;,</span><br><span class="line">                    4</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            &quot;group2&quot;: [</span><br><span class="line">                [</span><br><span class="line">                    &quot;homePage&quot;,</span><br><span class="line">                    2</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;playPage&quot;,</span><br><span class="line">                    3</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;resultPage&quot;,</span><br><span class="line">                    5</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    &quot;settingPage&quot;,</span><br><span class="line">                    2</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>对上述Json格式做一下说明, 最外层的数字代表实验ID, <code>name</code>是实验名, <code>experimentSceneType</code>是实验场景, <code>experimentParam</code>能够描述实验场景下的实验内容, <code>group</code>代表实验分组, 不同实验场景下<code>group</code>字段下的结构不一样, 在<code>UIStyle</code>实验场景下是一个列表, 每个元素代表一个UI, 和该UI使用的<code>styleId</code>.</p><p>程序启动时必定加载上面两个实验, 并命中其中一个实验组, 而这两个实验是互斥的, 因此会在精细化实验层进行处理. 具体的处理规则, 则需要和策划团队一起制定, 硬编码进精细化实验模块中, 等业务场景足够丰富的时候, 也许可以从中提取出一套规则来支持配置. 不过这就不在本篇博客要讨论的范畴内了. 总之, 经过精细化层的处理之后, UIStyle实验场景会得到一组类似group字段内的列表, 这里面存储了所有UI的styleId, UIManager侧维护着每个UI每个styleId的映射关系. 有精细化层传来的参数, UIManager就可以给每个UI设置运行时styleId了.</p><p>我们设计的实验表格如下:</p><h2 id="UI框架的配表">UI框架的配表</h2><h2 id="音频框架配表">音频框架配表</h2><h2 id="动效配表">动效配表</h2><h2 id="实验配置">实验配置</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>时势:周期波动下的国家、社会和个人</title>
      <link href="/posts/1cb37a62/"/>
      <url>/posts/1cb37a62/</url>
      
        <content type="html"><![CDATA[<h1>日本失落的三十年</h1><p>日本财团</p><p>广场协议</p><p>国债</p>]]></content>
      
      
      <categories>
          
          <category> 读万卷书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对C#中类型转换和拆装箱的思考</title>
      <link href="/posts/fad28a7c/"/>
      <url>/posts/fad28a7c/</url>
      
        <content type="html"><![CDATA[<h1>类型转换的开销来自哪里?</h1><p>类型转换在时间和空间上都会造成开销, 因为类型转换C#编译器会生成额外的类型转换处理代码, 导致代码文件的体积变大. 既然有额外的IL代码生成则就需要有额外的时间去执行. 如果类型转换中涉及到装拆箱操作, 则还会对运行时内存产生影响.</p><ul><li>CLR会生成额外IL代码执行类型转换是否合法的判断逻辑, 这部分开销是不可避免的, 即便开发者笃定类型转换必定合法. 不过这部分开销的影响并不大. 如果类型转换判定为不合法, 则需要额外的开销来处理异常, 我们通常会有两种类型转换的方式, 两种转换方式不合法的处理的开销不同:<ul><li>使用类型强转, 即<code>var a = (someType)b</code>形式, 这种方式在转换不合法的时候会抛出异常, 开销较大.</li><li>使用<code>as</code>操作符,即<code>var a = b as someType</code>, 这种方式在转换不合法的时候会将a字段设置为<code>null</code>,开销小. 更推荐使用这种方式.<br>不过如果你真的笃定类型转换不会出错, 那么以上这两种类型转换的方式其实影响不大.</li></ul></li><li>拆箱装箱造成的开销, 请记住这句话:<strong>装箱拆箱一定是类型转换造成的, 但是类型转换不一定会导致装箱拆箱</strong> 装拆箱详解请继续往下看.</li></ul><h1>值类型与引用类型</h1><p>值类型创建在栈上, 堆类型创建在堆上 这句话是不完全对的, 更准确的描述是: 引用类型一定创建在堆上, 值类型既可以创建在堆上, 也可以创建在栈上, 值类型创建在栈还是堆上取决于它所在的容器: 如果值类型是引用类型的一个成员字段, 则该值类型创建在堆上, 如果该值类型是一个局部变量(临时变量)或者是一个是另外一个值类型的字段成员的话, 则创建在堆上.</p><h1>装箱拆箱的开销来自哪里</h1><p><strong>装箱过程发生了什么</strong></p><ol><li>在托管堆中分配内存, 分配的内存量是值类型各字段所需的内存量, 还要加上托管堆所有对象都有的两个额外成员(类型对象指针和同步块索引)所需的内存量</li><li>值类型的字段复制到新分配的堆内存</li><li>返回对象地址. 现在该地址是对象引用; 值类型成了引用类型</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">object</span> obj = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>拆箱过程发生了什么</strong><br>请反复阅读并理解这句话: <strong>拆箱不是直接将装箱过程倒过来, 拆箱过程本身不会复制任何类型, 但是拆箱过后往往跟随着一次字段的复制.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object obj = 10; //装箱</span><br><span class="line"></span><br><span class="line">int a = (int)b // 拆箱 + 字段的复制</span><br></pre></td></tr></table></figure><p><code>(int)b</code>部分完成了拆箱操作, <code>int a =</code>部分完成了字段复制操作, 我们在写代码的时候很自然而然地会这么写.</p><p>另外，值类型装箱后是不能改变它的值的，装箱后的值具有恒定性（Immutable）的特点，如果想给引用类型的变量赋予新的值，那就需要再堆上另开辟新的内存空间，一旦一个值类型被装箱，它的值就没有办法改变了. 看下面的代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> ValueType</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SomeFunc</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">value</span> = <span class="keyword">new</span> ValueType</span><br><span class="line">    &#123;</span><br><span class="line">        Value = <span class="number">100</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">object</span> vv = <span class="keyword">value</span>;</span><br><span class="line">    </span><br><span class="line">    ((ValueType)vv).Value = <span class="number">200</span>; <span class="comment">// 这里会报错Cannot modify struct member when accessed struct is not classified as a variable</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vvv = ((ValueType)vv); <span class="comment">// 不会报错</span></span><br><span class="line">    vvv.Value = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到, 如果只是进行拆箱操作, 我们无法对拆箱后的字段做任何修改, 并报错提示拆箱后的值成员并没有分类为变量, 我们必须将拆箱后的数据复制给一个值类型变量, 在这个变量上进行修改, 不过这个变量是拆箱数据的拷贝, 拆箱的数据没有任何关系. 所以上面才说<strong>拆箱过后往往跟随着一次字段的复制</strong></p><h1>反复地拆装箱</h1><p>反复地拆装箱会产生额外的IL代码, 增加代码体积. 更大的问题是, 额外的装箱步骤会在托管堆中分配额外的对象, 将来必须对其进行垃圾回收. 拆装箱的滥用会严重影响程序的性能和内存消耗.<br>如果我们想修改装箱后的值类型的内容, 虽然笔者想不出实际开发中会有这种场景, 我们就必须先将其拆箱, 接着复制给一个值类型变量, 修改值类型变量的内容, 将值类型变量装箱, 最后把指向原来装箱值类型在堆上地址的引用指向的地址改为指向新的值类型变量装箱后所在堆上的地址. 那么原来那一个被装箱的值类型在堆上占据的内容空间就废弃了, 在未来需要进行垃圾回收. 这也就是为什么装箱拆箱会引起GC。</p><h1>小节</h1><p>在实际写代码的过程中, 拆装箱问题并不常见, 因为大部分开发者想都不想只会把class传来传去, 而且我们肯定不会闲得声明一个object类型的字段, 却用一个值类型的数据给它赋值. 所以类型转换中主要的性能开销<strong>在于CLR会生成额外IL代码执行类型转换是否合法的判断逻辑</strong>(程序员一般情况下还是可以保证类型转换是合法的).</p><h1>其他要注意的点</h1><p><strong>类型检查中要注意的点</strong><br>使用<code>is</code>操作符和<code>.GetType()</code>接口都可以做类型检查, 但是两者的开销是不同的, 按照GPT的说法, <code>is</code>操作符的性能开销要小于<code>.GetType()</code>的开销:</p><ul><li>使用<code>is</code>操作符, C#编译器生成直接的类型检查指令(isinst IL指令), 无需触发完整的类型元数据加载. <code>is</code>操作符会利用类型继承关系进行快速判断, 无需获取完整的Type对象, 值类型优化: 如果转换后的类型是值类型, is会避免装箱, 前提是obj是值类型且类型兼容</li><li>使用<code>.GetType()</code>时, 会触发完整类型元数据加载, 需要访问对象的Type对象, 涉及元数据查询<br>精确类型比较: GetTypE()返回的是对象的实际运行时类型, 与typeof(MyType)比较时,只有当obj的运行时类型完全等于MyType时才返回true, <code>.GetType()</code>是虚方法调用, 需经过虚方法表查找.</li></ul><p>当然, <code>.GetType</code>也有其用武之处, 因为在有些场景下确实是需要精确查找的, 继承关系A-&gt;B-&gt;C, A是基类, 如果传入的实例是C, 使用<code>is B</code>返回的结果是true, 而使用<code>.GetType() == typeof(B)</code> 返回的是false. 实际开发中大部分场景下<code>is</code>操作符就足够完成需求了.</p><p><strong>typeof、GetType()、is 和 as 这四种类型判断操作的开销对比</strong></p><table><thead><tr><th>操作</th><th>开销来源</th><th>适用场景</th><th>示例代码</th></tr></thead><tbody><tr><td>typeof(T)</td><td>⚡️ 编译时静态解析（零运行时开销）</td><td>编译时已知类型</td><td>if (type == typeof(MyClass))</td></tr><tr><td>is</td><td>⚡️ 单次类型检查（无转换）</td><td>安全类型检查</td><td>if (obj is MyClass)</td></tr><tr><td>as</td><td>⚡️ 单次类型检查 + 返回转换结果</td><td>安全类型转换</td><td>var x = obj as MyClass;</td></tr><tr><td>GetType()</td><td>⚠️ 访问对象类型句柄 + 元数据查找</td><td>需获取对象实际运行时类型</td><td>if (obj.GetType() == typeof(MyClass))</td></tr></tbody></table><p><strong>值类型、引用类型与闭包</strong></p><p>因为值类型的生命周期会随着其作用域的结束而释放掉, 但是引用类型不会, 引用类型释放掉的只是指向堆上内存位置的指针而已. 本来笔者计划使用闭包的方式把两种类型带出其各自的作用域, 不过实操下来, 两种类型里面的数据都是正常读取的. 据GPT说值类型的闭包是将数据复制了一份传入到了闭包中, 因此在原值类型数据生命周期外数据能正确读取, 而引用类型则是在其生命周期结束之后, 真正的数据还都存放在堆上呢根本就没释放掉呢, 因此可以正确读取, 不过笔者个人猜测, 引用类型本身(或者叫创建在线程栈上指向堆中数据的指针)在生命周期结束后其实也被释放掉了, 在闭包中也是传入了这个引用类型本身的一份拷贝而已. 但是笔者在这里就不深究了.</p><h1>更优雅的类型转换</h1><p>按照GPT的说法, 泛型是一种能够规避类型转换、且保证类型安全的双赢方法, 泛型的类型转换并不是在运行时做的, 而是在编译时编译器静默地进行了类型转换, 因此泛型在运行时是没有额外开销的.</p><p>下面看两组代码的对比:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUILogic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnShow</span>(<span class="params"><span class="built_in">object</span> data</span>)</span>; <span class="comment">// 数据用 object 传递</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnClose</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非泛型基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseEUI</span> : <span class="title">MonoBehaviour</span>, <span class="title">IUILogic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnShow</span>(<span class="params"><span class="built_in">object</span> data</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnClose</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体 UI 类（需手动转换数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayPage</span> : <span class="title">BaseEUI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnShow</span>(<span class="params"><span class="built_in">object</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> showData = (PlayPageShowData)data; <span class="comment">// 运行时转换</span></span><br><span class="line">        <span class="comment">// 实际逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnClose</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UI 管理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIMgr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UIMgr Instance &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> UIMgr();</span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;Type, BaseEUI&gt; _uiInstances = <span class="keyword">new</span> Dictionary&lt;Type, BaseEUI&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowUI</span>(<span class="params">Type uiType, <span class="built_in">object</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_uiInstances.TryGetValue(uiType, <span class="keyword">out</span> <span class="keyword">var</span> ui))</span><br><span class="line">        &#123;</span><br><span class="line">            ui.OnShow(data); <span class="comment">// 非泛型调用</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = Resources.Load(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> go = Object.Instantiate(obj) <span class="keyword">as</span> GameObject;</span><br><span class="line">            ui = go.AddComponent(uiType) <span class="keyword">as</span> BaseEUI;</span><br><span class="line">            ui.OnShow(data);</span><br><span class="line">            _uiInstances.Add(uiType, ui);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用示例</span></span><br><span class="line"><span class="keyword">var</span> param = <span class="keyword">new</span> PlayPageShowData();</span><br><span class="line">UIMgr.Instance.ShowUI(<span class="keyword">typeof</span>(PlayPage), param); <span class="comment">// 需显式传递 Type</span></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型接口（类型安全）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUILogic</span>&lt;<span class="title">TUIShowData</span>&gt; <span class="keyword">where</span> <span class="title">TUIShowData</span> : <span class="title">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnShow</span>(<span class="params">TUIShowData data</span>)</span>; <span class="comment">// 明确数据类型</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnClose</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseEUI</span>&lt;<span class="title">TUIShowData</span>&gt; : <span class="title">MonoBehaviour</span>, <span class="title">IUILogic</span>&lt;<span class="title">TUIShowData</span>&gt; </span><br><span class="line">    <span class="keyword">where</span> <span class="title">TUIShowData</span> : <span class="title">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnShow</span>(<span class="params">TUIShowData data</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">OnClose</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体 UI 类（无需手动转换数据）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayPage</span> : <span class="title">BaseEUI</span>&lt;<span class="title">PlayPageShowData</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnShow</span>(<span class="params">PlayPageShowData data</span>) <span class="comment">// 直接使用具体类型</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 直接访问 data 的字段，无需类型转换</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnClose</span>()</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UI 管理器（泛型版）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIMgr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UIMgr Instance &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> UIMgr();</span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;Type, <span class="built_in">object</span>&gt; _uiInstances = <span class="keyword">new</span> Dictionary&lt;Type, <span class="built_in">object</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 泛型方法：类型安全且无装箱</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowUI</span>&lt;<span class="title">TUI</span>, <span class="title">TUIShowData</span>&gt;(<span class="params">TUIShowData data</span>)</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TUI : BaseEUI&lt;TUIShowData&gt;, <span class="keyword">new</span>()</span></span><br><span class="line"><span class="function">        <span class="keyword">where</span> TUIShowData : <span class="keyword">struct</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (_uiInstances.TryGetValue(<span class="keyword">typeof</span>(TUI), <span class="keyword">out</span> <span class="keyword">var</span> ui))</span><br><span class="line">        &#123;</span><br><span class="line">            ((IUILogic&lt;TUIShowData&gt;)ui).OnShow(data); <span class="comment">// 需一次接口转换</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = Resources.Load(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> go = Object.Instantiate(obj) <span class="keyword">as</span> GameObject;</span><br><span class="line">            <span class="keyword">var</span> uiLogic = go.AddComponent&lt;TUI&gt;();</span><br><span class="line">            uiLogic.OnShow(data);</span><br><span class="line">            _uiInstances.Add(<span class="keyword">typeof</span>(TUI), uiLogic);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用示例</span></span><br><span class="line"><span class="keyword">var</span> param = <span class="keyword">new</span> PlayPageShowData();</span><br><span class="line">UIMgr.Instance.ShowUI&lt;PlayPage, PlayPageShowData&gt;(param); <span class="comment">// 编译时类型检查</span></span><br></pre></td></tr></table></figure><p>对比上面两组代码, 非泛型方式打开一个UI要经过4次类型转换, 而且还有装箱和拆箱的风险; 而泛型版本打开一个UI只需要进行2次类型转换</p><p><strong>非泛型和泛型方案对比</strong></p><table><thead><tr><th>特性</th><th>非泛型方案</th><th>泛型方案 (IUILogic<T>)</th></tr></thead><tbody><tr><td>类型安全</td><td>❌ 运行时可能 InvalidCastException</td><td>✔️ 编译时检查</td></tr><tr><td>数据传递效率</td><td>⚠️ 值类型会装箱（struct → object）</td><td>✔️ 无装箱（直接传递 struct）</td></tr><tr><td>代码复杂度</td><td>✔️ 更简单</td><td>❌ 需要泛型约束和类型参数</td></tr><tr><td>性能开销</td><td>⚠️ 装箱/拆箱 + 类型转换</td><td>⚡️ 无额外开销（除可能的 as 转换）</td></tr><tr><td>扩展性</td><td>❌ 新增 UI 需手动维护数据类型</td><td>✔️ 自动适配不同 TUIShowData</td></tr></tbody></table><p><strong>注意</strong> 泛型确实是一种十分优雅的类型转换方式, 但是妄图使用泛型替代所有的类型转换是不可能的. 泛型在一定程度上破坏了突破了面向对象的继承结构的限制, 但是你想要在面向对象的编程语言中编写非面向对象的代码是十分困难的, 看上面UIMgr代码的例子你就知道了, UIMgr作为所有UI的管理者, 它管理者一类UI, 为了实现管理一组对象的效果, 这一组对象在UIMgr的视角下必须是同一种类的, 也就是它们要具有同一父类, 因此即便泛型打破了继承关系, 但是在管理一组对象这种领域还是无法替代普通类型转换, 所以在由上层管理到底层执行之间有一个不可避免的类型转换, 不过这一次类型转换是必定成功的, 这是由上层管理和底层具体执行视角不同导致的.</p><h1>总结</h1><p>因此, 滥用object作为接口的参数并不是一种优雅的方式, 类型转换在实际开发中不可避免, 但我们还是可以通过泛型等方式尽可能地减少类型转换的开销.</p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityUGUI源码</title>
      <link href="/posts/906aab82/"/>
      <url>/posts/906aab82/</url>
      
        <content type="html"><![CDATA[<h1>UGUI的渲染和3D物体渲染的区别?</h1><p>笔者希望各位读者区分两个概念: 渲染和渲染所需的数据更新. Unity首先更新其要渲染物体的渲染数据, 然后根据渲染数据将画面渲染到屏幕上, 笔者在最初接触这部分内容时, 把两者混为一谈, 给自己造成了理解上的困难, 因此在此说明.</p><p>UGUI的渲染发生在每一帧<code>CanvasUpdateRegistry</code>的<code>SendWillRenderCanvases()</code>接口被调用之后,不过我们看不到调用该接口的代码,猜测调用处通过<code>[RequireByNativeCode]</code>特性隐藏在了Unity更底层的引擎代码中. 但这不影响我们知道UGUI的渲染位于事件执行的什么位置. 为了知道这几个事件的执行顺序,因为这些事件是在每一帧都执行的, 所以使用断点调试的方式不太方便, 于是笔者尝试使用Log方式观察几个事件的执行顺序,</p><h1>CanvasScaler</h1><p>按照标准分辨率来设计的</p><p>Unity粒子的Render和Canvas的OrderInLayer是一样的 用来处理渲染层级的问题</p><p>常规模型和粒子满足谁距离摄像机近谁后渲染<br>在Unity中创建一个场景，创建两个Image，然后创建一个Sphere，将Sphere放置在两个Image中间，会发生奇怪的事情<br>UI和常规模型满足谁距离摄像机近谁后渲染<br>UI和粒子就不满足谁距离摄像机近谁后渲染 为什么？ 给粒子系统挂载RectTransform就会这样<br>移除RectTransform后就没有问题了 RectTransform改变了什么？<br>RectTransform组件上的Pos Z字段可以设置游戏对象的Z轴位置，但是不影响显示顺序，在同一个Canvas画布中，游戏对象的显示顺序由Hierarchy视图中的顺序决定<br>即便是在不同的Canvas中想通过调整PosZ字段也不能影响显示顺序 处理不同Canvas的显示顺序是通过修改Canvas的 OrderInLayer值来实现的</p><p>疑惑场景<br>两个Canvas，每个Canvas下面都有一个Image组件，Hierarchy窗口中Canvas1在Canvas2上面，无论如何调整Canvas1和Canvas2的PosZ属性，只要不动Canvas的OrderInLayer属性，Canvas2就一直会显示在Canvas1上面<br>Canvas1<br>Canvas2</p><p>如果在场景中创建一个Sphere 3D物体，物体上挂载的是Transform不是RectTransform，调整Sphere、Canvas1、Canvas2的PosZ属性使得距离摄像机有远到近的关系为：Canvas2、Sphere、Canvas1，会发现Sphere会潜入Canvas2中，而Canvas1本应该被Canvas2盖住，但是现在也会在Sphere遮挡Canvas2的区域中显示出来，原因是什么？</p><p>就算只有一个Canvas 下添加两个Image组件，Hierarchy中Image1在Image2的上面 就算Image1的PosZ比Image2的PosZ要小 Image1还是应该被Image2挡住，但是将Sphere放在两个Image中间的时候也会出现上述情况，为什么？</p><p>RectTransform的PosZ不能用来处理UI元素之间的层级关系 但是可以用来处理UI和3D物体之间的层级关系</p><p>Unity是如何渲染UI的？</p><h1>Unity的渲染顺序</h1><p>如果开启了深度测试永远都是离摄像机近的物体该在离摄像机远的物体之前</p><h1>Canvas</h1><p>Canvas组件提供了一个供UI布局和渲染的抽象空间。所有的UI元素必须是一个挂载有Canvas组件的GameObject的子。当我们创建一个UI元素的时候，如果场景中还没有一个带有Canvas的物体，那么一个Canvas的Object将会自动被创建出来。</p><h2 id="属性">属性</h2><ul><li>Render Mode: UI渲染到屏幕上或者是作为一个Object被渲染到3D空间中的方式。共有三种选项 Screen Space - Overlay， Screen Space - Camera和World Space</li><li>Pixel Pefect(Screen Space modes only): 为了精度UI是否应该关闭抗锯齿并渲染</li><li>Render Camera(Screen Space - Camera mode onle): UI要被渲染到哪个Camera上</li><li>Sort Order: 用于控制不通过Canvas之间的绘制顺序，数值越大，该canvas的绘制优先级越高，会绘制在其他Canvas的上方</li><li>Plane Distance(Screen Space - Camera mode only): 被渲染的UI放置在渲染摄像机前的距离</li><li>Event Camera(World Space mode only): 用来运行UI Event的Camera</li><li>Receives Events: UIEvent是否会被该Canvas驱动？</li></ul><h2 id="细节">细节</h2><p>对于所有的UI元素单个Canvas已经是足够的了，但是在场景中放置多个Canvas也是可以的。同样地，使用嵌套Canvas也是可以的，一般我们出于优化的目的会将一个Canvas设置为另一个Canvas的子节点。嵌套Canvas的Canvas采用和父Canvas相同的渲染模式。</p><p>传统方式中，所有的UI就像它们是简单的图形设计一样被直接地渲染到了屏幕上。这就是说，在Camera的视角下，它们是没有3D空间的概念的。Unity支持这种屏幕空间的渲染并且同时支持UI作为Object被渲染到3D空间中，这取决于Render Mode的值。</p><h2 id="Screen-Space-Overlay">Screen Space - Overlay</h2><p>这种模式下，Canvas会被缩放以适应屏幕然后在没有场景或者Camera的参照下直接渲染出来（UI会直接渲染出来，即使场景中根本就没有Camera）。如果屏幕的尺寸或者分辨率发生了改变，那么UI会自动地重新缩放来适应新的尺寸。UI会绘制在任何其他图形比如摄像机视角的上层</p><p>注意：Screen Space - Overlay模式下，挂载canvas的节点必须是在hierarchy窗口中的最上级的节点。如果没有这样使用canvas的话可能会导致UI从视野里消失。这是从Unity引擎设计上的局限，因此保持ScreenSpace - Overlay canvas在hierarchy的最顶层以保证能够获得期望的效果</p><h2 id="Screen-Space-Camera">Screen Space - Camera</h2><p>在这种模式下，Canvas会被渲染在一个平面的物体上，该平面距离给定的摄像机有一定的距离，这种模式下的UI显示在屏幕上的尺寸并不会随着距离而变化，因为它总是会重新缩放来适应Camera的平截头体中，如果屏幕的尺寸或者分辨率或者Camera的平截头体发生了变化，那么该UI会自动的缩放来适应改变话。任何在场景中的3D物体如果距离摄像机比该UI近的话，那么就会被渲染在该UI的前面，而在UI后面的物体就会被遮挡</p><h2 id="World-Space">World Space</h2><p>这种模式下的UI会想一个平面的物体一样被渲染在场景中，不想Screen Space - Camera一样，这种模式下的UI不需要面向摄像机并且可以朝向任何方向，这种模式下的Canvas的尺寸可以通过该节点上的RectTransform组件进行设置。而它的显示效果取决于观看角度和该UI距离Camera的距离，其他场景中的物体可以穿过该UI，或者在它的前面，或者在它的后面</p><h1>CanvasScaler</h1><p>Canvas Scaler组件用来控制UI元素在Canvas上的整体缩放和像素密度。这个组件会影响所有的位于该Canvas组件下的UI元素，包括字体大小和图片的边界</p><h2 id="属性-2">属性</h2><ul><li>UIScaleMode:  决定在该Canvas上的UI元素该如何进行缩放<ul><li>ConstantPixelSize: 让UI元素保持相同的像素不论屏幕的尺寸<ul><li>Scale Factor: 该Canvas中的所有UI元素的缩放受该factor影响</li><li>ReferencePixelsPerUnit: 如果一个sprite进行了Pixel Per Unity的设置，那么在该sprite中的一个像素将会覆盖一个单元</li></ul></li><li>ScaleWithScreenSize: 屏幕的尺寸越大，UI元素也越大<ul><li>Reference Resolution: UI布局是基于此分辨率设计的，如果屏幕分辨率更大，那么UI会被放大，反之UI会被缩小</li><li>ScreenMatchMode: 一种模式用来适应不同分辨率UI的缩放方式<ul><li>Match Width or Height: 如果设备的分辨率和默认分辨率不匹配的话，那么是保证宽和原分辨率成比例还是高与原分辨率成比例</li><li>Expand:</li><li>Shrink:</li></ul></li><li>Match: 决定</li><li>Reference Pixels Per Unit</li></ul></li><li>ConstantPhysicalSize: 让UI元素保持同样的物理尺寸的大小而不管屏幕的尺寸和分辨率<ul><li>Physical Unit:</li><li>Fallback Screen DPI</li><li>Default Sprite DPI</li><li>Reference Pixels Per Unit</li></ul></li></ul></li><li>当Canvas的RenderMode被设置为WorldSpace的时候<ul><li>Dynamic Pixels Per Unit： 表示UI中动态创建的位图，比如Text，中单个单元的像素数量</li><li>Reference Pixels Per Unit:  如果一个sprite有这个Pixels Per Unity的设置，那么在Sprite中的一个像素将会覆盖世界场景中韩的一个单元，如果Reference Pixel Per Unit 被设置为了1，那么在sprite中的Pixels Per Unit设置将会被直接使用</li></ul></li></ul><h2 id="细节-2">细节</h2><p>对于被设置为Screen Space - Overlay 或者 Screen Space - Camera 的 Canvas，Canvas Scaler UI 的 Scale Mode 可以被设置为Constant PixelSize， Scale With Screen 或者 Constant Physical Size</p><h2 id="Constant-Pixel-Size">Constant Pixel Size</h2><h2 id="Scale-With-Screen-Size">Scale With Screen Size</h2><h2 id="Constant-Physical-Size">Constant Physical Size</h2><h2 id="World-Space-2">World Space</h2><h1>CanvasGroup</h1><p>CanvasGroup用来控制某些方面</p><h1>CanvasRenderer</h1><p>Canvas Renderer 组件将一个Canvas中的一个图像UI渲染出来，该组件需要挂载在每一个需要显示在屏幕上的UI组件上，Canvas Renderer组件没有任何属性暴露在inspector窗口中</p><h2 id="细节-3">细节</h2><p>在Unity的菜单中可以创建的标准的UI组件上不论你需不需要都挂载有Canvas Renderer组件，但是当我们开发我们自定义的UI组件的时候，我们需要手动将该组件挂载到自定义UI上，尽管在Inspector窗口中没有任何的属性，但是有一些属性和功能还是可以通过代码的形式来控制</p><h1>GraphicRaycaster</h1><h1>参考资料</h1><ul><li><a href="http://warmcat.org/chai/blog/?p=4414#more-4414">【UGUI源码分析】目录</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity事件更新顺序</title>
      <link href="/posts/11d7edcb/"/>
      <url>/posts/11d7edcb/</url>
      
        <content type="html"><![CDATA[<h1>Unity事件执行顺序图</h1><p><a href="https://docs.unity3d.com/cn/2022.3/uploads/Main/monobehaviour_flowchart.svg"></a></p><h1>Awake、OnDestroy、OnEnable、OnDisable四者执行时机梳理</h1><p><code>OnEnable</code>方法在AddComponent、<strong>跟随预制体实例化(这里要十分注意挂载该脚本的GameObj的avtive状态要是true的情况下才会触发!)</strong>、在代码中手动设置enable为true的时候会调用.<br><code>OnDisable</code>方法是跟随预制体被删除、在代码中手动设置enable为false的时候会调用.</p><p><code>Awake</code>方法在AddComponent、<strong>跟随预制体实例化的时候会调用(这里要十分注意挂载该脚本的GameObj的avtive状态要是true的情况下才会触发!)</strong>. 整个组件的生命周期只会调用一次<br><code>OnDestroy</code>方法在跟随预制体被删除的时候调用. 整个组件的生命周期只会调用一次 <strong>注意,如果在这个预制体被实例化到销毁的这一生命周期内,挂载该脚本的节点的active一直都是false,那么就不会触发Awake,也不会触发OnDestroy,只要该节点被active过,即便被销毁的时候该节点处在not active状态,也会触发OnDestroy</strong></p><ul><li><p>ExecuteAlways Property的使用 <a href="https://blog.csdn.net/alexhu2010q/article/details/105437083">https://blog.csdn.net/alexhu2010q/article/details/105437083</a></p></li><li><p><code>yield WaitForEndOfFrame</code>是在干嘛?</p></li></ul><p>在非PlayMode下,有哪些生命周期内的方法会被执行?<br>在Unity开发过程中，我们经常需要在编辑器启动时或脚本重新编译后执行一些操作，例如初始化数据、注册事件等。这时，我们可以使用InitializeOnLoad特性来实现这一需求。本文将详细介绍InitializeOnLoad特性的用法，并通过三个实际案例来展示其应用场景。</p><p>OnValidate方法是一个仅限编辑器的函数，在Unity加载脚本或检查器中的值更改时调用。它的调用时机非常特殊，这里总结一下。</p><ol><li><p>OnValidate不受播放模式影响，只要其值发生变化，在非播放状态下也会被调用（可以用于非播放模式修改参数后更新）。</p></li><li><p>不受enabled状态影响，即使其所在的脚本被禁用，修改值时也会被正常调用。</p></li><li><p>更改脚本enabled状态时，会调用一次OnValidate。如果在Play Mode，OnValidated的调用时机在OnDisable或者OnEnable前。</p></li><li><p>更改GameObject active状态不会调用OnValidate，只有OnDisable和OnEnable会被调用。</p></li><li><p>初始加载时，无论enabled状态和active状态如何，都会被调用多次。其调用时机在Awake之前。</p></li></ol><p>常见用法：</p><ol><li><p>用于Play Mode下修改参数值，实时查看效果</p></li><li><p>实时更新资产文件，比如材质、shader等</p></li></ol><h1>参考资料</h1><ul><li><a href="https://blog.csdn.net/angry_youth/article/details/117469722">https://blog.csdn.net/angry_youth/article/details/117469722</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader实现水的效果</title>
      <link href="/posts/265490d3/"/>
      <url>/posts/265490d3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader实现草的效果</title>
      <link href="/posts/b1964c5e/"/>
      <url>/posts/b1964c5e/</url>
      
        <content type="html"><![CDATA[<p><a href="https://walkingfat.com/%e8%bf%98%e5%8e%9f%e3%80%8a%e5%a1%9e%e5%b0%94%e8%be%be%e3%80%8b%e7%9a%84%e8%8d%89%e5%9c%b0/">还原《塞尔达-旷野之息》的草地</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader实现云的效果</title>
      <link href="/posts/81b49e5c/"/>
      <url>/posts/81b49e5c/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityUGUI问题记录</title>
      <link href="/posts/2b97ac4f/"/>
      <url>/posts/2b97ac4f/</url>
      
        <content type="html"><![CDATA[<h1>为什么会有<code>LayoutRebuilder.ForceRebuildLayoutImmediate(RectTransform)</code>接口? 什么时候用这个接口?</h1><p>我们在某一帧的Update或者EventInput中执行了一段代码, 这段代码会修改某一UGUI组件的某些属性,我们知道,当一个UGUI组件的属性发生变化时,这个UGUI组件下面的所有UGUI组件的属性也会连带着发生变化. 但是在一帧内,这种变化不是真的同时发生的,UGUI的数据更新发生在<code>LateUpdate</code>之后,<code>OnPreCull</code>之前. 这是笔者还亲自验证的. 具体验证过程在<a href="">这篇博客</a>中.也就是说Unity会先执行完所有的代码逻辑, 然后再去更新这些UGUI组件的属性, 所以在这一帧中我们执行的修改UGUI组件属性的操作,只有在下一帧时,我们才能够拿到这个组件下UGUI组件的属性的正确值.<br>如果我们想在当前这一帧就获得正确的UGUI组件的属性,那么<code>LayoutRebuilder.ForceRebuildLayoutImmediate(RectTransform)</code>接口就派上用场了. 这个接口会强制更新传入UGUI及其子UGUI的RectTransform组件的属性, 然后我们就可以在当前帧获得正确的属性值了. 在笔者的开发经验中, 该接口一般会在使用UGUI里的Layout相关组件的时候比较常用.</p><h1>为什么ForceRebuildLayoutImmediate开销十分大</h1><h1>几个LayoutGroup组件的实现原理</h1><p>一个例子就是让父UI组件的尺寸跟着子UI组件的尺寸变化<br><a href="https://blog.csdn.net/yhx956058885/article/details/130729325">https://blog.csdn.net/yhx956058885/article/details/130729325</a></p><h1>Coffee UIEffect这个UI扩展库 里面的UIShadow组件上的值的实现原理和不同是什么? Outline和Outline8的区别? Fit还有一个什么忘了的区别?</h1><h1>Screen接口中的width和height 和 currentResolution的区别?</h1><h1>让UI变灰色</h1><p>给UI要变灰的UI组件挂载一个变灰材质</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UI/Gray&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        [PerRendererData] _MainTex (&quot;Sprite Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Color (&quot;Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line"></span><br><span class="line">        _StencilComp (&quot;Stencil Comparison&quot;, Float) = 8</span><br><span class="line">        _Stencil (&quot;Stencil ID&quot;, Float) = 0</span><br><span class="line">        _StencilOp (&quot;Stencil Operation&quot;, Float) = 0</span><br><span class="line">        _StencilWriteMask (&quot;Stencil Write Mask&quot;, Float) = 255</span><br><span class="line">        _StencilReadMask (&quot;Stencil Read Mask&quot;, Float) = 255</span><br><span class="line"></span><br><span class="line">        _ColorMask (&quot;Color Mask&quot;, Float) = 15</span><br><span class="line"></span><br><span class="line">        [Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip (&quot;Use Alpha Clip&quot;, Float) = 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;PreviewType&quot;=&quot;Plane&quot;</span><br><span class="line">            &quot;CanUseSpriteAtlas&quot;=&quot;True&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Stencil</span><br><span class="line">        &#123;</span><br><span class="line">            Ref [_Stencil]</span><br><span class="line">            Comp [_StencilComp]</span><br><span class="line">            Pass [_StencilOp]</span><br><span class="line">            ReadMask [_StencilReadMask]</span><br><span class="line">            WriteMask [_StencilWriteMask]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Cull Off</span><br><span class="line">        Lighting Off</span><br><span class="line">        ZWrite Off</span><br><span class="line">        ZTest [unity_GUIZTestMode]</span><br><span class="line">        Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">        ColorMask [_ColorMask]</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Name &quot;Default&quot;</span><br><span class="line">        CGPROGRAM</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #pragma target 2.0</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line">            #include &quot;UnityUI.cginc&quot;</span><br><span class="line"></span><br><span class="line">            #pragma multi_compile __ UNITY_UI_CLIP_RECT</span><br><span class="line">            #pragma multi_compile __ UNITY_UI_ALPHACLIP</span><br><span class="line"></span><br><span class="line">            struct appdata_t</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex   : POSITION;</span><br><span class="line">                float4 color    : COLOR;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">                UNITY_VERTEX_INPUT_INSTANCE_ID</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex   : SV_POSITION;</span><br><span class="line">                fixed4 color    : COLOR;</span><br><span class="line">                float2 texcoord  : TEXCOORD0;</span><br><span class="line">                float4 worldPosition : TEXCOORD1;</span><br><span class="line">                UNITY_VERTEX_OUTPUT_STEREO</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            fixed4 _TextureSampleAdd;</span><br><span class="line">            float4 _ClipRect;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_t v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f OUT;</span><br><span class="line">                UNITY_SETUP_INSTANCE_ID(v);</span><br><span class="line">                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(OUT);</span><br><span class="line">                OUT.worldPosition = v.vertex;</span><br><span class="line">                OUT.vertex = UnityObjectToClipPos(OUT.worldPosition);</span><br><span class="line"></span><br><span class="line">                OUT.texcoord = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line"></span><br><span class="line">                OUT.color = v.color * _Color;</span><br><span class="line">                return OUT;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f IN) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                half4 color = (tex2D(_MainTex, IN.texcoord) + _TextureSampleAdd) * IN.color;</span><br><span class="line"></span><br><span class="line">                #ifdef UNITY_UI_CLIP_RECT</span><br><span class="line">                color.a *= UnityGet2DClipping(IN.worldPosition.xy, _ClipRect);</span><br><span class="line">                #endif</span><br><span class="line"></span><br><span class="line">                #ifdef UNITY_UI_ALPHACLIP</span><br><span class="line">                clip (color.a - 0.001);</span><br><span class="line">                #endif</span><br><span class="line">                // 色彩变灰  亮度提取矩阵</span><br><span class="line">                float gray = dot(color.xyz, float3(0.299, 0.587, 0.114));</span><br><span class="line">                color.xyz = float3(gray, gray, gray);</span><br><span class="line">                return color;</span><br><span class="line">            &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>UGUI实现文字边缘发光效果</h1><h1>Unity实现Text部分区域可响应点击</h1><p>源码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.EventSystems;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UI.UIItems</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HyperlinkText</span> : <span class="title">Text</span>, <span class="title">IPointerClickHandler</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Set_TextLinkFuncCB(Application.OpenURL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 解析完最终的文本</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> m_OutputText;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 超链接信息列表</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> List&lt;HrefInfo_&gt; m_HrefInfos = <span class="keyword">new</span> List&lt;HrefInfo_&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 文本构造器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">readonly</span> StringBuilder s_TextBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 超链接正则</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Regex s_HrefRegex =</span><br><span class="line">            <span class="keyword">new</span> Regex(<span class="string">@&quot;&lt;a href=([^&gt;\n\s]+)&gt;(.*?)(&lt;/a&gt;)&quot;</span>, RegexOptions.Singleline);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Regex s_VertexFilter = <span class="keyword">new</span> Regex(<span class="string">@&quot;(|[ \n\r\t]+)&quot;</span>, RegexOptions.Singleline);</span><br><span class="line"></span><br><span class="line">        VertexHelper _toFill = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 是否使用超链接  默认未False</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="built_in">bool</span> bool_IsLink = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Action&lt;<span class="built_in">string</span>&gt; linkFunc_Cb = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RectTransform rect_Parent;</span><br><span class="line">        <span class="keyword">private</span> RectTransform Rect_Parent</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (rect_Parent == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Transform trans = <span class="keyword">this</span>.transform.parent != <span class="literal">null</span> ? <span class="keyword">this</span>.transform.parent.transform : <span class="keyword">this</span>.transform;</span><br><span class="line">                    rect_Parent = trans.GetComponent&lt;RectTransform&gt;();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> rect_Parent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置 文本 超链接的点击回调事件</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set_TextLinkFuncCB</span>(<span class="params">Action&lt;<span class="built_in">string</span>&gt; linkFunc_Cb</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            bool_IsLink = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.linkFunc_Cb != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.linkFunc_Cb = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.linkFunc_Cb = linkFunc_Cb;</span><br><span class="line">            OnPopulateMesh(_toFill);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符顶点数</span></span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">int</span> perCharVerCount = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 文本构造器</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">readonly</span> StringBuilder textRebuild = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnPopulateMesh</span>(<span class="params">VertexHelper toFill</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (toFill == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            _toFill = toFill;</span><br><span class="line">            <span class="comment">//TODO 编辑器状态下这里不执行， 方便调试看到效果用</span></span><br><span class="line">            <span class="keyword">if</span> (!bool_IsLink)</span><br><span class="line">            &#123;</span><br><span class="line">                m_Text = GetOutputText_Nomal(text);</span><br><span class="line">                <span class="keyword">base</span>.OnPopulateMesh(toFill);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> orignText = m_Text;</span><br><span class="line">            m_OutputText = GetOutputText_Init(text);</span><br><span class="line">            m_Text = m_OutputText;</span><br><span class="line">            text = m_OutputText;</span><br><span class="line">            <span class="keyword">base</span>.OnPopulateMesh(toFill);</span><br><span class="line">            m_Text = orignText;</span><br><span class="line">            GetOutputText(text, toFill.currentVertCount);</span><br><span class="line"></span><br><span class="line">            UIVertex vert = <span class="keyword">new</span> UIVertex();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理超链接包围框</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> hrefInfo <span class="keyword">in</span> m_HrefInfos)</span><br><span class="line">            &#123;</span><br><span class="line">                hrefInfo.boxes.Clear();</span><br><span class="line">                <span class="keyword">if</span> (hrefInfo.startIndex &gt;= toFill.currentVertCount)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将超链接里面的文本顶点索引坐标加入到包围框</span></span><br><span class="line">                toFill.PopulateUIVertex(<span class="keyword">ref</span> vert, hrefInfo.startIndex);</span><br><span class="line">                <span class="keyword">var</span> pos = vert.position;</span><br><span class="line">                <span class="keyword">var</span> bounds = <span class="keyword">new</span> Bounds(pos, Vector3.zero);</span><br><span class="line">                Vector3 previousPos = Vector3.zero;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = hrefInfo.startIndex, m = hrefInfo.endIndex; i &lt; m; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= toFill.currentVertCount)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    toFill.PopulateUIVertex(<span class="keyword">ref</span> vert, i);</span><br><span class="line">                    pos = vert.position;</span><br><span class="line">                    <span class="keyword">if</span> ((i - hrefInfo.startIndex) % <span class="number">4</span> == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        previousPos = pos;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (previousPos != Vector3.zero &amp;&amp; (i - hrefInfo.startIndex) % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; pos.x &lt; previousPos.x) <span class="comment">// 换行重新添加包围框</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        hrefInfo.boxes.Add(<span class="keyword">new</span> Rect(bounds.min, bounds.size));</span><br><span class="line">                        bounds = <span class="keyword">new</span> Bounds(pos, Vector3.zero);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        bounds.Encapsulate(pos); <span class="comment">// 扩展包围框</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                hrefInfo.boxes.Add(<span class="keyword">new</span> Rect(bounds.min, bounds.size));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.gameObject.activeInHierarchy)</span><br><span class="line">            &#123;</span><br><span class="line">                StartCoroutine(RefrehLayout());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">IEnumerator <span class="title">RefrehLayout</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>()</span>;</span><br><span class="line">            LayoutRebuilder.ForceRebuildLayoutImmediate(Rect_Parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化超链接文本 获取最终结果的定点数用</span></span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">GetOutputText_Init</span>(<span class="params"><span class="built_in">string</span> outputText</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            s_TextBuilder.Length = <span class="number">0</span>;</span><br><span class="line">            m_HrefInfos.Clear();</span><br><span class="line">            <span class="keyword">var</span> indexText = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (Match match <span class="keyword">in</span> s_HrefRegex.Matches(outputText))</span><br><span class="line">            &#123;</span><br><span class="line">                s_TextBuilder.Append(outputText.Substring(indexText, match.Index - indexText));</span><br><span class="line">                s_TextBuilder.Append(match.Groups[<span class="number">2</span>].Value);</span><br><span class="line">                indexText = match.Index + match.Length;</span><br><span class="line">            &#125;</span><br><span class="line">            s_TextBuilder.Append(outputText.Substring(indexText, outputText.Length - indexText));</span><br><span class="line">            <span class="keyword">return</span> s_TextBuilder.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 获取超链接解析后的最后输出文本</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">GetOutputText</span>(<span class="params"><span class="built_in">string</span> outputText, <span class="built_in">int</span> currentVertCount</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            s_TextBuilder.Length = <span class="number">0</span>;</span><br><span class="line">            m_HrefInfos.Clear();</span><br><span class="line">            <span class="keyword">var</span> indexText = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> vertCount = Regex.Replace(Regex.Replace(outputText.ToString(), <span class="string">@&quot;\s&quot;</span>, <span class="string">&quot;&quot;</span>), <span class="string">@&quot;&lt;(.*?)&gt;&quot;</span>, <span class="string">&quot;&quot;</span>).Length * <span class="number">4</span>;</span><br><span class="line">            <span class="built_in">int</span> vercCount_Offset_Start = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">int</span> vercCount_Offset_End = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">bool</span> isLineCup = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (currentVertCount &gt; vertCount)</span><br><span class="line">            &#123;</span><br><span class="line">                isLineCup = <span class="literal">true</span>;</span><br><span class="line">                vercCount_Offset_Start = <span class="number">80</span>;</span><br><span class="line">                vercCount_Offset_End = <span class="number">88</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (Match match <span class="keyword">in</span> s_HrefRegex.Matches(outputText))</span><br><span class="line">            &#123;</span><br><span class="line">                s_TextBuilder.Append(outputText.Substring(indexText, match.Index - indexText));</span><br><span class="line">                <span class="built_in">int</span> offset_Len = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (isLineCup)</span><br><span class="line">                &#123;</span><br><span class="line">                    offset_Len = (s_TextBuilder.Length - Regex.Replace(s_TextBuilder.ToString(), <span class="string">@&quot;&lt;(.*?)&gt;&quot;</span>, <span class="string">&quot;&quot;</span>).Length) * <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                s_TextBuilder.Append(<span class="string">&quot;&lt;i&gt;&lt;b&gt;&lt;color=#f49037&gt;&quot;</span>);  <span class="comment">// 超链接颜色</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> str = Regex.Replace(s_TextBuilder.ToString(), <span class="string">@&quot;\s&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">var</span> <span class="keyword">group</span> = match.Groups[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> hrefInfo = <span class="keyword">new</span> HrefInfo_</span><br><span class="line">                &#123;</span><br><span class="line">                    startIndex = Regex.Replace(str, <span class="string">@&quot;&lt;(.*?)&gt;&quot;</span>, <span class="string">&quot;&quot;</span>).Length * <span class="number">4</span> + vercCount_Offset_Start + offset_Len, <span class="comment">// 超链接里的文本起始顶点索引</span></span><br><span class="line">                    endIndex = (Regex.Replace(str, <span class="string">@&quot;&lt;(.*?)&gt;&quot;</span>, <span class="string">&quot;&quot;</span>).Length +</span><br><span class="line">                        Regex.Replace(Regex.Replace(match.Groups[<span class="number">2</span>].ToString(), <span class="string">@&quot;\s&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                            , <span class="string">@&quot;&lt;(.*?)&gt;&quot;</span>, <span class="string">&quot;&quot;</span>).Length - <span class="number">1</span>) * <span class="number">4</span> + <span class="number">3</span> + vercCount_Offset_End + offset_Len,</span><br><span class="line">                    name = <span class="keyword">group</span>.Value</span><br><span class="line">                &#125;;</span><br><span class="line">                m_HrefInfos.Add(hrefInfo);</span><br><span class="line">                <span class="comment">//Debug.Log($&quot;顶点信息，开始的：&#123;hrefInfo.startIndex&#125;，结束的：&#123;hrefInfo.endIndex&#125;&quot;);</span></span><br><span class="line"></span><br><span class="line">                s_TextBuilder.Append(match.Groups[<span class="number">2</span>].Value);</span><br><span class="line">                s_TextBuilder.Append(<span class="string">&quot;&lt;/color&gt;&lt;/b&gt;&lt;/i&gt;&quot;</span>);</span><br><span class="line">                indexText = match.Index + match.Length;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            s_TextBuilder.Append(outputText.Substring(indexText, outputText.Length - indexText));</span><br><span class="line">            <span class="keyword">return</span> s_TextBuilder.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取祛除掉超链接 保留普通文本  保证配置里超链接标签的文本  在其他地方也可以正常使用，只有调用了超链接初始化的  才会给超链接形式的文本</span></span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">GetOutputText_Nomal</span>(<span class="params"><span class="built_in">string</span> outputText</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            s_TextBuilder.Length = <span class="number">0</span>;</span><br><span class="line">            m_HrefInfos.Clear();</span><br><span class="line">            <span class="keyword">var</span> indexText = <span class="number">0</span>;</span><br><span class="line">            MatchCollection matchs = s_HrefRegex.Matches(outputText);</span><br><span class="line">            <span class="keyword">if</span> (matchs.Count &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> outputText;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (Match match <span class="keyword">in</span> matchs)</span><br><span class="line">            &#123;</span><br><span class="line">                s_TextBuilder.Append(outputText.Substring(indexText, match.Index - indexText));</span><br><span class="line">                s_TextBuilder.Append(match.Groups[<span class="number">2</span>].Value);</span><br><span class="line">                indexText = match.Index + match.Length;</span><br><span class="line">            &#125;</span><br><span class="line">            s_TextBuilder.Append(outputText.Substring(indexText, outputText.Length - indexText));</span><br><span class="line">            <span class="keyword">return</span> s_TextBuilder.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPointerClick</span>(<span class="params">PointerEventData eventData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vector2 lp;</span><br><span class="line">            RectTransformUtility.ScreenPointToLocalPointInRectangle(</span><br><span class="line">                rectTransform, eventData.position, eventData.pressEventCamera, <span class="keyword">out</span> lp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> hrefInfo <span class="keyword">in</span> m_HrefInfos)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> boxes = hrefInfo.boxes;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; boxes.Count; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (boxes[i].Contains(lp))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//Debug.Log(&quot;技能 超链接 点击了：&quot; + hrefInfo.name);</span></span><br><span class="line">                        linkFunc_Cb?.Invoke(hrefInfo.name);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 超链接信息类</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">HrefInfo_</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> startIndex;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> endIndex;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">readonly</span> List&lt;Rect&gt; boxes = <span class="keyword">new</span> List&lt;Rect&gt;();</span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> terms2 = <span class="string">$&quot;&lt;color=#aa3900&gt;&lt;a herf=<span class="subst">&#123;PrivacyPolicyDefine.UrlService&#125;</span>&gt;<span class="subst">&#123;ScriptLocalization.terms_of_use&#125;</span>&lt;/a&gt;&lt;/color&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> policy2 = <span class="string">$&quot;&lt;color=#aa3900&gt;&lt;a herf=<span class="subst">&#123;PrivacyPolicyDefine.UrlPrivacy&#125;</span>&gt;<span class="subst">&#123;ScriptLocalization.privacy_policy&#125;</span>&lt;/a&gt;&lt;/color&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">_ui.contentText.text = <span class="built_in">string</span>.Format(ScriptLocalization.terms_policy_dlg_content, terms2, policy2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityEditor功能开发</title>
      <link href="/posts/2e6b555f/"/>
      <url>/posts/2e6b555f/</url>
      
        <content type="html"><![CDATA[<h1>EditorApplication</h1><h1>在Editor下使用异步</h1><h2 id="多线程方式">多线程方式</h2><p>插件Figma Convert Unity中就使用了多线程的方式</p><h2 id="使用协程">使用协程</h2><p>Unity提供的一些运行时I/O向的操作, 可以通过使其支持await的方式在Editor模式下使用</p><h1>拓展UnityInspector窗口</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DDZ</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">CustomEditor(typeof(RectTransform))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RectTransformEditor</span> : <span class="title">Editor</span></span><br><span class="line">    &#123;</span><br><span class="line">        Color defutColor;</span><br><span class="line">        RectTransform rectTransform;</span><br><span class="line">        UIRuntimeComponents runtimeComponents;</span><br><span class="line">        Object[] components;</span><br><span class="line">        Editor rectTransformEditor;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">bool</span> showCustom = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        GUIContent toggleLabel = <span class="keyword">new</span> GUIContent(<span class="string">&quot; 节点收集&quot;</span>);</span><br><span class="line">        GUIStyle style = <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//反射获取ectTransformEditor</span></span><br><span class="line">            <span class="keyword">var</span> type = Assembly.GetAssembly(<span class="keyword">typeof</span>(Editor)).GetType(<span class="string">&quot;UnityEditor.RectTransformEditor&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (type==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rectTransformEditor = CreateEditor(target, type);</span><br><span class="line"></span><br><span class="line">            rectTransform = (RectTransform) target;</span><br><span class="line">            <span class="keyword">if</span> (rectTransform != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                defutColor = GUI.backgroundColor;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//获取RuntimeComponents组件</span></span><br><span class="line">                runtimeComponents = FindUIRuntimeComponents(rectTransform.parent);</span><br><span class="line">            </span><br><span class="line">                <span class="comment">//收集节点，添加GameObject，并且删除CanvasRenderer</span></span><br><span class="line">                components = rectTransform.GetComponents&lt;Component&gt;();</span><br><span class="line">                <span class="keyword">var</span> list = components.ToList();</span><br><span class="line">                list.Add(rectTransform.gameObject);</span><br><span class="line">                <span class="built_in">int</span> len = list.Count;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> component = list[i];</span><br><span class="line">                    <span class="keyword">var</span> typeStr = component.GetType().Name;</span><br><span class="line">                    <span class="keyword">if</span> (typeStr == <span class="string">&quot;CanvasRenderer&quot;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        list.RemoveAt(i);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                components = list.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rectTransform == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rectTransformEditor)</span><br><span class="line">            &#123;</span><br><span class="line">                rectTransformEditor.OnInspectorGUI();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (runtimeComponents == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            EditorGUILayout.Space();</span><br><span class="line">            Rect xian1 = GUILayoutUtility.GetRect(GUIContent.none, GUIStyle.none, GUILayout.Height(<span class="number">1</span>));</span><br><span class="line">            Rect backgroundRect = GUILayoutUtility.GetRect(GUIContent.none, GUIStyle.none, GUILayout.Height(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">            EditorGUI.DrawRect(xian1, Color.black);</span><br><span class="line">            EditorGUI.DrawRect(backgroundRect, <span class="keyword">new</span> Color(<span class="number">0.25f</span>, <span class="number">0.25f</span>, <span class="number">0.25f</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绘制内容区域</span></span><br><span class="line">            <span class="keyword">if</span> (style==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                style = <span class="keyword">new</span> GUIStyle(EditorStyles.foldout);</span><br><span class="line">                style.fontStyle = FontStyle.Bold;</span><br><span class="line">            &#125;</span><br><span class="line">            Rect contentRect = <span class="keyword">new</span> Rect(backgroundRect.x<span class="number">-15</span> , backgroundRect.y, backgroundRect.width+<span class="number">20</span>, backgroundRect.height);</span><br><span class="line">            showCustom = GUI.Toggle(contentRect, showCustom, toggleLabel,style);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (showCustom)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> len = components.Length;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> component = components[i];</span><br><span class="line">                    <span class="keyword">var</span> typeStr = component.GetType().Name;</span><br><span class="line">                    <span class="keyword">if</span> (IsCollected(runtimeComponents, component))</span><br><span class="line">                    &#123;</span><br><span class="line">                        GUI.backgroundColor = Color.green;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        GUI.backgroundColor = defutColor;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        GUILayout.BeginHorizontal();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i == len - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (GUILayout.Button(typeStr, GUILayout.Width(<span class="number">100</span>), GUILayout.Height(<span class="number">30</span>)))</span><br><span class="line">                        &#123;</span><br><span class="line">                            OperateComponent(component);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (GUILayout.Button(typeStr, GUILayout.Height(<span class="number">30</span>)))</span><br><span class="line">                        &#123;</span><br><span class="line">                            OperateComponent(component);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span> || i == len - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        GUILayout.EndHorizontal();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                EditorGUI.indentLevel--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDisable</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rectTransformEditor)</span><br><span class="line">            &#123;</span><br><span class="line">                DestroyImmediate(rectTransformEditor);</span><br><span class="line">                rectTransform = <span class="literal">null</span>;</span><br><span class="line">                runtimeComponents = <span class="literal">null</span>;</span><br><span class="line">                components = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OperateComponent</span>(<span class="params">Object component</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Event.current.button == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!Application.isPlaying)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (IsCollected(runtimeComponents, component))</span><br><span class="line">                    &#123;</span><br><span class="line">                        DeleteObject(runtimeComponents, component);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        AddObject(runtimeComponents, component);</span><br><span class="line">                    &#125;</span><br><span class="line">                            </span><br><span class="line">                    EditorApplication.ExecuteMenuItem(<span class="string">&quot;Window/General/Hierarchy&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Event.current.button == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (IsCollected(runtimeComponents, component))</span><br><span class="line">                &#123;</span><br><span class="line">                    FindReferences(runtimeComponents, component);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="built_in">bool</span> <span class="title">IsCollected</span>(<span class="params">UIRuntimeComponents runtimeComponents, Object component</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (runtimeComponents.m_objects==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> len = runtimeComponents.m_objects.Length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (runtimeComponents.m_objects[i] == component)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">AddObject</span>(<span class="params">UIRuntimeComponents runtimeComponents, Object component</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (runtimeComponents.m_objects==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                runtimeComponents.m_objects = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> len = runtimeComponents.m_objects.Length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (runtimeComponents.m_objects[i] == component)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> list = runtimeComponents.m_objects.ToList();</span><br><span class="line">            list.Add(component);</span><br><span class="line">            runtimeComponents.m_objects = list.ToArray();</span><br><span class="line">            SavePrefab(runtimeComponents);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">DeleteObject</span>(<span class="params">UIRuntimeComponents runtimeComponents, Object component</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> list = runtimeComponents.m_objects.ToList();</span><br><span class="line">            <span class="built_in">int</span> len = list.Count;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (list[i] == component)</span><br><span class="line">                &#123;</span><br><span class="line">                    list.RemoveAt(i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            runtimeComponents.m_objects = list.ToArray();</span><br><span class="line">            <span class="keyword">if</span> (runtimeComponents.m_objects.Length&lt;=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                runtimeComponents.m_objects = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SavePrefab(runtimeComponents);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">FindReferences</span>(<span class="params">UIRuntimeComponents runtimeComponents, Object component</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            EditorGUIUtility.PingObject(runtimeComponents.gameObject);</span><br><span class="line">            Selection.objects = <span class="keyword">new</span> Object[] &#123;runtimeComponents.gameObject&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> len = runtimeComponents.m_objects.Length;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (component == runtimeComponents.m_objects[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    runtimeComponents.focusIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">UIRuntimeComponents <span class="title">FindUIRuntimeComponents</span>(<span class="params">Transform transform</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (transform == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> runtimeComponents = transform.GetComponent&lt;UIRuntimeComponents&gt;();</span><br><span class="line">            <span class="keyword">if</span> (runtimeComponents != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> runtimeComponents;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> FindUIRuntimeComponents(transform.parent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">SavePrefab</span>(<span class="params">UIRuntimeComponents runtime</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (runtime == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            GameObject save_go = runtime.gameObject;</span><br><span class="line">            <span class="keyword">var</span> assetType = PrefabUtility.GetPrefabAssetType(runtime.gameObject);</span><br><span class="line">            <span class="keyword">if</span> (assetType == PrefabAssetType.Regular) <span class="comment">//如果是预制体的一部分</span></span><br><span class="line">            &#123;</span><br><span class="line">                save_go = PrefabUtility.GetOutermostPrefabInstanceRoot(runtime.gameObject);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (EditorUtility.IsPersistent(save_go))</span><br><span class="line">            &#123;</span><br><span class="line">                EditorUtility.SetDirty(save_go);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> path =</span><br><span class="line">                    AssetDatabase.GetAssetPath(PrefabUtility.GetCorrespondingObjectFromOriginalSource(save_go));</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(path))</span><br><span class="line">                &#123;</span><br><span class="line">                    EditorUtility.SetDirty(save_go);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    PrefabUtility.SaveAsPrefabAssetAndConnect(save_go, path, InteractionMode.UserAction);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>UnityEditor下的加载弹窗或者弹窗</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowProgress</span>(<span class="params"><span class="built_in">float</span> progress, <span class="built_in">int</span> total, <span class="built_in">int</span> current</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    EditorUtility.DisplayProgressBar(<span class="string">&quot;Searching&quot;</span>,</span><br><span class="line">        <span class="built_in">string</span>.Format(<span class="string">&quot;Checking (&#123;0&#125;/&#123;1&#125;), please wait...&quot;</span>, current, total), progress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EditorUtility.DisplayDialog( <span class="string">&quot;&quot;</span>, <span class="string">&quot;Board64中不存在对Board100的依赖&quot;</span>, <span class="string">&quot;OK&quot;</span> );</span><br></pre></td></tr></table></figure><h1>资源导入管线处理</h1><h1>Unity 内建图标列表</h1><p>通过<code>EditorGUIUtility.FindTexture</code>接口可以拿到UnityEditor中内置的图标</p><p><a href="https://www.cnblogs.com/CloudLiu/p/9957335.html">https://www.cnblogs.com/CloudLiu/p/9957335.html</a></p><h1>在Scene窗口中添加按钮</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CustomEditor(typeof(Particle2DUGUI))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Particle2DUGUIEditor</span> : <span class="title">Editor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span>&#123;</span><br><span class="line">Particle2DUGUI particle2D = target <span class="keyword">as</span> Particle2DUGUI;</span><br><span class="line">EditorGUILayout.Space();</span><br><span class="line"></span><br><span class="line">Color c = GUI.backgroundColor;</span><br><span class="line"><span class="keyword">if</span>(particle2D.material==<span class="literal">null</span>)&#123;</span><br><span class="line">GUI.backgroundColor =  Color.red;</span><br><span class="line">EditorGUILayout.TextArea(<span class="string">&quot;Error: Material is NULL&quot;</span>);</span><br><span class="line">GUI.backgroundColor =  c;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(particle2D.mainTexture==<span class="literal">null</span>)&#123;</span><br><span class="line">GUI.backgroundColor =  Color.red;</span><br><span class="line">EditorGUILayout.TextArea(<span class="string">&quot;Error: Texture is NULL&quot;</span>);</span><br><span class="line">GUI.backgroundColor =  c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serializedObject.Update();</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;m_Material&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;m_Color&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;speedScale&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;playOnAwake&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">if</span>(particle2D.playOnAwake)&#123;</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;delayPlay&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!particle2D.configValues.isLooop)&#123;</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;autoRemove&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;prewarm&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;simulationSpace&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;rectTransAutosize&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">EditorGUILayout.Space();</span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;effectConfig&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">c = GUI.backgroundColor;</span><br><span class="line">GUI.backgroundColor =  Color.yellow;</span><br><span class="line">EditorGUILayout.TextArea(<span class="string">&quot;Support: Pex Or Plist config File.&quot;</span>);</span><br><span class="line"></span><br><span class="line">GUI.backgroundColor =  Color.green;</span><br><span class="line"><span class="keyword">if</span>(particle2D.effectConfig!=<span class="literal">null</span>)&#123;</span><br><span class="line">EditorGUILayout.BeginHorizontal();</span><br><span class="line"><span class="keyword">if</span>(GUILayout.Button(<span class="string">&quot;Load From Config&quot;</span>,GUILayout.Height(<span class="number">24</span>)))&#123;</span><br><span class="line">particle2D.ReadConfig();</span><br><span class="line">particle2D.ResetParticle();</span><br><span class="line">&#125;</span><br><span class="line">EditorGUILayout.EndHorizontal();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">GUI.enabled = <span class="literal">false</span>;</span><br><span class="line">GUILayout.Button(<span class="string">&quot;Load From Config&quot;</span>,GUILayout.Height(<span class="number">24</span>));</span><br><span class="line">GUI.enabled = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">GUI.backgroundColor = c;</span><br><span class="line"></span><br><span class="line">EditorGUILayout.PropertyField(serializedObject.FindProperty(<span class="string">&quot;configValues&quot;</span>),<span class="literal">true</span>);</span><br><span class="line">serializedObject.ApplyModifiedProperties();</span><br><span class="line"></span><br><span class="line">c = GUI.backgroundColor;</span><br><span class="line">GUI.backgroundColor =  Color.green;</span><br><span class="line">EditorGUILayout.BeginHorizontal();</span><br><span class="line"><span class="keyword">if</span>(GUILayout.Button(<span class="string">&quot;Refresh&quot;</span>,GUILayout.Height(<span class="number">32</span>)))&#123;</span><br><span class="line">particle2D.ResetParticle();</span><br><span class="line">&#125;</span><br><span class="line">EditorGUILayout.EndHorizontal();</span><br><span class="line">GUI.backgroundColor = c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!Application.isPlaying &amp;&amp; Selection.activeObject==particle2D.gameObject)&#123;</span><br><span class="line"><span class="keyword">if</span>(particle2D.configValues!=<span class="literal">null</span> &amp;&amp; particle2D.Emitter!=<span class="literal">null</span> &amp;&amp; particle2D.configValues.maxParticles!=particle2D.Emitter.capacity)&#123;</span><br><span class="line">particle2D.ResetParticle();</span><br><span class="line">&#125;</span><br><span class="line">EditorUtility.SetDirty (particle2D);</span><br><span class="line">HandleUtility.Repaint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnSceneGUI</span>()</span>&#123;</span><br><span class="line">Particle2DUGUI particle2D = target <span class="keyword">as</span> Particle2DUGUI;</span><br><span class="line"></span><br><span class="line">Handles.BeginGUI();</span><br><span class="line">GUI.backgroundColor =  Color.green;</span><br><span class="line">GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">5</span>,<span class="number">5</span>,<span class="number">60</span>,<span class="number">130</span>));</span><br><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Play&quot;</span>,GUILayout.Width(<span class="number">60</span>),GUILayout.Height(<span class="number">30</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(particle2D.Emitter!=<span class="literal">null</span>) &#123;</span><br><span class="line">particle2D.Emitter.Play();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">particle2D.ResetParticle();</span><br><span class="line">&#125;</span><br><span class="line">particle2D.OnRebuildRequested();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Stop&quot;</span>,GUILayout.Width(<span class="number">60</span>),GUILayout.Height(<span class="number">30</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(particle2D.Emitter!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(particle2D.Emitter!=<span class="literal">null</span>) &#123;</span><br><span class="line">particle2D.Emitter.Stop(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Clear&quot;</span>,GUILayout.Width(<span class="number">60</span>),GUILayout.Height(<span class="number">30</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(particle2D.Emitter!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(particle2D.Emitter!=<span class="literal">null</span>) &#123;</span><br><span class="line">particle2D.Emitter.Stop(<span class="literal">true</span>);</span><br><span class="line">particle2D.OnRebuildRequested();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">GUILayout.EndArea();</span><br><span class="line">Handles.EndGUI();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!Application.isPlaying)&#123;</span><br><span class="line">Particle2DUGUI particle2D = target <span class="keyword">as</span> Particle2DUGUI;</span><br><span class="line"><span class="keyword">if</span>(particle2D!=<span class="literal">null</span> &amp;&amp; Selection.activeGameObject == particle2D.gameObject &amp;&amp; particle2D.playOnAwake) &#123;</span><br><span class="line"><span class="keyword">if</span>(particle2D.Emitter!=<span class="literal">null</span>) &#123;</span><br><span class="line">particle2D.Emitter.Play();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(particle2D.configValues==<span class="literal">null</span>) particle2D.configValues = <span class="keyword">new</span> Particle2DConfig();</span><br><span class="line"><span class="keyword">if</span>(particle2D.configValues!=<span class="literal">null</span> &amp;&amp; particle2D.configValues.texture==<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//show default texture</span></span><br><span class="line">Object[] unityAssets = AssetDatabase.LoadAllAssetsAtPath(<span class="string">&quot;Resources/unity_builtin_extra&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(Object obj <span class="keyword">in</span> unityAssets)&#123;</span><br><span class="line"><span class="keyword">if</span>(obj.name.Equals(<span class="string">&quot;Default-Particle&quot;</span>))&#123;</span><br><span class="line">particle2D.configValues.texture = obj <span class="keyword">as</span> Texture;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">particle2D.ResetParticle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span>()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!Application.isPlaying)&#123;</span><br><span class="line">Particle2DUGUI particle2D = target <span class="keyword">as</span> Particle2DUGUI;</span><br><span class="line"><span class="keyword">if</span>(particle2D!=<span class="literal">null</span> &amp;&amp; Selection.activeGameObject != particle2D.gameObject &amp;&amp; particle2D.Emitter!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(particle2D.Emitter!=<span class="literal">null</span>) &#123;</span><br><span class="line">particle2D.Emitter.Stop(<span class="literal">true</span>);</span><br><span class="line">particle2D.OnRebuildRequested();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">MenuItem(<span class="string">&quot;Particle2D/Particle2D UGUI&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateParticle2DSystem</span>()</span>&#123;</span><br><span class="line">GameObject go = <span class="keyword">new</span> GameObject(<span class="string">&quot;Particle2D UGUI&quot;</span>);</span><br><span class="line">Particle2DUGUI ugui = go.AddComponent&lt;Particle2DUGUI&gt;();</span><br><span class="line">GameObject canvas = GameObject.Find(<span class="string">&quot;Canvas&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(canvas)&#123;</span><br><span class="line">go.transform.SetParent(canvas.transform);</span><br><span class="line">go.transform.localScale = Vector3.one;</span><br><span class="line">go.transform.localPosition = Vector3.zero;</span><br><span class="line">&#125;</span><br><span class="line">MonoScript ms = MonoScript.FromMonoBehaviour(ugui);</span><br><span class="line"><span class="built_in">string</span> filePath = AssetDatabase.GetAssetPath( ms );</span><br><span class="line">filePath = filePath.Substring(<span class="number">0</span>,filePath.LastIndexOf(<span class="string">&quot;Scripts/Particle2DUGUI.cs&quot;</span>));</span><br><span class="line">filePath += <span class="string">&quot;Materials/UGUI_Additive.mat&quot;</span>;</span><br><span class="line">Material mat = AssetDatabase.LoadAssetAtPath&lt;Material&gt;(filePath);</span><br><span class="line">ugui.material = mat;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>在Play按钮旁边添加按钮</h1><p>TEngine</p><h1>参考资料</h1><ul><li><a href="https://blog.csdn.net/yx314636922/article/details/126872839">https://blog.csdn.net/yx314636922/article/details/126872839</a></li><li><a href="https://blog.csdn.net/angry_youth/article/details/117469722">https://blog.csdn.net/angry_youth/article/details/117469722</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> UnityEditor </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>乌合之众</title>
      <link href="/posts/2ecb1e55/"/>
      <url>/posts/2ecb1e55/</url>
      
        <content type="html"><![CDATA[<h1>序</h1><p>我发现，社会组织就像人体结构一样复杂，我们完全无法让它们突然经受深刻的变化。大自然有时是非常极端的，但决不像我们所理解的那样。所以，对一个民族来说，迷恋大变革是最可怕的事情之一。不管这种变革在理论上显得如何伟大，只有当它能立即改变民族的深层心理时，它才是有用的。然而，只有时间拥有这种力量。支配人类的，是思想、感情和习俗，是存在于我们自身的东西。制度和法律是人们内心精神的表现形式，反映了它的需要，既然是人们的内心精神诞生了制度和法律，制度和法律自然就无法改变它。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ET中的网络通信模块</title>
      <link href="/posts/3613bb98/"/>
      <url>/posts/3613bb98/</url>
      
        <content type="html"><![CDATA[<p>ET框架中的协议可以分成三种类型:</p><ul><li>客户端内部的通讯协议</li><li>客户端和服务器之间的通讯协议</li><li>服务器内部的通讯协议</li></ul><p>ET中负责模块间通信的组件有哪些?</p><p>ClientSenderComponent</p><p>ProcessInnerSender<br>ProcessOuterSender<br>Session</p><p>MessageSender</p><p>MessageLocationSenderComponent<br>MessageLocationSenderOneType<br>MessageLocationSender</p><p>看起来有很多Sender, 可以归根结底只有ProcessInnerSender和MessageQueueSingleton这几个Sender</p><p>Realm Session<br>Router Session<br>Gate Session</p><p>通过Root节点上的RouterAddressComponent组件可以获得服务器的地址, 并将这个地址给到Session</p><p><a href="https://blog.csdn.net/u011041241/article/details/109574509">内网和外网之间的通信（端口映射原理）</a><br><a href="https://luyuhuang.tech/2020/12/09/kcp.html">KCP协议详解</a><br><a href="https://blog.csdn.net/Q540670228/article/details/123385080?spm=1001.2014.3001.5502">Unity+ET6.0网络框架的网络开发基础理论</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ET框架自动生成脚本</title>
      <link href="/posts/ef16867e/"/>
      <url>/posts/ef16867e/</url>
      
        <content type="html"><![CDATA[<p>ET框架仓库下其实是有两个工程的，虽然这两个工程里面的脚本有可能是用的同一份</p><p>在Share这个模块中<code>ETSystemGenerator.cs</code>这个脚本里面！</p><blockquote><p>问题 这些代码自动生成的时机是什么时候？</p></blockquote><p>编译的时候自动生成，无需开发者手动管理ETSystemGenerator这个类实现了ISourceGenerator接口，但是需要注意的是，在Unity中自动生成脚本的功能是是通过dll插件的方式接入进来的，还得看一下怎么导出dll，如果对SourceGenerator的源码有修改，需要重新导入dll到Unity中</p><h1>GeneratorExecutionContext</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ET框架索引</title>
      <link href="/posts/ff09e316/"/>
      <url>/posts/ff09e316/</url>
      
        <content type="html"><![CDATA[<blockquote><p>💡TIPS:本系列基于ET8.1版本</p></blockquote><p>本系列内容会十分繁杂, 因为不只是讨论ET的架构设计, 还有支持框架实现背后的技术: C#中的特性、反射、异步、代码检查、源代码生成、帧同步状态同步、网络通信、KCP、AOI等多个方面, 也只有具备了这些知识储备, 才能够更好的理解ET框架.</p><ul><li><a href="https://soincredible.github.io/posts/a8cdc42b/">ET中的异步</a></li><li><a href="https://soincredible.github.io/posts/50d23509/">帧同步与状态同步</a></li><li><a href="https://soincredible.github.io/posts/3613bb98/">ET中的网络通信模块</a></li><li><a href="https://soincredible.github.io/posts/12f854cb/">ET中的Singleton</a></li><li><a href="https://soincredible.github.io/posts/cd96d12/">ET中反射与特性的使用</a></li><li><a href="https://soincredible.github.io/posts/ef16867e/">ET框架自动生成脚本</a></li><li><a href="https://soincredible.github.io/posts/9c5dbe31/">ET框架Demo启动流程梳理</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ET框架中的Singleton</title>
      <link href="/posts/12f854cb/"/>
      <url>/posts/12f854cb/</url>
      
        <content type="html"><![CDATA[<p>本文笔者会按照ET中所有Singleton创建的顺利，尝试梳理一下设计到的模块。</p><h1>Singleton的创建</h1><blockquote><p>疑问 已经有一个ASingleton了，为什么还要有一个ASingletonAwake？<br>所有的Singleton都会继承ASingleton基类。但是不同的Singleton还会继承不同的ISingletonAwake。 一是使用泛型，二是声明几个参数数量不同的ISingletonAwake接口，开发者可以根据需求选择具体的Singleton继承哪个接口，但是所有的Singleton又都会继承ASingleton被Word中的singletons管理起来，相当于把Singleton的初始化和管理的职能拆分交给了两个角色去处理，还是比较巧妙的。</p></blockquote><blockquote><p>疑问 为什么有的Singleton会被打上Code特性，有的不会？</p></blockquote><p>虽然大家都是Singleton，但是各个Singleton之间的优先级不一定一样，单例之间会存在依赖。比如CodeLoader、CodeTypes这两个单例，它们两个需要在其他单例之前先被Awake，然后在CodeType单例内部，再去创建出其他单例出来。因此，如果有一个单例没有被标记为Code特性，那么说明这个单例是一个优先级比较高的单例，它应该在某一比较早的时刻被我们开发者手动调用并创建出来。也就是ET框架通过给不给单例标记CodeAttribute的方式来对单例的创建进行手动或者自动的管理。</p><h1>World</h1><p>接着我们来说一下World中的AddSingleton接口，这个接口不仅仅是被World内部的几个泛型AddSingleton接口调用，还被下面几个地方调用了：</p><ul><li>CodeTypes</li><li>ConfigLoader</li><li>EditorLogHelper</li></ul><h1>CodeTypes</h1><h1>ConfigLoader</h1><h1>EditorLogHelper</h1><h1>AddSingleton的顺序</h1><ul><li>Logger</li><li>TimeInfo</li><li>FiberManager</li><li>ResourcesComponent</li><li>CodeLoader</li><li>接着调用CodeLoader的Start方法创建CodeTypes单例</li><li>接着通过反射的方式调用Entry中的Start方法创建下面单例：<ul><li>IdGenerater</li><li>OpcodeType</li><li>ObjectPool</li><li>MessageQueue</li><li>NetServices</li><li>NavmeshComponent</li><li>LogMsg</li><li>然后调用CodeTypes单例的CreateCode方法，该方法拿到所有被标记了CodeAttribute的类，自动的创建这些类的单例：<ul><li>EntitySystemSingleton</li><li>MessageDispatcher</li><li>EventSystem</li><li>HttpDispatcher</li><li>LSEntitySystemSingleton</li><li>AIDispatcherComponent</li><li>ConsoleDispatcher</li><li>MessageSessionDispatcher</li><li>NumericWatcherComponent</li><li>UIEventComponent</li></ul></li><li>ConfigLoader</li></ul></li></ul><h1>CodeTypes</h1><h1>EventSystem</h1><p>EventSystem是所有业务能够跑起来的基础</p><p>通过继承InvokeHandler, 在Handle方法里会操作其他单例或者component里面面的接口</p><ul><li>MessageSessionHandler MessageSessionDispatcher</li><li>MessageLocationHandler MessageDispatcherSingleton</li><li></li></ul><p>EventSystem中维护了两个字段<code>allEvents</code>和<code>allInvokers</code><br>EventSystem在Invoke的时候会初始化这两个字段的内容<br>allEvents字段中 记为Event特性的所有类型，创建这些类型的实例，被标记了Event特性的类必须要继承IEvent接口。</p><p><a href="https://learn.microsoft.com/en-us/dotnet/api/system.reflection.memberinfo.getcustomattributes?view=net-9.0"><code>MemberInfo.GetCustomAttributes(Type, bool);</code></a>。</p><p>看一下AEvent中提供了一个Run接口，</p><p>InvokeHandler和MessageHandler的区别是什么</p><p>Event和Invoker的区别是什么</p><h1>MessageHandler 感觉是另外一套逻辑</h1><h1>EntitySystemSingleton</h1><h2 id="EntitySystem">EntitySystem</h2><p>EntitySystemSingleton里面维护了一个TypeSystems字段</p><p>AwakeSystem和Component的IAwake接口之间的关系.</p><h1></h1><p>ProcessInnerSender、MailBoxComponent、MessageDispatcherSingleton、MessageHandler</p><h1></h1><p>EntitySystemSingleton、IUpdateSystem</p><h1></h1><p>EventSystemSingleton、AEvent、AInvokeHandler</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>了不起的盖茨比</title>
      <link href="/posts/3941b47a/"/>
      <url>/posts/3941b47a/</url>
      
        <content type="html"><![CDATA[<p>“我们要明白，讲交情要在人活着的时候讲，人死就没有交情了，”他意味深长地说，“我自己的原则是，人死我就什么都不管了。”</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>帧同步与状态同步</title>
      <link href="/posts/50d23509/"/>
      <url>/posts/50d23509/</url>
      
        <content type="html"><![CDATA[<h1>ECS架构</h1><p>ECS架构看起来就是这样子的。先有个World，它是系统（译注，这里的系统指的是ECS中的S，不是一般意义上的系统，为了方便阅读，下文统称System）和实体(Entity)的集合。而实体就是一个ID，这个ID对应了组件(Component)的集合。组件用来存储游戏状态并且没有任何的行为(Behavior)。System有行为但是没有状态。</p><p>数据和逻辑分离, Component中只有数据, System中只有逻辑, 首先有一个World, 管理着所有的Entity是Component的容器. 还有一个EntityAdmin来管理所有的Entity</p><p>游戏中不同的角色,看待同一个Entity下同一个Component时的视角是不一样的,角色希望这个Component能做什么,那么这个Component就真的可以做什么, Component自己能做什么不是它自己决定的, 而是由其观察者决定的. 但是这些观察者应当只是从Component中读状态, 而不会修改Component中的状态, Component中的状态需要有专门对应的System进行修改.** 结果看来，根据主体视角区分所有Behavior，这样来描述一棵树的全部行为会更容易，这个道理同样也适用于游戏对象(game objects)。**</p><h1>同步相关</h1><p>服务器上会构建一个纯数据向的World,所有Player的操作都会上报给服务器,不过由于客户端和服务器端的通信存在延迟,因此客户端会现在本地进行模拟,同时将操作上报给服务器并等待结果返回,如果服务器返回回来的数据和客户端模拟的结果是一致的,那么就可以继续下去,否则客户端就要会回退状态 然后客户端进行时间膨胀.</p><h1>帧同步</h1><p>客户端向服务端发出指令后需要等待一段时间才能收到服务器那边的答复, 在客户端等的这段时间里, 不能让玩家干等着啊,</p><h1>参考资料</h1><ul><li><a href="https://www.bilibili.com/video/BV1RR4y1V7T2?spm_id_from=333.788.videopod.sections&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">烟雨的视频教程</a></li><li><a href="https://www.youtube.com/watch?v=W3aieHjyNvw&amp;t=2886s">守望先锋GDC讲座——架构设计和网络同步</a></li><li><a href="https://www.youtube.com/watch?v=W4oZq4tn57w">守望先锋GDC回放系统、全场最佳</a></li><li><a href="https://mp.weixin.qq.com/s/y8-Xb0az43pmjTlBXtNhdA">https://mp.weixin.qq.com/s/y8-Xb0az43pmjTlBXtNhdA</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ET中的异步</title>
      <link href="/posts/a8cdc42b/"/>
      <url>/posts/a8cdc42b/</url>
      
        <content type="html"><![CDATA[<p>本篇博客不止讨论ETTask如何实现, 更想探讨C#底层是如何支持异步实现的. 如果读者像笔者一样, 通过Unity接触到的C#语言, 可能对协程和异步概念的理解上有偏差, <strong>因为我们在Unity中使用的协程并不是操作系统层次下讨论的与线程、进程、协程中的协程概念</strong>, Unity的协程是Unity基于IEnumerator和Unity事件更新框架实现的伪协程、伪异步, Unity的协程限制非常多, 如果读者对Unity的协程、IEnumerator和<code>yield return</code>语法糖有疑惑, 欢迎参考<a href="https://soincredible.github.io/posts/133a9667/">IEnumerator与IEnumerable辨析</a>和<a href="https://soincredible.github.io/posts/83d7c4e7/">关于协程</a>这两篇博客, 希望能帮助你理解.</p><p>本篇博客首先会讨论C#中异步的实现思路, 然后会讨论ETTask的实现思路, UniTask和YooAsset中的异步也在本系列的讨论之中.<br><a href="https://soincredible.github.io/posts/323f6783/">对Task的概述</a></p><p>另外, 如果读者对C#中的异步不是很了解, 推荐先看一下下面五篇翻译的文章:<br><a href="https://soincredible.github.io/posts/72dba58e">Dissecting the async methods in C#</a><br><a href="https://soincredible.github.io/posts/40aca622/">Extending the async methods in C#</a><br><a href="">The performance characteristics of the async methods in C#</a><br><a href="">One user scenario to rule them all</a><br><a href="https://soincredible.github.io/posts/7331d0f1">A Deep Dive into C#'s Cancellation</a></p><p>在理解了上面博客中的内容后, 请思考这句话: Task是Task, Async是Async. 有Task并不一定意味着异步操作, 有Async也并不意味着一定有异步操作. 也就是说, 并不是只有在异步的场景下我们才可以使用Task, Task依然可以在同步场景下使用, 而<code>async</code>关键字也不能完全和异步绑定, 因为<code>async</code>关键字的作用只是告诉编译器对这个方法做一些特殊的处理: 每一个被标记为async的方法, Compiler在背后都会在其内部生成一个状态机.</p><h1>为什么ET框架要设计自己的异步返回类型? 和Task相比, ET自己设计的异步返回类型有哪些优势.</h1><blockquote><p>⚠️Task有冷热之分<br>冷任务（Cold Task）不会自动执行，必须显式调用 Start()、RunSynchronously() 或通过任务调度器触发。<br>热任务（Hot Task）无需手动启动，任务在被创建时已经处于 Running 状态。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> s = Func2();</span><br><span class="line">    s.Start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">Func2</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">42</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码运行会报错:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InvalidOperationException: Start may not be called on a promise-style task.</span><br></pre></td></tr></table></figure><p>因为s是一个热任务, 在返回该任务时已经隐式Start了, 不必调用Start接口. 或者就按照它的报错信息理解, 通过非直接调用Task构造方法拿到的Task实例都是<code>promise-style</code>的, 这种Task都不能调用Start.</p><p>ET作者猫大说: ETTask说自己是单线程的, 不支持多线程, 不像Task要支持多线程 ETTask做了什么?</p><p>请读者们想一想, 自己在用Task的时候, 从来没有调用过<code>TaskAwaiter</code>或者说<code>AsyncTaskMethodBuilder</code>的SetResult接口吧? 这是因为有TaskScheduler的存在, 在背后有一套自己的调度机制.<br>一个返回类型为Task的方法, 返回的是一个热任务, 该任务在被创建出来的那一刻就已经要给到<code>TaskScheduler</code>进行管理了<br>Task可能一层一层地嵌套上来, 在业务使用上, 开发者最底层一般<code>Task.Run()</code>或者<code>Task.Delay</code>这样的接口, 上层的这些Task, 该任务在被创建出来的那一刻就已经要给到<code>TaskScheduler</code>进行管理了, Task如何调度完全不受我们开发者的控制, 我们来回想一下我们是在哪一步将控制权转交给TaskScheduler的.</p><p>由于Task由TaskScheduler调度, 我们无法控制, 有可能涉及到多线程、出现上下文跨线程传递的开销, 因此ETTask的目标是自主控制调度、单线程作业, 你可以这么理解Task是C#的TaskScheduler, 来调用SetResult, 既然ETTask决定使用自己的异步机制, 那么就需要自己实现一个像TaskScheduler一样的调度机制, 在<code>ProcessInnerSender</code>组件中, 就有一套ETTask的调度机制, 有一个requestCallback</p><p>ET框架中一共实现了三种用于异步操作的返回类型:<code>ETVoid</code>、<code>ETTask</code>和<code>ETTask&lt;T&gt;</code></p><blockquote><p>💡ETTask既是Awaiter又是可以被await的TaskLike类型, 希望不要对各位刚接触异步或ET的读者造成困扰</p></blockquote><h1>为什么ETTask里面有一个<code>Coroutine</code>方法, 它的作用是什么?</h1><h1>SynchronizationContext</h1><p>SynchronizationContext和ExecutionContext有什么联系吗?<br>SynchronizationContext中存储了一些能够标识线程身份的信息，现在你有一个方法，你可以通过<code>SynchronizationContext.Send()</code>或者<code>SynchronizationContext.Post</code>方法把你要执行的这个方法丢给你想要让他执行的线程里面去，可以把他理解为是一种跨线程的方法调用的方式。<br>在一般单线程里，方法的调用都是直来直去，而在多线程里面，可以通过SynchronizationContext来实现线程间的函数调用。<br>要注意一下Send和Post的区别，如果使用Send的方式把一个方法丢给某一个上下文，如果这个方法恰好很耗时，那么就会卡住调用Send处之后代码的执行，而如果使用Post方法的话，则不会阻塞调用处之后代码的执行。根据需求选择用Send还是Post。示例如下👇👇</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Learn</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LearnSynchronizationContext</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// SynchronizationContext的理解和使用</span></span><br><span class="line">        <span class="keyword">private</span> SynchronizationContext _synchronizationContext;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Thread _thread; <span class="comment">// 新建一个线程 让上下文指向这个线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 不能把这个上下文设置成主线程 因为下面的测试代码中要在该上下文线程里面执行while循环</span></span><br><span class="line">            <span class="comment">// 会卡住主线程</span></span><br><span class="line">            <span class="comment">// _synchronizationContext = SynchronizationContext.Current;</span></span><br><span class="line">            <span class="keyword">this</span>._synchronizationContext = <span class="keyword">new</span> SynchronizationContext();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// _thread = new Thread(() =&gt;</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     this._synchronizationContext.Post(async (obj) =&gt;</span></span><br><span class="line">            <span class="comment">//     &#123;</span></span><br><span class="line">            <span class="comment">//         // 让这个方法执行的久一点</span></span><br><span class="line">            <span class="comment">//         // 向上下文中抛出一个方法   </span></span><br><span class="line">            <span class="comment">//         // 执行某个方法， 这个方法要比较耗时一点 才能看出Send和Post的差距</span></span><br><span class="line">            <span class="comment">//         await Task.Delay(1000);</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">//         var str = obj as STR;</span></span><br><span class="line">            <span class="comment">//         str.number = 20000;</span></span><br><span class="line">            <span class="comment">//         var threadId = Thread.CurrentThread.ManagedThreadId;</span></span><br><span class="line">            <span class="comment">//         Debug.Log(&quot;执行上下文Send/Post方法的线程ID是: &quot; + threadId);</span></span><br><span class="line">            <span class="comment">//     &#125;, str);</span></span><br><span class="line">            <span class="comment">//     </span></span><br><span class="line">            <span class="comment">//     Debug.Log(&quot;str字段中的number是&quot; + str.number);</span></span><br><span class="line">            <span class="comment">//     var threadId = Thread.CurrentThread.ManagedThreadId;</span></span><br><span class="line">            <span class="comment">//     Debug.Log(&quot;执行线程方法的线程ID是&quot; + threadId);</span></span><br><span class="line">            <span class="comment">//     Debug.Log(&quot;我是调用上下文Send/Post方法之后执行的语句&quot;);</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// --------------------------------------------------</span></span><br><span class="line">            <span class="comment">// Send</span></span><br><span class="line">            <span class="comment">// --------------------------------------------------</span></span><br><span class="line">            </span><br><span class="line">            _thread = <span class="keyword">new</span> Thread(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>._synchronizationContext.Send((obj) =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 让这个方法执行的久一点</span></span><br><span class="line">                    <span class="comment">// 向上下文中抛出一个方法   </span></span><br><span class="line">                    <span class="comment">// 执行某个方法， 这个方法要比较耗时一点 才能看出Send和Post的差距</span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="literal">null</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> threadId = Thread.CurrentThread.ManagedThreadId;</span><br><span class="line">                Debug.Log(<span class="string">&quot;执行线程方法的线程ID是&quot;</span> + threadId);</span><br><span class="line">                Debug.Log(<span class="string">&quot;我是调用上下文Send/Post方法之后执行的语句&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// --------------------------------------------------</span></span><br><span class="line">            <span class="comment">// Post</span></span><br><span class="line">            <span class="comment">// --------------------------------------------------</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// _thread = new Thread(() =&gt;</span></span><br><span class="line">            <span class="comment">// &#123;</span></span><br><span class="line">            <span class="comment">//     this._synchronizationContext.Post((obj) =&gt;</span></span><br><span class="line">            <span class="comment">//     &#123;</span></span><br><span class="line">            <span class="comment">//         // 让这个方法执行的久一点</span></span><br><span class="line">            <span class="comment">//         // 向上下文中抛出一个方法   </span></span><br><span class="line">            <span class="comment">//         // 执行某个方法， 这个方法要比较耗时一点 才能看出Send和Post的差距</span></span><br><span class="line">            <span class="comment">//         while (true)</span></span><br><span class="line">            <span class="comment">//         &#123;</span></span><br><span class="line">            <span class="comment">//             </span></span><br><span class="line">            <span class="comment">//         &#125;</span></span><br><span class="line">            <span class="comment">//     &#125;, str);</span></span><br><span class="line">            <span class="comment">//     </span></span><br><span class="line">            <span class="comment">//     Debug.Log(&quot;str字段中的number是&quot; + str.number);</span></span><br><span class="line">            <span class="comment">//     var threadId = Thread.CurrentThread.ManagedThreadId;</span></span><br><span class="line">            <span class="comment">//     Debug.Log(&quot;执行线程方法的线程ID是&quot; + threadId);</span></span><br><span class="line">            <span class="comment">//     Debug.Log(&quot;我是调用上下文Send/Post方法之后执行的语句&quot;);</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 开始执行这个线程 </span></span><br><span class="line">            <span class="keyword">this</span>._thread.Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>TaskCompletionSource是什么？</h1><p>按照笔者的理解，TaskCompletionSource可以将一个基于回调的异步操作转换成一个可以被await的异步操作。</p><h1>ETTask与UniTask对比</h1><h1>扩展</h1><ul><li><a href="https://soincredible.github.io/posts/ae5b3442">YooAsset资源异步加载机制</a></li></ul><h2 id="参考文档">参考文档</h2><ul><li><a href="https://blog.csdn.net/q__y__L/article/details/133905192">C#中的TaskCompletionSource</a></li><li><a href="https://devblogs.microsoft.com/premier-developer/dissecting-the-async-methods-in-c/">Dissecting the async methods in C#</a></li><li><a href="https://devblogs.microsoft.com/premier-developer/extending-the-async-methods-in-c/">Extending the async methods in C#</a></li><li><a href="https://devblogs.microsoft.com/premier-developer/">The performance characteristics of async methods in C#</a>the-performance-characteristics-of-async-methods/</li><li><a href="https://devblogs.microsoft.com/premier-developer//one-user-scenario-to-rule-them-all/">One user scenario to rule them all</a></li><li><a href="https://www.cnblogs.com/liqingwen/p/6218994.html?">async 的三大返回类型</a>tdsourcetag=s_pcqq_aiomsg</li><li><a href="https://www.cnblogs.com/wwkk/p/17814057.html">C# SynchronizationContext和ExecutionContext使用总结</a></li><li><a href="https://blog.csdn.net/shizuguilai/article/details/121236777">详解 SynchronizationContext</a></li><li><a href="https://www.cnblogs.com/peterYong/p/16328187.html">SynchronizationContext</a></li><li><a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2011/february/">Parallel Computing - It’s All About the SynchronizationContext</a>msdn-magazine-parallel-computing-it-s-all-about-the-synchronizationcontext</li><li><a href="https://www.cnblogs.com/eventhorizon/p/15316955.html#4991898">概述 .NET 6 ThreadPool 实现</a></li><li><a href="https://www.cnblogs.com/eventhorizon/p/15824541.html">.NET Task 揭秘（1）：什么是Task</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UniTask</title>
      <link href="/posts/9955c97f/"/>
      <url>/posts/9955c97f/</url>
      
        <content type="html"><![CDATA[<p>（摘抄自CLR Via C#）异步函数存在以下限制：</p><ul><li><p>不能将应用程序的Main方法转变成异步函数。另外构造器、属性访问器方法和事件访问器方法不能转变成异步函数</p></li><li><p>异步函数不能使用任何out或者ref参数</p></li><li><p>不能在catch，finally或unsafe块中使用await操作符（注意在try中可以使用await，笔者记得UniTask的文档中说过是可以在try catch中使用UniTask并被捕获的，是因为UniTask实现了自己的<code>AsyncMethodBuilderAttribute</code>吗？ 记得看一下）。</p></li><li><p>不能在await操作符之前获得一个支持线程所有权或递归的锁，并在await操作符之后释放它。这是因为await之前的代码由一个线程执行，之后的代码则可能由另一个线程执行。（使用了await就一定会涉及到多线程吗？那UniTask是怎么保证它使用await的时候是在同一个线程内？）在C#的lock语句中使用await，编译器会报错。如果显式调用Monitor的Enter和Exit方法，那么代码虽然可以编译，但Monitor.Exit会在运行时抛出一个SynchronizationLockException。</p></li><li><p>在查询表达式中，await操作符只能在初始from子句的第一个集合表达式中使用，或者在join子句的集合表达式中使用。</p></li><li><p>关于（使用了await就一定会涉及到多线程吗？那UniTask是怎么保证它使用await的时候是在同一个线程内？）GPT的回复：<br>是的，如果你使用的是Unity专用的异步API（如UnityWebRequest），await这些API的操作通常会在主线程上执行。<br>如果开发者显式创建Task或Thread并await这些任务，这些任务可能在非主线程上执行，但await后续的代码依然会回到主线程上执行。<br>因此，理解上可以简化为：只要不是开发者主动使用多线程机制，一般所有的await操作都会确保在主线程上安全地执行后续操作。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ET框架Demo启动流程梳理</title>
      <link href="/posts/9c5dbe31/"/>
      <url>/posts/9c5dbe31/</url>
      
        <content type="html"><![CDATA[<h1>ET客户端启动流程梳理</h1><p>启动时, 客户端只有一个Fiber</p><p>我们就从<code>Entry.cs</code>脚本中<code>StartAsync</code>方法的最后一行<code>FiberManager.Create</code>方法开始看吧，这个方法内部有如下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fiber.ThreadSynchronizationContext.Post(<span class="keyword">async</span> () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> EventSystem.Instance.Invoke&lt;FiberInit, ETTask&gt;((<span class="built_in">long</span>)sceneType, <span class="keyword">new</span> FiberInit() &#123;Fiber = fiber&#125;);</span><br><span class="line">        tcs.SetResult(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        Log.Error(<span class="string">$&quot;init fiber fail: <span class="subst">&#123;sceneType&#125;</span> <span class="subst">&#123;e&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这段代码会通过<code>EventSystem</code>触发参数为<code>FiberInit</code>、<code>SceneType为Main（因为调用FiberManager.Create方法的Entry传进来的SceneType就是Main)</code>的InvokeHandler的<code>Handler</code>方法，也就是<code>FiberInit_Main.cs</code>脚本中的的<code>Handle</code>方法，并且将<code>FiberInit</code>参数传递到了这个方法内。</p><p>因为我们这里关心的是客户端部分，所以我们看<code>await EventSystem.Instance.PublishAsync(root, new EntryEvent3());</code>这一行，也就是说它会通过<code>EventSystem</code>触发参数是<code>EntryEvent3</code>、<code>SceneType是Main</code>的Event的<code>Run</code>方法，也就是<code>EntryEvent3_InitClient</code>中的<code>Run</code>方法。</p><p>我们注意到，在该方法内先是给传进来的这个<code>Scene</code>类型的root字段添加了一些Component: <code>GlobalComponent</code>、<code>UIGlobalComponent</code>、<code>UIComponent</code>、<code>ResourcesLoaderComponent</code>、<code>PlayerComponent</code>、<code>CurrentScenesComponent</code>。然后根据加载的<code>GlobalConfig</code>中的<code>AppType</code>字段修改了传进来的<code>root</code>参数的<code>SceneType</code>字段，在<code>Demo</code>中该字段就是<code>Demo</code>。接着调用了<code>await EventSystem.Instance.PublishAsync(root, new AppStartInitFinish());</code>这一行，也就是通过<code>EventSystem</code>触发参数是<code>AppStartInitFinish</code>、<code>SceneType是Demo</code>的Event的<code>Run</code>方法，也就是<code>AppStartInitFinish_CreateLoginUI.cs</code>中的<code>Run</code>方法。</p><p>到了<code>AppStartInitFinish_CreateLoginUI.cs</code>这里就不需要说太多了，顺着代码调用路径点下去就能找到<code>UILoginEvent.cs</code>这个脚本中的<code>OnCreate</code>方法，在这个方法的<code>ui.AddComponent&lt;UILoginComponent&gt;();</code>这一行触发了<code>UILoginComponentSystem</code>中的<code>Awake</code>方法，在这个<code>Awake</code>方法中，给登录按钮注册了<code>OnLogin</code>方法。由<code>OnLogin</code>方法我们执行到了<code>LoginHelper.cs</code>脚本中的<code>Login</code>方法，该方法要求你传一个类型为<code>Scene</code>的字段，这个字段就是从我们最一开始说的<code>Entry.cs</code>脚本中<code>StartAsync</code>方法的最后一行<code>FiberManager.Create</code>方法创建的那个Fiber里面的<code>Root</code>字段。<strong><code>LoginHelper.cs</code>脚本中的<code>Login</code>方法中执行客户端向服务器发送登录请求，并等待服务器的回应继续执行之后的逻辑</strong>，也就是这一行<code>long playerId = await clientSenderComponent.LoginAsync(account, password);</code>，到此为止，客户端所有该做的事情就都做完了，现在客户端已经把请求发送给了服务端，等待着服务端的答复。</p><p>所有的Scene都是由Fiber创建出来的 在客户端有两个Scene或者叫Fiber在跑一个是Main 另一个是NetClient<br>在ClientSenderComponentSystem的LoginAsync方法中, 创建了一个新的Fiber, 这个Fiber创建后, <code>FiberInit_NetClient</code>被触发</p><p>若一个Entity上挂载了一个ProcessInnerSender组件, 那么它就具备了向其他Fiber发送消息的能力</p><h1>ET服务端启动流程梳理</h1><p>服务端的几个角色</p><ul><li>Router</li><li>Realm</li><li>Gate 最终处理玩家数据的就是Gate</li></ul><p>我们回到<code>FiberInit_Main.cs</code>这个脚本，这次我们要以<code>EntryEvent2</code>为线索来看一下服务端的启动流程，我们需要找到参数为<code>EntryEvent2</code>、<code>SecneType为Main</code>的<code>AEvent</code>，也就是<code>EntryEvent2_InitServer</code>。笔者直接把该类的Run方法贴在这里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">protected override async ETTask Run(Scene root, EntryEvent2 args)</span><br><span class="line">&#123;</span><br><span class="line">    switch (Options.Instance.AppType)</span><br><span class="line">    &#123;</span><br><span class="line">        case AppType.Server:</span><br><span class="line">        &#123;</span><br><span class="line">            // AppType 的默认值就是Server</span><br><span class="line">            int process = root.Fiber.Process;</span><br><span class="line">            StartProcessConfig startProcessConfig = StartProcessConfigCategory.Instance.Get(process);</span><br><span class="line">            if (startProcessConfig.Port != 0)</span><br><span class="line">            &#123;</span><br><span class="line">                await FiberManager.Instance.Create(SchedulerType.ThreadPool, ConstFiberId.NetInner, 0, SceneType.NetInner, &quot;NetInner&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 根据配置创建纤程</span><br><span class="line">            // 应该是会创建12个Scene 这些Scene中有重复的</span><br><span class="line">            var processScenes = StartSceneConfigCategory.Instance.GetByProcess(process);</span><br><span class="line">            foreach (StartSceneConfig startConfig in processScenes)</span><br><span class="line">            &#123;</span><br><span class="line">                await FiberManager.Instance.Create(SchedulerType.ThreadPool, startConfig.Id, startConfig.Zone, startConfig.Type, startConfig.Name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        case AppType.Watcher:</span><br><span class="line">        &#123;</span><br><span class="line">            root.AddComponent&lt;WatcherComponent&gt;();</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        case AppType.GameTool:</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Options.Instance.Console == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        root.AddComponent&lt;ConsoleComponent&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>ET服务端与客户端的通信流程</h1><p>我们已经知道了客户端和服务端各自的启动流程了，客户端和服务端是从哪里建立起的连接呢？<br>就看一下 客户端怎么知道往哪个IP地址发请求</p><p>现在让我们回到<code>LoginHelper.cs</code>脚本中的<code>Login</code>方法的<code>long playerId = await clientSenderComponent.LoginAsync(account, password);</code>这一行。接下来我们要看一下，客户端是怎么把消息发出去的，服务端是怎么接收到来自客户端的消息、处理客户端的消息然后返回给客户端，客户端收到服务器返回的消息是怎么处理的以及客户端处理完服务器返回的消息之后又做了什么。本小节涉及到部分ET框架层面的实现。</p><p>流程<br>客户端发起连接请求-&gt;Router服务器返回Realm地址-&gt;客户端根据Realm地址向服务器发送申请-&gt;</p><h1>EnterMap</h1><p>所有</p><h1>ET中的配置表</h1><ul><li>StartProcessConfig</li><li>StartMachineConfig</li><li>StartSceneConfig</li><li>StartZoneConfig</li></ul><hr><p>基本的继承结构</p><ul><li><p>ETTask<T></p></li><li><p>ETTask</p></li><li><p>Object</p><ul><li>SystemObject 逻辑体 这些SystemObject看起来都会自动生成一些脚本，是如何做到的？<ul><li>AwakeSystem<T> : ISystemType</li><li>AwakeSystem&lt;T,A&gt; : ISystemType</li><li>AwakeSystem&lt;T,A,B&gt; : ISystemType</li><li>AwakeSystem&lt;T,A,B,C&gt; : ISystemType</li><li>AwakeSystem&lt;T,A,B,C,D&gt; : ISystemType</li><li>DeserializeSystem<T> : ISystemType</li><li>DestroySystem<T> : ISystemType</li><li>GetComponentSysSystem<T> : ISystemType</li><li>LSRollbackSystem<T> : ISystemType</li><li>LSUpdateSystem<T> : ISystemType</li><li>LateUPdateSystem<T> : ISystemType</li><li>SerializeSystem<T> : ISystemType</li><li>UpdateSystem<T> : ISystemType<ul><li>继承自UpdateSystem的类一共有15个 看起来都是自动生成的</li></ul></li></ul></li><li>DisposeObject<ul><li>Entity 实体组件都继承这个类<ul><li>Component</li><li>Scene : IScene</li><li>ClientSenderComponent</li><li>MailBoxComponent 挂上这个组件表示该Entity是一个Actor,接收的消息将会队列处理</li><li>TimerComponent</li><li>MoveComponent : IAwake, IDestroy</li><li>GameObjectComponent : IAwake, IDestroy</li><li>NetComponent</li></ul></li><li>ASingleton<ul><li>Singleton<T><ul><li>CodeLoader</li><li>CodeTypes 维护着所有被标记了<code>EntitySystemAttribute</code>属性的类和方法？</li><li>EntitySystemSingleton 里面维护着所有继承自<code>ISystemType</code>接口的的类型,或者说，被标记为<code>EntitySystemAttribute</code>属性的类型</li><li>EventSystem 维护着allInvokers、allEvents</li><li>MessageDispatcher : ISingleAwake</li><li>MessageSessionDispatcher</li><li>TimeInfo</li></ul></li></ul></li></ul></li><li>ProtoObject : ISupportInitialize 继承该接口能够实现序列化Bson<ul><li>MessageObject : IMessage</li></ul></li><li>HandlerObject<ul><li>AAIHanddler</li><li>AInvokeHandler<A><ul><li>MailBoxType_OrderedMessageHandler</li><li>ATimer<ul><li>MoveTimer</li></ul></li></ul></li><li>AInvokeHandler&lt;A,T&gt;</li><li>MessageHandler&lt;E,Message&gt;<ul><li>C2M_PathfindingResultHandler</li></ul></li><li>MessageHandler&lt;E,Request,Response&gt;</li><li>MessageLocationHandler&lt;E,Message&gt;</li><li>MessageLocationHandler&lt;E,Request,Response&gt;</li><li>MessageSessionHandler<Message></li><li>MessageSessionHandler&lt;Request,Response&gt;</li></ul></li></ul></li><li><p>AEvent&lt;S,A&gt; : IEvent</p><ul><li>ChangePosition_SyncGameObjectPos</li></ul></li><li><p>AChanel</p><ul><li>KChannel</li><li>TChannel</li><li>WChannel</li></ul></li><li><p>AService</p><ul><li>KService</li><li>TService</li><li>WService</li></ul></li><li><p>IKcpTransport</p><ul><li>TcpTransport</li><li>UdpTransport</li></ul></li><li><p>Fiber</p></li><li><p>TypeSystems</p></li><li><p>OneTypeSystems 里面维护着所有继承自<code>SystemObject</code>基类的类型</p></li></ul><p>BaseAttribute (搞清楚这些Attribute的含义)</p><ul><li>AIHandlerAttribute</li><li>CodeAttribute</li><li>ConfigAttribute</li><li>ConsoleHandlerAttribute</li><li>EnableClassAttribute</li><li>EntitySystemAttribute</li><li>EntitySystemOfAttribute</li><li>EventAttribute</li><li>HttpHandlerAttribute</li><li>InvokeAttribute</li><li>LSEntitySystemAttribute</li><li>LSEntitySystemOfAttribute</li><li>MessageAttribute</li><li>MessageHandlerAttribute<ul><li>MessageLocationHandlerAttribute</li></ul></li><li>MessageSessionHandlerAttribute</li><li>NumericWatcherAttribute</li><li>ResponseTypeAttribute</li><li>UIEventAttribute</li></ul><p>EntitySystemSingleton</p><h1>interface</h1><ul><li>ISystemType<ul><li>IAwakeSystem</li><li>IAwakeSystem<A></li><li>IAwakeSystem&lt;A,B&gt;</li><li>IAwakeSystem&lt;A,B,C&gt;</li><li>IAwakeSystem&lt;A,B,C,D&gt;</li><li>IDeserializeSystem</li><li>IGetComponentSysSystem</li><li>ILSRollbackSystem</li><li>ILSUpdateSystem</li><li>ILateUpdateSystem</li><li>ISerializeSystem</li><li>IUpdateSystem</li></ul></li><li>IInvoke的继承类的数量和Invoker属性的标记数量是一样多的,所有的Invoker被EventSystem中的allInvokers管理，allInvoker根据Invoker属性加入字典中</li><li>IAwake</li><li>IAwake<A></li><li>IAwake&lt;A,B&gt;</li><li>IAwake&lt;A,B,C&gt;</li><li>IAwake&lt;A,B,C,D&gt;</li><li>IUpdate</li><li>ISerialize</li><li>IScene</li><li>IMessage</li><li>IRequest</li><li>IResponse</li><li>ISingletonAwake</li><li>ISingletonawake<A></li><li>ISingletonAwake&lt;A,B&gt;</li><li>ISingletonAwake&lt;A,B,C&gt;</li></ul><p>环境为ET8.1的Demo，梳理点击地板控制角色移动的全流程</p><p>客户端发送给服务端的消息体是<code>C2M_PathfindingResult</code></p><p>服务端返回给客户端的消息体是<code>C2M_PathfindingResult</code></p><p>负责发送消息体的类是ProcessInnerSender，但是将消息体传递给ProcessInnerSender之前，需要先用A2NetClient_Message类包装一下，通过ProcessInnerSender类，将要发送的消息体装载到MessageQueue中</p><p>ProcessInnerSenderSystem脚本中的Reply方法</p><p>MessageQueue负责各个纤程之间的通讯，在这个Demo中看起来并没有区分客户端和服务端，或者说客户端和服务端在两个不同的纤程中，模拟了服务端和客户端分离的效果。</p><p>MessageObject是纤程（客户端、服务端）之间通信的消息体，</p><p>SystemObject<br>AwakeSystem<br>UpdateSystem</p><h1>ICriticalNotifyCompletion接口的作用</h1><p>在Init的Update中执行着</p><p>FiberManager.Instance.Update()<br>- this.mainThreadScheduler.Update()<br>-  fiber.Update();<br>- this.EntitySystem.Update();<br>- iUpdateSystem.Run(component); -&gt; 继承IUpdateSystem接口的UpdateSystem中实现了该Run方法<br>- this.Update((T)o); -&gt; 再由继承了UpdateSystem的对象实现Update方法</p><p>PathfindComponnetSystem</p><p>寻路算法的实现是在MoveHelper中的FindPathMoveToAsync中，该方法由C2M_PathfindingResultHandler中的Run方法调用，这些继承自MessageLocationHandler的Run方法统一由MessageLocationHandler的Handle方法调用，Handle方法又由MessageDispatcher中的Handle调用</p><p>驱动客户端Unit移动的逻辑看起来在<code>MoveComponentSystem</code>类中的<code>MoveForward</code>方法中,该方法由MoveTimer类中的Run方法调用</p><p>真正在前端做表现的是通过<code>ChangePosition_SyncGameObjectPos</code>类</p><h2 id="FiberManager">FiberManager</h2><p>这是ET中一个比较重要的模块,</p><p>在<code>CodeTypes</code>脚本的Awake方法中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public void Awake(Assembly[] assemblies)</span><br><span class="line">&#123;</span><br><span class="line">    Dictionary&lt;string, Type&gt; addTypes = AssemblyHelper.GetAssemblyTypes(assemblies);</span><br><span class="line">    foreach ((string fullName, Type type) in addTypes)</span><br><span class="line">    &#123;</span><br><span class="line">        this.allTypes[fullName] = type;</span><br><span class="line">        </span><br><span class="line">        if (type.IsAbstract)</span><br><span class="line">        &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        // 记录所有的有BaseAttribute标记的的类型</span><br><span class="line">        object[] objects = type.GetCustomAttributes(typeof(BaseAttribute), true);</span><br><span class="line"></span><br><span class="line">        foreach (object o in objects)</span><br><span class="line">        &#123;</span><br><span class="line">            this.types.Add(o.GetType(), type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CodeLoader中的Start方法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public void Start()</span><br><span class="line">&#123;</span><br><span class="line">    if (!Define.IsEditor)</span><br><span class="line">    &#123;</span><br><span class="line">        byte[] modelAssBytes = this.dlls[&quot;Unity.Model.dll&quot;].bytes;</span><br><span class="line">        byte[] modelPdbBytes = this.dlls[&quot;Unity.Model.pdb&quot;].bytes;</span><br><span class="line">        byte[] modelViewAssBytes = this.dlls[&quot;Unity.ModelView.dll&quot;].bytes;</span><br><span class="line">        byte[] modelViewPdbBytes = this.dlls[&quot;Unity.ModelView.pdb&quot;].bytes;</span><br><span class="line">        // 如果需要测试，可替换成下面注释的代码直接加载Assets/Bundles/Code/Unity.Model.dll.bytes，但真正打包时必须使用上面的代码</span><br><span class="line">        //modelAssBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.Model.dll.bytes&quot;));</span><br><span class="line">        //modelPdbBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.Model.pdb.bytes&quot;));</span><br><span class="line">        //modelViewAssBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.ModelView.dll.bytes&quot;));</span><br><span class="line">        //modelViewPdbBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.ModelView.pdb.bytes&quot;));</span><br><span class="line"></span><br><span class="line">        if (Define.EnableIL2CPP)</span><br><span class="line">        &#123;</span><br><span class="line">            foreach (var kv in this.aotDlls)</span><br><span class="line">            &#123;</span><br><span class="line">                TextAsset textAsset = kv.Value;</span><br><span class="line">                RuntimeApi.LoadMetadataForAOTAssembly(textAsset.bytes, HomologousImageMode.SuperSet);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.modelAssembly = Assembly.Load(modelAssBytes, modelPdbBytes);</span><br><span class="line">        this.modelViewAssembly = Assembly.Load(modelViewAssBytes, modelViewPdbBytes);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        if (this.enableDll)</span><br><span class="line">        &#123;</span><br><span class="line">            byte[] modelAssBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.Model.dll.bytes&quot;));</span><br><span class="line">            byte[] modelPdbBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.Model.pdb.bytes&quot;));</span><br><span class="line">            byte[] modelViewAssBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.ModelView.dll.bytes&quot;));</span><br><span class="line">            byte[] modelViewPdbBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.ModelView.pdb.bytes&quot;));</span><br><span class="line">            this.modelAssembly = Assembly.Load(modelAssBytes, modelPdbBytes);</span><br><span class="line">            this.modelViewAssembly = Assembly.Load(modelViewAssBytes, modelViewPdbBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();</span><br><span class="line">            foreach (Assembly ass in assemblies)</span><br><span class="line">            &#123;</span><br><span class="line">                string name = ass.GetName().Name;</span><br><span class="line">                if (name == &quot;Unity.Model&quot;)</span><br><span class="line">                &#123;</span><br><span class="line">                    this.modelAssembly = ass;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (name == &quot;Unity.ModelView&quot;)</span><br><span class="line">                &#123;</span><br><span class="line">                    this.modelViewAssembly = ass;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (this.modelAssembly != null &amp;&amp; this.modelViewAssembly != null)</span><br><span class="line">                &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    (Assembly hotfixAssembly, Assembly hotfixViewAssembly) = this.LoadHotfix();</span><br><span class="line"></span><br><span class="line">    World.Instance.AddSingleton&lt;CodeTypes, Assembly[]&gt;(new[]</span><br><span class="line">    &#123;</span><br><span class="line">        typeof (World).Assembly, typeof (Init).Assembly, this.modelAssembly, this.modelViewAssembly, hotfixAssembly,</span><br><span class="line">        hotfixViewAssembly</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    IStaticMethod start = new StaticMethod(this.modelAssembly, &quot;ET.Entry&quot;, &quot;Start&quot;);</span><br><span class="line">    start.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你是Editor模式下的话,你应该会走到<code>this.enableDll</code>为true的分支<br>通过执行CodeLoader中的Start方法,被遍历到的程序集有<code>World</code>类所在的程序集<code>Unity.Core</code>、<code>Init</code>类所在的程序集<code>Unity.Loader</code>、modelAssemBly<code>Unity.Model</code>,modelViewAssembly<code>Unity.ModelView</code>,hotfixAssembly<code>Unity.Hotfix</code>,hotfixViewAssembly<code>Unity.HotfixView</code></p><p>代入一下就是,通过AddSingleton方法,创建了CodeTypes实例,并将上面提到的程序集作为参数传入CodeType的Awake方法中.</p><p>然后在modelAssembly<code>Unity.Model</code>中,找到<code>ET.Entry</code>类中的Start方法,并执行该方法,然后在该方法中,执行了<code>CodeTypes.Instance.CreateCode</code>方法,该方法会在上面收集到的程序集中,找到所有被标记了CodeAttribute属性的类,并将这些类实例化出来,这些类分别是</p><ul><li>EntitySystemSingleton</li><li>MessageDispatcher MessagePatcher中的Awake方法中实例化了所有被标记为MessageHandlerAttribute属性的类</li><li>EventSystem</li><li>HttpDispatcher</li><li>LSEntitySystemSingleton</li><li>AIDispatcherComponent</li><li>ConsoleDispatcher</li><li>MessageSessionDispatcher</li><li>NumericWatcherComponent</li><li>UIEventComponent<br>也就是说,上面这十个类,通过执行ET的Entry方法之后就已经被创建出来了.</li></ul><h1>项目组织</h1><p>基本上重要的脚本都是在Unity工程下面,在ET.sln视角下,看到的Unity外面几个目录下有很多代码,这些代码都是类似超链接的东西连接到Unity工程中的.</p><p>ET中的HotFix、HotFixView、Model、ModelView四个程序集都是以dll的方式加载到内存中运行的，因此如果你修改了这四个程序集里面的代码，你可能需要重新遍历一下才能把更新的内容放进程序集中。</p><h1></h1><h1>参考资料</h1><p><a href="https://www.bilibili.com/video/BV1rhYyeKExP/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">ET8框架的讲解视频</a><br><a href="https://blog.csdn.net/Q540670228/article/details/123385080?spm=1001.2014.3001.5502">一篇将服务器架构历史的博客</a><br><a href="https://et-framework.cn/d/2067-fiber">一篇介绍C#和ET异步方法的帖子</a></p>]]></content>
      
      
      <categories>
          
          <category> ET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YooAsset</title>
      <link href="/posts/ae5b3442/"/>
      <url>/posts/ae5b3442/</url>
      
        <content type="html"><![CDATA[<h1>资源信息热更新流程</h1><ul><li>游戏启动</li><li>获取当前资源的Manifest信息</li><li>获取远端最新的Manifest的信息</li><li>比较当前和远端Manifest的信息，如果可以更新，则需要更新到最新的Manifest</li><li>创建ResourcePackage，根据最新的Manifest创建运行时的AssetSystem</li></ul><p>分帧加载是什么意思?</p><p>Persistent下的<br>BuildinRoot-&gt; streamingAssets/YooAssetSettingsData.Setting.DefaultYooFolderName<br>BuildinPackageRoot<br>SandboxRoot-&gt;UnityEngine.Application.persistentDataPath, YooAssetSettingsData.Setting.DefaultYooFolderName<br>SandboxPackageRoot</p><p>ManifestFileName PackageManifest<br>DefaultYooFolderName yoo</p><h1>启动流程</h1><p>启动游戏<br>获得游戏的版本号<br>初始化YooAsset<br>有一个内置路径和一个沙盒路径<br>内置路径是包含在底包中的, 沙盒路径是persistent路径,要么是沙盒路径中已经有一份某个Verrsion的Manifest文件了, 要么就是第一次启动游戏, persistent路径下是干净的, 从buildIn也就是streamingasset下面把跟随底包的Version的Manifest文件写入到沙盒路径下. 到此YooAsset持有了一份正确的Manifeset了.</p><p>然后再是下面的流程👇</p><ol><li>要请求当前这个游戏版本在CDN上最新的资源包的<strong>版本</strong></li><li>拿到远端最新的资源版本之后, 向CDN请求这个版本对应的<strong>资源清单Manifest</strong><ol><li>如果本地的资源清单不是空的, 并且清单的版本和1中拿到的版本一样, 就不用再向远端请求清单Manifest了</li><li>否则,<ol><li>先尝试从本地加载1中拿到的资源包版本, 看看是不是远端CDN把最新的那个资源版本给删除了, 然后本地其实已经下载过CDN上最新的那个版本 这时候也不需要去远端请求 即先尝试从本地加载<ol><li>本地加载要经过一些校验 MD5之类的, 稍后整理</li></ol></li><li>如果本地都没有这个版本的资源 那么这次真的要去远端下载了 至此Manifest检查与加载流程完毕</li></ol></li></ol></li><li>更新被打上特殊标记的资源</li></ol><p>问题: 在启动的时候, 只是从底包中也就是streaming目录下把Manifest拷贝过来了啊, 底包中带的那些bundle有没有拷贝过来呢? 结论是并没有拷贝过来,</p><p>底包中的资源也是可以热更的, 但是热更的底包资源是放在persistent沙盒目录下的, 首先是YooAsset拿到的最新的manifest, 在最新的manifest中 如果底包中的资源发生了变化, 那么这个资源的bundle名以为有hash值, hash值是会变的, 所以在底包中就找不到这个资源. 所以就会触发热更逻辑.</p><p>1、Unity中，StreamingAssetsPath称为buildin路径，persistentPath称为Sandbox路径，可以吗？</p><p>结论：可以，这是一种常见的理解方式。</p><p>详细解释</p><p>StreamingAssetsPath（Application.streamingAssetsPath）</p><p>它指向包内的 StreamingAssets 目录， 打包后内容只读 ，无法运行时修改，内容随包发布。<br>开发中常常被称为 “内置资源路径” 或 “包内资源路径”，英文有时叫 builtin path 或 package path。<br>buildin 或 builtin 本身不是Unity官方术语，但在行业里大量用来指只读/包内/原生自带资源。<br>persistentPath（Application.persistentDataPath）</p><p>指向设备上的可读可写目录，运行时可以写入，常用于下载、存档等。<br>这个目录通常是应用“沙盒”中的一个子目录，**沙盒（sandbox）**就是指每个应用私有且受系统保护的存储空间。<br>因此，很多开发者将其叫做 Sandbox路径 或 沙盒路径（即用户数据/可持久化路径）。<br>Sandbox 目录是操作系统层面对应用私有存储的通用叫法。<br>所以你这样对应：</p><p>StreamingAssetsPath = Buildin Path / 包内路径 / 内置资源路径<br>PersistentPath = Sandbox Path / 沙盒路径 / 可读写路径<br>是完全OK的！</p><p>2、Buildin 和 Sandbox 是什么开发术语？</p><p>Buildin / Built-in</p><p>Built-in（或 buildin，实际拼写应为 built-in，意思是「内建的」）<br>泛指应用程序自带的、不需要动态下载的资源或功能，通常只读。<br>在Unity，往往指 editor自带的shader、资源，也被开发者泛指 StreamingAssets 和 Resources 这些「随包就有」的资源目录。<br>不是Unity的官方API术语，但业界用得多。<br>Sandbox</p><p>Sandbox（沙盒）<br>在移动端和桌面操作系统（iOS/Android/Windows/macOS）开发中，都有“沙盒”概念：<br>每个应用有自己的私有目录，不能随意访问其他应用的数据，受OS保护。<br>Unity的 Application.persistentDataPath 目录 就是在各平台沙盒中的一个可读写子目录。<br>沙盒路径就是这种应用专属、可读写的数据目录。<br>总结</p><p>你这样叫法可以，业界很常见！<br>官方文档可能不用这两个单词，但实际开发交流时常用：<br>Buildin Path，指内置只读资源。<br>Sandbox Path，指应用私有可读写目录。<br>参考链接</p><p>Unity Application.streamingAssetsPath<br>Unity Application.persistentDataPath<br>如果你在文档、配置、代码注释里这样使用，一般团队成员都能理解。如果要求更官方，可用“StreamingAssets Path”、“Persistent Data Path”的全称表述。</p><p>有一些资源是被打入底包的, 同时这些资源也会被热更, 在游戏启动流程中, YooAsset首先跟远端请求最新的资源版本, 有两种可能, 1本地的资源就是最新的, 这里指的是Buildin的资源, 2本地资源不是最新的, 那么就会先去CDN上下载最新的BuildIn资源, 把这些资源下载到Persistent沙盒目录下, 在加载资源的时候, YooAsset会先判断这个资源在Persistent沙盒路径下有没有, 然后再去BuildInstreamingPath下去找.<br>根据BudleInfo的LoadMode字段</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> BundleInfo <span class="title">CreateBundleInfo</span>(<span class="params">PackageBundle packageBundle</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (packageBundle == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Should never get here !&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 查询分发资源</span></span><br><span class="line">   <span class="keyword">if</span> (IsDeliveryPackageBundle(packageBundle))</span><br><span class="line">   &#123;</span><br><span class="line">      DeliveryFileInfo deliveryFileInfo = GetDeiveryFileInfo(packageBundle);</span><br><span class="line">      BundleInfo bundleInfo = <span class="keyword">new</span> BundleInfo(packageBundle, BundleInfo.ELoadMode.LoadFromDelivery, deliveryFileInfo.DeliveryFilePath, deliveryFileInfo.DeliveryFileOffset);</span><br><span class="line">      <span class="keyword">return</span> bundleInfo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 查询沙盒资源</span></span><br><span class="line">   <span class="keyword">if</span> (IsCachedPackageBundle(packageBundle))</span><br><span class="line">   &#123;</span><br><span class="line">      BundleInfo bundleInfo = <span class="keyword">new</span> BundleInfo(packageBundle, BundleInfo.ELoadMode.LoadFromCache);</span><br><span class="line">      <span class="keyword">return</span> bundleInfo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 查询APP资源</span></span><br><span class="line">   <span class="keyword">if</span> (IsBuildinPackageBundle(packageBundle))</span><br><span class="line">   &#123;</span><br><span class="line">      BundleInfo bundleInfo = <span class="keyword">new</span> BundleInfo(packageBundle, BundleInfo.ELoadMode.LoadFromStreaming);</span><br><span class="line">      <span class="keyword">return</span> bundleInfo;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 从服务端下载</span></span><br><span class="line">   <span class="keyword">return</span> ConvertToDownloadInfo(packageBundle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>复述一下YooAsset构建bundle的过程</h1><h1>YooAssetCollector里面的Group的含义是什么? 已经有collector了, 已经可以实现针对不同的路径使用不同的打bundle策略了, 我能想到的Group的作用是在不同的平台上使用不同的Group</h1><h1>下面两者的区别 同步和异步的接口都是一样的, 只是传入的参数不一样 怎么做到的</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 同步加载资源对象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TObject&quot;&gt;</span>资源类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;location&quot;&gt;</span>资源的定位地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AssetHandle <span class="title">LoadAssetSync</span>&lt;<span class="title">TObject</span>&gt;(<span class="params"><span class="built_in">string</span> location</span>) <span class="keyword">where</span> TObject : UnityEngine.Object</span></span><br><span class="line">&#123;</span><br><span class="line">   DebugCheckInitialize();</span><br><span class="line">   AssetInfo assetInfo = ConvertLocationToAssetInfo(location, <span class="keyword">typeof</span>(TObject));</span><br><span class="line">   <span class="keyword">return</span> LoadAssetInternal(assetInfo, <span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 异步加载资源对象</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;TObject&quot;&gt;</span>资源类型<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;location&quot;&gt;</span>资源的定位地址<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;priority&quot;&gt;</span>加载的优先级<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AssetHandle <span class="title">LoadAssetAsync</span>&lt;<span class="title">TObject</span>&gt;(<span class="params"><span class="built_in">string</span> location, <span class="built_in">uint</span> priority = <span class="number">0</span></span>) <span class="keyword">where</span> TObject : UnityEngine.Object</span></span><br><span class="line">&#123;</span><br><span class="line">   DebugCheckInitialize();</span><br><span class="line">   AssetInfo assetInfo = ConvertLocationToAssetInfo(location, <span class="keyword">typeof</span>(TObject));</span><br><span class="line">   <span class="keyword">return</span> LoadAssetInternal(assetInfo, <span class="literal">false</span>, priority);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>YooAsset的静态打包方式可以用来预放置一些资源, 虽然这些资源在当前版本没有被引用, 但是有可能在未来会被引用到, 之后新版本上线了之后, 这个资源可以不用被热更了, 省去了热更的开销</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="/posts/a4ce31d2/"/>
      <url>/posts/a4ce31d2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法系列</title>
      <link href="/posts/e1a82e1/"/>
      <url>/posts/e1a82e1/</url>
      
        <content type="html"><![CDATA[<p>这是数据结构与算法系列的索引页，笔者写下这段话的时间是2025.3.14，此时距离笔者毕业已经过去快两年的时间，诚然笔者一直有个心结，想要补救学生时不曾牢固的基础，便有了此系列诞生。本系列会使用C++从无到有实现树、图、动规、回溯还有游戏中常用的A*、RVO等算法，目的有二，其一上面已经说了，其二也是希望熟悉C++的使用，多一门编程手艺傍身。系列对应的代码都会上传到<a href="https://github.com/SoIncredible/programming-practice">GitHub仓库</a>中</p><p>之前学算法的时候很痛苦的原因: 使用自己并不熟悉的C++语言, 在语法和库接口上消磨了太多了精力, 而不是专注于问题本身</p><h1>目录</h1><ul><li><a href="https://soincredible.github.io/posts/62b3cca9/">树</a></li><li><a href="https://soincredible.github.io/posts/c830c38b/">图</a></li><li><a href="https://soincredible.github.io/posts/735e5788/">排序算法</a></li><li><a href="https://soincredible.github.io/postsa80d0031/">动态规划</a></li><li><a href="https://soincredible.github.io/posts/376d0826/">回溯算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Wesnoth小地图</title>
      <link href="/posts/9af50f63/"/>
      <url>/posts/9af50f63/</url>
      
        <content type="html"><![CDATA[<p>Wesnoth小地图的设计基于这篇博客https://www.redblobgames.com/grids/hexagons/#coordinates-cube</p>]]></content>
      
      
      <categories>
          
          <category> Wesnoth </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>当我谈跑步时，我谈些什么</title>
      <link href="/posts/4b5f1bf6/"/>
      <url>/posts/4b5f1bf6/</url>
      
        <content type="html"><![CDATA[<p>现在是坚忍地积累奔跑距离的时期, 所以眼下还不必介意成绩如何, 只消默默地花时间积累距离. 想跑快点就适当地加速, 不过就算加速也为时甚短, 只想将身体感受到的愉悦尽量维持到第二天. 其要领与写长篇小说一般无二. 在似乎可以写下去的地方, 果断地停下笔来, 这样第二天重新着手时便易于进入状态. 欧内斯特·海明威好像说过类似的话: 持之以恒, 不乱节奏. 这对长期作业实在至为重要. 一旦节奏得以设定, 其余问题便可以迎刃而解. 然而要让惯性的轮子以一定的速度准确无误地旋转起来, 对待持之以恒, 何等小心翼翼也不为过.</p><p>一个到了我这样年龄的人,还要写下这种事情,颇有些愚蠢可笑.不过为了明确事实,我得言之在线:说起来,我是那种喜爱读书的性情,表达得准确一点,是那种不太以独处为苦的性情.每天有一两个小时谁都不交谈,独自一人默默地跑步也罢,四五个小时伏案独坐,默默地写文章也罢,我都不觉得难熬,也不感到无聊.这种倾向从年轻时起便一直存在于我身上.比起同什么人一起做什么事,我更喜欢一个人默不作声地读书,或是全神贯注地听音乐.只需要一个人做的事情,我可以想出许多许多来.</p><p>虽然如此,自从年纪轻轻便结了婚(我结婚时二十二岁), 我渐渐习惯了和别人共同生活. 大学毕业后经营一家饮食店, 认识到了与他人相处的重要性. 人无法独自生存下去, 这本是理所当然, 我却是脚踏实地学到的. 尽管有点走样, 我也渐渐掌握了类似社会性的东西. 回想起来, 从二十岁到三十岁的十年当中, 我的世界观发生了不小的变化, 在做人方面也有了一些长进, 从四处碰壁之中学会了生存的诀窍. 倘若没有这算得上艰难的十年的生活体验, 恐怕我就不会写什么小说了, 即使想写也写不出来. 但话说回来, 人的本性不会极端地发生变化. 希望一人独处的念头始终不变地存于心中, 所以每天跑一个小时, 来确保只属于自己的沉默的时间, 对我的精神健康来说成了具有重要意义的功课. 至少在跑步时不需要和任何人交谈, 不必听任何人说话, 只要眺望周围的风光、凝视自己就行. 这是任何东西都无法替代的宝贵时刻.</p><p>每每有人问我: 跑步时, 你思考什么?提这种问题的人, 大多没有长时间跑步的经历. 遇到这样的提问, 我便陷入深深的思考: 我在跑步时, 究竟思量了些什么? 老实说, 在跑步时思考过什么, 我压根儿想不起来.</p><p>在寒冷的日子, 我肯呢个思考一下寒冷; 在炎热的日子,则思考一下炎热; 悲哀的时候,思考一下悲哀;快乐的时候, 则思考一下快乐. 如同前面写过的, 还会毫无由来地浮想往事. 有时候, 只是偶尔有之,也有关于小说的小小灵感浮上脑际. 尽管如此, 我几乎从不曾思考正儿八经的事情.</p><p>我跑步, 只是跑着. 原则上是在空白中跑步. 也许是为了获得空白而跑步. 即便在这样的空白当中,也有片时片刻的思绪潜入. 这是理所当然的,人的心灵中不可能存在真正的空白. 人类的精神状态还没有强大到足以坐拥真空的程度,即使有,也不是一以贯之的.话虽如此,潜入奔跑的我精神内部的这些思绪或者说念头,也不过是空白的从属物. 它们不是内容,只是以空白为基轴渐起渐长的思绪.</p>]]></content>
      
      
      <categories>
          
          <category> 读万卷书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>人生十年，不可辜负的20岁到30岁</title>
      <link href="/posts/7fa93228/"/>
      <url>/posts/7fa93228/</url>
      
        <content type="html"><![CDATA[<h1>人生十年 不可辜负的20岁到30岁</h1><h2 id="身份资本">身份资本</h2><p>身份资本是我们个人资本的积累。 他体现着我们是谁，以及我峨嵋你的人生是如何度过的。它包括我们对自己的投资，以及因我们擅长或长时间从事而逐渐演变为自己身份一部分的事情。若想真正寻得“我是谁”这个问题的答案，仅仅像海伦一样等待自己“灵光乍现”是不行的。身份资本才能让我们一点一点地，建立真实的自己。</p><p>一些身份资本，譬如学位证书、工作经历、考试成绩或社团活动，可以写在简历里；但另一些身份资本，则更加私人化，包括我们是如何向外界展现自己的，我们是如何解决问题的，我们从哪里来，以及我们的爱好或其他人生经理。这些加总在一起，才构成了我们独一无二的身份资本。它就像是成人世界里的虚拟货币。我们可以用它来购买自己想要的机会、工作和其他东西。</p><p>20多岁的年轻人，譬如海伦，或许会以为自己现在正在经理身份认同危机是理所当然的，而积累身份资本是以后的事。但事实上，经历身份认同危机和积累身份资本，可以而且应该同时进行，就像埃里克森做的那样。研究人员在研究人们如何解决身份认同危机时发现，那些只是积累身份资本，而没有经历身份认同危机的人（只工作而没有自我探索的人），他们的人生会显得过于死板和传统。相反，若只是经历身份认同危机，而疏于积累身份资本，也有问题。随着身份认同危机的概念在美国逐渐流行，埃里克森曾亲自提醒大家，不要花太多时间在“无谓的迷茫”上。他对于太多年轻人处于“脱离社会的危险”表示担忧。</p><p>事实上，那些既能花时间探索自我，又敢于做出承诺的20多岁的年轻人，将会变得更加强大。他们不仅会变得更有自尊，也更懂得脚踏实地，坚持不懈。而且，他们的自我感将变得更加清晰，人生也更幸福；他们拥有更强的压力管理能力以及理性分析能力，并且能不畏世俗活出真正的自我。这些都是海伦想要的。</p><hr><p>当你从学校迈入社会之后，很多规则都已不再相同。对于某些20多岁的年轻人而言，他们的人生或许建立在常春藤院校的学历，或加入全美大学优等生荣誉协会之上。但更多时候，那些真正决定你未来职业道路的，并不是你在学校学的专业和平均学分绩点，而是两三个能让别人对你产生兴趣的身份资本。</p><hr><blockquote><p>何为就业不足？<br>1.没有工作的状态<br>2.有工作，但是不是积累身份资本的工作<br>何为身份资本？<br>1.学历、成绩<br>2.独特的经历<br>3.某种技能</p></blockquote><p>我们在工作中越晚站稳脚跟，我们越有可能变得像一位记者所描述的那样，被长时间的漂泊不定所“异化和伤害”。研究告诉我们，仅仅9个月的就业不足，就可以让20多岁的年轻人比那些充分就业的同龄人更加缺乏动机，更加抑郁，甚至和那些失业的同龄人相比，也是如此。但是，在你认定“失业”比“就业不足”更好之前，请考虑这一点：与20多岁失业相关联的，是中年时期的需求问题和精神抑郁，即使有了固定工作，情况也没有改变。</p><p>这样的例子，我见过不少。那些本身聪明机敏的年轻人，为了避免踏入“真实世界”而不去从事“真正的工作”，因此在就业不足的状态里年复一年地混着日志。慢慢地，他们就被这样的状态磨去了本有的激情核动力，而不再去寻找那些或许能让他们真正快乐的工作。后来，这样的工作甚至也变得越来越难找。有一点，被经济学家和社会学家所一致认同：20多岁时的工作经历将会为我们职业生涯的成功带来超乎预料的影响。“在你20多岁时，你一生能赚多少钱就基本已经确定了”2015年《华盛顿邮报》一篇头条文章如此总结。这篇文章披露了一项针对500万名工作者长达40年的研究。研究结果显示，他们最高薪资当然不是在他们20多岁时赚得的；但他们20多岁时的工作经历，将很大程度上决定他们未来的赚钱能力。为何如此？因为最开始那十年的工作经历，通常会为我们塑造出陡峭的学习曲线，而这样的学习曲线会随着我们逐渐成熟，而再后来形成陡峭的赚钱曲线。</p><p>这意味着，或许20多岁正是你为工作而背井离乡的时候，20多岁正是你为申请读研究生而焦头烂额的时候，20多岁正是你为梦想而加入那家创业公司的时候。即使你的第一份工作收入不高，但你的雇主或导师也许会为你投资，让你去积累更多的身份资本，而这些将在未来为你带来更大的回报。你要知道，在你30岁之后，家庭和房屋贷款将会成为你不得不考虑的因素。到了那时，再想追求更高的学位或进行大的人生变动，困难指数将攀升。你的收入增长也会开始减慢。20多岁的年轻人，或许觉得前面还有好几十年的时间在等着自己，钱可以慢慢赚，不着急。但事实是，平均而言，收入的高峰期及稳定期在40多岁。所谓好几十年的时间，其实并没有想象中那么多。</p><p>那些觉得自己有大把时光可以浪费，而选择不就业或者就业不足的年轻人，将会错过重要的学习积累期。就算后面步入正轨，顺利开始自己的职业生涯，他们也很可能会永远无法弥补自己和其他人的差距。他们在步入三四十岁后，或许有一天会突然发现，自己20多岁时随意选择的工作最终让自己付出了惨痛的代价。而这一切早已无法重新来过。与此同时，人到中间，酗酒问题和精神抑郁则开始上演。</p><p>在如今的经济环境下，基本上所有人在30岁之前都经历过就业不足。那么20多岁的年轻人该怎么办？幸运的是，不是所有的就业不足都那么糟糕。对此，我一直以来的建议都是选择身份资本含量最高的工作。</p><h2 id="弱连接">弱连接</h2><p>根据格兰诺维特所言,并非所有的关系或连接都是一样的. 有一些强,有一些弱,而关系的强弱程度会随着时间和经历的积累而增长. 小时候,强连接是我们最好的朋友和家人. 20多岁时,强连接则是我们的城市部落.</p><p>而弱连接,是那些我们曾经遇见的(或不知道怎么就认识的), 但目前并不怎么了解的人. 他们是我们几乎没怎么说过话的同事, 他们是我们见面时仅仅打声招呼的邻居, 他们是我们刚认识的一直想约却没约的朋友, 他们是我们好几年都不曾联系的老友, 他们是我们以前的老板或者老师. 比如, 对我来说,我的弱连接是那位曾经借我图书提案的同事,也是那位不小心寄来一大盒书的编辑. 它包括我们联系过的所有人, 以及这些人联系过的所有人. 它可以使所有人, 不过要除去目前的强连接.</p><p>为什么有的人会成为我们的强连接?100多年的社会学研究以及数千年以来的西方思想告诉我们, “物以类聚,人以群分”, 或者说是因为所谓的“相似性原则”. 从学校到公司,我们更容易和与自己最为相似的人形成紧密关系.因此, 那些成为我们强连接的人, 比如城市部落,通常会是典型的排外的同性质小群体.</p><p>而谈到这里,我们看看另一位社会学家罗斯·科泽所说的“强连接的弱点”,或者这个排外的同质性小群体对我们的限制. 虽然在这个小群体里, 我们会感觉安全和熟悉,但除去这些, 他们往往也给不了我们更多. 正因为小群体的成员和我们太过相似(甚至面临着相似的困境), 所以才无法给予实质性的帮助. 关于工作和爱情,他们知道的通常并不比我们多. 又或者说,若有什么他们知道的, 那我们很可能也早就知道了.</p><p>而对于弱连接,因为我们感觉他们和自己太过不同, 或离自己太远, 所以他们没办法成为我们亲密的朋友. 但关键便在这里. 这恰好是弱连接的强大之处. 正因为他们不是自己圈子里的人, 所以他们可以让我们接触圈子之外的新东西. 新的工作、新的信息、新的公寓、新的机会、新的想法甚至是新的约会对象, 这些几乎基本上都来自自己熟悉的圈子之外. 它们就像是盒子里的巧克力, 你永远不知道下一颗是什么味道.</p>]]></content>
      
      
      <categories>
          
          <category> 读万卷书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WindowsPowerShell优化</title>
      <link href="/posts/7f20a787/"/>
      <url>/posts/7f20a787/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_42951560/article/details/123678786">解决运行Hexo报错hexo : 无法加载文件hexo.ps1，因为在此系统上禁止运行脚本</a><br><a href="https://blog.unclezs.com/pages/9b6e12">打造好用的PowerShell媲美oh-my-zsh</a></p><p>Windows PowerShell中git查看文件修改状态时文件名不显示中文的问题，<a href="">这篇博客</a>中已经记录解决方案了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/posts/376d0826/"/>
      <url>/posts/376d0826/</url>
      
        <content type="html"><![CDATA[<h1>基本理论</h1><ul><li>回溯算法和递归是相辅相成的</li><li>回溯法是一种纯暴力的算法,它并不是高效算法.</li><li>回溯问题都可以抽象成树形结构.</li></ul><p><strong>回溯法可以解决哪些问题?</strong></p><ul><li>组合问题: 在一组数据中找到大小为2的组合.</li><li>切割问题: 给一个字符串,有几种切割方式.</li><li>子集问题</li><li>排列问题: 排列强调顺序,组合不强调问题</li><li>棋盘问题: N皇后</li></ul><p><strong>回溯法的模板</strong></p><ul><li>递归函数一般没有返回值.</li><li>递归函数的命名一般叫<code>backtracking(参数)</code></li><li>需要有终止条件,在终止条件内收集结果.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void basetracking(参数)&#123;</span><br><span class="line">    if(终止条件)&#123;</span><br><span class="line">        收集结果</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(集合元素)&#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        递归函数;</span><br><span class="line">        回溯操作;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>力扣22题, 括号生成</p><h1>组合问题</h1><p><strong>回溯问题可以通过递归的方式控制for循环的嵌套层数</strong></p><h1>剪枝操作</h1><p>for(集合元素) 通过某种判断条件减少遍历次数</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/posts/a80d0031/"/>
      <url>/posts/a80d0031/</url>
      
        <content type="html"><![CDATA[<h1>动态规划</h1><h2 id="动态规划五步">动态规划五步</h2><ul><li>DP数组以及下标的含义</li><li>递推公式</li><li>DP数组如何初始化</li><li>遍历顺序(背包问题中先遍历背包还是先遍历物品?)</li><li>打印数组</li></ul><h2 id="入门">入门</h2><ul><li>爬楼梯、斐波那契</li><li>背包问题</li><li>打家劫舍</li><li>股票问题</li><li>子序列问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构———图</title>
      <link href="/posts/c830c38b/"/>
      <url>/posts/c830c38b/</url>
      
        <content type="html"><![CDATA[<h1>图的存储结构</h1><h2 id="邻接矩阵">邻接矩阵</h2><h2 id="邻接链表">邻接链表</h2><h2 id="比较">比较</h2><h1>图的基本操作</h1><p>增加边<br>增加节点</p><p>删除节点<br>删除边</p><h1>遍历图中的节点</h1><h2 id="广度遍历BFS">广度遍历BFS</h2><h2 id="深度遍历DFS">深度遍历DFS</h2><h1>Dijkstra算法</h1><h1>Floyd算法</h1>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity ASE插件问题记录</title>
      <link href="/posts/7552e7ac/"/>
      <url>/posts/7552e7ac/</url>
      
        <content type="html"><![CDATA[<h1>要能够把ASE的节点翻译成Shader脚本</h1><p><a href="https://blog.csdn.net/liweizhao/article/details/133839310">阿赵的Unity可视化Shader工具ASE介绍目录</a><br><a href="https://blog.csdn.net/liweizhao/article/details/133780486">Unity可视化Shader工具ASE介绍——5、ASE快捷键和常用节点介绍</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown LaTeX符号整理</title>
      <link href="/posts/89282b50/"/>
      <url>/posts/89282b50/</url>
      
        <content type="html"><![CDATA[<h1>插入公式</h1><h2 id="在段落内插入">在段落内插入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一段文字,在这里插入一个公式: $ a = b + c $. 这段文字结束</span><br></pre></td></tr></table></figure><h2 id="另起一行">另起一行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是一段文字,在这里插入一个公式: </span><br><span class="line">$$ a = b + c $$. </span><br><span class="line">这段文字结束</span><br></pre></td></tr></table></figure><h2 id="常用符号">常用符号</h2><ul><li>加粗 $\mathbf{M}$ <code>\bold&#123;M&#125;</code>或者<code>$\mathbf&#123;M&#125;$</code></li><li>倾斜 $\mathit{M}$ <code>$\mathit&#123;M&#125;$</code></li><li>加粗并倾斜 $\pmb{M}$ <code>\pmb&#123;M&#125;</code></li><li>叉乘 $\times$ <code>$\times$</code></li><li>点乘 $\cdot$  <code>$\cdot$</code></li><li>分数 $\frac{1}{2}$ <code>$\frac&#123;1&#125;&#123;2&#125;$</code></li><li>恒等于 $\equiv$ <code>$\equiv$</code></li><li>等价于 $\Leftrightarrow$  <code>$\iff$</code>或者<code>$\Leftrightarrow$</code></li><li>右推导 $\Rightarrow$ <code>$\Rightarrow$</code></li><li>左推导 $\Leftarrow$ <code>$\Leftarrow$</code></li><li>向量 $\vec{a}$ <code>$\vec&#123;a&#125;$</code></li><li>单竖线 $\vert$  <code>$\vert$</code></li><li>双竖线 $\Vert$ <code>$\Vert$</code></li><li>花括号 ${ }$ <code>$\&#123; \&#125;$</code></li><li>方括号 $[ ]$ <code>$[ ]$</code></li><li>紧贴 $a!b$ <code>$a\!b$</code></li><li>没有空格 $ab$ <code>$ab$</code></li><li>小空格 $a \space b$ <code>$a \space b$</code></li><li>quad空格 $a\quad b$ <code>$a\quad b$</code></li><li>两个quad空格 $a\qquad b$ <code>$a\qquad b$</code></li><li>矩阵 $\mathbf{D} =\left( \begin{array}{ccc}d_1&amp;\ldots &amp; \ldots \\\ldots &amp; d_{2} &amp; \ldots \\\vdots &amp; \vdots &amp; \ddots\end{array} \right)<br>$<br><code>$\mathbf&#123;D&#125; =\left( \begin&#123;array&#125;&#123;ccc&#125;d_1&amp;\ldots &amp; \ldots \\\\\ldots &amp; d_&#123;2&#125; &amp; \ldots \\\\\vdots &amp; \vdots &amp; \ddots\end&#123;array&#125; \right) $</code></li><li>thea角 $\theta$ <code>$\theta$</code></li></ul><h1>参考资料</h1><p><a href="https://www.latexlive.com/">在线LaTex生成器</a><br><a href="https://www.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols">https://www.overleaf.com/learn/latex/List_of_Greek_letters_and_math_symbols</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3D数学基础——三维旋转</title>
      <link href="/posts/b66c85b5/"/>
      <url>/posts/b66c85b5/</url>
      
        <content type="html"><![CDATA[<h1>左手系与右手系</h1><p>比如说, 以yaw轴顺时针旋转, 在右手系中, 要想顺时针转是要从yaw的负方向看向正方向, 才是顺时针旋转, 也就是顺时针转角度值会变成负数, 左手系中同理, 但是顺时针转角度会变成正数</p><h1>万向锁的数学推导</h1><h1>三维旋转的表示方式</h1><ul><li>矩阵</li><li>欧拉角</li><li>四元数</li><li>轴角</li><li>指数映射</li></ul><h1>矩阵表示旋转</h1><h1>欧拉角表示旋转</h1><h1>三维旋转表示方式之间的转换</h1><h2 id="矩阵转欧拉">矩阵转欧拉</h2><h2 id="欧拉转矩阵">欧拉转矩阵</h2><h2 id="矩阵转四元数">矩阵转四元数</h2><h2 id="四元数转矩阵">四元数转矩阵</h2><h2 id="欧拉转四元数">欧拉转四元数</h2><h2 id="四元数转欧拉">四元数转欧拉</h2>]]></content>
      
      
      <categories>
          
          <category> 3D数学基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3D数学基础——概念收集与问题记录</title>
      <link href="/posts/2d9c3613/"/>
      <url>/posts/2d9c3613/</url>
      
        <content type="html"><![CDATA[<h1>概念</h1><ul><li><p>秩</p></li><li><p>满秩</p></li><li><p>矢量叉积 矢量叉积只能在三维中使用, 又叫向量外积</p></li><li><p>矢量点积  又叫向量内积</p></li><li><p>三重积(Triple Product)</p></li><li><p>正交矩阵 当且仅当矩阵及其转置的乘积是单位矩阵时,方形矩阵M是正交的.<br>$$ \bold{M}是正交矩阵 \iff \bold{M}\bold{M}^{T} = \bold{I} $$<br>由逆矩阵的性质可知,正交矩阵的转置矩阵和逆矩阵是等价的<br>$$ \bold{M}是正交矩阵 \iff \bold{M}^{T} = \bold{M}^{-1} $$<br>该条性质十分重要,因为计算逆矩阵是一个相对昂贵的操作,如果已知一个矩阵是正交的,那么直接使用转置矩阵得到逆矩阵.</p></li><li><p>转置矩阵</p></li><li><p>子矩阵行列式Minor 假设$\mathbf{M}$是具有r行c列的矩阵.考虑通过从M中删除行i和列j而获得的矩阵.这个矩阵显然具有r-1行和c-1列.这个子矩阵Submatrix的行列式表示为$\mathit{M}^$,被称为$\mathbf{M}$的子矩阵行列式</p></li><li><p>余子式Cofactor 给定行和列方形矩阵$\mathbf{M}$的余子式与相应的子矩阵行列式相同,但子矩阵行列式会交替变负 $\mathit{C}^ = (-1)^{i+j}\mathit{M}^$</p></li><li><p>伴随矩阵 $adj\space\mathbf{M}$,举一个三</p></li><li><p>逆矩阵 $\mathbf{M}^{-1} = \frac{adj \space \mathbf{M}}{\vert \mathbf{M} \vert}$ 只有方阵有逆矩阵,(非方阵也存在广义上的逆矩阵但是不在我们讨论范围内)</p></li><li><p>什么是行列式? 只有方阵有行列式(非方阵也是有行列式的,但是不在我们的讨论范围内)</p></li><li><p>什么是齐次矩阵?</p></li><li><p>什么是齐次坐标? 将一个原本是n维的向量用一个n+1维的向量来表示.</p></li><li><p>什么是错切(Shearing)? 会导致原本表示坐标空间的互相垂直的基向量不再互相垂直</p></li><li><p>奇异(Singular)矩阵</p></li><li><p>非奇异(Singular)矩阵</p></li><li><p>所有矩阵$\mathbf{M}$都有转置矩阵$\mathbf{M}^{T}$,但是只有方阵才有可能有逆矩阵$\mathbf{M}^{-1}$</p></li><li><p>什么是超集(Superset)? 如果一个集合S2中的每一个元素都在集合S1中，且集合S1中可能包含S2中没有的元素，则集合S1就是S2的一个超集，反过来，S2是S1的子集。 S1是S2的超集，若S1中一定有S2中没有的元素，则S1是S2的真超集，反过来S2是S1的真子集。</p></li><li><p>什么是矩阵正交化?</p></li><li><p>如何理解矩阵中的自由度? 欧拉角中万向锁的现象跟自由度有没有关系?</p></li></ul><h1>变换的分类</h1><h2 id="线性变换">线性变换</h2><h3 id="旋转">旋转</h3><h3 id="缩放">缩放</h3><h3 id="正交投影">正交投影</h3><h3 id="反射">反射</h3><h3 id="错切">错切</h3><h3 id="组合变换">组合变换</h3><h2 id="放射变换">放射变换</h2><h2 id="可逆变换">可逆变换</h2><h2 id="保持角度的变换">保持角度的变换</h2><h2 id="刚体变换">刚体变换</h2><h1>矩阵性质</h1><h2 id="逆矩阵">逆矩阵</h2>]]></content>
      
      
      <categories>
          
          <category> 3D数学基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3D数学基础——矩阵</title>
      <link href="/posts/28fc275d/"/>
      <url>/posts/28fc275d/</url>
      
        <content type="html"><![CDATA[<p>渲染管线中的矩阵变换:</p><p>局部坐标(Local Space)<br>↓ 模型矩阵(Model Matrix)<br>世界坐标(World Space)<br>↓ 观察矩阵(View Matrix)<br>观察坐标(View Space)<br>↓ 投影矩阵(Projection Matrix)<br>裁剪坐标(Clip Space)<br>↓ 透视除法(Perspective Division)<br>标准化设备坐标(NDC Space) ← 你的顶点数据在这里<br>↓ 视口变换(Viewport Transform)<br>屏幕坐标(Screen Space)</p><h1>对于矩阵要先平移至原点 再进行旋转 然后平移回原位置的数学解释</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先将矩形平移到原点（使其中心在原点）</span></span><br><span class="line"><span class="comment">// 2. 旋转</span></span><br><span class="line"><span class="comment">// 3. 再平移到目标位置</span></span><br><span class="line"></span><br><span class="line">glm::mat4 transform = glm::<span class="built_in">mat4</span>(<span class="number">1.0f</span>);</span><br><span class="line">transform = glm::<span class="built_in">translate</span>(transform, glm::<span class="built_in">vec3</span>(<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>)); <span class="comment">// 最终位置</span></span><br><span class="line">transform = glm::<span class="built_in">rotate</span>(transform, (<span class="type">float</span>)<span class="built_in">glfwGetTime</span>(), glm::<span class="built_in">vec3</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>)); <span class="comment">// 旋转</span></span><br><span class="line">transform = glm::<span class="built_in">translate</span>(transform, glm::<span class="built_in">vec3</span>(<span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>)); <span class="comment">// 先将中心移到原点（反向平移）</span></span><br></pre></td></tr></table></figure><h1>矩阵平移的推导过程</h1><h1>主动变换与被动变换</h1><h2 id="主动变换">主动变换</h2><p>重点在如何用矩阵表示旋转、缩放、平移等操作.</p><h3 id="旋转">旋转</h3><h4 id="在二维中的旋转">在二维中的旋转</h4><h4 id="围绕主轴的三维旋转的矩阵推导">围绕主轴的三维旋转的矩阵推导</h4><p>使用高斯消元法求解线性方程组, 使用矩阵表示旋转, 在三维空间的左手坐标系中, 以绕着y轴顺时针旋转$\theta$度, 注意左手系中, 顺时针旋转为正向旋转. 来构建方程组<br>设点$P_1(x_1, y, z_1)$, 经过上述所说的旋转矩阵M, 旋转到$P_2(x_2, y, z_2)$, $P_1$、$P_2$已知, 求旋转矩阵M.</p><p>构建方程组<br>已知向量$\vec{OP_1}$、$\vec{OP_2}$<br>根据向量内积(点积)<br>$$ \vec{OP_1} \cdot \vec{OP_2} = |\vec{OP_1}||\vec{OP_2}|cos\theta $$<br>根据向量外积(叉积)<br>$$ \begin{bmatrix}<br>x_1\<br>y \<br>z_1<br>\end{bmatrix}^T<br>\times<br>\begin{bmatrix}<br>x_2\<br>y \<br>z_2<br>\end{bmatrix}^T<br>= \begin{bmatrix}<br>yz_2 - z_1y\<br>z_1x_2 - x_1z_2\<br>x_1y - yx_2<br>\end{bmatrix}^T<br>$$</p><p>另有<br>$$ | \vec{OP_1} \times \vec{OP_2}| = | \vec{OP_1} | \cdot | \vec{OP_2} | sin\theta$$</p><p>为了方便计算, 我们让y等于零, 则$P_1$、$P_2$点均落在了XZ平面上, 代入得到下面方程组</p><p>$$<br>\left{\begin{matrix} x_1x_2 + z_1z_2 = (x_1^2 + z_1^2)cos\theta<br>\<br>(z_1x_2 - x_1z_2)^2 = (x_1^2 + z_1^2)^2sin^2\theta<br>\end{matrix}\right.<br>$$</p><p>令$x_1^2 + z_1^2 = A$, 令$sin\theta = S$, $cos\theta = C$, 代入消元</p><p>$$<br>\left{\begin{matrix} z_1x_2- x_1z_2 = \pm AS<br>\<br>x_1x_2 + z_1z_2 = \pm AC<br>\end{matrix}\right.<br>$$</p><p>上述方程组共有四组解, 分别是</p><p>都为正, 左手系中代表顺时针旋转的. 正向旋转</p><p>$$<br>\left{\begin{matrix} x_2= z_1sin\theta + x_1cos\theta<br>\<br>z_2 = z_1cos\theta  - x_1sin\theta<br>\end{matrix}\right.<br>$$</p><p>都为负, 左手系中代表逆时针旋转的. 负向旋转</p><p>$$<br>\left{\begin{matrix} x_2 = -x_1cos\theta - z_1sin\theta<br>\<br>z_2 = x_1sin\theta - z_1cos\theta<br>\end{matrix}\right.<br>$$</p><p>因此根据矩阵的运算规则构建出旋转矩阵</p><p>一正一负<br>$$<br>\left{\begin{matrix} x_2 = x_1cos\theta - z_1sin\theta<br>\<br>z_2 = z_1cos\theta + x_1sin\theta<br>\end{matrix}\right.<br>$$</p><p>$$<br>\left{\begin{matrix} x_2 = x_1cos(-\theta) + z_1sin(-\theta)<br>\<br>z_2 = z_1cos(-\theta) - x_1sin(-\theta)<br>\end{matrix}\right.<br>$$</p><p>一正一负的另一组解</p><p>$$<br>\left{\begin{matrix} x_2 = -x_1cos\theta + z_1sin\theta<br>\<br>z_2 = -x_1sin\theta - z_1cos\theta<br>\end{matrix}\right.<br>$$</p><p>这一组解其实等价于都为正的情况, 可以变换为, 意思是逆时针转了$-\theta$度, 其实就是顺时针转了$\theta$度, 所以 等价于都为正的情况<br>$$<br>\left{\begin{matrix} x_2 = -x_1cos(-\theta) - z_1sin(-\theta)<br>\<br>z_2 = x_1sin(-\theta) - z_1cos(-\theta)<br>\end{matrix}\right.<br>$$</p><p>一正一负的两种情况可以转化成都为正和都为负的情况.<br>根据矩阵的运算规则可以写出上述四组解的矩阵:<br>因此我们就知道了表示正向旋转、逆向旋转的写法了.</p><h4 id="围绕任意轴的三维旋转">围绕任意轴的三维旋转</h4><h3 id="平移">平移</h3><h2 id="被动变换">被动变换</h2><p>坐标系的变换, 重点是渲染流水线中各坐标系变换矩阵的推导</p><h3 id="Model-Matrix">Model Matrix</h3><h3 id="View-Matrix">View Matrix</h3><p>已知y轴与<br>构造View Matrix需要知道摄像机的三个属性: 摄像机朝向、摄像机的右侧, 以及摄像机的位置</p><p><a href="https://learnopengl.com/img/getting-started/camera_axes.png"></a></p><p>有一个临界情况 如果摄像机的位置在y轴上, 也就是相机朝向的向量与y轴平行时, 上述构造摄像机右侧向量的方法就有问题了, 看一下Unity中是怎么处理这个问题的吧.</p><h3 id="Projection-Matrix">Projection Matrix</h3><h3 id="Clip-Matrix">Clip Matrix</h3><h3 id="Homogenous-divide">Homogenous divide</h3><h3 id="Map-to-window">Map to window</h3>]]></content>
      
      
      <categories>
          
          <category> 3D数学基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Wesnoth</title>
      <link href="/posts/d1d5504/"/>
      <url>/posts/d1d5504/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.wesnoth.org/">Wesnoth社区</a><br><a href="https://github.com/wesnoth/wesnoth">仓库地址</a><br><a href="https://discord.com/channels/231976805987385345/channel-browser">WesnothDiscord频道</a></p><h1>目录</h1><ul><li>构建Wesnoth 也就是这篇博客</li><li><a href="https://soincredible.github.io/posts/9af50f63/">Wesnoth中的小地图如何实现</a></li><li>Wesnoth中的AI</li><li>Wesnoth中的引导逻辑</li><li>Wesnoth中的战役逻辑</li></ul><blockquote><p>2025.2.25更新<br>笔者像小丑一样 尝试用Linux中的构建方式在自己的Mac上构建wesnoth 一直无法成功Build 跟各种问题缠斗了近一个月 在进行放弃前的最后一次尝试时 决定尝试一下Build文档中MacOS小结提到的使用XCodeBuild的方式构建wesnoth 不到十分钟成功了…<br>在笔者过往的经历中 Mac和Linux中构建和运行C++程序的方式是一样的 并且笔者先入为主地以为使用XCode是在Mac上要发布到AppStore、Steam或者SourceForge平台部分才会使用到的 并不是笔者目前需要Care的 笔者只需要让wesnoth的code在自己的电脑上跑起来就可以 只能说相当操蛋…<br>虽然说在Mac终端下直接使用CMake命令来尝试构建wesnoth的方式是错误的,但是在这个过程中笔者了解了一些CMake、C++构建相关的知识 本篇博客便是对这些知识的总结整理</p></blockquote><h1>Mac中正确的构建Wesnoth方式</h1><p>既然Build的时候用到了<code>XCode</code>,那么笔者就舍弃<code>VSCode</code>直接使用<code>XCode</code>开发了.</p><ul><li>首先确保wesnoth中需要的所有依赖都已经安装好,所有的依赖都可以使用<code>homebrew</code>快速安装</li><li>准备一个<a href="https://developer.apple.com/">Apple开发者账号</a> 不需要<code>enroll app store</code>如果你只是希望在自己的电脑上build和运行wesnoth</li><li>根目录下执行<code>scons translations</code>(看起来是一个执行翻译的命令 执行一次就好)</li><li>执行成功后,找到项目中的<code>projectfiles/Xcode/The Battle for Wesnoth.xcodeproj</code>,打开XCode</li><li>在XCode的菜单栏中,找到<code>Product</code>-&gt;<code>Archive</code>,XCode就开始构建wesnoth了</li><li>XCode构建成功之后,应该会自动弹出<code>Organizer</code>窗口,在窗口中选择<code>DistributeApp</code></li></ul><img src="/posts/d1d5504/image.png" class=""><p>选择<code>Custom</code></p><img src="/posts/d1d5504/image-1.png" class=""><p>选择<code>Copy App</code></p><img src="/posts/d1d5504/image-3.png" class=""><p>最后选择导出位置,完成Wesnoth的build.</p><h1>Mac中的环境变量</h1><p>笔者在按照<a href="https://github.com/wesnoth/wesnoth/blob/master/INSTALL.md">INSTALL</a>部分在M1系列芯片的Mac上使用homebrew安装好了wesnoth依赖的所有lib, 但是通过CMake build的时候却还是提示有这样那样的lib未找到、这样那样的头文件没有找到.** 笔者并不清楚中间是什么环节出了问题, 在此先进行记录, 日后若有思路再回来补充**.</p><p>首先, 笔者的假设是, 官方编写的CMake构建脚本是没有问题的, 问题出在了笔者的环境配置上, 在安装完wesnoth需要的库之后,需要在终端执行以下命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export LIBRARY_PATH=/opt/homebrew/Cellar/boost/1.87.0/lib:/opt/homebrew/lib:$LIBRARY_PATH</span><br><span class="line">export CPATH=/opt/homebrew/include/harfbuzz:/opt/homebrew/Cellar/boost/1.87.0/include/boost:$CPATH     </span><br><span class="line">```                </span><br><span class="line"># Undefined symbols for architecture arm64</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Undefined symbols for architecture arm64:<br>“Hello()”, referenced from:<br>_main in test_charconv.cpp.o<br>ld: symbol(s) not found for architecture arm64<br>c++: error: linker command failed with exit code 1 (use -v to see invocation)<br>make[2]: *** [test_charconv] Error 1<br>make[1]: *** [CMakeFiles/test_charconv.dir/all] Error 2<br>make: *** [all] Error 2</p><pre><code>出现如下报错的原因: 方法只有声明 但是没定义 于是在链接阶段的时候 编译器找不到方法的具体实现而报错. 有可能是你在头文件中定义的方法名和在cpp文件中的具体实现名不一样.# C++中的.o文件https://www.cnblogs.com/eyeofbajie/p/16303580.html# CMake中常用的方法CMake中执行表示执行编译的方法是什么?别的CMake方法先不管,笔者比较关心find_package方法背后的实现原理https://stackoverflow.com/questions/75536743/how-to-fix-undefined-symbols-for-arm64-when-using-boostfilesystem-on-m1-macboo</code></pre>]]></content>
      
      
      <categories>
          
          <category> Wesnoth </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Balatro</title>
      <link href="/posts/254a2567/"/>
      <url>/posts/254a2567/</url>
      
        <content type="html"><![CDATA[<p>小丑牌使用love2d游戏引擎开发,开发语言是lua.笔者之前从未接触过lua,在上手阅读前还是有一些开发语言上的语法障碍需要克服一下.看起来小丑牌底层使用到了一个名叫<code>SNKRX</code>游戏的底层框架.</p><h1>环境安装</h1><ul><li><a href="https://love2d.org/wiki/Main_Page">love2d游戏引擎地址</a></li><li><a href="https://www.lua.org/">lua地址</a></li></ul><h1>运行游戏</h1><p>首先在<code>~/.zshrc</code>中添加以下文本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">alias</span> to love</span></span><br><span class="line">alias love=&quot;/Applications/love.app/Contents/MacOS/love&quot;</span><br></pre></td></tr></table></figure><p>退出<code>zshrc</code>,执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>来到小丑牌的根目录,执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">love .</span><br></pre></td></tr></table></figure><h1>程序入口</h1><p>拿到小丑牌源码,程序的入口在<code>main.lua</code>中,首先看到的是一串<code>require</code>语句,该语句后面跟的内容就是脚本的路径,且会执行该路径下的脚本.就拿<code>game.lua</code>脚本中的<code>Game</code>类举例,首先是<code>main.lua</code>的require语句中请求模块<code>globals</code>,lua找到并执行<code>globals.lua</code>脚本,在该脚本中创建了一个<code>Game</code>对象,在<code>Game</code>对象的构造方法中创建了一个Game的单例.执行完<code>require &quot;globals&quot;</code>之后,<code>Game</code>类的单例就已经被创建出来了,并可以被全局调用.</p><h1>更新逻辑</h1><p>游戏的update逻辑在<code>game.lua</code>脚本的<code>function Game:update(dt)</code>中.<br>在<code>globals.lua</code>中,可以看到游戏状态机中的状态:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">self</span>.STATES = &#123;</span><br><span class="line">        SELECTING_HAND = <span class="number">1</span>,</span><br><span class="line">        HAND_PLAYED = <span class="number">2</span>,</span><br><span class="line">        DRAW_TO_HAND = <span class="number">3</span>,</span><br><span class="line">        GAME_OVER = <span class="number">4</span>,</span><br><span class="line">        SHOP = <span class="number">5</span>,</span><br><span class="line">        PLAY_TAROT = <span class="number">6</span>,</span><br><span class="line">        BLIND_SELECT = <span class="number">7</span>,</span><br><span class="line">        ROUND_EVAL = <span class="number">8</span>,</span><br><span class="line">        TAROT_PACK = <span class="number">9</span>,</span><br><span class="line">        PLANET_PACK = <span class="number">10</span>,</span><br><span class="line">        MENU = <span class="number">11</span>,</span><br><span class="line">        TUTORIAL = <span class="number">12</span>,</span><br><span class="line">        SPLASH = <span class="number">13</span>,<span class="comment">--DO NOT CHANGE, this has a dependency in the SOUND_MANAGER</span></span><br><span class="line">        SANDBOX = <span class="number">14</span>,</span><br><span class="line">        SPECTRAL_PACK = <span class="number">15</span>,</span><br><span class="line">        DEMO_CTA = <span class="number">16</span>,</span><br><span class="line">        STANDARD_PACK = <span class="number">17</span>,</span><br><span class="line">        BUFFOON_PACK = <span class="number">18</span>,</span><br><span class="line">        NEW_ROUND = <span class="number">19</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1>配置</h1><p>小丑牌的配置在<code>functions/misc_functions.lua</code>脚本中,在这里你可以修改游戏的初始参数,比如初始金币、手牌上限、小丑牌栏位上限等等.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_starting_params</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    dollars = <span class="number">100</span>,</span><br><span class="line">    hand_size = <span class="number">15</span>,</span><br><span class="line">    discards = <span class="number">3</span>,</span><br><span class="line">    hands = <span class="number">4</span>,</span><br><span class="line">    reroll_cost = <span class="number">5</span>,</span><br><span class="line">    joker_slots = <span class="number">7</span>,</span><br><span class="line">    ante_scaling = <span class="number">1</span>,</span><br><span class="line">    consumable_slots = <span class="number">2</span>,</span><br><span class="line">    no_faces = <span class="literal">false</span>,</span><br><span class="line">    erratic_suits_and_ranks = <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h1>交互</h1><p>主界面的绘制在<code>UI_definitions.lua</code>脚本中,在小丑牌中页面的拼接用的是类似json一样的嵌套结构来描述UI的信息,重点关注<code>UIBox_button</code>的button参数,该参数指明该按钮和其相应点击的事件.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_UIBox_main_menu_buttons</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> text_scale = <span class="number">0.45</span></span><br><span class="line">  <span class="keyword">local</span> language = <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> G.F_ENGLISH_ONLY <span class="keyword">then</span> </span><br><span class="line">    language = Sprite(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.6</span>,<span class="number">0.6</span>,G.ASSET_ATLAS[<span class="string">&quot;icons&quot;</span>], &#123;x=<span class="number">2</span>, y=<span class="number">0</span>&#125;)</span><br><span class="line">    language.states.drag.can = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> discord = <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">local</span> twitter = <span class="literal">nil</span></span><br><span class="line">  <span class="keyword">if</span> G.F_DISCORD <span class="keyword">then</span> </span><br><span class="line">    discord = Sprite(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.6</span>,<span class="number">0.6</span>,G.ASSET_ATLAS[<span class="string">&quot;icons&quot;</span>], &#123;x=<span class="number">0</span>, y=<span class="number">0</span>&#125;)</span><br><span class="line">    discord.states.drag.can = <span class="literal">false</span></span><br><span class="line">    twitter = Sprite(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.6</span>,<span class="number">0.6</span>,G.ASSET_ATLAS[<span class="string">&quot;icons&quot;</span>], &#123;x=<span class="number">0</span>, y=<span class="number">1</span>&#125;)</span><br><span class="line">    twitter.states.drag.can = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> quit_func = <span class="string">&#x27;quit&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">local</span> t = &#123;</span><br><span class="line">    n=G.UIT.ROOT, <span class="built_in">config</span> = &#123;align = <span class="string">&quot;cm&quot;</span>,colour = G.C.CLEAR&#125;, nodes=&#123; </span><br><span class="line">      &#123;n=G.UIT.C, <span class="built_in">config</span>=&#123;align = <span class="string">&quot;bm&quot;</span>&#125;, nodes=&#123;      </span><br><span class="line">                    &#123;</span><br><span class="line">                        n = G.UIT.R,</span><br><span class="line">                        <span class="built_in">config</span> = &#123; align = <span class="string">&quot;cm&quot;</span>, padding = <span class="number">0.2</span>, r = <span class="number">0.1</span>, emboss = <span class="number">0.1</span>, colour = G.C.L_BLACK, mid = <span class="literal">true</span> &#125;,</span><br><span class="line">                        nodes = &#123;</span><br><span class="line">          <span class="comment">-- 如果没有完成教程,返回start_run 如果完成教程返回setup_run</span></span><br><span class="line">          UIBox_button&#123;id = <span class="string">&#x27;main_menu_play&#x27;</span>, button = <span class="keyword">not</span> G.SETTINGS.tutorial_complete <span class="keyword">and</span> <span class="string">&quot;start_run&quot;</span> <span class="keyword">or</span> <span class="string">&quot;setup_run&quot;</span>, colour = G.C.BLUE, minw = <span class="number">3.65</span>, minh = <span class="number">1.55</span>, label = &#123;localize(<span class="string">&#x27;b_play_cap&#x27;</span>)&#125;, scale = text_scale*<span class="number">2</span>, col = <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;n=G.UIT.C, <span class="built_in">config</span>=&#123;align = <span class="string">&quot;cm&quot;</span>&#125;, nodes=&#123;</span><br><span class="line">            UIBox_button&#123;button = <span class="string">&#x27;options&#x27;</span>, colour = G.C.ORANGE, minw = <span class="number">2.65</span>, minh = <span class="number">1.35</span>, label = &#123;localize(<span class="string">&#x27;b_options_cap&#x27;</span>)&#125;, scale = text_scale * <span class="number">1.2</span>, col = <span class="literal">true</span>&#125;,</span><br><span class="line">            G.F_QUIT_BUTTON <span class="keyword">and</span> &#123;n=G.UIT.C, <span class="built_in">config</span>=&#123;align = <span class="string">&quot;cm&quot;</span>, minw = <span class="number">0.2</span>&#125;, nodes=&#123;&#125;&#125; <span class="keyword">or</span> <span class="literal">nil</span>,</span><br><span class="line">            G.F_QUIT_BUTTON <span class="keyword">and</span> UIBox_button&#123;button = quit_func, colour = G.C.RED, minw = <span class="number">2.65</span>, minh = <span class="number">1.35</span>, label = &#123;localize(<span class="string">&#x27;b_quit_cap&#x27;</span>)&#125;, scale = text_scale * <span class="number">1.2</span>, col = <span class="literal">true</span>&#125; <span class="keyword">or</span> <span class="literal">nil</span>,</span><br><span class="line">          &#125;&#125;,</span><br><span class="line">          UIBox_button&#123;id = <span class="string">&#x27;collection_button&#x27;</span>, button = <span class="string">&quot;your_collection&quot;</span>, colour = G.C.PALE_GREEN, minw = <span class="number">3.65</span>, minh = <span class="number">1.55</span>, label = &#123;localize(<span class="string">&#x27;b_collection_cap&#x27;</span>)&#125;, scale = text_scale*<span class="number">1.5</span>, col = <span class="literal">true</span>&#125;,</span><br><span class="line">        &#125;&#125;,</span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      &#123;n=G.UIT.C, <span class="built_in">config</span>=&#123;align = <span class="string">&quot;br&quot;</span>, minw = <span class="number">3.2</span>, padding = <span class="number">0.1</span>&#125;, nodes=&#123;</span><br><span class="line">        G.F_DISCORD <span class="keyword">and</span> &#123;n=G.UIT.R, <span class="built_in">config</span> = &#123;align = <span class="string">&quot;cm&quot;</span>, padding = <span class="number">0.2</span>&#125;, nodes=&#123;</span><br><span class="line">          &#123;n=G.UIT.C, <span class="built_in">config</span>=&#123;align = <span class="string">&quot;cm&quot;</span>, padding = <span class="number">0.1</span>, r = <span class="number">0.1</span>, hover = <span class="literal">true</span>, colour = mix_colours(G.C.BLUE, G.C.GREY, <span class="number">0.4</span>), button = <span class="string">&#x27;go_to_discord&#x27;</span>, shadow = <span class="literal">true</span>&#125;, nodes=&#123;</span><br><span class="line">            &#123;n=G.UIT.O, <span class="built_in">config</span>=&#123;object = discord&#125;&#125;,</span><br><span class="line">          &#125;&#125;,</span><br><span class="line">          &#123;n=G.UIT.C, <span class="built_in">config</span>=&#123;align = <span class="string">&quot;cm&quot;</span>, padding = <span class="number">0.1</span>, r = <span class="number">0.1</span>, hover = <span class="literal">true</span>, colour = G.C.BLACK, button = <span class="string">&#x27;go_to_twitter&#x27;</span>, shadow = <span class="literal">true</span>&#125;, nodes=&#123;</span><br><span class="line">            &#123;n=G.UIT.O, <span class="built_in">config</span>=&#123;object = twitter&#125;&#125;,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &#125;&#125; <span class="keyword">or</span> <span class="literal">nil</span>,</span><br><span class="line">        <span class="keyword">not</span> G.F_ENGLISH_ONLY <span class="keyword">and</span> &#123;n=G.UIT.R, <span class="built_in">config</span> = &#123;align = <span class="string">&quot;cm&quot;</span>, padding = <span class="number">0.2</span>, r = <span class="number">0.1</span>, emboss = <span class="number">0.1</span>, colour = G.C.L_BLACK&#125;, nodes=&#123;</span><br><span class="line">          &#123;n=G.UIT.R, <span class="built_in">config</span>=&#123;align = <span class="string">&quot;cm&quot;</span>, padding = <span class="number">0.15</span>, minw = <span class="number">1</span>, r = <span class="number">0.1</span>, hover = <span class="literal">true</span>, colour = mix_colours(G.C.WHITE, G.C.GREY, <span class="number">0.2</span>), button = <span class="string">&#x27;language_selection&#x27;</span>, shadow = <span class="literal">true</span>&#125;, nodes=&#123;</span><br><span class="line">            &#123;n=G.UIT.O, <span class="built_in">config</span>=&#123;object = language&#125;&#125;,</span><br><span class="line">            &#123;n=G.UIT.T, <span class="built_in">config</span>=&#123;text = G.LANG.label, scale = <span class="number">0.4</span>, colour = G.C.UI.TEXT_LIGHT, shadow = <span class="literal">true</span>&#125;&#125;</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &#125;&#125; <span class="keyword">or</span> <span class="literal">nil</span>,</span><br><span class="line">      &#125;&#125;,</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>拿主界面上的quit按钮举例,<code>quit_func</code>就是指向了一个内容为<code>quit</code>的字符串,不过其实际上指向的是<code>main.lua</code>脚本中的<code>love.quit()</code>方法,目前暂不清楚究竟是如何关联起来的.</p><p>真正进入游戏的是通过<code>start_setup_run</code>方法,然后会进入<code>BlindSelect(盲注)阶段</code>-&gt;<code>New Round</code>-&gt;<code>DrawToHand</code></p><h1>洗牌算法</h1><p>在<code>state_events.lua</code>脚本中<code>new round</code>方法内<code>G.deck:shuffle('nr'..G.GAME.round_resets.ante)</code>这一行.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">G.E_MANAGER:add_event(Event(&#123;</span><br><span class="line">  trigger = <span class="string">&#x27;immediate&#x27;</span>,</span><br><span class="line">  func = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;进入DrawToHand阶段&quot;</span>)</span><br><span class="line">      G.STATE = G.STATES.DRAW_TO_HAND</span><br><span class="line">      <span class="comment">-- 在此处执行洗牌操作</span></span><br><span class="line">      G.deck:shuffle(<span class="string">&#x27;nr&#x27;</span>..G.GAME.round_resets.ante)</span><br><span class="line">      G.deck:hard_set_T()</span><br><span class="line">      G.STATE_COMPLETE = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><p>洗牌算法的具体实现在<code>cardarea.lua</code>中.</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CardArea:shuffle</span><span class="params">(_seed)</span></span></span><br><span class="line">    pseudoshuffle(<span class="built_in">self</span>.cards, pseudoseed(_seed <span class="keyword">or</span> <span class="string">&#x27;shuffle&#x27;</span>))</span><br><span class="line">    <span class="built_in">self</span>:set_ranks()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pseudoshuffle</span><span class="params">(list, seed)</span></span></span><br><span class="line">  <span class="keyword">if</span> seed <span class="keyword">then</span> <span class="built_in">math</span>.<span class="built_in">randomseed</span>(seed) <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> list[<span class="number">1</span>] <span class="keyword">and</span> list[<span class="number">1</span>].sort_id <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">table</span>.<span class="built_in">sort</span>(list, <span class="function"><span class="keyword">function</span> <span class="params">(a, b)</span></span> <span class="keyword">return</span> (a.sort_id <span class="keyword">or</span> <span class="number">1</span>) &lt; (b.sort_id <span class="keyword">or</span> <span class="number">2</span>) <span class="keyword">end</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i = #list, <span class="number">2</span>, <span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">local</span> j = <span class="built_in">math</span>.<span class="built_in">random</span>(i)</span><br><span class="line">list[i], list[j] = list[j], list[i]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该算法名为<code>Fisher–Yates shuffle 洗牌算法</code>,算法的基本思想如下:</p><ol><li>给定一个含有n个数的序列,标记index为1-n</li><li>从1-n中随机一个数k</li><li>找到index为k的数字,将其与该序列的最后一位进行交换.接下来会从(1 - n-1)范围内寻找新的随机数k,与序列的倒数第二位进行交换.</li><li>重复步骤2、3直到所有的数都被取完.</li></ol><h1>机制</h1><h1>参考资料</h1><ul><li><a href="https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/">https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在Blender中导出一个可以被Unity使用的圆</title>
      <link href="/posts/4e0dbdc7/"/>
      <url>/posts/4e0dbdc7/</url>
      
        <content type="html"><![CDATA[<p>起因是2025GGJ的主题是Bubble,想在Unity中做一个吹泡泡的游戏,需要用一个圆来表现泡泡波动的状态.遂打开Blender准备导出一个圆片到Unity中.本文记录为了导出一个能在Unity中正确使用的圆,用到的Blender中的功能和技巧.</p><h1>Blender中的坐标系</h1><p>Blender中的坐标系是右手坐标系,Unity中的坐标系是左手坐标系,判断左右手坐标系通过手性判断:</p><img src="/posts/4e0dbdc7/image-1.png" class=""><p>可以看下面两张图,展示了同一个模型在Unity和Blender中坐标轴的关系,两种坐标系下x轴的正方向反过来了,其他两个轴在之后x轴方向翻转的情况下是一致的.两个图中的坐标系都是Local坐标系.</p><img src="/posts/4e0dbdc7/image.png" class=""><img src="/posts/4e0dbdc7/image-1.png" class=""><h1>Blender中常用的快捷键</h1><p><code>Shift + A</code> 在场景中快速添加一些组件<br><code>Shift + Z</code> 切换Viewport类型 比如是线框、着色等<br><code>鼠标右键</code> 取消之前触发的命令<br><code>G</code> 移动选中的物体</p><h1>在Blender中制作一个圆形的实心平面</h1><p>Shift + A 创建一个Circle的Mesh,这是发现即便是在着色视口下,Circle仍然只有一个线框,这是因为这些顶点没有构成一个个的三角形,需要设置这个Circle的填充属性,当你创建出来一个Circle之后,不要乱动,你会发现左下角有一个AddCircle的小Widget,点击这个组件或者按键盘<code>F9</code>会展开弹窗,在弹窗中修改FillType为TriangleFan,另外你也可以调整创建出来的圆片的顶点数和半径</p><img src="/posts/4e0dbdc7/image-5.png" class=""><h1>更改模型的轴向</h1><p>笔者已经在Unity中搭建好了一个摄像机朝向为y轴负方向的游戏场景,所以要在Blender里面创建一个正面朝向模型本地坐标系y轴正方向的圆片模型,在Blender中,左上角上会有一个选择当前模式的按钮,笔者本次用到了ObjectMode和EditMode,在ObjectMode下,选中圆片进行旋转,你会发现旋转信息都会被记录在Transform的属性中,也就是说这个圆片模型的本地坐标系也是在跟着旋转的,这个操作是没有意义的.<br>我们需要切换到EditMode,框选所有的顶点,围绕X轴,沿着右手坐标系定义的x轴的逆时针方向,<strong>注意是逆时针方向</strong>旋转90度,你会发现Blender并没有计算这次操作的旋转角度,我们这次操作直接修改了所有顶点的位置信息.在旋转过程中按住<code>Shift</code>可以微调旋转度数.</p><img src="/posts/4e0dbdc7/image-2.png" class=""><img src="/posts/4e0dbdc7/image-3.png" class=""><h1>如何在Blender中区分正面和反面</h1><p>在EditMode下,视口右上角图标点击窗口中可以显示当前选中模型的法线朝向,法线指向的方向即是该面的正面</p><img src="/posts/4e0dbdc7/image-4.png" class=""><p>上面我们说过,Unity和Blender中模型的本地坐标系的差别是x轴的方向翻转了,举一反三:想要导出一个在Unity中正面朝向Unity坐标系下x轴正方向的圆片模型,那么需要在Blender中让这个圆片的法线朝向Blender中该模型本地坐标系的x轴的负方向就可以了.</p><p>最后,一些细枝末节,如果在Blender中以Rotation X为0导出到Unity中,在Unity的Import窗口中会看到模型的local Rotation属性为-90,在Blender中以RotationX 90导出就没问题了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>飞书协同工作流</title>
      <link href="/posts/9891b583/"/>
      <url>/posts/9891b583/</url>
      
        <content type="html"><![CDATA[<h1>Jenkins安装</h1><p>在Mac上,使用Homebrew命令安装Jenkins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenkins-lts</span><br></pre></td></tr></table></figure><p>安装成功后使用下面命令启动Jenkins服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew services start jenkins-lts</span><br></pre></td></tr></table></figure><p>在本地</p><p>其他常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew services restart jenkins-lts // 重启Jenkins</span><br><span class="line">brew upgrade jenkins-lts // 升级Jenkins</span><br></pre></td></tr></table></figure><p>Jenkins中的其他概念.</p><p>Node<br>Agent<br>创建Pipeline类型的Work无法看到workspace</p><p>通过新建一个Node的方式,并在pipeline流水线中制定,</p><h1>遇到的问题</h1><p>使用homebrew安装了java,在终端中运行Java提示<code>The operation couldn’t be completed. Unable to locate a Java Runtime. Please visit http://www.java.com for information on installing Java.</code><br>原因可能是使用homebrew安装的java没有jvm,需要去<a href="https://www.oracle.com/java/technologies/downloads/#jdk23-mac">java官网</a>手动安装</p><h1>Jenkins执行成功/失败上报飞书</h1><p>飞书+Luban使用</p><p>问题记录</p><p>Arm版本的MacOS上使用.Net9并不行<br>需要使用.Net8</p><p>抖音小游戏SDK<br><a href="https://bytedance.larkoffice.com/docx/doxcnTom4J47auHMnkjGYMBaNnZ">https://bytedance.larkoffice.com/docx/doxcnTom4J47auHMnkjGYMBaNnZ</a><br>SDK使用文档<br><a href="https://bytedance.larkoffice.com/docx/Pu56d7eWfo53PaxizyNcOsxXnBe">https://bytedance.larkoffice.com/docx/Pu56d7eWfo53PaxizyNcOsxXnBe</a></p><h1>Unity更新飞书文档</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">Total=$#</span><br><span class="line">svnPath=$1</span><br><span class="line">DingDingRobot=$2</span><br><span class="line">Channels=$3;</span><br><span class="line">ServerMode=$4;</span><br><span class="line">GameName=$5;</span><br><span class="line">ClientId=$6;</span><br><span class="line">IntClientId=$7;</span><br><span class="line">VersionName=$8;</span><br><span class="line">VersionCode=$9;</span><br><span class="line">Lebian_ClientChId=$10;</span><br><span class="line">Environment=$&#123;11&#125;;</span><br><span class="line">IgnoreAD=$&#123;12&#125;;</span><br><span class="line">ScriptBackend=$&#123;13&#125;;</span><br><span class="line">Architetures=$&#123;14&#125;;</span><br><span class="line">Hall37SvnUrl=$&#123;15&#125;;</span><br><span class="line">OutputDir=$&#123;16&#125;;</span><br><span class="line">FenbaoId=$&#123;17&#125;;</span><br><span class="line">IsIncludeAd=$&#123;18&#125;;</span><br><span class="line">IsRemovePermission=$&#123;19&#125;;</span><br><span class="line">IsRemoveUnityProject=$&#123;20&#125;;</span><br><span class="line">SdkParams=$&#123;21&#125;;</span><br><span class="line">UseLocalCdn=$&#123;22&#125;;</span><br><span class="line">LogOpen=$&#123;23&#125;;</span><br><span class="line">OnlyPackRes=$&#123;24&#125;;</span><br><span class="line">ProjectType=&quot;DDZ&quot;</span><br><span class="line">if (( Total &gt; 24 )); then</span><br><span class="line">ProjectType=$&#123;25&#125;;</span><br><span class="line">echo jenkinsco_New--param25--$&#123;25&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;Hall37SvnUrl  :$Hall37SvnUrl&quot;</span><br><span class="line">echo &quot;OutputDir  :$OutputDir&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;FenbaoId  :$FenbaoId&quot;</span><br><span class="line">echo &quot;IsIncludeAd  :$IsIncludeAd&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;IsRemovePermission  :$IsRemovePermission&quot;</span><br><span class="line">echo &quot;IsRemoveUnityProject  :$IsRemoveUnityProject&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;SdkParams  :$SdkParams&quot;</span><br><span class="line">echo &quot;UseLocalCdn  :$UseLocalCdn&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">targetPathRoot=/Users/cluo/.jenkins/workspace</span><br><span class="line">jobName=$JOB_NAME</span><br><span class="line">targetTurePath=$targetPathRoot/$jobName</span><br><span class="line">svnDir=$targetTurePath/.svn</span><br><span class="line">conpareChar=&quot;|&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [[ $IsRemoveUnityProject == true ]]; then</span><br><span class="line">echo &quot;清理工程目录&quot;</span><br><span class="line"></span><br><span class="line">if [[ ! -d $targetTurePath ]]; then</span><br><span class="line">mkdir $targetTurePath</span><br><span class="line">fi</span><br><span class="line">cd $targetTurePath</span><br><span class="line"></span><br><span class="line">if [[ ! -d $svnDir ]]; then</span><br><span class="line">echo &quot;svn check out&quot;</span><br><span class="line">svn co $svnPath $targetTurePath --username zhangjinyang@tuyoogame.com --password Aq279898123@ #--quiet</span><br><span class="line">else</span><br><span class="line">svn cleanup $targetTurePath</span><br><span class="line">echo &quot;svn up&quot;</span><br><span class="line">svn revert $targetTurePath -R --username zhangjinyang@tuyoogame.com --password Aq279898123@ #--quiet</span><br><span class="line">svn up $targetTurePath --username zhangjinyang@tuyoogame.com --password Aq279898123@ #--quiet</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">DIR=$(pwd);</span><br><span class="line">echo $DIR</span><br><span class="line">else</span><br><span class="line">echo &quot;不移除工程&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">svn path无需传递 参数减1传递</span></span><br><span class="line">sh buildAndroidWithHall37.sh $DingDingRobot $&#123;Channels&#125; $&#123;ServerMode&#125; $&#123;GameName&#125; $&#123;ClientId&#125; $&#123;IntClientId&#125; $&#123;VersionName&#125; $&#123;VersionCode&#125; $&#123;Lebian_ClientChId&#125; $&#123;Environment&#125; $&#123;IgnoreAD&#125; $&#123;ScriptBackend&#125; $&#123;Architetures&#125; $&#123;Hall37SvnUrl&#125; $&#123;OutputDir&#125; $&#123;FenbaoId&#125; $&#123;IsIncludeAd&#125; $&#123;IsRemovePermission&#125; $&#123;IsRemoveUnityProject&#125; &quot;$&#123;SdkParams&#125;&quot; $&#123;UseLocalCdn&#125; $&#123;LogOpen&#125; $&#123;OnlyPackRes&#125; $&#123;ProjectType&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">40打包机器是测试打包机不需要备份svn 注释掉</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$jobName</span>&quot;</span> == <span class="string">&quot;DDZ_release&quot;</span> ]]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$ServerMode</span>&quot;</span> == <span class="string">&quot;Zsf&quot;</span> ]]; <span class="keyword">then</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sourceUrl=<span class="variable">$&#123;svnPath%\/doudizhu*&#125;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> sourceUrl: <span class="variable">$sourceUrl</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">targetUrl=`<span class="built_in">echo</span> <span class="variable">$sourceUrl</span> | sed -e <span class="string">&quot;s/branches\/build_android/tags\/build_android_<span class="variable">$&#123;VersionName&#125;</span>/g&quot;</span>`</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">echo</span> targetUrl: <span class="variable">$targetUrl</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">svn delete -m <span class="string">&#x27;删除存在的分支 tag DDZ_Android_$&#123;VersionName&#125;&#x27;</span> <span class="variable">$targetUrl</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">svn <span class="built_in">cp</span> -m <span class="string">&#x27;备份: DDZ_Android_$&#123;VersionName&#125; tag&#x27;</span> <span class="variable">$sourceUrl</span> <span class="variable">$targetUrl</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sh tools/uploadLibrary.sh <span class="variable">$&#123;ServerMode&#125;</span> <span class="variable">$&#123;VersionName&#125;</span> <span class="variable">$&#123;svnPath&#125;</span> <span class="variable">$&#123;targetTurePath&#125;</span> <span class="string">&quot;Android&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">fi</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">fi</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL学习记录——入门篇</title>
      <link href="/posts/a627ba0f/"/>
      <url>/posts/a627ba0f/</url>
      
        <content type="html"><![CDATA[<p>笔者在网上能找到的C++与OpenGL的教程几乎都是基于Windows+VisualStudio展开的，也因为其直观和简易的环境配置流程，让初学者更专注于学习知识本身。这对作为Mac用户的笔者就很不友好了，需要额外了解CMake的工作原理、要选什么样的编译器等等诸如此类的，都是笔者要去搞清楚的点。</p><h1>C++基础</h1><h2 id="头文件和CPP文件的区别">头文件和CPP文件的区别</h2><p>在(游戏引擎架构)[<a href="https://book.douban.com/subject/25815142/">https://book.douban.com/subject/25815142/</a>]这本书中，介绍了头文件和CPP文件的区别：头文件通常用于在多个翻译单元之间共享信息，例如类型的声明以及函数原型。C++编译器并不了解头文件，实际情况是，C++预处理器预先把每个#include语句替换成相应的头文件内容，然后再把翻译单元送交源一起。这是头文件和源文件之间一个细微但是非常重要的区别。从程序员的角度看，头文件是独立的文件，但多亏了有预处理器把头文件展开，编译器接收到的才都是翻译单元。翻译单元的定义是：因为编译器每次只编译一个C++源文件至机器码，所以在技术上，源文件被称为翻译单元。那么像Mac上用的clang就是编译器的前端，负责预编译和编译的环节，</p><h2 id="include后-和-的区别">include后&quot;&quot;和&lt;&gt;的区别</h2><p>比如在OpenGL入门篇的<a href="https://learnopengl-cn.github.io/01%20Getting%20started/07%20Transformations/#_20">变换</a>一节中，我们使用到了一个名为GLM的库，</p><h2 id="C-代码的执行过程">C++代码的执行过程</h2><p>clang是编译器前端，通过clang，<br>预编译、编译、汇编、链接，每一步都在干什么呢？<br>cmake install或者ninja install又是在干什么呢？</p><h1>Hello Window</h1><p>入门篇的<a href="https://learnopengl-cn.github.io/01%20Getting%20started/03%20Hello%20Window/">你好,窗口</a>章节在笔者配置OpenGL开发环境那一篇博客中已经部分介绍了，不过两篇文章的侧重点不同，本篇文章的侧重点是对每一行教程中的代码和重要概念进行解读。另外，如果我们对某些函数的描述不清楚，我们可以直接去看GLFW的源码，或者查看文档</p><h2 id="GLFW和GLAD">GLFW和GLAD</h2><p>想要使用OpenGL进行渲染，我们需要两个库：GLFW与GLAD。GLFW是一个专门针对OpenGL的C语言库，</p><h2 id="接口使用">接口使用</h2><h3 id="glfwInit">glfwInit()</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glfwInit</span>(); <span class="comment">// 初始化glfw</span></span><br></pre></td></tr></table></figure><h3 id="glViewport-GLint-x-GLint-y-GLsizei-width-GLsizei-height">glViewport (GLint x, GLint y, GLsizei width, GLsizei height)</h3><h3 id="GLFWAPI-GLFWwindow-glfwCreateWindow-int-width-int-height-const-char-title-GLFWmonitor-monitor-GLFWwindow-share">GLFWAPI GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share)</h3><p>这两个接口笔者想要放在一起介绍,因为这两个接口引入了两个相关的概念:窗口(Window)与视口(Viewport).接下来笔者会用一些实操来直观地带各位区分二者的区别.前提是你需要完成Hello Triangle章节的学习.</p><p>首先,我们注释掉代码中glViewport接口的调用,你的代码中可能有两处(如果你是按照中文教程学习的话),一处在<code>main</code>方法内部,另一处在调用<code>glfwSetFramebufferSizeCallback</code>接口时传入的回调方法里.然后,我们将在脚本中声明的三角形顶点数组内容修改成下面的值:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> vertices[] = &#123;</span><br><span class="line">        <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// 右上角</span></span><br><span class="line">        <span class="number">1.0f</span>, <span class="number">-1.0f</span>, <span class="number">0.0f</span>, <span class="comment">// 右下角</span></span><br><span class="line">        <span class="number">-1.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="comment">// 左上角</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>最后,我们可以选择将<code>glCreateWindow</code>中窗口的宽度和高度改的大一些,比如改成<code>1920 * 1080</code>,这是笔者显示器的分辨率.重新构建我们的程序你会发现,我们的程序生成了一个铺满我们整个屏幕的窗口,而且窗口中的这个三角形铺满了我们整个窗口的右上部分屏幕!由此我们可以得出第一个结论:我们定义的三角形的顶点位置和窗口的实际大小之间存在一层映射关系.而当我们拖拽窗口的时候,这个三角形的形状会随着窗口形状的变化而变化.<br>如果我们想要让三角形的形状固定,不会随着窗口形状的变化而变化,该怎么做呢?那我们就要使用<code>glViewPort</code>接口了.<code>glViewport</code>接口的的前两个参数代表的是<code>视口</code>左下角距离相对于<code>窗口</code>左下角的坐标.而第三个和第四个参数代表的是视口的大小.现在你可能还不清楚视口和窗口的区别,没关系,跟着笔者一起操作,取消注释代码中的<code>glViewport</code>接口,并设置其接口的参数值如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glViewport</span>(<span class="number">600</span>, <span class="number">400</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>重新构建程序,你会发现,我们的三角形变得好小!这个三角形变成了变长为200*200的等腰直角三角形!和<code>glViewport</code>接口的第三和第四个参数的值是一样的,而且当我们调整窗口大小的时候,注意:我们观察的是鼠标左键抬起后三角形的形状和位置的变化,你会发现这个三角形相对于窗口的左下角的位置没有发生变化!到这里,视口和窗口的区别与联系应该明了了:我们渲染的三角形并不是渲染在窗口上的,而是渲染在视口上的,默认情况下如果我们不调用<code>glViewport</code>设置视口的位置尺寸,视口的大小和窗口的大小相等,而如果调用了<code>glViewport</code>显式指定的视口的大小,那么视口与窗口的区别便会显现.</p><h3 id="其他">其他</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">glfwWindowHint</span><span class="params">(<span class="type">int</span> hint,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="type">int</span> value </span></span></span><br><span class="line"><span class="params"><span class="function">                    )</span></span></span><br></pre></td></tr></table></figure><p>This function sets hints for the next call to glfwCreateWindow. The hints, once set, retain their values until changed by a call to this function or glfwDefaultWindowHints, or until the library is terminated.</p><p>Window hints need to be set before the creation of the window and context you wish to have the specified attributes. They function as additional arguments to glfwCreateWindow.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">GLFWwindow * <span class="title">glfwCreateWindow</span><span class="params">(<span class="type">int</span> width,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">int</span> height,</span></span></span><br><span class="line"><span class="params"><span class="function">                            <span class="type">const</span> <span class="type">char</span> * title,</span></span></span><br><span class="line"><span class="params"><span class="function">                            GLFWmonitor * monitor,</span></span></span><br><span class="line"><span class="params"><span class="function">                            GLFWwindow * share </span></span></span><br><span class="line"><span class="params"><span class="function">                            )</span></span></span><br></pre></td></tr></table></figure><p>This function creates a window and its associated OpenGL or OpenGL ES context. Most of the options controlling how the window and its context should be created are specified with window hints.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">glfwMakeContextCurrent</span><span class="params">(GLFWwindow * window)</span></span></span><br></pre></td></tr></table></figure><p>This function makes the OpenGL or OpenGL ES context of the specified window current on the calling thread. It can also detach the current context from the calling thread without making a new one current by passing in NULL.</p><p>我们使用glfwCreateWindow()</p><h1>重要概念</h1><ul><li>VAO: Vertex Array Object, 顶点数组对象</li><li>VBO: Vertex Buffer Object, 顶点缓冲对象</li><li>EBO: Element Buffer Object, 元素缓冲对象</li><li>IBO: Index Buffer Object, 索引缓冲对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGLMacOS与Windows开发环境搭建</title>
      <link href="/posts/fd5f8e8b/"/>
      <url>/posts/fd5f8e8b/</url>
      
        <content type="html"><![CDATA[<p>本篇博客记录以<a href="https://github.com/JoeyDeVries">JoeyDeVries</a>的<a href="https://learnopengl.com/Introduction">OpenGL教程</a>为指导在<code>MacOS</code>和<code>Windows</code>系统上搭建OpenGL的过程和疑惑。<br>在参考的<a href="https://learnopengl-cn.github.io/01%20Getting%20started/02%20Creating%20a%20window/">OpenGL教程</a>中使用的开发平台是Windows系统上的VisualStudio，但是Mac系统上的VisualStudio不能进行C++开发，为了在Mac和Windows上保持相同的开发体验，我决定在MacOS和Windows上统一使用<code>VSCode</code> + <code>CMake</code> + <code>Ninja</code> + <code>Clang</code>的开发方案。</p><h1>前置知识</h1><h2 id="OpenGL是什么？">OpenGL是什么？</h2><p>OpenGL十分类似面向对象编程思想中的接口和虚方法，它只是定义了一个框架，而没有任何具体的实现。所有的实现需要显卡生产厂商自己实现。可以说OpenGL是一套规范。</p><h2 id="GLFW和GLAD">GLFW和GLAD</h2><p>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文、定义窗口参数以及处理用户输入。</p><p>因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。<br>GLAD是一个开源的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个在线服务。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。GLAD的作用是管理OpenGL的函数指针，所以在调用任何OpenGL函数之前，我们都需要初始化GLAD。</p><h2 id="C-工具链">C++工具链</h2><p>将C++从源代码变成可执行程序需要经过四个基本步骤：预编译、编译、汇编、链接。每一步都需要有相应的工具支持，将在C++编译成可执行程序过程中每个环节使用到的工具放在一起，就称这些工具组成了一套C++工具链。目前主流的C++工具链有GNU、LLVM、MSVC等。</p><h2 id="Clang和LLVM的介绍"><a href="https://llvm.org/">Clang和LLVM的介绍</a></h2><h2 id="Ninja-build介绍"><a href="https://ninja-build.org/">Ninja-build</a>介绍</h2><h1>准备工作</h1><h2 id="安装VSCode">安装<a href="https://code.visualstudio.com/">VSCode</a></h2><h2 id="安装CMake">安装<a href="https://cmake.org/">CMake</a></h2><p>Mac上也可以使用Homebrew进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cmake</span><br></pre></td></tr></table></figure><h2 id="安装Ninja">安装Ninja</h2><ol><li>Mac上使用Homebrew安装Ninja</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ninja</span><br></pre></td></tr></table></figure><ol start="2"><li>Windows上可以在github上的<a href="https://github.com/ninja-build/ninja/releases">ninja主页</a>进行下载，<strong>将下载完的文件的根目录添加到环境变量中</strong>。</li></ol><p>在终端中运行<code>ninja --version</code>如果正确显示版本号就说明ninja安装成功了。</p><h2 id="安装clang">安装clang</h2><ol><li>Mac上默认使用的C++编译器就是clang 不需要额外下载</li><li>Windows去到<a href="https://github.com/llvm/llvm-project/releases">LLVM</a>的Github主页上下载 下载LLVM-win64版本。将下载好的目录下的bin目录设置为环境变量。在终端中运行<code>clang --verison</code>如果正确显示版本号说明clang安装成功。</li></ol><h2 id="编译GLFW源码">编译GLFW源码</h2><p>去到<a href="https://www.glfw.org/download.html">GLFW官网</a>下载GFLW源码，解压下载好的源码文件，在终端中进入源码的根目录，创建名为<code>build</code>的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br></pre></td></tr></table></figure><p>要使我们编写的程序正确地调用GLFW库中的方法，我们可以使用动态链接或者静态链接GLFW库的方式，<strong>优先选择静态链接</strong>的方式，因为动态链接的方式需要额外指定一下参数，而且编译成功后运行可执行文件时还有找不到动态链接库的问题，具体细节会在下文会具体阐述。</p><p>使用<strong>静态链接方式</strong>要生成静态链接库，Windows下对应的文件是.lib，Mac下对应的文件是.a</p><p>CMake可以指定使用何种类型的构建系统，Windows下默认的构建系统是VisualStudio工程，这并不是我们想要的，因此在调用cmake指令的时候要手动指定要构建的系统。另外Windows下默认使用的编译器是VisualStudio编译器，我们也需要指定为clang编译器，所以cmake的完整指令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -G Ninja -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++</span><br></pre></td></tr></table></figure><p>接着使用<code>ninja</code>指令，如果编译成功的话，我们就能在build目录下的src目录下找到对应平台的静态链接库文件了。</p><p>使用<strong>动态链接方式</strong>要生成动态链接库，Windows下对应的文件是.dll，Mac下对应的文件是.dylib，动态链接库的编译命令和静态链接库是一样的，但是需要指定一下<code>BUILD_SHARED_LIBS</code>参数，注意指定一下要构建的系统，另外还要注意Windows下指定使用的编译器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -G Ninja -D BUILD_SHARED_LIBS=ON -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++</span><br></pre></td></tr></table></figure><p>接着使用<code>ninja</code>指令</p><p>对于MacOS系统，还使用<code>make install</code>命令可以把动态链接库安装到本机，可能需要管理员权限。动态库将会被安装到<code>usr/local/lib</code>目录，头文件安装到<code>usr/local/include</code>。</p><blockquote><p>2024.11.30更新<br>笔者使用ninja命令替代了make命令，因此<strong>make install</strong>命令要被替换为<strong>ninja install</strong>，文件会被安装到下面的目录:</p></blockquote><p>执行完上面的操作之后，就可以在<code>build</code>目录的<code>src</code>目录下看到对应的平台的动态链接库文件了。<br><strong>注意</strong> 在Windows下使用<code>Ninja</code>构建系统编译出来的动态链接库出了<code>glfw3.dll</code>外还会生成一个<code>glfw3dll.lib</code>，这两个都是在下文搭建OpenGL开发环境中要使用到的文件。</p><h2 id="下载GLAD">下载GLAD</h2><p>使用GLAD的<a href="https://glad.dav1d.de/">在线服务</a>下载所需要的文件。API栏目下的gl的版本一般选择最新的就可以，参考OpenGL教程中要求使用的OpenGL的版本不能低于<strong>3.3</strong>，Profile栏目选择Core，其他的不用配置，点击Generate之后下载生成的压缩包到本地。解压压缩包，文件结构应该如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── include</span><br><span class="line">│   ├── KHR</span><br><span class="line">│   │   └── khrplatform.h</span><br><span class="line">│   └── glad</span><br><span class="line">│       └── glad.h</span><br><span class="line">└── src</span><br><span class="line">    └── glad.c</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="VSCodeCoding体验优化">VSCodeCoding体验优化</h2><h3 id="设置">设置</h3><p>使用Mac上的 <code>Command + ,</code> 或者Windows上的 <code>Control + ,</code> 快捷键可以打开设置页面,在设置页面的右上角选择使用Json模式打开, 将下面的文本粘贴进去，将鼠标悬停在上面可以看到每一个设置的作用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&quot;files.autoSave&quot;: &quot;afterDelay&quot;,</span><br><span class="line">&quot;files.autoGuessEncoding&quot;: true, </span><br><span class="line">&quot;workbench.list.smoothScrolling&quot;: true, </span><br><span class="line">&quot;editor.cursorSmoothCaretAnimation&quot;: &quot;on&quot;,</span><br><span class="line">&quot;editor.smoothScrolling&quot;: true, </span><br><span class="line">&quot;editor.cursorBlinking&quot;: &quot;smooth&quot;,</span><br><span class="line">&quot;editor.mouseWheelZoom&quot;: true,</span><br><span class="line">&quot;editor.formatOnPaste&quot;: true,</span><br><span class="line">&quot;editor.formatOnType&quot;: true,</span><br><span class="line">&quot;editor.formatOnSave&quot;: true,</span><br><span class="line">&quot;editor.wordWrap&quot;: &quot;on&quot;,</span><br><span class="line">&quot;editor.guides.bracketPairs&quot;: true,</span><br><span class="line">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;: false,</span><br><span class="line">&quot;editor.acceptSuggestionOnEnter&quot;: &quot;smart&quot;,</span><br><span class="line">&quot;editor.suggestSelection&quot;: &quot;recentlyUsed&quot;,</span><br><span class="line">&quot;window.dialogStyle&quot;: &quot;custom&quot;,</span><br><span class="line">&quot;debug.showBreakpointsInOverviewRuler&quot;: true,</span><br><span class="line">&quot;editor.fontFamily&quot;: &quot;JetBrains Mono&quot;,</span><br><span class="line">&quot;git.ignoreMissingGitWarning&quot;: true,</span><br><span class="line">&quot;explorer.confirmDelete&quot;: false,</span><br><span class="line">&quot;cmake.configureOnOpen&quot;: false,</span><br></pre></td></tr></table></figure><h3 id="插件与字体">插件与字体</h3><p><strong>MarkDown插件</strong></p><p>Markdown Preview Enhanced</p><p>Markdown All in One</p><blockquote><p>2024.8.11更新<br>在VSCode中使用像Typora那样将图片复制到指定路径的方法如下：</p><ul><li>首先下载好上面的两个插件</li><li>在VSCode的设置中搜索<code>Markdown › Copy Files: Destination</code></li><li>添加一对KeyValue如下： Key: <code>**/*</code> Value: <code>$&#123;documentBaseName&#125;/</code></li></ul><p>但是我还没有搞懂KeyValue是如何做路径映射的<br><a href="https://code.visualstudio.com/docs/languages/markdown">VSCode官网上的参考</a></p></blockquote><p><strong>代码截图工具</strong> CodeSnap</p><p><strong>图标主题</strong> Material Icon Theme</p><p><strong>代码格式化工具</strong> Prettier - Code formatter</p><p><strong>主题</strong> <a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme">OneDarkPro</a></p><p><strong>字体</strong> <a href="https://www.jetbrains.com/lp/mono/">JetBrains Mono</a></p><h3 id="智能提示">智能提示</h3><p>GLAD和GLFW都是第三方库，在VSCode直接使用是没有提示的。使用Mac上的 <code>Shift + CMD + P</code> 或者 Windows上的 <code>Shift + Control + P</code> 在弹出的搜索栏中输入<code>C/C++:Edit Configurations(JSON)</code>，会新建如下Json文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Mac&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;$&#123;workspaceFolder&#125;/**&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [],</span><br><span class="line">            &quot;macFrameworkPath&quot;: [</span><br><span class="line">                &quot;/Applications/Xcode-15.1.0.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;compilerPath&quot;: &quot;/usr/bin/clang&quot;,</span><br><span class="line">            &quot;cStandard&quot;: &quot;c17&quot;,</span><br><span class="line">            &quot;cppStandard&quot;: &quot;c++17&quot;,</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;macos-clang-arm64&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>includePath</code>中将项目的include目录添加进去，保存重启VSCode，编写OpenGL相关代码时就会有提示了。</p><blockquote><p>2024.12.9更新<br>请注意,虽然有智能提示了，但是不代表在编译项目的时候，编译器可以找到对应的头文件<br>我们需要在CMakeList文件中使用<code>include_directories($&#123;INCLUDE_DIR&#125;)</code>命令添加相关的文件路径</p></blockquote><h3 id="include头文件第一行报红问题">include头文件第一行报红问题</h3><p>按照上面的流程设置完之后,点击include的头文件也能跳转到对应头文件的内容中，但是在第一行会有一个红色的波浪线，原因是设置中<code>clang.diagnostic.enable</code>选项被打开了，将它关掉就不会有问题了。</p><h1>OpenGL环境搭建</h1><h2 id="目录结构">目录结构</h2><p>教程的每一个小节是一个小的OpenGL项目，所有小节项目共用相同的<code>lib</code>和<code>include</code>路径，另外还共用一个<code>glad.c</code>脚本。文件目录结构如下，将前文中编译成功的GLFW的库文件和GLAD在线服务中下载下来的文件放入对应的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── C1_GettingStart</span><br><span class="line">│   ├── P1_HelloWindow</span><br><span class="line">│   │   ├── CMakeLists.txt</span><br><span class="line">│   │   └── src</span><br><span class="line">│   │       └── main.cpp</span><br><span class="line">│   └── P2_HelloTriangle</span><br><span class="line">│       ├── CMakeLists.txt</span><br><span class="line">│       └── src</span><br><span class="line">│           └── main.cpp</span><br><span class="line">├── C2_Lighting</span><br><span class="line">│   ├── P1_Color</span><br><span class="line">│   │   ├── CMakeLists.txt</span><br><span class="line">│   │   └── src</span><br><span class="line">│   │       └── main.cpp</span><br><span class="line">├── README.md</span><br><span class="line">├── include</span><br><span class="line">│   ├── GLFW</span><br><span class="line">│   │   ├── glfw3.h</span><br><span class="line">│   │   └── glfw3native.h</span><br><span class="line">│   ├── KHR</span><br><span class="line">│   │   └── khrplatform.h</span><br><span class="line">│   └── glad</span><br><span class="line">│       └── glad.h</span><br><span class="line">├── lib</span><br><span class="line">│   ├── glfw3.dll</span><br><span class="line">│   ├── glfw3.lib</span><br><span class="line">│   ├── glfw3dll.lib</span><br><span class="line">│   ├── libglfw.3.4.dylib</span><br><span class="line">│   ├── libglfw.3.dylib -&gt; libglfw.3.4.dylib</span><br><span class="line">│   └── libglfw3.a</span><br><span class="line">└── src</span><br><span class="line">    └── glad.c</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写测试程序">编写测试程序</h2><p>测试代码来自参考OpenGL教程的<a href="https://learnopengl-cn.github.io/01%20Getting%20started/03%20Hello%20Window/">HelloWindow</a>章节</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glad/glad.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">framebuffer_size_callback</span><span class="params">(GLFWwindow *window, <span class="type">int</span> width, <span class="type">int</span> height)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processInput</span><span class="params">(GLFWwindow *window)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化GLFW</span></span><br><span class="line">    <span class="built_in">glfwInit</span>();</span><br><span class="line">    <span class="comment">// 设置使用的GLFW最小版本号为3.3</span></span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定使用OpenGL的核心功能</span></span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    GLFWwindow *window = <span class="built_in">glfwCreateWindow</span>(<span class="number">800</span>, <span class="number">600</span>, <span class="string">&quot;HelloWindow&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (window == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="built_in">glfwTerminate</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// GLAD用来管理OpenGL函数指针 调用任何OpenGL的函数之前都需要初始化GLAD</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">gladLoadGLLoader</span>((GLADloadproc)glfwGetProcAddress))</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 留意窗口和视口的区别</span></span><br><span class="line">    <span class="built_in">glViewport</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">processInput</span>(window);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">glClearColor</span>(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">        <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">        <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwTerminate</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">framebuffer_size_callback</span><span class="params">(GLFWwindow *window, <span class="type">int</span> width, <span class="type">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glViewport</span>(<span class="number">200</span>, <span class="number">200</span>, width / <span class="number">2</span>, height / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processInput</span><span class="params">(GLFWwindow *window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写CMakeList">编写CMakeList</h2><p>在Windows和MacOS上通用的<code>CMakeLists.txt</code>文件内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(HelloWindow VERSION <span class="number">0.1</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 C++17 标准</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD_REQUIRED <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置源代码目录和包含目录</span></span><br><span class="line"><span class="keyword">set</span>(SOURCE_DIR <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/src&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(INCLUDE_DIR <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/../../include&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(LIBRARY_DIR <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/../../lib&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加头文件目录</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;INCLUDE_DIR&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找源文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB SOURCES <span class="string">&quot;$&#123;SOURCE_DIR&#125;/*.cpp&quot;</span> <span class="string">&quot;$&#123;PROJECT_SOURCE_DIR&#125;/../../src/glad.c&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCES&#125;</span>)</span><br><span class="line"><span class="keyword">if</span>(WIN32)</span><br><span class="line">    <span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="string">&quot;$&#123;LIBRARY_DIR&#125;/glfw3.lib&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#动态链接库方式 不优先考虑</span></span><br><span class="line">    <span class="comment">#  target_link_libraries($&#123;PROJECT_NAME&#125; &quot;$&#123;LIBRARY_DIR&#125;/glfw3dll.lib&quot;)</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(APPLE)</span><br><span class="line">    <span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="string">&quot;$&#123;LIBRARY_DIR&#125;/libglfw3.a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动态链接库方式 不优先考虑</span></span><br><span class="line">    <span class="comment"># target_link_libraries($&#123;PROJECT_NAME&#125; &quot;$&#123;LIBRARY_DIR&#125;/libglfw.3.dylib&quot;)</span></span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是在苹果系统上且如果使用的是静态链接的方式，需要链接额外的框架</span></span><br><span class="line"><span class="keyword">if</span>(APPLE)</span><br><span class="line">    <span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="string">&quot;-framework Cocoa&quot;</span> <span class="string">&quot;-framework OpenGL&quot;</span> <span class="string">&quot;-framework IOKit&quot;</span> <span class="string">&quot;-framework CoreVideo&quot;</span> <span class="string">&quot;-lobjc&quot;</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>需要注意</strong></p><ol><li>Windows上使用动态链接的方式<code>target_link_libraries()</code>中lib文件不是<code>glfw3.dll</code>而是<code>glfw3dll.lib</code>，另外使用动态链接的方式编译成可执行程序后，还需要把<code>glfw3.dll</code>文件复制到可执行程序所在的目录下程序才能够正常运行。因此优先使用静态链接的方式</li><li>MacOS上如果使用了静态链接的方式需要链接额外的框架</li></ol><h2 id="构建OpenGL程序">构建OpenGL程序</h2><ol><li>在项目的根目录下创建build<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br></pre></td></tr></table></figure></li><li>执行cmake指令，指定要构建的文件系统和使用的编译器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake .. -G Ninja -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++</span><br></pre></td></tr></table></figure></li><li>执行ninja<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ninja</span><br></pre></td></tr></table></figure></li></ol><p>编译完成之后就可以在build目录下找到可执行程序了，能够正常运行就说明OpenGL的开发环境搭建完成。</p><h1>参考文章</h1><p><a href="https://learnopengl-cn.github.io">OpenGL中文教程</a></p><p><a href="https://learnopengl.com/">OpenGL英文教程</a></p><p><a href="https://huosk.github.io/2019/12/12/OpenGLDevWithVSCode-CMake/">VSCode+CMake搭建OpenGL开发环境</a></p><p><a href="https://fdhenard.github.io/build_glfw_on_osx.html">How to build GLFW on Mac OSX 10.13 for use in xcode</a></p><p><a href="https://llvm.org/">LLVM官网</a></p><p><a href="https://ninja-build.org/">Ninja官网</a></p><p><a href="https://cmake.org/">CMake官网</a></p><p><a href="https://blog.csdn.net/qq_51173321/article/details/126287293">VSCode优化使用体验</a></p><p><a href="https://blog.csdn.net/cbc000/article/details/80670413?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-80670413-blog-123625515.235%5Ev43%5Econtrol&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-80670413-blog-123625515.235%5Ev43%5Econtrol&amp;utm_relevant_index=1">VSCode智能提示</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于依赖注入</title>
      <link href="/posts/978a7745/"/>
      <url>/posts/978a7745/</url>
      
        <content type="html"><![CDATA[<p>起因是，笔者在调研如何实现一套高效的UI换皮框架的时候，接触到了依赖注入的概念。所谓UI换皮，就是在UI的交互和显示文本内容信息等功能模块不变的情况下，仅仅是需要做美术资源的替换或者动画的修改。在笔者过往的开发过程中，UI的交互模块和动效模块并没有分割。那么就导致了一个问题：当项目进入一个大量美术风格测试的阶段时，比如，有十套美术风格要上线测试，按照之前的方案，笔者就要复制十分类似的预制体，然后为这十套预制体各自编写一套控制脚本，很麻烦的一点是，页面中的按钮、文本信息都是一样的，而我需要在十份不同的脚本中编写十次，并且，当其中某一个按钮的点击功能或者文本的内容发生改变时，我就要去改十份脚本中的内容，维护成本实在是太高了，因此笔者希望找到一种解决方案，能够将UI中的功能模块与动效模块隔离开，只需要编写一次功能模块，表现模块由于动画实现方式等原因必定是要定制的。 由此，笔者了解到了<code>Zenject</code>或许可以解决我们的问题。<br>我们的问题在于，在不同的页面中，按钮、文本等交互组件的节点是无法保证的，每一种美术风格如何向UI的交互模块的代码中传入正确的Button或Text组件呢？这就是我们的问题</p><h1>依赖注入</h1><p>依赖注入(Dependency Inject)本质上是一种设计模式，笔者按照个人的理解描绘一个场景帮助各位读者形成对依赖注入的初步认知：程序功能的实现依赖于各个类之间的协同配合，我们通过一些设计原则保证这些类的可维护性与可拓展性，设计原则中有一条原则名为单一职责原则(Single Responsibility Principle)，现在有如下一个例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class A&#123;</span><br><span class="line">    private B _b;</span><br><span class="line"></span><br><span class="line">    public A()&#123;</span><br><span class="line">        _b = new B();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void DoSomeThings()&#123;</span><br><span class="line">        _b.Func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的写法虽然能够实现功能，但是该类的可拓展性被降低了，这是因为类A的单一职责原则被一定程度上破坏了，类A有两个职责，一是实例化成员_b，二是执行DoSomeThings方法。间接导致了这段代码的耦合变高、可拓展性变差。要解耦合也很简单，将类A的职责拆分，我们可以把成员b的定义_b的工作转移到该类外面去，然后通过构造方法传参的方式，将类B的实例化对象传入进来：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> B _b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span>(<span class="params">B b</span>)</span>&#123;</span><br><span class="line">        _b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoSomeThings</span>()</span>&#123;</span><br><span class="line">        _b.Func();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照这样的写法，只要任何继承自B的类，都可以复用这段脚本。想象一下，如果类A是一个页面相关逻辑交互的类，类B是组织页面上一些动画表现相关的类，对同一个页面来说，页面上的按钮交互功能、显示的文本信息内容基本上都是一样的只有一些表现形式上的不同，那么我们就可以使用这种方法，对于不同表现形式的页面，他们的逻辑交互是可以复用的，只需要在这个维护交互逻辑的类被实例化的时候将具体的表现形式的类传进来就可以了。</p><h1>对依赖注入的误解</h1><p>一开始接触依赖注入的概念时会感到很困惑，要完全理解依赖注入的思想需要时间和经验。</p><p>在上面的例子中，使用依赖注入的方式可以轻松切换一个给定接口的不同实现。然而这只是依赖注入所能提供的众多好处之一。更重要的是依赖注入的框架允许我们更容易遵循单一职责原则。通过让依赖注入框架来关心将类连接起来，每个类本身可以只关心履行自己的职责。</p><p>另一个对于刚刚接触DI的人所犯普遍的错误是，他们会从每个类里面提取接口，然后到处使用接口，而不是直接使用类。我们使用依赖注入的目标是让我们的代码解耦合，所以我们认为将一个类与接口绑定比将一个类与另一个类绑定是更加合理的。然而，在大多数情况下，程序中的各种功能都是由一个具体的类来实现他们的，提取接口的行为仅仅会是增加了不必要的维护成本。而且，具体类的公共成员已经通过它的公共成员定义了一个接口。一个好的经验法则是，只有在一个类有超过一个实现或者在未来会有多个实现的情况下才创建接口。顺带一提，这种原则叫作复用抽象原则(Reused Abstraction Principle)。</p><p>依赖注入的其他好处包括：</p><ul><li>可重构性(Refactorability)当代码是松耦合的时候，正确使用DI的时候就是这样，整个代码库会更加有弹性，我们可以完全修个代码库的某一个部分而不会对其他部分产生任何影响。</li><li>鼓励模块化代码(Encourage modular code)使用DI框架时，你会很自然地遵循更好的设计实践，因为DI会迫使你去思考类之间的接口依赖关系。</li><li>可测试性(Testability) 编写单元测试或者用户驱动测试变得十分容易，因为这只是编写不同组合根(composition root)的事情，通过编写不同的组合根就能组合不同的依赖。想要只测试一个子系统？只需要创建一个新的组合根就可以了。</li></ul><h1>Zenject概念</h1><p>当我们在编写一个单独的类来实现某个功能的时候，它大概率需要</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    ISomeS</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>HelloWorld</h1><p>本小节将使用Zenject框架编写一个HelloWorld，<br>按照Zenject的HelloWorld教程编写之后，确实能输出HelloWorld，不过笔者有几个疑问，首先是按照Zenject的官方说法，Zenject内部维护了一个Container，所有由Zenject创建的实例都会存放在这个Container中，那么我该如何访问到Container类中的实例呢？<br>下面再来一个例子:<br>在场景中添加一个空物体并挂载下面这个脚本，这个脚本中使用[Inject]特性标记了Construct方法，如果在Awake、Start和Construct方法上打断点的话，Construct会先于Awake执行，请注意，这是物体在游戏启动时就在场景中的情况，但是如果物体是在运行了一段时间后被动态加载上来的，执行下面这个脚本就会报错了，还需要看一下是什么原因。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> Zenject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="keyword">private</span>  Greeter _greeter;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="built_in">float</span> _timer;</span><br><span class="line">      [<span class="meta">Inject</span>]</span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Construct</span>(<span class="params">Greeter greeter</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">            _greeter = greeter;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">      &#123; </span><br><span class="line">           </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">            _timer += Time.deltaTime;</span><br><span class="line">            <span class="keyword">if</span> (_timer &gt;= <span class="number">1f</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                  _greeter.Log();</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>几种注入方式</h1><h2 id="构造器注入">构造器注入</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span>&#123;</span><br><span class="line">    IBar _bar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span>(<span class="params">IBar bar</span>)</span>&#123;</span><br><span class="line">        _bar = bar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字段注入">字段注入</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span>&#123;</span><br><span class="line">    [<span class="meta">Inject</span>]</span><br><span class="line">    IBar _bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字段的注入发生在构造函数调用之后。所有被标记了[Inject]特性的字段都会在容器中查找并给定一个值。无论这个字段是private还是public方法，注入都会发生</p><h2 id="Property-Injection">Property Injection</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span>&#123;</span><br><span class="line">    [<span class="meta">Inject</span>]</span><br><span class="line">    <span class="keyword">public</span> IBar Bar&#123;</span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PropertyInjection和字段的情况一样，同样的，无论setter/getter是public还是private注入都会发生</p><h2 id="Method-Injection">Method Injection</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span>&#123;</span><br><span class="line">    IBar _bar;</span><br><span class="line">    Qux _qux;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Inject</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">IBar bar, Qux qux</span>)</span>&#123;</span><br><span class="line">        _bar = bar;</span><br><span class="line">        _qux = qux;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Method Inject和构造函数注入十分相似</p><p>一些需要说明的：</p><ul><li>对于继承自MonoBehaviour的脚本来说，更推荐使用Method注入的方式，因为我们无法操作MonoBehaviour的构造函数。</li><li>可以将任意数量的Method标记为Inject，不过这些Method被Inject的顺序是从基类到子类的。这种设计有利于避免，同时确保了基类中的方法首先完成注入，就跟构造方法的执行顺序一样。</li><li>InjectMethod在所有其他注入类型注入完成后完成注入</li><li>你可以安全地假定（一种情况除外：你的代码中存在循环依赖）。</li><li>需要注意的是，使用注入方法来执行初始化逻辑通常不是一个好的方法。更推荐的方式是使用IInitializable.Initialize或者Start()方法，因为这样允许你首先创建整个初始对象图。</li></ul><p>推荐<br>跟字段/属性注入比起来，使用构造方法和属性注入的方式更加推荐</p><ul><li>构造方法注入强迫该构造方法的依赖只在该类被创建的时候指定一次，这通常是你想要的。在大多数的情况下，你并不想暴露一个公共的属性</li></ul><h1>向依赖注入容器中注册映射关系</h1><p>依赖注入框架的核心就是DI container。 它最简单的形式就是一个持有所有注册项目的字典，本节我们将尝试使用，在Zenject中，这被叫做binding(绑定关系)。因为它在抽象类型和具体类型之间创建了绑定关系。</p><h2 id="Binding">Binding</h2><p>每个依赖注入框架的最终形态就是一个将类型和实例绑定起来的框架。</p><p>在Zenject中，依赖映射通过向一个名为container(容器)的结构中添加绑定关系来完成。添加完映射关系之后，这个容器就知道了如何在你的Application中创建所有的对象实例，通过递归地解决给定物体上的所有的依赖。</p><p>当这个容器被要求用一个给定的类型构建一个实例，这个容器使用反射来找到这个类的构造方法中的参数和所有被标记了<code>[Inject]</code>特性的字段/属性。然后这个容器会尝试解决每一个需要的它用来依赖，</p><p>因此每一个Zenject application必须告诉容器如何决定每一个依赖，通过<code>Bind command</code>的方式，比如下面这个例子:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Foo</span></span><br><span class="line">&#123;</span><br><span class="line">    IBar _bar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span>(<span class="params">IBar bar</span>)</span>&#123;</span><br><span class="line">        _bar = bar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用下面的代码来连接这个类中的依赖项：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Container.Bind&lt;Foo&gt;.AsSingle();</span><br><span class="line">Container.Bind&lt;IBar&gt;().To&lt;Bar&gt;.AsSingle();</span><br></pre></td></tr></table></figure><p>这告诉Zenject每一个需要类型Foo的依赖应该使用同样的实例，这个实例将会在需要的时候自动创建。类似地，任何需要IBar和接口的类将会被分配同样的Bar类型的实例。</p><p>完整的<code>Bind Command</code>形式如下。需要指明大部分的情况我们将不回用到以下所有的方法，当没有指明调用某些方法的时候，将会使用默认值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Container.Bind&lt;ContractType&gt;()</span><br><span class="line">    .WithId(Identifier)</span><br><span class="line">    .To&lt;ResultType&gt;()</span><br><span class="line">    .FromConstructionMethod()</span><br><span class="line">    .AsScope()</span><br><span class="line">    .WithArguments(Arguments)</span><br><span class="line">    .OnInstantiated(InstantiatedCallback)</span><br><span class="line">    .When(Condition)</span><br><span class="line">    .(Copy|Move)Into(All|Direct)SubContainers()</span><br><span class="line">    .NonLazy()</span><br><span class="line">    .IfNotBound();</span><br></pre></td></tr></table></figure><p>下面解释一下各个Method的含义:</p><ul><li>ContractType: 那些在脚本中被标记了Inject的参数或者字段，其类型会表现为ContractType。</li><li>ResultType:<br>默认值等于ContractType<br>ResultType必须等价与ContractType或者派生自ContractType。</li><li>Identifier 该值可以给这个绑定操作一个独一无二的ID，不过在大部分情况下我们不需要进行给定ID的操作。此值将由指定的 ConstructionMethod 用于检索该类型的实例。</li><li>FromConstructionMethod</li><li>Scope</li><li></li></ul><h2 id="感悟">感悟</h2><p>看了一段时间Zenject的代码，感受到了接口概念的引入带给面向对象开发带来的拓展性，比如下面这段代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FooFactory</span> : <span class="title">IFactory</span>&lt;<span class="title">Foo</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">Create</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">InstallBindings</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    Container.Bind&lt;Foo&gt;().FromIFactory(x =&gt; x.To&lt;FooFactory&gt;().FromSubContainerResolve().ByMethod(InstallFooFactory)).AsSingle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InstallFooFactory</span>(<span class="params">DiContainer subContainer</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    subContainer.Bind&lt;FooFactory&gt;().AsSingle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类只能够继承自一个类，对于像Zenject这种辅助性质的框架，它没必要知道每一个需要依赖注入的类到底是什么，以及它的具体细节，Zenject只关心这个类可以被依赖注入，如果为了引入Zenject框架而需要给所有要依赖注入的类都添加一个基类，那么代码的可拓展性就太差了，使用接口就没有这种问题了，Zenject可以通过持有接口的方式间接持有该类，同样的一个类可以实现多个接口，那么这个类就可以通过多种不同的接口来被间接地持有。</p><h1>参考资料</h1><ul><li><a href="https://www.sebaslab.com/ioc-container-unity-part-1/">Inversion of Control with Unity – part 1</a></li><li><a href="https://www.sebaslab.com/ioc-container-unity-part-2/">Inversion of Control with Unity – part 2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏精细化迭代中美术风格管理框架</title>
      <link href="/posts/562d8b72/"/>
      <url>/posts/562d8b72/</url>
      
        <content type="html"><![CDATA[<h1>框架整理</h1><h2 id="框架职责">框架职责</h2><ul><li>新增一套美术风格</li><li>删除一套美术风格</li><li>新增某一美术风格一类动效</li><li>删除某一美术风格的某一类动效</li><li>新增某一美术风格某一类动效的新风格</li><li>删除某一美术风格的某类动效的某一个风格</li><li>新增某一美术风格下的宝石块的风格</li><li>删除某一美术风格下的宝石块的某一风格</li><li>新增一套运行时美术风格切换策略(美术风格承接策略)</li><li>删除一套运行时美术风格切换策略(美术风格承接策略)</li><li>新增某一美术风格下某一页面上的交互/表现组件</li><li>删除某一美术风格下某一页面上的交互/表现组件<br>实验字段分类<br>风格管理框架是对以下六类实验的管理和组织:</li></ul><ol><li>美术风格实验字段,有些字段是单纯的控制美术风格的(美术风格实验字段), 应该要保证这些实验字段中只有一个是生效的(做保底和冲突检查) (约束管理初始美术风格的实验字段)</li><li>美术风格策略实验,某些实验字段天生会带一些逻辑(素材承接实验字段),在运行时会切换美术风格, 在风格管理框架中将这类实验字段映射为一套策略, 也许Session内会有多个可以生效的美术风格切换策略,只会有一个字段真正生效,所以要做保底和冲突检查 (约束Session内更新美术风格的实验字段)</li><li>特定风格特定动效实验字段,有一些实验字段是在某一美术风格上的某一动效上做实验 约束开发者使其知晓自己所做的这块会影响哪些风格 增加一个CareExperiment字段, 当要去判断GetABTestGroup的时候需要判这个实验字段在不在Care Experiment里面,如果不在的话 兜底+报错</li><li>特定风格特定页面实验字段,在某一美术风格的页面上增加新的功能模块or页面表现的</li><li>同一页面的不同样式实验字段, 同一美术风格下的多个隐私弹窗,这部分实验字段应该在向UIManager中注册UIInfo时组织一下逻辑</li><li>宝石块风格实验字段<br>其中 3、4、5、6实验字段的生效是以特定美术风格实验字段生效为前提的,因此框架组要开发者手动维护美术风格字段与该美术风格字段下3、4、5、6实验字段的关系.<br>框架结构<br>暂时无法在飞书文档外展示此内容</li><li>解析所有代表运行时美术风格策略切换的实验字段(冲突检查),得到一个最终生效的运行时美术风格切换策略</li><li>框架首先解析所有代表美术风格的实验字段(冲突检查),得到一个最终生效的美术风格,进而得到该风格下关心的实验字段清单,下面的环节中如果需要访问ABTest,必须从该清单间接访问GameABTest,不可以直接访问</li><li>根据2中得到的美术风格得到各动效、宝石、页面块风格的解析策略(冲突检查,解析策略中组织实验逻辑),得到最终各个动效、宝石块生效美术风格和页面的UIInfo</li><li>根据3中得到的页面生效风格,找到该套页面风格的信息(预制体、Logic、UIElements、UIStg)向UIManager中注册</li><li>根据3中得到的各动效策略,向EffectManager中策各动效信息</li><li>根据3中得到的宝石块策略,向BlockGem Manager中注册各宝石块的风格信息</li><li>根据2中得到的美术风格策略,在特定时机执行美术风格切换逻辑(如果美术风格切换策略不是切换页面的美术风格而是要切换某个动效/宝石块的风格,需要做美术风格和要切换动效的风格一致性检查)</li><li>打开某一页面的时候,根据该页面的Stg(为每一个UILogic都实现一个Stg有点繁琐了,在特定美术风格特定UILogic中直接访问风格框架的AB测解耦模块也是可以的)做表现</li><li>音效风格也需要加入</li></ol><h2 id="框架设计">框架设计</h2><p>风格解析模块设计</p><ul><li>页面美术风格枚举</li><li>每个美术风格关心的实验清单</li><li>AB测解耦模块,传入美术风格关心的实验清单, 框架内所有要访问AB测的地方都是通过AB测解耦模块来访问的</li><li>每个美术风格对应的每一类动效的解析逻辑(冲突检查)</li><li>每个美术风格对应的宝石块的解析逻辑(冲突检查)</li><li>每个美术风格对应的页面UIInfo的解析逻辑(冲突检查)</li><li>每个美术风格与该风格可以播放的每一类动效风格的关系映射表</li><li>每个美术风格与该风格可以表现的宝石块风格的关系映射表</li><li>每个美术风格下的UIInfo预设表<br>暂时无法在飞书文档外展示此内容</li></ul><ol><li>定义一套美术风格清单,  建立美术风格与每个动效之间囊括关系的映射表,来确保实验字段生效的动效和生效的美术风格是契合的.(美术风格动效的生效优先级是最高的)</li><li>美术风格解析逻辑 得到一组可以在当前美术风格下展示的动效映射表 得到当前美术风格关心的表现相关的实验字段组</li><li>解析在Session中更新美术风格的逻辑体只会有一个字段真正生效,所以要做保底和冲突检查)(约束Session内更新美术风格的实验字段)</li><li>解析各个动效和宝石块 会解决冲突</li><li>得到一组美术风格、动效、宝石块的风格清单 + 当前美术风格关心的其他表现上的实验字段组</li></ol><ul><li>美术页面风格 消除动效风格 心动动效风格 加分动效风格 Combo动效风格 加分动效风格 鼓励语动效风格 破纪录动效风格 清盘动效风格 方块发光动效风格…</li><li>宝石块风格</li><li>CareExperiments 当前这个风格关心的实验 如果不在里面就报错 需要所有配置层之外调用的ABTest的实验字段加入这里面 实验字段分类中的3 4 约束开发者使其知晓自己所做的这块会影响哪些风格兜底+报错</li></ul><h2 id="框架工作流梳理">框架工作流梳理</h2><ul><li>新增/删除美术风格<ul><li>在美术风格解析模块添加新风格的实验字段解析逻辑</li><li>在UIManager模块添加一套风格页面的预设</li><li>准备页面预制体资源、页面UIElements、页面Logic、页面运行时策略Stg</li></ul></li><li>新增/删除某一美术风格一类动效<ul><li>将该实验字段添加到美术风格关心的实验字段中</li><li>新增一个表示该类动效的枚举类型</li><li>在解析该动效枚举字段部分增加该实验字段的逻辑</li><li>新增该动效播放需要实现的接口</li><li>准备动效预制体、驱动预制体脚本</li><li>在游戏流程中新增动效播放的时机(在对应风格的GameView上播,不会影响到其他风格,但是对于没有改动效的美术风格要做保底,这部分逻辑还不清楚,是否每一个美术风格对应一个GameView)</li></ul></li><li>新增/删除某一美术风格某一类动效的风格<ul><li>将该实验字段添加到美术风格关心的实验字段中</li><li>新增动效风格枚举字段</li><li>在解析该动效枚举字段部分增加该实验字段的逻辑</li><li>准备动效预制体资源、准备驱动动效的脚本、实现动效定义的接口</li></ul></li><li>新增/删除某一美术风格下的宝石块的风格<ul><li>将该实验字段添加到美术风格关心的实验字段中</li><li>新增表示该风格的宝石块枚举类型</li><li>准备宝石块美术资源</li><li>新增解析该宝石块实验字段的解析逻辑</li><li>定义一套宝石块资源预设</li><li>定义资源预设与枚举字段的映射关系</li></ul></li><li>新增/删除一套运行时美术风格切换策略(美术风格承接策略)<ul><li>定义新的美术风格切换策略枚举字段</li><li>在切换策略解析处新增该实验字段的解析逻辑</li><li>编写策略的切换逻辑,其中只能写美术风格、动效风格、宝石块风格的风格切换逻辑</li></ul></li><li>新增/删除某一美术风格下某一页面上的交互/表现组件<ul><li>将该实验字段添加到美术风格关心的实验字段中</li><li>预制体上添加组件</li><li>在特定页面的Stg中组织实验字段逻辑</li><li>在特定页面的Logic中调用Stg的接口做相关的显示</li></ul></li></ul><h2 id="要做的事情">要做的事情</h2><ul><li>精细化AB测解析模块的设计实现</li><li>UIManager模块扩展支持多风格管理</li><li>老UILogic重构 接入新UIManager模块</li><li>EffectManger实现</li><li>动效管理模块实现</li><li>动效Entity模块实现</li><li>原来EffectEntity迁移</li><li>宝石块管理模块的实现</li><li>加分动效的重构</li><li>AniPlayer集成</li><li>Adventure关卡页面的颜色配置(低优先级)</li></ul><h2 id="注意事项">注意事项</h2><ul><li>id  资源和脚本绑定</li><li>动效模块去其他模块的交互逻辑 如果要交互的其他模块出了问题 要在动效模块上报 重力下落在卡通风格里没有这个逻辑, 但是调用播放重力下落的时候数据层传上来的要求播放重力下落动效,这时要在动效模块上报</li><li>考虑在哪些方面会出问题</li><li>动效管理模块 与重力下落的数据逻辑</li><li>只在一个美术风格下做了一个组件的AB测试 影响到了其他风格同样的页面</li><li>风格的解析抽到一处</li><li>UI变成了容器 接受外部各种组件的传入 组件自己保证不出问题 需要遇到业务场景 优先级不高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityAssetBundle笔记</title>
      <link href="/posts/96c99d7a/"/>
      <url>/posts/96c99d7a/</url>
      
        <content type="html"><![CDATA[<h1>AssetBundle基础</h1><h2 id="AssetBundle原理">AssetBundle原理</h2><p>⭕️ AssetBundle在内存中如何加载、存储</p><h2 id="AssetBundle、AssetBundle-Browser与Addressable">AssetBundle、AssetBundle-Browser与Addressable</h2><p>AssetBundle是Unity推出的一种内置的资源压缩格式，能够允许开发者在运行时动态加载需要的资源。用不用取决于开发者自己。当你在Unity中创建、导入任何非代码资源或者文件夹的时候，在Inspector窗口的下面都会有一个AssetLabel：</p><img src="/posts/96c99d7a/image-1.png" class=""><p>Addressable是基于AssetBundle的一套完整的Unity资源管理框架，也就是说，如果我们使用Addressable进行开发，项目中的资源如何进行打包、加载Addressable都帮我们规划好了，我们只需要按照它给定的规范和接口使用资源就可以了。但是如果我们只是使用AssetBundle，那么我们还需要开发一套自己的资源管理框架。</p><p>另外，Unity还推出了<a href="https://github.com/Unity-Technologies/AssetBundles-Browser">AssetBundle-Browser</a>用来可视化AssetBundle的构建过程。应该说Unity是先推出了<code>AssetBundleBrowser</code>然后推出了<code>Addressable</code>。二者都可以用来管理AssetBundle，<code>Addressable</code>中有更多的自动化功能，而<code>AssetBundleBrowser</code>则更多地需要手动管理Bundle。所以<code>AssetBundle-Browser</code>算是<code>Addressable</code>的阉割版。</p><h2 id="AssetBundle-Browser的使用">AssetBundle-Browser的使用</h2><p>在AssetBundle-Browser仓库的说明文档中提示该工具并不作为Unity推荐的AssetBundle的资源管理工具，但是因为该工具的建议性，还是可以作为AssetBundle的入门学习使用。</p><p>按照说明文档的介绍，可以直接复制git仓库的连接将该库安装到Unity工程中，但是有可能会因为网络原因失败，可以选择DownloadZip，然后解压到Assets目录下，记得删除Test目录，<a href="https://www.cnblogs.com/XieBoss-blogs1/p/17847061.html">不然会有Boo命名空间的报错</a>。</p><h1>AssetBundle内存</h1><p>使用<a href="https://github.com/AssetRipper/AssetRipper?tab=readme-ov-file">AssetRipper</a>可以查看AssetBundle中的文件</p><img src="/posts/96c99d7a/image.png" class=""><p>Unity内置的AssetBundle工具是<a href="https://docs.unity3d.com/Packages/com.unity.addressables@2.3/manual/index.html">Addressable库</a></p><h1>依赖</h1><p>如果两个ab A和B中的一些资源都依赖了一个没有被指定要打包的资源C，那么C就会同时被打进ab A和B中，造成资源的冗余，增大ab和安装包的体积。而这个被A，B依赖的资源C又可以分为两种类型，一种是Assets下外部导入的资源，即开发者导入或创建的资源；另一种则是Unity内置的资源，例如内置的Shader，Default-Material和UGUI一些组件如Image用的一些纹理资源等等。因此要解决资源冗余的问题，就要分别对这两种被依赖的资源进行处理。</p><p>也就是说，只有我们自己手动把一些资源打进Bundle，<br>想要打Bundle，最终都要调用<code>BuildPipeline.BuildAssetBundles</code>接口，</p><p><code>public static AssetBundleManifest BuildAssetBundles(string outputPath,AssetBundleBuild[] builds,BuildAssetBundleOptions assetBundleOptions,BuildTarget targetPlatform)</code>接口支持传入AssetBundleBuild数组</p><p><code> public static AssetBundleManifest BuildAssetBundles(string outputPath,BuildAssetBundleOptions assetBundleOptions,BuildTarget targetPlatform)</code><br>通过给AssetBundleBuild显示传入打包的依赖关系，确保打包资源不会冗余<br>因此 重点在于AssetBundleBuild数组的构建。</p><p>在AssetBundle的工作流中，必须有一个环节指定有哪些资源是要打进Bundle的，这个操作可以由Unity内置的AssetBundle工具执行，也可以自己编写脚本执行。</p><h1>Unity AssetBundle与图集Sprite Atlas</h1><blockquote><p>本小节建议配合<a href="https://soincredible.github.io/posts/279644bd/">UnityAndroid工程包体优化</a>这篇博客阅读</p></blockquote><p>新建一个Unity工程，Assets目录下的文件结构如下：</p><img src="/posts/96c99d7a/image-3.png" class=""><p>其中名为TTT的图集中包含图片A、图片B、图片C资源，Image预制体中只有一个Image组件，Image组件上引用了图片A。笔者将会测试下面几种方案会如何将这些资源打入包内：</p><h2 id="不使用AssetBundle-不使用SpriteAtlas">不使用AssetBundle 不使用SpriteAtlas</h2><p>在这种策略下，除了那些已经放在Resources目录下的资源，还有那些被Resources目录中资源引用的、放在Resources外面的资源会被打入apk。也就是说<code>Art/Image/A</code> + 所有Resources目录下的文件被打包进了apk。</p><p>打出Android Apk之后解压，在目录下找到<code>assets/bin/Data/data.unity3d</code>，使用AssetRipper可以看到如下结构：</p><img src="/posts/96c99d7a/image-2.png" class=""><ul><li><p><code>globalgamemanagers</code>、<code>unity_builtin_extra</code>、<code>globalgamemanagers.asset</code>是Unity自动创建的，本测试并不关心其内容，也与我们自己的资源没有关系。</p></li><li><p><code>resources.asset</code>文件里面包含了Resources目录下的所有资源。即图片C和Image预制体</p></li></ul><img src="/posts/96c99d7a/image-4.png" class=""><ul><li><code>level0</code>是我们构建的场景，其中包含了场景中的所有节点信息，Image预制体也在其中。</li></ul><img src="/posts/96c99d7a/image-5.png" class=""><ul><li><code>sharedassets0.asset</code>文件则包含了所有的Resources目录下引用的Resources目录外的资源。其中包含了图片A。</li></ul><img src="/posts/96c99d7a/image-6.png" class=""><h2 id="没有AssetBundle-有SpriteAtlas的情况">没有AssetBundle 有SpriteAtlas的情况</h2><h3 id="SpriteAtlas勾选IncludeInBuild的情况">SpriteAtlas勾选IncludeInBuild的情况</h3><blockquote><p>注意 笔者在做下面的实验的时候，每做一个实验都会删除原来的图集-&gt;退出Unity-&gt;删除工程下的Library目录-&gt;重新启动Unity-&gt;重新创建一个一模一样的图集，Unity存在Bug当图集的IncludeInBuild选项的变化并不会生效。</p></blockquote><p>勾选IncludeInBuild的情况下，散图和图集之间就建立了<code>映射关系</code>，<code>散图</code>与<code>其依赖资源</code>之间的依赖关系就变成了<code>散图所在图集</code>与<code>依赖该散图资源</code>之间的依赖关系。</p><img src="/posts/96c99d7a/image-7.png" class=""><blockquote><p>注意：Resources目录下的资源会被无条件地打入包内，即便是包含在图集内的散图，最终打进包内的是散图所在的图集+散图自己，会有资源冗余。就比如图片C，在Resources目录下有一张图片C散图，然后图片C又被打入TTT图集存放在sharedassets中，不过本测试图集中还有很多的空白空间，多一张图片C并不会造成图集变大，因此包体不会变大。</p></blockquote><h3 id="SpriteAtlas未勾选IncludeInBuild的情况">SpriteAtlas未勾选IncludeInBuild的情况</h3><p>和<code>不使用AssetBundle 不使用SpriteAtlas</code>实验条件的结果一样，图集不会被打入包内。</p><h2 id="有AssetBundle-没有SpriteAtlas的情况">有AssetBundle 没有SpriteAtlas的情况</h2><p>我们需要更改一下工程的目录结构，新建一个AssetBundle目录，把Resources目录下的图片C移动到Sprites目录下，把Image预制体改名为ImageA放在PrefabA目录下，复制一个ImageA预制体改名为ImageB放在PrefabB目录下，将ImageB中的Sprite引用改为图片B。我们还要把刚才创建的图集删掉，防止影响实验。</p><img src="/posts/96c99d7a/image-8.png" class=""><p><s>我们分别给这三个目录添加AssetLabels:</s></p><img src="/posts/96c99d7a/image-9.png" class=""><p><s>然后打开AssetBundleBrowser，就会看到我们刚才打的三个AssetBundleTag了</s></p><img src="/posts/96c99d7a/image-10.png" class=""><p>上面这样添加AssetBundleLabel是错误的，正确的方式是打开AssetBundleBrowser将要打Bundle的文件夹或者文件拖拽进去，所有的Bundle结构组织都在AssetBundleBrowser中操作。</p><p>执行Build操作</p><img src="/posts/96c99d7a/image-11.png" class=""><p>然后BuildAndroidPlayer，此时我们的资源就不是在<code>assets/bin/Data/data.unity3d</code>目录下了，而是在<code>assets/bin/</code>目录下。<br>实验预期是<code>assets/bin/Data/data.unity3d</code>内不包含任何我们自己创建的资源。不过注意：场景中还存放了一个Image的预制体，因此在<code>level0</code>中你会看到预制体相关的信息，而在<code>sharedassets0.asset</code>中你会看到预制体上引用的图片A。从场景中将预制体移除，再次打包，我们就不会再在<code>assets/bin/Data/data.unity3d</code>目录下看到任何我们自己创建的资源了。</p><img src="/posts/96c99d7a/image-12.png" class=""><p>目前这种情况是没有资源冗余的，因为现在是散图，而且我们也在AssetBundle-Browser里面看到了每个Bundle中的资源情况。</p><h2 id="有AssetBundle-有SpriteAtlas的情况">有AssetBundle 有SpriteAtlas的情况</h2><h3 id="SpriteAtlas勾选IncludeInBuild的情况-2">SpriteAtlas勾选IncludeInBuild的情况</h3><p>按照上面说的：删除原来的图集-&gt;退出Unity-&gt;删除工程下的Library目录-&gt;重新启动Unity-&gt;重新创建一个一模一样的图集。</p><p>然后打开AssetBundleBrowser，可以看到，即便是我们创建了图集并且把图片ABC都放进了图集内，在AssetBundleBrowser里面还是把图片ABC识别为了单张图片去引用，虽然看上去资源没有冗余，但是打出包来之后这些图片会以图集的方式存在在ab包内，因此每个ab包内都会有一张图集，实际上是冗余的。所以为了避免冗余，我们需要为SpriteAtlas显示指定打包路径。</p><p>另外在我们的测试场景中，发现了Unity中打图集和打Bundle的机制：以图片C为例，如果图片C所在的目录被指定要打Bundle了，那么即便是图集文件中指定了包含图片C，最终构建出来的Atlas中也是不包含图片C的。</p><h3 id="SpriteAtlas未勾选IncludeInBuild的情况-其实不是因为未勾选IncludeInBuild导致图集没打进包内，而是因为没有显式制定图集Bundle">SpriteAtlas未勾选IncludeInBuild的情况 其实不是因为未勾选IncludeInBuild导致图集没打进包内，而是因为没有显式制定图集Bundle</h3><p>这种情况等同于<code>有AssetBundle 没有SpriteAtlas的情况</code>，不使用图集而是将散图打进包内，只要没有显式指定这些散图要打到哪个Bundle里，如果有多个Bundle引用了同一个散图，这个散图就会被打进每一个引用它的Bundle里，不只是图片，所有的资源都是这个逻辑。因此可以将放在一个图集中的不同散图看作是一个资源。</p><h2 id="结论">结论</h2><ul><li>想要让图集被打入Bundle内，要么显示指定该图集被打入哪个Bundle，要么引用该图集的资源被显示打入某个或某些Bundle且勾选了IncludeInBuild，但会造成资源冗余，而且如果内嵌场景也有对该图集的引用，在内嵌资源中也会有一份冗余的图集资源。SpriteAtlas的IncludeInBuild勾选与否影响的是：当内嵌场景中有对该图集中的散图有依赖时，未勾选的图集不会内嵌进Player中，场景加载的时候有可能找不到这个图集，而如果场景没有依赖该图集，那勾不勾选无所谓，因为BuildPlayer时判定没有对该图集有引用，就算勾选了也不会内嵌进Player。<strong>规范的图集与AssetBundle的使用应该是：内嵌场景中没有对图集的依赖、显示指定图集Bundle、不勾选IncludeInBundle</strong></li><li>勾选IncludeInBuild，不显式指定图集Bundle的情况下，BuildPlayer构建内嵌资源和BuildBundle构建Bundle资源，两种构建资源的结果是一样的，如果有对这个图集的引用，就会把这个图集构建到各自的资源中，没有引用就不会构建到包内。突然想到，把图集放到Resources目录下等价于AssetBundle中显式指定将图集打入Bundle。不勾选IncludeInBuild，且不指定图集Bundle，打入Bundle中的就都是散图了。</li><li>如果图集中的某一个散图被显示指定打入某一个Bundle，那么这个散图就不会被打进图集中，也不会因为有多个Bundle中的资源引用而造成冗余。</li><li>图集的引用计数等于图集中每一个散图各自引用计数的和</li><li>场景中应当尽可能地不包含任何资源的引用，而是通过一些脚本动态加载需要的资源，不然这些资源会被打进<code>assets/bin/Data/data.unity3d</code>文件中从而拖慢游戏的启动速度。</li><li>想要资源不冗余，就必须把场景中所有的资源引用过一遍，将所有引用的资源都显示地打Bundle。</li><li>BuildPlayer与BuildBundle是两个独立的过程。在BuildPlayer阶段处理的资源都会嵌入到<code>assets/bin/Data/data.unity3d</code>，这类资源叫嵌入式资源。</li></ul><p>好了，到此为止笔者大概清晰了AssetBundle和SpriteAtlas之间的关系，接下来笔者需要搞明白的事情是：在BuildBundle的时候自动将散图的关系和图集的关系的映射还是需要人为地去管理这个流程。我们需要看一下AssetBundleBrowser中的BuildBundle操作做了什么？</p><p>那么在构建AssetBundle的时候，AssetBundle是不知道有散图的图集的概念的吧？<br>Unity的AssetDataBase接口里面的GetAllDependency接口，在获取一个资源的所有依赖的时候，如果一个依赖是图片，那么它获取的依赖究竟是图集还是这个散图呢？需要验证一下。<br>是不是说明在BuildBundle之前需要先构建图集？ 然后再调用GetDependency接口的时候资源的依赖就都指向图集而非散图了。</p><h2 id="Sprite和SpriteAtlas和Texture的概念重要区分">Sprite和SpriteAtlas和Texture的概念重要区分</h2><p>在合理使用SpriteAtlas的情况下，当我们把AssetBundle包解开以后，会发现里面会包含一张Texture和若干个Sprite这两种资产。Texture是纹理，显示的文件大小较大；而Sprite可以理解为一个描述了精灵在整张纹理上的偏移量位置信息的数据文件，显示的文件大小较小。因此这个不是冗余，是正常现象。</p><p>Sprite和Sprite Atlas是两个类，他们中具有一些图片信息的数据成员，他们不是真的“图片”！而Texture才是真正的图片，因此在MemoryProfiler中你可以看到SpriteAtlas和Sprite类外加真正的图片Texture被加载到内存中</p><h1>关于Unity中Texture的Inspector窗口中的导入格式</h1><p>ASTC什么4x4之类的 数的含义 是怎么算的 在内存里是怎么展开的 受内存对齐的影响 一个非2的n次幂的图会被扩成2的n次幂 图在内存里其实就是一个二维的数组</p><p>您这个问题问得<strong>非常好</strong>，切中了Unity（乃至整个图形编程）中一个非常关键且容易混淆的概念。您说的“2的次幂”规则确实存在，但它主要适用于<strong>GPU</strong>和<strong>纹理硬件</strong>，而不是CPU在申请系统内存时的方式。</p><p>我们来分情况详细解释：</p><h3 id="核心结论（针对您的问题）">核心结论（针对您的问题）</h3><p>对于您提出的 <strong>1280 * 511，RGB32，无压缩</strong> 的纹理，在<strong>运行时内存（System RAM）</strong> 中，它占用的就是 <strong>2.5 MB</strong>，Unity不会将其扩展到2的次幂。这个大小是根据 <code>宽 * 高 * 每像素字节数</code> 直接计算出来的。</p><p>但是，当这张纹理被上传到<strong>GPU显存（VRAM）</strong> 进行处理时，情况就不同了。<strong>很多GPU要求纹理的尺寸是2的幂次（NPOT，Non-Power-Of-Two）</strong>，因此Unity或GPU驱动可能会在背后进行处理。</p><hr><h3 id="详细解释：系统内存-vs-显存">详细解释：系统内存 vs 显存</h3><h4 id="1-系统内存-System-RAM-CPU-端">1. 系统内存 (System RAM - CPU 端)</h4><ul><li><strong>如何存储</strong>：在系统内存中，Unity将纹理数据存储为一个简单的<strong>字节数组（Byte Array）</strong>。</li><li><strong>布局</strong>：这个数组就是逐行存储的像素数据。第一行的1280个像素，接着第二行的1280个像素，以此类推，总共511行。</li><li><strong>大小计算</strong>：数组的长度（即总字节数）就是 <code>1280 * 511 * 4</code> 字节。内存分配器会直接申请这么大的一块连续内存，<strong>不需要是2的幂次</strong>。CPU访问内存的方式非常灵活，任何尺寸都可以高效处理。</li></ul><h4 id="2-显存-Video-RAM-GPU-端">2. 显存 (Video RAM - GPU 端)</h4><p>GPU纹理采样硬件是为快速、并行访问而设计的。历史上，<strong>所有纹理的宽和高都必须是2的幂次（如2, 4, 8, 16, …, 256, 512, 1024, 2048）</strong>，这样才能使用位运算进行快速的寻址和Mipmap生成，硬件实现起来更简单高效。</p><p>对于您这张 <strong>1280x511</strong>（非2的幂次，NPOT）的纹理，上传到GPU时有两种情况：</p><p><strong>a) 如果GPU支持NPOT纹理（现代GPU基本都支持）</strong></p><ul><li>大多数现代的GPU（OpenGL ES 3.0+, Metal, DX11+）都<strong>完全支持</strong>NPOT纹理。</li><li>在这种情况下，纹理会<strong>原样（1280x511）</strong> 上传到显存中。它在显存中占用的空间和在系统内存中一样，也是基于 <code>1280 * 511 * 4</code> 计算出来的。</li><li><strong>但是有一个重要的限制</strong>：对于NPOT纹理，通常<strong>不能生成Mipmaps</strong>。如果强制启用，Unity可能会以其他方式处理（见下一条）。</li></ul><p><strong>b) 如果GPU不支持NPOT纹理或需要Mipmaps（较老GPU或特定情况）</strong></p><ul><li>这时，Unity会在打包时或运行时<strong>自动将纹理缩放（Up-scale）到最近的一个2的幂次尺寸</strong>。</li><li><code>1280</code> -&gt; 扩展到 <code>2048</code> (因为1024 &lt; 1280 &lt; 2048)</li><li><code>511</code> -&gt; 扩展到 <code>512</code></li><li>纹理在显存中会变成一个 <strong>2048 x 512</strong> 的纹理。</li><li>此时，它在<strong>显存</strong>中的占用大小是：<code>2048 * 512 * 4 Bytes = 4,194,304 Bytes = 4 MB</code>。</li><li>而它在<strong>系统内存</strong>中仍然保持原来的 <strong>1280x511</strong> 和 <strong>2.5 MB</strong> 的大小。那个2048x512的版本是GPU内部使用的。</li></ul><h3 id="如何在Unity中确认？">如何在Unity中确认？</h3><p>您可以在Unity编辑器的Project窗口中选择这个纹理资产，在Inspector窗口的最下方查看：</p><ul><li><strong>“Source”</strong>：会显示原始尺寸（1280x511）。</li><li><strong>“Importer Settings”</strong>（如Format）：你设置为RGB 32 bit。</li><li><strong>“Required Size”</strong>：这里显示的是在<strong>系统内存</strong>中的大小，它会显示 <strong>2.5MB</strong>。</li><li><strong>如果你勾选了“Generate Mipmaps”</strong>，Unity可能会因为原始尺寸非2的幂次而提示警告，并且“Required Size”会变成那个扩展后的大小（如4MB），因为它需要为扩展后的2048x512纹理生成Mip链。</li></ul><h3 id="总结对比">总结对比</h3><table><thead><tr><th style="text-align:left">场景</th><th style="text-align:left">纹理尺寸</th><th style="text-align:left">占用大小</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left"><strong>系统内存 (CPU)</strong></td><td style="text-align:left"><strong>1280 x 511</strong></td><td style="text-align:left"><strong>~2.5 MB</strong></td><td style="text-align:left">Unity直接存储原始数据，无需2的幂次。</td></tr><tr><td style="text-align:left"><strong>显存 (GPU) - 现代</strong></td><td style="text-align:left"><strong>1280 x 511</strong></td><td style="text-align:left"><strong>~2.5 MB</strong></td><td style="text-align:left">如果GPU支持NPOT且不生成Mipmaps。</td></tr><tr><td style="text-align:left"><strong>显存 (GPU) - 传统</strong></td><td style="text-align:left"><strong>2048 x 512</strong></td><td style="text-align:left"><strong>~4.0 MB</strong></td><td style="text-align:left">如果GPU不支持NPOT或需要为其生成Mipmaps。</td></tr></tbody></table><p>所以，您的理解是正确的，2的幂次规则确实存在，但它主要约束的是<strong>GPU显存</strong>而不是<strong>CPU系统内存</strong>。对于您问题的直接答案，<strong>运行时加载到内存中</strong> 的大小就是 <strong>2.5 MB</strong>。</p><p>好的，这是一个非常重要的概念，特别是在游戏开发和图形学领域。</p><h3 id="NPOT-是什么？">NPOT 是什么？</h3><p><strong>NPOT</strong> 是 <strong>Non-Power-Of-Two</strong> 的缩写，中文意思是 <strong>“非2的幂次”</strong>。</p><p>它专门用来描述纹理（Texture）的宽度或高度尺寸<strong>不是</strong>2的整数次幂（如 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048…）。</p><p>您例子中的纹理尺寸 <strong>1280 x 511</strong> 就是一个典型的NPOT纹理：</p><ul><li><code>1280</code> 不是2的幂次（1024是2¹⁰，2048是2¹¹，1280介于两者之间）。</li><li><code>511</code> 也不是2的幂次（512是2⁹）。</li></ul><p>与之相对的概念是 <strong>POT</strong>（Power-Of-Two），即尺寸是2的幂次，例如 512x512 或 1024x256。</p><hr><h3 id="为什么NPOT很重要？历史背景和现代发展">为什么NPOT很重要？历史背景和现代发展</h3><p>NPOT之所以成为一个需要专门讨论的概念，根源在于<strong>GPU硬件的历史限制</strong>。</p><h4 id="1-历史限制（老旧GPU）">1. 历史限制（老旧GPU）</h4><p>早期的GPU纹理采样硬件非常“死板”，它要求纹理的<strong>宽度和高度都必须是2的幂次（POT）</strong>。主要原因如下：</p><ul><li><strong>Mipmap链的生成</strong>：Mipmap是预先计算好的一系列缩小的纹理副本。POT纹理可以完美地一次次对半分割（1024 -&gt; 512 -&gt; 256 -&gt; … -&gt; 1），生成完整的Mipmap链。NPOT纹理则无法完美对半分割，硬件处理起来非常麻烦。</li><li><strong>纹理缠绕（Wrapping）模式</strong>：如 <code>Repeat</code>（重复）模式。POT纹理可以无缝地、无限地重复贴图。对于NPOT纹理，<code>Repeat</code>模式可能无法正常工作或效率低下。</li><li><strong>硬件寻址效率</strong>：使用位运算（如移位）来计算纹理坐标和Mipmap级别非常快速高效，这要求纹理尺寸是2的幂次。</li></ul><p>因此，在过去的OpenGL ES 2.0等API中，<strong>对NPOT纹理的支持非常有限</strong>。开发者通常需要将NPOT纹理放在一个更大的POT纹理的空白区域里（这个过程称为“图集化”或“Padding”），这增加了美术和程序的工作量。</p><h4 id="2-现代支持（当前主流）">2. 现代支持（当前主流）</h4><p><strong>好消息是：现代的图形API（OpenGL ES 3.0+, Metal, Vulkan, DirectX 10+）已经普遍提供了对NPOT纹理的完整支持。</strong></p><p>这意味着：</p><ul><li>你现在可以<strong>直接使用</strong>任何尺寸的纹理，比如 1280x720, 1920x1080, 300x400 等。</li><li>大部分<strong>缠绕模式</strong>（包括 <code>Repeat</code>）都可以正常工作。</li><li>它们可以作为纹理输入到着色器中进行各种采样操作。</li></ul><p><strong>但是，仍然有一个重要的例外：</strong><br>即使在现代GPU上，如果你为一张NPOT纹理<strong>启用“Generate Mipmaps”</strong>，很多GPU仍然无法为它生成完整的Mipmap链。在这种情况下，Unity要么：<br>a) 禁止生成Mipmaps。<br>b) 或者在背后自动将你的NPOT纹理放大到下一个更大的POT尺寸（如将1280x511放大到2048x512），然后为这个放大后的纹理生成Mipmaps。这就是为什么你会有“扩展到2048/512”这个想法的原因。</p><hr><h3 id="总结与类比">总结与类比</h3><ul><li><strong>POT (Power-Of-Two)</strong>：就像是标准尺寸的 Lego 积木板（如8x8的板）。它们可以完美地、高效地组合在一起，没有任何浪费和兼容性问题。</li><li><strong>NPOT (Non-Power-Of-Two)</strong>：就像是各种特殊形状的乐高零件。在过去，你很难用它们做基础搭建。但现在，乐高系统（现代GPU）已经进化了，提供了各种 adapter 和解决方案，使得这些特殊零件也能被很好地使用，但在某些特定场景下（比如Mipmaps），可能还是不如标准积木来得方便。</li></ul><p>所以，在您最初的问题中：</p><ul><li>在<strong>系统内存</strong>中，Unity不在乎NPOT还是POT，它就是老实巴交地存下了1280x511的每一个像素。</li><li>在<strong>显存</strong>中，<strong>如果</strong>你的游戏需要兼容老旧设备，<strong>或者</strong>你启用了Mipmaps而GPU无法处理NPOT的Mipmaps，那么Unity才会启动“备用方案”，将其扩展到2048x512这样的POT尺寸。否则，它就会保持NPOT原样上传。</li></ul><p><strong>完全正确！</strong></p><p>您的理解非常到位。如果您的纹理<strong>不需要Mipmaps</strong>，并且在<strong>目标平台上不需要担心老旧GPU的兼容性问题</strong>，那么纹理就<strong>完全不必</strong>严格按照2的幂次（POT）来制作。</p><p>这是现代游戏开发中的一种非常常见且推荐的做法。</p><h3 id="为什么可以这样做？">为什么可以这样做？</h3><ol><li><strong>现代GPU的完整支持</strong>：如之前所说，OpenGL ES 3.0、Metal、Vulkan、DirectX 10+ 等现代图形API都已经提供了对NPOT纹理的<strong>完整</strong>（或近乎完整）支持。这包括了所有基本的纹理采样操作和缠绕模式（如Clamp、Repeat）。</li><li><strong>节省内存和显存</strong>：使用NPOT纹理可以避免“Padding”（填充）带来的空间浪费。如果您有一张1300x1300的纹理，强行把它放到2048x2048的POT纹理中，会浪费近 <strong>(2048² - 1300²) / 2048² ≈ 60%</strong> 的宝贵内存和显存空间！直接使用1300x1300则没有任何浪费。</li><li><strong>简化美术工作流</strong>：美术师可以自由地输出任何所需尺寸的图片，无需为了凑成2的幂次而裁剪或填充画布，工作流程更加直观高效。</li></ol><h3 id="最佳实践和建议">最佳实践和建议</h3><p>虽然可以自由使用NPOT纹理，但遵循一些最佳实践可以让性能更好：</p><ol><li><p><strong>在Unity中明确设置</strong>：</p><ul><li>在纹理的Import Settings中，确保将 <strong>“Non Power of 2”</strong> 选项设置为 <strong>“None”</strong>。这告诉Unity不要自动将你的NPOT纹理缩放成POT纹理。</li><li><strong>取消勾选 “Generate Mipmaps”</strong>。这是关键一步，因为NPOT纹理生成Mipmaps可能有问题或导致扩展。</li></ul></li><li><p><strong>确认目标平台</strong>：</p><ul><li>您的目标用户群体是否在使用非常古老的手机或显卡？（例如，不支持OpenGL ES 3.0的设备，如2013年以前的一些低端安卓机）。如果您的项目需要兼容这类设备，那么强制使用POT纹理仍然是 safer choice（更安全的选择）。</li><li>对于绝大多数PC、主机和现代移动平台（2014年后的中高端设备），都无需担心。</li></ul></li><li><p><strong>性能考量（虽小但值得注意）</strong>：</p><ul><li>即使硬件支持，在某些架构的GPU上，对NPOT纹理的采样<strong>理论上</strong>可能比POT纹理<strong>稍慢一点点</strong>（通常可以忽略不计），因为硬件无法使用那些基于2的幂次的优化寻址技巧。但在绝大多数情况下，<strong>节省下来的内存带宽和容量带来的收益远大于这点微乎其微的采样开销。</strong></li><li>保持纹理尺寸为<strong>偶数</strong>（Even Number）仍然是一个好习惯，尽管不是强制要求。</li></ul></li></ol><h3 id="结论-2">结论</h3><p><strong>是的，如果您不需要Mipmaps，并且目标平台是现代GPU，那么您应该毫不犹豫地使用NPOT纹理。</strong></p><p>这不仅是允许的，更是一种<strong>优化资源使用、简化工作流程</strong>的最佳实践。您例子中的1280x511纹理就是一个非常好的、高效的尺寸。</p><p>你发现得很准确，<strong>在Unity的Texture Import Settings里，Non Power of 2（NPOT）选项只在Texture Type为Default时才可见，而Sprite类型时则没有这个选项。</strong><br>这个现象背后，其实涉及Unity底层资源管理和渲染优化的机制。</p><hr><h2 id="1-为什么会有-Non-Power-of-2-选项？">1. 为什么会有 Non Power of 2 选项？</h2><ul><li>图像的长宽如果是2的幂（如128, 256, 512, …），称为<strong>Power of 2（POT）</strong></li><li>很多老的显卡或平台（比如WebGL），对素材要求POT尺寸，否则GPU不能高效压缩/采样或用mipmap。</li><li><strong>NPOT（非2的幂）贴图</strong>在一些情况下Unity需要决定怎么自动“补齐”或压缩它 —— 所以有这个选项（None, ToNearest, ToLarger, ToSmaller, 等）</li></ul><hr><h2 id="2-为什么-Sprite-没有这个选项？">2. 为什么 Sprite 没有这个选项？</h2><h3 id="Sprite在Unity里的作用和工作方式：">Sprite在Unity里的作用和工作方式：</h3><ul><li>Sprite主要用于2D游戏（精灵动画、UI图标等）</li><li><strong>Sprite并不需要mipmap、三维采样、复杂的压缩和过滤</strong></li><li>Sprite在渲染时一般不会用到纹理平铺、贴图重复等高级GPU功能（用的是Canvas或SpriteRenderer）</li></ul><h3 id="Unity对Sprite资源管理方式：">Unity对Sprite资源管理方式：</h3><ul><li>Unity强制直接加载原始尺寸，不经过自动补齐，因为<strong>Sprite用途下(2D)，绝大部分情况下不需要优化为POT</strong></li><li>此外，Unity的Sprite Atlas或Packing机制，会自动打包分割纹理，更加灵活地处理NPOT的问题</li><li><strong>你如果把NPOT贴图设置为Sprite，Unity就是无限制地支持原始尺寸，不显示也不允许调整NPOT方式</strong></li></ul><h3 id="而Default类型：">而Default类型：</h3><ul><li>适合3D模型、Shader贴图、UI材质等，这些场景往往需要mipmap、压缩采样等，POT优化很重要</li><li>所以Default类型纹理才需要NPOT选项</li></ul><hr><h2 id="3-官方参考出处">3. 官方参考出处</h2><p>Unity官方<a href="https://docs.unity3d.com/Manual/NPOTTextures.html">文档</a>有明确说明：</p><blockquote><p>“Note that NPOT settings only apply when the Texture Type is set to Default. For Texture Types like Sprite, Unity always imports and keeps the original size of the texture.”</p></blockquote><hr><h2 id="4-快速结论">4. 快速结论</h2><ul><li><strong>Sprite类型：只关心2D渲染，Unity总是保留原图尺寸，无需GPU压缩POT对齐，所以没有NPOT选项</strong></li><li><strong>Default类型：用于3D纹理、需要mipmap等，对POT有优化需求，所以才有NPOT选项来决定如何处理非2的幂尺寸的贴图</strong></li></ul><hr><h3 id="总结一句：">总结一句：</h3><blockquote><p><strong>只有Default类型贴图才需要“NPOT修正”选项，Sprite类型总是用原图尺寸，不做补齐和压缩，所以没有该选项。</strong></p></blockquote><hr><p>你如果想做特殊用途（比如UI里用mipmap贴图、特殊压缩、GPU滤镜），应该用Default类型而非Sprite！<br>如还想问关于Compress格式、mipmap、贴图类型细节，随时欢迎继续！</p><h1>参考资料</h1><ul><li><a href="https://blog.csdn.net/yinfourever/article/details/109493160">https://blog.csdn.net/yinfourever/article/details/109493160</a></li><li><a href="https://zhuanlan.zhihu.com/p/369080940">https://zhuanlan.zhihu.com/p/369080940</a></li><li><a href="https://docs.unity3d.com/cn/2021.2/Manual/AssetBundles-Native.html">https://docs.unity3d.com/cn/2021.2/Manual/AssetBundles-Native.html</a></li><li><a href="https://www.jianshu.com/p/1b1527faaca2">https://www.jianshu.com/p/1b1527faaca2</a></li><li><a href="https://www.jianshu.com/p/0d18ac565563">https://www.jianshu.com/p/0d18ac565563</a></li><li><a href="https://blog.csdn.net/sunheng_/article/details/128204386">https://blog.csdn.net/sunheng_/article/details/128204386</a></li><li><a href="https://blog.uwa4d.com/archives/TechSharing_249.html">https://blog.uwa4d.com/archives/TechSharing_249.html</a></li><li><a href="https://www.yuque.com/sibyl-3ao1w/phv062/sgagpsf8bcm9fu1b?singleDoc">https://www.yuque.com/sibyl-3ao1w/phv062/sgagpsf8bcm9fu1b?singleDoc</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AssetBundle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity包体优化</title>
      <link href="/posts/279644bd/"/>
      <url>/posts/279644bd/</url>
      
        <content type="html"><![CDATA[<p>包体优化属于项目资产清理导致的一个结果,</p><h1>什么操作会影响包体</h1><h1>包体构成</h1><p>使用AndroidStudio中的<code>Build -&gt; ApkAnalyzer</code>来对包体内容进行分析，可以看到安卓包内的基本结构如下：</p><p>Resources目录下的文件都会被打包进<code>assets/bin/Data/data.unity3d</code>文件中，游戏启动的时候会一次性把这个文件加载到内存中，因此应该要尽可能地减小放在resources目录下的文件体积。</p><h1>libil2cpp.so内容分析</h1><p><a href="https://blog.csdn.net/linxinfa/article/details/116572369">https://blog.csdn.net/linxinfa/article/details/116572369</a></p><h1>AssetRipper使用</h1><p>AssetRipper的GitHub链接👉👉👉 <a href="https://github.com/AssetRipper/AssetRipper">https://github.com/AssetRipper/AssetRipper</a></p><p>下载到本地解压后在根目录打开终端，运行<code>./AssetRipper.GUI.Free</code>在浏览器中启动。</p><p>UnityResources目录下的内容都被打包进了一个unity_3d的目录下，</p><h1>AssetBundle打包问题</h1><h1>资源冗余</h1><p>Unity的加载是以AssetBundle为单位的.</p><p>如果两个ab A和B中的一些资源都依赖了一个没有被指定要打包的资源C，那么C就会同时被打进ab A和B中，造成资源的冗余，增大ab和安装包的体积。而这个被A，B依赖的资源C又可以分为两种类型，一种是Assets下外部导入的资源，即开发者导入或创建的资源；另一种则是Unity内置的资源，例如内置的Shader，Default-Material和UGUI一些组件如Image用的一些纹理资源等等。因此要解决资源冗余的问题，就要分别对这两种被依赖的资源进行处理。</p><p>冗余打包的原因是因为该资源没有被指定打到哪个包内，所以遍历所有的资源，找到所有资源的依赖关系，并找到这些没有被显示指定打到哪个AssetBundle的资源，打印出Log</p>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPG游戏开发记录(三)：Player模型与动画</title>
      <link href="/posts/8601cc5/"/>
      <url>/posts/8601cc5/</url>
      
        <content type="html"><![CDATA[<h1>这个系列快要被我自己做成一个科普系列了, 有太多不知道的东西了</h1><h1>状态机</h1><p>Unity的Animator系统本质上也是一个状态机，笔者认为在此引入状态机有利于功能的实现。在表现上，人物会跑、跳、飞等动作，而与之对应的是与这些动作相关的数据发生了变化，注意这里面的先后关系：先是由于数据发生了变化，然后才导致了表现上角色动画行为的变化。秉承着上述数据驱动表现的原则，我们类比Animator状态机，为我们的数据层也建立一个状态机。其实任何逻辑你都可以去用状态机进行组织，只要你能够抽象出几种互斥的状态，然后在每种状态内部去实现该状态下的所有逻辑。我们先来看一下状态机的基本写法。</p><p>状态机可以被分成两部分，第一部分是状态，第二部分是管理这些状态的部分。这两个部分的具体表现都是类，上面我们说要在</p><p>本节将我们控制的Player由圆柱体替换成有人形骨骼的模型</p><h1>模型</h1><h1>Unity中的动画系统</h1><p>实现一个可以静止、移动切换的动画状态</p><p>静止状态下随机播放动画</p><h2 id="要写一个状态机">要写一个状态机</h2><p>设计一个主角的状态机</p><p>主角有Idle、Move、Jump等状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sm.AddState(StateEnum, StateClass(Host, Animation ....))</span><br></pre></td></tr></table></figure><p>类似上面的状态注册，将Animator传递进去，在每个状态的OnTick中执行音频、动画等模块的更新</p><p>PlayerController是状态机的Host</p><h2 id=""></h2><p>我从Mixamo网站上下载了一个动画,<br>我以为为了要让下载的动画适配我在Unity中使用的角色, 我需要把我角色的Avatar给到这个动画, 但实际上是让这个动画生成一个Avatar, 然后将这个动画给到我使用的角色就可以正常播放了, 这是为什么?</p><p>你的理解<strong>现在是正确的</strong>，而且你问得非常好，很多Unity新手都会有这样的疑问！让我们详细说一说<strong>原因</strong>。</p><hr><h1>1. Unity Animator与Avatar的核心原理</h1><ul><li><strong>Avatar</strong>，本质上是一个“人形骨骼结构的映射关系”，把每块骨头（hips、spine、head、arm等）和Unity内建的人体部分一一对齐。</li><li><strong>Animation Clip</strong>并不直接关心你角色模型的骨骼细节，只需要你在角色上有一个“Humanoid Avatar”。</li><li><strong>Animator Controller</strong>引用了Animation Clip，Animator组件再关联你的角色和Avatar。</li></ul><hr><h1>2. “让动画Clip生成自己的Avatar”是什么意思</h1><ul><li>在Mixamo动画FBX导入时，Inspector设置为<code>Animation Type: Humanoid</code>，<code>Avatar Definition: Create From This Model</code>，Unity会按照FBX里记录的Mixamo骨骼结构，<strong>自动生成一个Humanoid Avatar</strong>。</li><li>这个操作的<strong>目的是告诉Unity：这个动画是以什么人为标准骨骼录的动。</strong></li></ul><blockquote><p><strong>只要动画的Avatar和人为目标的Avatar都属于Humanoid体系，Unity就能帮你自动&quot;重定位&quot;骨骼，让任意通用动作动画作用到任意&quot;符合Humanoid要求&quot;的模型上。</strong></p></blockquote><hr><h1>3. <strong>Humanoid (“人形”) 的最大价值：自动化骨骼重定向</strong></h1><ul><li>Unity为人形做了大量底层映射抽象，<strong>无论骨头名字怎么叫、具体怎么分支，只要Mapping过程正确，动画的Avatar和你角色的Avatar就可以互换动画！</strong></li><li>动画Clip作用时，Unity会自动把“动画数据的骨骼变换”映射到“你角色的骨骼变换”上，不需要它们骨骼结构100%一样，名字也可以不同，只要都按照Humanoid头肩腿手的逻辑映射过即可。</li></ul><hr><h3 id="你最初的误区在哪里？">你最初的误区在哪里？</h3><blockquote><p>你以为“要让动作Clip转到我屁股角色上用，动画资源必须用我角色的Avatar”<br><br>实际上：只需要每个动画和每个人物都各自有一个合法的Humanoid Avatar，<strong>动画资源和目标角色模型的骨骼并不是一一对齐、名字也不必一致</strong>（但都需要在人形映射里有对应的“身体部位”）。</p></blockquote><h3 id="为什么不能直接“Copy-From-Other-Avatar”？">为什么不能直接“Copy From Other Avatar”？</h3><ul><li><code>Copy From Other Avatar</code>要求动画FBX和你主角FBX的骨骼结构一模一样。这更多用于模型LOD、模型换装、同一套骨架绑定。</li><li>通用Mixamo下载的动画和你主角的模型一般骨骼结构不同，因此不能copy主角的那个Avatar。</li></ul><hr><h1>4. 总结为一句话：</h1><blockquote><p><strong>正确用法就是让每个FBX的Rig生成自己的Avatar（Create From This Model）！只要都设为Humanoid，无需“copy”别人的Avatar。这样Mixamo动画可以直接作用到你的主角身上——Unity底层帮你自动转换骨骼！</strong></p></blockquote><hr><h2 id="类比：">类比：</h2><p>就像Unicode编码让全世界不同语言都可以互相通信一样，Humanoid Avatar让不同骨骼结构的角色/动画能够互相“理解”动作~</p><hr><h2 id="最后，流程建议">最后，流程建议</h2><ol><li>你的主角FBX：Inspector &gt; Rig &gt; Animation Type=Humanoid &gt; AvatarDefinition=CreateFromThisModel</li><li>Mixamo动画FBX：Inspector &gt; Rig &gt; Animation Type=Humanoid &gt; AvatarDefinition=CreateFromThisModel</li><li>在Animator Controller里assign动画，拖主角进场景，挂Animator即可通用！</li></ol><hr><h3 id="只要都是Humanoid-Avatar，动作clip可以通用，和Clip是从哪个骨骼导出的关系不大，Unity自动帮你完成“动作对齐”！"><strong>只要都是Humanoid Avatar，动作clip可以通用，和Clip是从哪个骨骼导出的关系不大，Unity自动帮你完成“动作对齐”！</strong></h3><hr><p>如还想了解更底层的“映射原理”或动画采样，可以再问我！</p><p>你遇到的错误是：</p><blockquote><p><strong>Copied Avatar Rig Configuration mis-match Transform hierarchy does not match Transform spine1_loResSpine1 for human bone Hips not found</strong></p></blockquote><p>这说明<strong>动画和你选的Source Avatar（即你的角色）之间骨架结构不同</strong>。<br>Mixamo动画的骨骼名字和你的角色的骨骼名字/层级对不上，导致Avatar无法copy，对应人体部位(<code>Hips</code>)在你角色的骨骼里找不到<code>spine1_loResSpine1</code>这个Transform。</p><hr><h2 id="常见根本原因">常见根本原因</h2><ol><li><strong>你用的动画和你用的角色骨骼结构或者骨骼名字对不上。</strong></li><li><strong>Mixamo的骨骼层级和你主角的骨骼层级有额外节点、命名不同或顺序不同。</strong></li><li><strong>你的主角模型没有用Mixamo的AutoRigger绑定过（最好用Mixamo人形骨骼的标准）。</strong></li><li><strong>动画FBX（带动画）和角色FBX中骨骼树结构不是一份标准。</strong></li></ol><hr><h2 id="解决办法">解决办法</h2><h3 id="方案一：动画与模型都用Mixamo骨骼">方案一：动画与模型都用Mixamo骨骼</h3><p>最“保险”的做法是：</p><ol><li><strong>把你的主角FBX上传到Mixamo官网，用其Auto-Rigger进行Humanoid绑定，然后在Mixamo下动画并下载。</strong></li><li>这样动画和模型骨骼结构100%兼容（Mixamo标准）。</li><li>再把下载下来的带动画的FBX导入Unity，动作不会报错。</li></ol><hr><h3 id="方案二：单独下载动画只带动画数据">方案二：单独下载动画只带动画数据</h3><ul><li>在Mixamo下载动画时<strong>勾选&quot;Without Skin&quot;</strong>，这样FBX只包含动画和Mixamo骨骼、不带模型体。</li><li>在Unity里，将动画的<strong>Animation Type 设为Humanoid</strong>，Avatar Definition 选 <strong>Create From This Model</strong>，不要选Copy，直接用动画自己的骨骼Avatar。</li></ul><p>此时只要你的主角也是Humanoid，动画就可以直接拖拽到主角的Animator Controller里用了。</p><hr><h3 id="方案三：用自己的骨骼重新绑定动画">方案三：用自己的骨骼重新绑定动画</h3><p>如果你的主角不是Mixamo骨骼，而且改不了，也不想送去Mixamo“Rigger”，可以：</p><ul><li>只将Mixamo动画设置为Humanoid，AvatarDefinition别用CopyFromOtherAvatar，直接Create。</li><li>只要你的角色是Humanoid，且Mapping和Mixamo骨骼能够自动匹配人体（很多次是可以的），Unity就能自动重定向动画→你的主角。</li></ul><blockquote><p><strong>关键点：用“Copy From Other Avatar”时，两个FBX骨骼结构必须一模一样；如果只是标准Humanoid结构，不必Copy，只需要都设为Humanoid，动画就可以通用。</strong></p></blockquote><hr><h2 id="总结口诀">总结口诀</h2><ul><li><strong>Copy From Other Avatar → 要求骨骼100%一致！</strong>（谨慎用，仅用于同一套骨骼结构的不同资源）</li><li><strong>Create From This Model → Unity会自动识别骨骼并适配，一般兼容大部分标准人形骨骼。</strong></li><li><strong>把你的主角送进Mixamo Auto-Rigger来获得Mixamo标准骨骼结构，兼容性最佳。</strong></li><li><strong>Mixamo动画下载时选Without Skin，只需动画。</strong></li></ul><hr><h2 id="你的操作建议">你的操作建议</h2><ol><li><strong>把Mixamo动画FBX的Avatar Definition改为&quot;Create From This Model&quot;。</strong><br>不要选Copy From Other Avatar，Apply看看有没有警告！</li><li><strong>主角FBX/Rig Inspector里确认Animation Type是Humanoid，Configure无红色警告。</strong></li><li><strong>如此设置后，Mixamo动画clip可以挂载在Animator Controller里（针对humanoid），主角能正确播放动作。</strong></li></ol><hr><h2 id="常见问题答疑">常见问题答疑</h2><ul><li><p>Q: 为什么用“Copy From Other Avatar”报错？<br>A: 此方式只适用于完全相同的骨骼结构，用于模型LOD、换装等定制角色，不适合通用Mixamo动画。</p></li><li><p>Q: 为什么Create模式会兼容？<br>A: Unity底层会自动匹配标准Human骨架结构（如Hips、Spine、Head、Hand等），使大多数动作互通。</p></li></ul><hr><p>如还遇到“肢体扭曲”或动画播放失败，可以进一步帖出你的角色和Mixamo动画的Rig骨骼Inspector截图，我可帮你逐步分析！</p><p>你的理解非常接近准确，说明你已经抓住了<strong>Avatar的作用与意义</strong>！我帮你再梳理和精炼一下，让你的认知更准确一些：</p><hr><h2 id="你的原话拆解确认">你的原话拆解确认</h2><ul><li><p><strong>每一个Avatar都是独一无二的</strong><br>✔️ 是的，每个Avatar记录了一套模型骨骼是怎样映射到Unity标准“人形骨架（Humanoid）”各部位的。</p></li><li><p><strong>它是一套映射规则</strong><br>✔️ 没错，就是把模型内的骨骼名字/层级（比如mixamo:Hips、Bip001-Hips、Root/Hip、HumanPelvis等）映射到Unity的标准人体骨骼“Hips”、“Spine”、“LeftUpperArm”等。</p></li><li><p><strong>角色的Avatar就是角色的骨骼与Unity标准骨骼的映射规则</strong><br>✔️ 正确！角色的Avatar帮Unity把“你这个具体角色”翻译成“Unity标准人形骨架”。</p></li><li><p><strong>动画的Avatar就是动画原始骨骼与Unity标准骨骼的映射规则</strong><br>✔️ 也正确！动画来源的FBX里也有自己的骨架，Avatar就记录了“这个动画录的时候的骨骼映射是怎样的”。</p></li><li><p><strong>想让动画在角色上正确表现，Unity底层会把两者都转成标准骨骼表示，然后翻译过去</strong><br>✔️ 正是这样！只要两边都能翻译到Unity标准骨骼，Unity就可以把动画描述的“左腿抬高30°”套用到你的角色的“左大腿”上，无需关心双方骨骼名字/结构是否相同。</p></li></ul><hr><h2 id="精炼的准确答案">精炼的准确答案</h2><h3 id="1-Avatar的本质：连接“具体骨架”与“抽象标准人形骨架”的桥梁">1. <strong>Avatar的本质：连接“具体骨架”与“抽象标准人形骨架”的桥梁</strong></h3><ul><li>每个Avatar告诉Unity：“我的骨骼A是你的Head、我的B是你的LeftFoot”等。</li><li><strong>角色Avatar</strong>让任何动作都能套用到这个模型（只要该动作是Humanoid）。</li><li><strong>动画Avatar</strong>让Unity知道动画Clip的关键帧是在什么骨骼结构上录下来的。</li></ul><h3 id="2-动画与角色通信的底层机制">2. <strong>动画与角色通信的底层机制</strong></h3><ul><li>Unity第一次播放时，把动画Clip的骨骼数据通过动画的Avatar，映射到Unity的标准人形骨架（“中间层”）。</li><li>然后Unity把这些动作转换给角色的Avatar，再应用到实际模型骨骼上。</li><li>因此，<strong>只要求双方“都能正确地映射到标准人形骨架”即可，结构、名字无所谓。</strong></li></ul><hr><h2 id="3-总结图示（概念模型）">3. 总结图示（概念模型）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动画Clip骨骼 -----动画的Avatar映射----&gt; Unity标准人形骨架 &lt;---角色的Avatar映射----- 角色骨骼</span><br><span class="line">    |                                                                      |</span><br><span class="line">    +--------------------- Animator播放时自动转译 ------------------------+</span><br></pre></td></tr></table></figure><hr><h2 id="你的话进一步精炼表达一下就是：">你的话进一步精炼表达一下就是：</h2><blockquote><p><strong>每个Avatar本质是一套“骨骼与Unity标准人体的对照表”，角色Avatar和动画Avatar都起桥梁作用。任何来源的AnimationClip，只要它能映射为标准人形骨架，Unity都能把这套动作“翻译”给目标角色的骨架，让动作在任何合格的人形角色上重现。</strong></p></blockquote><hr><h3 id="你说的“独一无二”也没错，不过只要映射结果都做到标准对齐，不同Avatar之间也能互通！！">你说的“独一无二”也没错，不过只要映射结果都做到标准对齐，不同Avatar之间也能互通！！</h3><hr><h2 id="扩展理解">扩展理解</h2><ul><li>这套机制让动画资产极具复用性（比如Mixamo、Assetstore动画资源等等！）。</li><li>如果模型缺少某些标准人体部位（比如没头、没左臂），那Avatar映射就会出错或动作不完整。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3D数学基础-多个坐标空间</title>
      <link href="/posts/9e2eb769/"/>
      <url>/posts/9e2eb769/</url>
      
        <content type="html"><![CDATA[<p>本篇博客是笔者结合《UnityShader入门精要》和《3D数学基础——图形和游戏开发》两本书对Shader所需要的数学知识的整理。</p><p>在《3D数学基础——图形和游戏开发》第三章中，作者介绍了坐标空间的知识，<br>第三章中有三个很有意思的知识点：直立空间、变换坐标空间的两种视角：绝对视角和局部视角、从矢量的角度进行坐标变换</p><p>书中对世界空间的描述笔者在此有必要提及：The <strong>world coordinate system</strong> is a special coordinate system that establishes the “global” reference frame for all other coordinate system to be specified. In other words, we can express the position of other coordinate spaces in terms of the world coordinate space, but we cannot express the world coordinate space in terms of any larger, outer coordinate space.</p><p>世界坐标空间是我们关心的“最大”空间，因此，我们可以认为使用世界坐标空间表示的物体位置就是绝对位置。</p><p>书中提供了一个有趣的视角来描述各个坐标系，那就是把坐标系也当作被放入世界空间中的一个物体，这帮助笔者更好地理解了各个坐标系的转换过程。笔者会在<strong>变换坐标空间的两种视角：绝对视角和局部视角</strong>部分进行阐述。</p><h1>变换坐标空间的两种视角：绝对视角和局部视角</h1><p>直立空间是本书引入的一个坐标空间，我们先来看一下没有直立空间时一个物体的坐标从对象空间转换到世界空间的过程</p><p>我们想象一下将一个坐标系模样的物体放在这个物体的中心点位置，我们要做的，就是把这个坐标系物体从物体的中心点位置移动到世界空间的中心点位置(坐标系的坐标轴和原点都与放在世界空间中心位置的坐标系物体的坐标轴和原点完全重合)。</p><p>首先，我们需要把这个坐标系物体平移到世界空间的坐标系物体原点的位置，然后围绕世界空间坐标系物体的原点进行旋转就可以了。在这种视角下观察，仿佛是坐标系自己在移动，而物体是没有移动的，也就是说我们的视角是锁定在物体上的，这种视角也被称为绝对视角。</p><p>另一种视角：坐标系不动，物体在动，这种视角下我们是锁定在坐标系上的。想象一下，最一开始的时候，世界坐标系的这个物体的中心位置（也就是对象空间坐标系的位置是重合的），然后神奇的来的，我们假设物体现在所在的位置就是世界的中心，而且现在对象空间的坐标系就和世界坐标系完全重合，我们现在要做的是——通过移动整个世界，让整个世界的原点移动到这个位置，我们假设世界的原点不在他该在的地方。在这种视角下，我们要先平移再旋转。</p><h1>直立空间(Upright Space)</h1><p>在从对象空间变换到世界空间或者从世界空间变换到对象空间的过程中</p><img src="/posts/9e2eb769/image.png" class=""><h1>从矢量的角度进行坐标变换</h1><p>从一个点的角度看，就是从一种坐标系的对该点的表示转换到另一个坐标系中对该点的表示，</p><p>如果已知一个坐标系A的基矢量在另外一个坐标系B中的基矢量的表示，那么知坐标系B中的点的表示，可以<br>同样的前提，如果已知坐标系A中的点的表示，同样可以用这一组基矢量的对应关系转换成坐标系B中的点的表示</p><p>我们假设每个坐标空间中都有两幅坐标系，这两幅坐标系是一模一样的在最一开始，<br>就拿最熟悉的世界空间坐标系举例子，为什么需要两幅坐标系，因为我们需要一副坐标系来移动，另一副坐标系来标定移动坐标系的位置信息</p><p>三维空间中需要三个不在同一平面的矢量坐标才能表示空间中所有的位置，可以用世界坐标系表示这三个基矢量的方向信息，和原点信息，然后这三个基矢量可以构成一个新的坐标系。 表示某一点(x, y, z)，把x y z看成是基矢量前面的系数而非是坐标会更好地理解基矢量的机理</p><h1>齐次坐标空间</h1><img src="/posts/9e2eb769/image.png" class=""><h1>屏幕空间</h1><h1>相机空间</h1><h1>裁剪空间</h1><h1>切线空间</h1>]]></content>
      
      
      <categories>
          
          <category> 3D数学基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPG游戏开发记录(二)：相机控制</title>
      <link href="/posts/ea538f2a/"/>
      <url>/posts/ea538f2a/</url>
      
        <content type="html"><![CDATA[<h1>基本思想</h1><p>巫师3中的相机是锁头的，如果Player的头和摄像机之间有遮挡就会位移<br>相机的运动可以被拆分成相机跟随、水平转向、俯仰(竖直)转向三个分运动。<br>因此，在笔者设计的相机跟随的方案中，相机组件会被设计成一个具有三层嵌套关系的结构——最外层负责跟随角色移动、中间层负责相机水平方向上的转向、最内层负责相机竖直方向的转向。</p><h1>用到的接口</h1><ul><li><a href="https://docs.unity3d.com/ScriptReference/Transform.InverseTransformDirection.html">Transform.InverseTransformDirection(Vector3 direction);</a><br>传入一个世界空间坐标下表示的三维向量，得到这个transform对象空间坐标下该向量的表示</li><li><a href="https://docs.unity3d.com/ScriptReference/Transform.TransformDirection.html">Transform.TransformDirection(Vector3 direction);</a><br>传入一个在该transform坐标空间下表示的三维向量，得到这个向量在世界空间坐标下的表示</li><li><a href="https://docs.unity3d.com/ScriptReference/Transform.RotateAround.html">Transform.RotateAround(Vector3 point, Vector3 axis, float angle);</a><br>使一个物体绕着穿过某一点的某一个方向的轴旋转angle角度，在左手坐标系中，顺时针为正向旋转。</li><li><a href="https://docs.unity3d.com/ScriptReference/Vector3.SmoothDamp.html">Vector3.SmoothDamp(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed = Mathf.Infinity, float deltaTime = Time.deltaTime);</a><br>Gradually changes a vector towards a desired goal over time.</li></ul><p>我还需要知道相机距离角色的距离，这个距离应该是三维空间下的距离，比如说如果摄像机的视角很高的话，这时候镜头就会离控制角色的头顶很近，我们需要有一套逻辑去动态控制这个距离，比如说角色靠墙很近的时候，镜头要尽可能地靠近角色，这个功能能不能直接通过给相机上装一个碰撞体实现？</p><p>另外还需要注意的是，相机的旋转是以我们控制的角色为中心的，在视角中我们的角色一般偏左，镜头旋转也是围绕着左侧为轴进行的</p><h1>外层跟随逻辑</h1><p>我们要让相机的外层节点始终跟随Player，我们站在摄像机的视角看，无论我们怎么操作角色和相机，摄像机和Player之间的相对方向是不变的(由外层节点原点指向Player方向的矢量是不变的，但是距离可能会变)，因此，我们需要给定一个摄像机和Player位置关系的单位方向矢量<strong>v</strong>，和一个摄像机和Player时间的距离<code>distance</code>。注意，这个方向矢量是对象空间坐标下表示的，我们要通过坐标系变换，将该矢量变换到世界坐标系下，然后再用世界坐标下Player的位置减去方向矢量乘<code>distance</code>的结果，就是摄像机所处的位置。</p><h1>中层水平旋转逻辑</h1><p>在水平和俯仰的旋转实现中，一定要注意旋转的中心不是摄像机的中心点，而是Player的中心点，对于水平旋转的描述就是中层节点绕过Player的中心点的平行于世界空间y轴正方向的轴进行旋转。</p><h1>内层俯仰逻辑</h1><p>同中层水平旋转逻辑一样，旋转的中心点位于Player的中心点，对俯仰旋转的描述是内层节点绕过Player的中心点的平行于世界空间x轴正方向的轴进行旋转。</p><p>除此之外，我们还需要给俯仰旋转添加旋转角度的限制，如果不设限镜头会翻转且视角很奇怪。这里会遇到的一个坑就是，在Inspector窗口中看到的rotation是负值，但是在代码中该值实际是360 + 负值，因此我们设置俯仰角度的范围实际上是$[0, max]\cup[360 + min, 360）$。</p><h1>摄像机碰撞问题</h1><p>当角色靠近墙体很近时，转动摄像机使其靠近墙体，如果摄像机和Player之间设置的距离较远，那么摄像机就会嵌入到墙体中，这样摄像机和Player之间就会出现障碍，影响操作体验。</p><p>因此我们需要让这种情况发生时摄像机要靠近Player直到摄像机和Player之间没有遮挡为止。</p><h1>代码实现</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Unity.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CameraControl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CameraHandler</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">float</span> cameraDistance;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> Transform CameraFollowTransform =&gt; transform;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> Transform cameraTransform;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> Transform cameraHorizontalTransform;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> Transform targetTransform;</span><br><span class="line">        <span class="keyword">public</span> LayerMask ignoreLayers;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> horizontalSpeed = <span class="number">300f</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> verticalSpeed = <span class="number">300f</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> minimumVerticalAngle = <span class="number">-45</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">float</span> maximumAngle = <span class="number">20</span>;</span><br><span class="line">        [<span class="meta">ReadOnly</span>]<span class="keyword">public</span> Vector3 targetDirInCameraCoordinates;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _isViewBlocked;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">        <span class="keyword">private</span> LineRenderer _lineRenderer;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Vector3 _previousTargetTransformPos;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">            _lineRenderer = gameObject.AddComponent&lt;LineRenderer&gt;();</span><br><span class="line">            _lineRenderer.positionCount = <span class="number">2</span>; <span class="comment">// 设置连线的顶点数量为2</span></span><br><span class="line">            _lineRenderer.startWidth = <span class="number">0.1f</span>; <span class="comment">// 设置连线的起始宽度</span></span><br><span class="line">            _lineRenderer.endWidth = <span class="number">0.1f</span>; <span class="comment">// 设置连线的结束宽度</span></span><br><span class="line">            <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            FollowTarget();</span><br><span class="line">            HandleCameraHorizontalRotation(Input.GetAxis(<span class="string">&quot;Mouse X&quot;</span>));</span><br><span class="line">            HandleCameraVerticalRotation(Input.GetAxis(<span class="string">&quot;Mouse Y&quot;</span>));</span><br><span class="line">            </span><br><span class="line">            <span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">            _lineRenderer.SetPosition(<span class="number">0</span>, targetTransform.position);</span><br><span class="line">            _lineRenderer.SetPosition(<span class="number">1</span>, cameraTransform.position);</span><br><span class="line">            <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            </span><br><span class="line">            ProcessCameraCollision();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDrawGizmos</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_previousTargetTransformPos == targetTransform.position)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 摄像机动是调整视角</span></span><br><span class="line">                CalculateTargetDirectionInCameraCoordinates();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 相机跟随物体动则摄像机只是跟随Player一起动</span></span><br><span class="line">                FollowTargetOnDrawGizmos();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _previousTargetTransformPos = targetTransform.position;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CalculateTargetDirectionInCameraCoordinates</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> dir = targetTransform.position - transform.position;</span><br><span class="line">            targetDirInCameraCoordinates = transform.InverseTransformDirection(dir).normalized;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FollowTarget</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> worldDir = CameraFollowTransform.TransformDirection(targetDirInCameraCoordinates).normalized;</span><br><span class="line">            <span class="keyword">var</span> targetPosition = targetTransform.position - worldDir * cameraDistance;</span><br><span class="line">            <span class="keyword">var</span> velocity = Vector3.zero;</span><br><span class="line">            CameraFollowTransform.position = Vector3.SmoothDamp(CameraFollowTransform.position, targetPosition, <span class="keyword">ref</span> velocity, <span class="number">0f</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FollowTargetOnDrawGizmos</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> worldDir = CameraFollowTransform.TransformDirection(targetDirInCameraCoordinates).normalized;</span><br><span class="line">            <span class="keyword">var</span> targetPosition = targetTransform.position - worldDir * cameraDistance;</span><br><span class="line">            CameraFollowTransform.position = targetPosition;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleCameraHorizontalRotation</span>(<span class="params"><span class="built_in">float</span> mouseXInput</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> horizontalAngle = mouseXInput * horizontalSpeed * Time.deltaTime;</span><br><span class="line">            cameraHorizontalTransform.RotateAround(targetTransform.position, Vector3.up, horizontalAngle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HandleCameraVerticalRotation</span>(<span class="params"><span class="built_in">float</span> mouseYInput</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> currentAngle = cameraTransform.localEulerAngles.x;</span><br><span class="line">            <span class="keyword">switch</span> (mouseYInput)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> &gt; <span class="number">0</span> <span class="keyword">when</span> currentAngle &lt;= <span class="number">360</span> + minimumVerticalAngle &amp;&amp; currentAngle &gt; <span class="number">180</span>:</span><br><span class="line">                <span class="keyword">case</span> &lt; <span class="number">0</span> <span class="keyword">when</span> currentAngle &gt;= maximumAngle &amp;&amp; currentAngle &lt; <span class="number">180</span>:</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    cameraTransform.RotateAround(targetTransform.position, cameraTransform.right, -mouseYInput * verticalSpeed * Time.deltaTime);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessCameraCollision</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Physics.Linecast(cameraTransform.position, targetTransform.position, <span class="keyword">out</span> <span class="keyword">var</span> hit, ~ignoreLayers))</span><br><span class="line">            &#123;</span><br><span class="line">                cameraTransform.position = hit.point;</span><br><span class="line">                _isViewBlocked = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> dir = targetTransform.position - cameraTransform.position;</span><br><span class="line">                <span class="keyword">var</span> originPos = targetTransform.position - dir.normalized * cameraDistance;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!_isViewBlocked || !((cameraTransform.position - targetTransform.position).magnitude &lt; cameraDistance) ||</span><br><span class="line">                    Physics.Linecast(originPos, targetTransform.position, <span class="keyword">out</span> _, ~ignoreLayers)) <span class="keyword">return</span>;</span><br><span class="line">                cameraTransform.position = originPos;</span><br><span class="line">                _isViewBlocked = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>摄像机碰撞的另一种解决方案——边缘轮廓光实现</h1><p>摄像机碰撞的另一种解决方案，是不改变摄像机和角色之间的距离，而是在摄像机和角色之间有遮挡的时候，通过给Player添加一层外轮廓发光效果来减少遮挡对操作体验的影响，这就需要用到Shader相关的知识了。</p><h1>参考资料</h1>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPG游戏开发记录(一)：角色基础移动</title>
      <link href="/posts/1987e04c/"/>
      <url>/posts/1987e04c/</url>
      
        <content type="html"><![CDATA[<p>首先我们明确一下我们要实现的是类似GTA和巫师3这样的第三人称视角的控制角色移动方式，本节只实现最简单的前后左右移动和角色转向的逻辑。</p><h1>基本思想</h1><p>游戏中，我们按下W键，角色会向前移动；按下S键，角色会先转身面对镜头，然后移动；按下A键，角色先向左转，然后移动；按下D键，角色先向右转，然后移动。我们发现，无论按下哪个键，角色都是朝着他们自己的前方移动的。但是我们在按下<code>WSAD</code>键时是希望角色向前、后、左、右移动的。这里存在一个参考系的区别，如果我们把自己代入到我们控制的角色视角上，我们确实一直都是在向前走；而在摄像机的视角中，我们控制的角色也确实按照我们的意愿朝某一方向在移动。因此我们想要向某个方向移动是一个<strong>摄像机视角下</strong>的概念。摄像机面向的方向是前进的方向，摄像机面向方向的左方是向左移动的方向，右边和后面分别是摄像机面向方向的右边和后边。我们要向前移动，就是要让我们控制的角色的朝着摄像机朝向的方向移动；要向左移动，就是要让角色的朝向和摄像机左方的方向移动，角色的朝向向我们移动方向重合的过程中就会造成的角色转向。</p><p>所以说，实现本节角色移动效果的关键是处理好角色的朝向和摄像机朝向的关系。</p><p>在开始写代码之前之前我们需要了解四个接口：</p><ul><li><p><a href="https://docs.unity3d.com/ScriptReference/Quaternion.Slerp.html">Quaternion.Slerp</a><br>传入<strong>我们控制角色当前在世界空间下朝向的Quaternion</strong>、<strong>我们希望角色移动方向的Quaternion</strong>和一个表示转向速度的值，返回当前帧控制角色在世界空间下新的朝向Quaternion。</p></li><li><p><a href="https://docs.unity3d.com/ScriptReference/Quaternion.LookRotation.html">Quaternion.LookRotation</a><br>传入一个世界空间坐标下的方向向量，返回该方向向量对应的Quaternion。</p></li><li><p><a href="https://docs.unity3d.com/ScriptReference/Rigidbody.MoveRotation.html">Rigidbody.MoveRotation</a><br>传入这一帧角色朝向的世界坐标下的Quaternion，更新角色的朝向。</p></li><li><p><a href="https://docs.unity3d.com/ScriptReference/Rigidbody.MovePosition.html">Rigidbody.MovePosition</a><br>传入这一帧角色的世界坐标下的Position，更新角色的位置。</p></li></ul><p>以及transform.forward和Vector3.forward的区别：</p><p><a href="https://docs.unity3d.com/ScriptReference/Transform.Translate.html">transform.Translate</a><br>(vector3.forward * Time.deltaTime);等价于 transform.Translate(transform.forward * Time.deltaTime, Space.World);前者是在对象空间坐标下实现物体移动的方式，后者是在世界空间坐标下实现物体移动的方式，因此transform.forward是一个世界空间坐标系下的概念。</p><h1>代码实现思路</h1><p>我们在代码中声明了一个用来表示当前帧移动方向的二维向量<code>_moveDirection</code>，通过判断当前帧有哪些按键被按下决定<code>_moveDirection</code>的值。<br>注意<code>_moveDirection</code>是作用在是摄像机对象空间下的，我们需要把这个向量转换到世界空间坐标系下，才能和角色的<code>transform.forward</code>向量进行运算。</p><p>我们把<code>_moveDirection</code>与<code>speed * Time.deltaTime</code>相乘，就能得到当前帧中角色的位移，将角色当前的位置加上角色在该帧中的位移就得到了这一帧最终角色的位置，将最终的位置传入<code>Rigidbody.MovePosition</code>方法，完成角色的移动效果。</p><p>同时，将上面两个值和<code>turnSpeed * Time.deltaTime</code>传入<code>Quaternion.Slerp</code>方法中，就能够得到当前帧中角色最终朝向的方向，然后最终朝向传给<code>Rigidbody.MoveRotation</code>方法，完成角色的转向效果。</p><h1>完整代码</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">PlayerMovement</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerMovement</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Camera _camera;</span><br><span class="line">        <span class="keyword">private</span> Rigidbody _rigidBody;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">float</span> turnSpeed = <span class="number">20f</span>;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> <span class="built_in">float</span> speed = <span class="number">20f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Vector2 _moveDirection = Vector2.zero;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _camera = GameObject.Find(<span class="string">&quot;Camera&quot;</span>).GetComponent&lt;Camera&gt;();</span><br><span class="line"></span><br><span class="line">            _rigidBody = GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            UpdateInput();</span><br><span class="line">         </span><br><span class="line">            UpdateMovement();</span><br><span class="line">            UpdateRotation();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateInput</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _moveDirection = Vector2.zero;</span><br><span class="line">            <span class="keyword">if</span> (Input.GetKey(KeyCode.W))</span><br><span class="line">            &#123;</span><br><span class="line">                _moveDirection += Vector2.up;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (Input.GetKey(KeyCode.A))</span><br><span class="line">            &#123;</span><br><span class="line">                _moveDirection += Vector2.left;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (Input.GetKey(KeyCode.S))</span><br><span class="line">            &#123;</span><br><span class="line">                _moveDirection += Vector2.down;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (Input.GetKey(KeyCode.D))</span><br><span class="line">            &#123;</span><br><span class="line">                _moveDirection += Vector2.right;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            _moveDirection.Normalize();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateMovement</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">var</span> movement = CameraDirection(<span class="keyword">new</span> Vector3(_moveDirection.x, <span class="number">0</span>, _moveDirection.y)) * speed * Time.deltaTime;</span><br><span class="line">           _rigidBody.MovePosition(transform.position + movement);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateRotation</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(_moveDirection.magnitude &lt;= <span class="number">0.01f</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> rotation = Quaternion.Slerp(_rigidBody.rotation,</span><br><span class="line">                Quaternion.LookRotation (CameraDirection(<span class="keyword">new</span> Vector3(_moveDirection.x, <span class="number">0</span>, _moveDirection.y))), turnSpeed * Time.deltaTime);</span><br><span class="line">            </span><br><span class="line">            _rigidBody.MoveRotation(rotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Vector3 <span class="title">CameraDirection</span>(<span class="params">Vector3 dir</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> cameraForward = _camera.transform.forward;</span><br><span class="line">            <span class="keyword">var</span> cameraRight = _camera.transform.right;</span><br><span class="line">            </span><br><span class="line">            cameraForward.y = <span class="number">0</span>;</span><br><span class="line">            cameraRight.y = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> cameraForward * dir.z + cameraRight * dir.x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>参考资料</h1><ul><li><a href="https://blog.csdn.net/kaluluosi111/article/details/17206655?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-17206655-blog-78846299.235%5Ev43%5Econtrol&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-17206655-blog-78846299.235%5Ev43%5Econtrol&amp;utm_relevant_index=5">Unity3d vector3.forward和transform.forward的区别！</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader概念收集与问题杂记</title>
      <link href="/posts/bc50bf5f/"/>
      <url>/posts/bc50bf5f/</url>
      
        <content type="html"><![CDATA[<h1>个人对光照模型和计算机如何显示颜色的理解</h1><h1>概念</h1><ul><li>前向渲染和延迟渲染</li><li>如何计算环境光? 环境光和albedo之间的关系是怎样的?</li></ul><h1>CPU和GPU的关系</h1><blockquote><p>这里我想到了CPU和GPU之间的角色关系很像幼儿园或者小学一二年级里老师和小朋友在玩问答游戏，老师发问 “一加一等于几？” “二乘二等于几？” 小朋友们要回答“二！”“四！”。老师（CPU）负责提供 运算数（网格顶点信息）和运算式（Shader）而小朋友（GPU）需要做的是把老师给的题目解答出来就可以了。</p></blockquote><h1>关于多Pass</h1><p>在本书的第八章透明效果中第一次遇到了多Pass的概念，笔者在学习多Pass的过程中产生了很多疑惑，直到第十二章笔者的疑惑才得以解答。<br>首先为什么Shader中需要多Pass的存在？在本书第三章介绍SubShader的时候提到了每一个Pass都会完整地走一遍GPU的流水线。笔者无法理解同一份顶点数据是如何能够在GPU中经过多个Pass处理表现出多个效果的。比如说，有一个包含有两个Pass的Shader，第一个Pass在顶点着色器中进行了顶点向左偏移的操作，第二个Pass在顶点着色器中进行了顶点向右偏移的操作。最终表现的效果是怎么样的呢？笔者自己写了一段Shader验证一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Custom/TestMutilePass&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _InvWaveLength (&quot;Distortion Inverse Wave Length&quot;, Float) = 10</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        CGINCLUDE</span><br><span class="line"></span><br><span class="line">        #include &quot;UnityCG.cginc&quot;</span><br><span class="line">        #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line">        float _InvWaveLength;</span><br><span class="line">        float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">        struct a2v</span><br><span class="line">        &#123;</span><br><span class="line">            float4 vertex : POSITION;</span><br><span class="line">            float4 texcoord : TEXCOORD0;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float4 position : SV_POSITION;</span><br><span class="line">            float2 uv : TEXCOORD0;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">        &#123;</span><br><span class="line">            float4 color = tex2D(_MainTex, i.uv);</span><br><span class="line">            return color;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ENDCG</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert;</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                float4 offset;</span><br><span class="line">offset.yzw = float3(0.0, 0.0, 0.0);</span><br><span class="line">offset.x = _InvWaveLength;</span><br><span class="line">            </span><br><span class="line">                o.position = mul(unity_MatrixMVP, v.vertex + offset);</span><br><span class="line">                o.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;;</span><br><span class="line">            </span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            </span><br><span class="line">            #pragma vertex vert;</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                float4 offset;</span><br><span class="line">offset.yzw = float3(0.0, 0.0, 0.0);</span><br><span class="line">offset.x = _InvWaveLength;</span><br><span class="line">            </span><br><span class="line">                o.position = mul(unity_MatrixMVP, v.vertex - offset);</span><br><span class="line">                o.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;</span><br><span class="line">            </span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者在第一个Pass中将所有的顶点都进行了向左的偏移，在第二个Pass中将所有的顶点进行了向右的偏移。把这个Shader给到一个材质并赋给一个Quad模型，可以看到表现效果如下：</p><p>在这一个Quad上竟然生成了两个面片！也就是说在表现上，这种多Pass方式达到了和在场景中创建多个模型同样的效果。<br>在来看一种情况，在Unity Inspector窗口中可以看到，一个MeshRenderer上面可以挂多个材质的：</p><p>那我们就在Quad模型上多挂几个看看，然后你就可以看到，在场景中虽然只有一个Quad模型，但是实际上你却能看到四个Quad模型在场景中！</p><p>下面这张图使用的是本书中第十一章模拟河流的Shader，可以看到确实达到了“分身”的效果。</p><p>到这为止，Unity多Pass的理解就基本清晰了：在显存中存储了模型的网格数据，每帧渲染的时候，每个Shader的每个Pass都会从显存中获取这些顶点数据，注意只是<strong>读取</strong>，Shader的执行不会影响存储在显存中的顶点数据，所以说，一个Shader的多个Pass只是都恰好读取了一模一样的顶点数据，各自执行的时候都操作各自的<strong>临时数据</strong>互不影响，最终渲染到屏幕上的时候也是各自渲染各自的，这真的挺奇妙的，使用多Pass和使用多个Material能够达到相同的效果，看起来Unity官方更加推荐使用多Pass的效果，这种方式更加节省性能。</p><p>在本章介绍高斯模糊实现方式中，作者使用到了RenderTexture，RenderTexture搭配多Pass使用还是挺巧妙的，因为它做到了<strong>上一个Pass输出的RenderTexture的结果作为下一个Pass的输入</strong>。这一点在非RenderTexture的应用上给笔者造成了困惑，这和直接把多Pass的Shader挂在一个模型上每个Pass各自渲染各自的情况是不一样的，比如上面的Quad实验。在非RenderTexture的应用中，笔者能想到的多Pass的应用是用来显示模型的外轮廓线，至于还有什么多Pass的应用场景，笔者在这里就不再脑力风暴了。</p><h1>Unity的OnRenderImage接口</h1><blockquote><p>在一帧中，CPU并不是一次性把这一帧所有的渲染命令打包提交给GPU进行渲染的，而是逐步提交的。</p></blockquote><p>OnRenderImage接口的官方描述如下：Unity在相机完成渲染后调用的事件函数，它允许你修改相机的最终图像。(Event function that Unity calls after a Camera has finished rendering, that allows you to modify the Camera’s final image.)</p><p>首先介绍一下Profiler中CPUUsage模块TimeLine窗口中MainThread和RenderThread的含义</p><ul><li>MainThread : This is where all of the game logic/scripts perform their work by default and where the majority of the time is spent for features and systems such as physics, animation, UI, and rendering</li><li>RenderThread : During the rendering process, the main thread examines the scene and performs Camera culling, depth sorting, and draw call batching, resulting in a list of things to render . This list is passed to the render thread, which translates it from Unity’s internal platform-agnostic representation to the specific graphics API calls required to instruct the GPU on a particular platform</li></ul><p>笔者在这里只关注两个Thread与GPU相关的作用，说白了MainThread负责相机剔除、深度排序和DrawCall合并的工作，将GPU要做的事情整理成一个列表，交给RenderThread。RenderThread负责接收到来自MainThread的列表后，把这个列表中的渲染命令翻译成GPU能够理解的东西，并发送给GPU，也就是<strong>DrawCall</strong>。</p><p>看一下下面这张图：</p><img src="/posts/bc50bf5f/image.png" class=""><p>由这张图推测，Unity是在调用Camera.Render中的Drawing接口中进行的CPU和GPU的通信，然后我们来看一下下面这张图：</p><p>这张图反映了<code>OnRenderImage</code>方法调用和CPU GPU通信之间的时间间隔。按照Unity官方的描述说，OnRenderImage方法的第一个source参数是当前帧这个Camera的渲染结果，也就是说GPU在这么短的时间里面就完成了这一帧中大部分场景的渲染。<strong>笔者之前一直有误区，以为当前帧中GPU渲染的是上一帧CPU提交给GPU的命令，但其实不是，当前帧GPU渲染的就是当前帧的画面</strong>。</p><h2 id="OnRenderImage-和-GPU-执行时机"><code>OnRenderImage</code> 和 GPU 执行时机</h2><p><code>OnRenderImage</code>确实是在CPU端调用的，它是Unity渲染流程中的一个回调方法，用于处理渲染图像（通常在渲染到屏幕之前）。当你在<code>OnRenderImage</code>中调用<code>Graphics.Blit</code>时，你实际上是在创建一个命令，告诉GPU：“请按照这个材质（和它的Shader）处理这个纹理，然后输出到另一个纹理上。”</p><p>这些命令会被Unity渲染引擎收集起来，然后在适当的时候一起发送给GPU。GPU收到这些命令后，会按照指令执行渲染操作。这个过程确实不是立即发生的，而是在CPU端的所有渲染相关命令都提交给GPU之后，GPU才开始执行这些命令。这意味着，<code>Graphics.Blit</code>调用发生时，并不会立即执行Shader效果，而是稍后在GPU的渲染队列中执行。</p><p>另外，当前实现屏幕后处理的效果使用的都是CommandBuffer了，比如Unity官方的屏幕后处理的库。OnRenderImage已经很少使用了。</p><h1>Shader变体参考资料</h1><ul><li><a href="https://www.bilibili.com/video/BV1P44y1V7bu/?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1P44y1V7bu/?spm_id_from=333.999.0.0</a></li><li><a href="https://www.bilibili.com/video/BV1PG411G7DR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">https://www.bilibili.com/video/BV1PG411G7DR/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102</a></li><li><a href="https://blog.csdn.net/qq_36383623/article/details/103327389">https://blog.csdn.net/qq_36383623/article/details/103327389</a></li></ul><h1>一个有六个面的立方体模型 为什么一张贴图会按照某种规则贴在六个面上?</h1><h1>UnityShader中常用头文件、常用方法、常用宏</h1><ul><li><p>UnityCG.cginc</p></li><li><p>AutoLight.cginc</p></li><li><p>Lighting.cginc</p></li><li><p>UNITY_LIGHT_ATTENUATION</p></li><li><p>SHADOW_ATTENUATION</p></li><li><p>SHADOW_COORDS</p></li><li><p>TRANSFER_SHADOW</p></li><li><p>SHADOW_CASTER_FRAGMENT 在<code>LightMode</code>为<code>ShadowCaster</code>的Pass的<code>frag</code>中使用,用来实现阴影投射的功能,它用来处理物体的深度信息,然后将该深度信息传递给阴影映射纹理,从而让其他物体根据这个阴影映射纹理计算出自身是否处于该物体的阴影中.简单来说,它用来帮助物体在场景中正确地投射出阴影.</p></li><li><p>TRANSFER_SHADOW_CASTER_NORMALOFFSET 用于在阴影投射的过程中,在顶点着色器里对相关数据进行处理和传递.具体而言它会处理顶点的位置信息以及法线偏移信息,并且将这些数据传递给frag着色器,为后续将物体的深度信息正确写入阴影映射纹理做准备.</p></li><li><p>clip</p></li><li><p>tex2D</p></li><li><p>UnpackNormal 是Unity Shader用来从切线空间下读取被标记为<code>NormalMap</code>的Texture中读取法线信息的方法.</p></li><li><p>normalize</p></li><li><p>smoothstep</p></li><li><p>pow</p></li><li><p>step</p></li><li><p>multi_compile_shadowcaster</p></li><li><p>LightMode</p></li><li><p>CGINCLUDE CGPROGRAM</p></li><li><p>ObjSpaceLightDir</p></li><li><p>GrabPass</p></li></ul><h1>问题记录</h1><h2 id="什么是切线空间-为什么需要切线空间">什么是切线空间? 为什么需要切线空间?</h2><p><a href="https://www.bilibili.com/video/BV1cq4y1R7wu/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">https://www.bilibili.com/video/BV1cq4y1R7wu/?spm_id_from=333.880.my_history.page.click&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102</a></p><h2 id="为什么在切线空间下的法线纹理看起来都是浅蓝色的">为什么在切线空间下的法线纹理看起来都是浅蓝色的?</h2><h2 id="为什么要用切线空间存储法线信息-和物体空间下相比各自有什么优缺点">为什么要用切线空间存储法线信息 和物体空间下相比各自有什么优缺点?</h2><h2 id="阴影是如何产生的">阴影是如何产生的?</h2><p>所有物体的深度信息会被存入一个深度纹理或者叫阴影纹理中, 要投射阴影的物体向这个纹理中写入深度信息,需要接收阴影的物体从这个纹理中读取阴影信息.</p><p>Tag中<code>LightMode</code>为<code>ShadowCaster</code>的Pass中的代码生效,要求挂载该Shader的MeshRenderer把<code>CastShadows</code>选项打开.</p><h2 id="两个Pass公用代码">两个Pass公用代码</h2><p>Unity Shader中可以使用<code>CGINCLUDE</code>的方法将一些数据结构、字段在不同的Pass中共享</p><h2 id="模型的数据结构中会存有每个顶点的法线信息-法线贴图中的法线信息又是用来干什么的">模型的数据结构中会存有每个顶点的法线信息,法线贴图中的法线信息又是用来干什么的?</h2><h2 id="Unity中有几种Shader-区别是什么">Unity中有几种Shader?区别是什么?</h2><img src="/posts/bc50bf5f/image.png" class=""><ul><li>Standard Surface Shader</li><li>Unlit Shader</li><li>Image Effect Shader</li><li>Compute Shader</li><li>Ray Tracing Shader</li></ul><h2 id="Unity-Shader是怎么被收集然后打进包内的？">Unity Shader是怎么被收集然后打进包内的？</h2><h1>ShaderGUI</h1>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
            <tag> 问题杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPG开发记录(零)：场景搭建</title>
      <link href="/posts/eb0ca922/"/>
      <url>/posts/eb0ca922/</url>
      
        <content type="html"><![CDATA[<h1>在开发中加入AI的协助</h1><p>在开始进入正题之前，需要先搭建一个可以供角色站立、移动、跳跃并且还有边界的测试场景。笔者希望搭建的场景要遵循一些规范：</p><ol><li>统一所有模型资源的单位长度，极特殊情况，所有模型的缩放都设置为1</li><li>将场景中的地形预制体化，比如墙、地面、台阶等</li><li>…</li></ol><p>下面说一个可以提高我们搭建场景效率的技巧：在Unity的Scene窗口中，点击下图位置的图标可以设置物体移动的固定步长。按住<code>Control/Command</code>键拖拽Scene中选中物体的Object坐标系的坐标轴，就可以以固定的步长移动物体了。按住<code>V</code>键拖拽坐标轴就可以让选中物体的选中顶点吸附到另一个场景中的物体上。</p><h1>创建地形</h1><h2 id="Unity中自带的模型">Unity中自带的模型</h2><p>Unity中自带的用来表示平面的是<code>Plane</code>模型，用来表示墙面的是<code>Quad</code>模型，在场景中分别创建<code>Plane</code>和<code>Quad</code>模型，查看它们的详细信息，你会发现<code>Plane</code>模型的尺寸是10x10的(此处不考虑模型的厚度)，也就是长宽各为10个单位长度；而<code>Quad</code>模型的尺寸是1x1，长宽各1个单位长度。也就是说需要使用100个<code>Quad</code>模型才能拼出一个和<code>Plane</code>面积一样大的模型。</p><h2 id="创建材质">创建材质</h2><p>为了让地形的尺寸展示更直观，我们使用Unity内置的一张名为<code>Default-Checker-Gray</code>贴图来装饰我们的地形，我们会为Plane和Quad各自生成一个材质，这两个材质的区别只有上面的Tilling参数，一个设置成10，而另一个设置为1。这样的设置主要和这两种模型的尺寸有关系。然后将材质分别赋给这两个模型。</p><p>至此，这样我们就有了搭建场景的预制地形了。</p><h1>参考资料</h1><ul><li><a href="https://jingyan.baidu.com/article/1612d500968440e20e1eeebd.html">Unity 实用教程 之 物体固定值移动调整顶点吸附</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac终端优化记录</title>
      <link href="/posts/eeec06d0/"/>
      <url>/posts/eeec06d0/</url>
      
        <content type="html"><![CDATA[<h1>下载oh-my-zsh</h1><p>在终端中输入下面的命令安装oh-my-zsh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>如果有如下报错提示<code>curl: (7) Failed to connect to raw.githubusercontent.com port 443 after 14 ms: Couldn't connect to server</code>，有两种解决方法:</p><ul><li>第一种解决方法是在本地创建一个.sh脚本，将下载链接指向的脚本中的内容拷贝到本地创建的脚本中，并执行该脚本。</li><li>笔者更推荐第二种解决方案，因为接下来安装终端主题的时候大概率也会遇到这个报错。<br>进入这个网址<code>https://www.ipaddress.com/</code>，在网页右上角输入<code>raw.githubusercontent.com</code>查看并复制对应的IP地址</li></ul><img src="/posts/eeec06d0/image.png" class=""><p>在终端中执行<code>vim ~/etc/hosts</code>，在最后添加类似下面一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*替换为上面获得的IP地址* raw.githubusercontent.com</span><br></pre></td></tr></table></figure><p>重新进入终端执行安装命令就可以在本地安装好<code>oh-my-zsh</code>了</p><h1>安装命令补全和命令高亮插件</h1><p><strong>命令补全插件</strong><br>终端中执行下面命令👇👇👇</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions.git</span><br></pre></td></tr></table></figure><p><strong>高亮插件</strong><br>终端中执行下面命令👇👇👇</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.oh-my-zsh/custom/plugins</span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br></pre></td></tr></table></figure><p>执行<code>vim ~/.zshrc</code>，在打开的文件中找到 <code>plugins=(git)</code> 一行，替换成这一行:<br><code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</code>，如果没有找到则直接添加到文件中就好了。</p><p>保存并退出<code>~/.zshrc</code>，执行<code>source ~/.zshrc</code>，完成安装。</p><blockquote><p>安装完之后，如果发现这两个插件在终端中没有生效，则需要在<code>~/.zshrc</code>中添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure><p>保存并退出<code>~/.zshrc</code>，执行<code>source ~/.zshrc</code>，重开终端，问题解决。</p></blockquote><h1>安装字体</h1><p>字体使用的是<code>powerlevel10k</code>主题推荐的字体<a href="https://github.com/ryanoasis/nerd-fonts">nerd-fonts</a></p><p>终端中执行下面命令👇👇👇</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install font-hack-nerd-font</span><br></pre></td></tr></table></figure><p>下载完之后在终端的字体设置中搜索一下<code>Hack Nerd Font Mono</code>字体并应用。</p><h1>安装主题</h1><p>我们安装两个主题，一个主题是终端的主题，另一个主题是<code>oh-my-zsh</code>的主题。</p><h2 id="安装终端主题">安装终端主题</h2><p>执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/sindresorhus/terminal-snazzy/raw/main/Snazzy.terminal</span><br></pre></td></tr></table></figure><p>如果上面没有使用第二种解决方案的话，这里就会下载失败。这个主题的作用是设置终端的背景颜色。找到下载到本地的<code>Snazzy.terminal</code>文件，双击它打开终端，然后在终端的设置中将<code>Snazzy</code>设置为Default主题。</p><h2 id="安装oh-my-zsh主题">安装oh-my-zsh主题</h2><p>笔者选择的主题是<a href="https://github.com/romkatv/powerlevel10k/tree/master">powerlevel10k</a></p><p>终端中执行下面命令👇👇👇</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure><p>执行<code>vim ~/.zshrc</code>,找到<code>ZSH_THEME=&quot;anytheme&quot;</code>那一行替换为<code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code></p><p>保存并退出<code>~/.zshrc</code>，执行<code>source ~/.zshrc</code>。执行完毕之后会弹出该主题的配置引导，按照自己的喜好配置即可，如果对效果不满意则在终端中输入<code>p10k configure</code>可以重新进行配置。</p><img src="/posts/eeec06d0/image-1.png" class=""><h2 id="问题记录">问题记录</h2><ul><li><a href="https://github.com/romkatv/powerlevel10k/issues/1942">[oh-my-zsh] theme ‘powerlevel10k’ not found</a><br>不知道怎么搞的这个主题被安装在了笔者电脑的根目录下，正确的目录应该是<code>$&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</code>，只有在这个目录下主题才能被正确识别，另外注意<code>~/.zshrc</code>中添加一行<code>source $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k/powerlevel10k.zsh-theme</code>代码，注释掉之前source该主题的命令。</li><li><a href="https://github.com/romkatv/powerlevel10k/issues/1023">[WARNING]: Console output during zsh initialization detected</a><br>直接在引导配置的最后一项中选择<code>Quite</code>，而不是选择推荐的<code>Verbose</code>。<img src="/posts/eeec06d0/image-2.png" class=""></li></ul><h1>参考资料</h1><ul><li><a href="https://blog.csdn.net/weixin_42326144/article/details/121957795?spm=1001.2101.3001.6650.7&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-121957795-blog-135977657.235%5Ev43%5Econtrol&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-7-121957795-blog-135977657.235%5Ev43%5Econtrol&amp;utm_relevant_index=12">MAC 终端美化教程（来个全套）</a></li><li><a href="https://zhuanlan.zhihu.com/p/554264938">Mac 终端美化指南</a></li><li><a href="https://blog.csdn.net/m0_60980259/article/details/135977657">更改MAC终端样式(美化、易用的提示等)</a></li><li><a href="https://blog.csdn.net/wjp52/article/details/124426943">Mac 终端配置 oh-my-zsh 和自动补全以及命令高亮</a></li><li><a href="https://blog.csdn.net/a143730/article/details/135573409">安装oh-my-zsh，配置命令行高亮，命令提示，打造高效终端</a></li><li><a href="https://huaweicloud.csdn.net/6509554c993dd34278ee3a0f.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6ODkxMDEzLCJleHAiOjE3Mjc3ODcwNDQsImlhdCI6MTcyNzE4MjI0NCwidXNlcm5hbWUiOiJxcV80NTcyMzgyMSJ9.3rYUSIkc7_U_kaBdQ-35s0Kr6Sff-06B_M229QXJU8s&amp;spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-2-106862753-blog-123021848.235%5Ev43%5Econtrol&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Eactivity-2-106862753-blog-123021848.235%5Ev43%5Econtrol&amp;utm_relevant_index=3">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused的几种解决方式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityAssetDatabase问题整理</title>
      <link href="/posts/1a407a45/"/>
      <url>/posts/1a407a45/</url>
      
        <content type="html"><![CDATA[<h1>AssetDataBase接口使用遇到的坑</h1><p><code>AssetDatabase.Refresh</code>方法用于刷新Unity编辑器的资产数据库。这个方法会同步磁盘和Unity编辑器之间的资产状态，包括添加、删除、修改文件等。如果你在Unity编辑器外部（比如在文件浏览器中或通过脚本）对项目中的文件进行了更改，使用AssetDatabase.Refresh可以让Unity编辑器识别这些更改。</p><p><code>AssetDatabase.SaveAssets</code>方法用于将所有未保存的资产更改持久化到磁盘。这包括对预制体、场景、材质等任何在编辑器中做出的更改。如果你在脚本中修改了任何资产（比如更改了一个材质的颜色，或者添加了一个新的游戏对象到一个预制体中），并且想要确保这些更改被保存，就需要调用这个方法。</p><ol><li>脚本中修改完资源里面的属性的时候，调用一次AssetDataBase.Save() 必须要在AssetDataBase.Load()方法之间调用，不然修改就白做了</li><li>File接口相关的操作Directory相关的操作后必须后面跟一个AssetDataBase.Refresh调用</li></ol><p><code>AssetDatabase.MoveAsset</code>调用的时候,如果目标位置的路径不存在的话移动Asset的操作是不会成功的.会提示你<code>Could not find parent directory GUID</code>,所以在移动Asset之前需要先确定目标路径是否存在,你可以使用<code>AssetDataBase.CreateFolder</code>接口来创建目标路径,或者使用<code>Directory</code>相关接口来创建,注意使用<code>Directory</code>接口创建路径后需要调用<code>AssetDatabase.Refresh</code>接口来同步</p><h1>查询资源引用</h1><p>AssetDataBase.FindAssets接口 <strong>对于预制体来说, 必须传进去的是预制体所在的目录, 是文件夹, 不能是具体的预制体, 但是对于Texture来说, 传入Texture路径却是没问题的.</strong></p><h1>使用AssetDatabse创建文件夹</h1><h1>对Prefab的处理可以全部用PrefabUtility</h1><p>加载一个预制体, 如果只是对一个预制体 只读, 那么可以使用AssetDatabase的Load接口加载, 但是如果是要对预制体的内容进行修改, 则要使用PrefabUtility中的Load接口,</p><h1>AssetPostProcessor</h1><h1>AssetModificationProcessor</h1><h1>AssetImporter</h1><h1>AudioImporter</h1><p>思考一下 Unity里面有几种类型的资源:</p><p>模型、Texture、Audio类 他们都会有一个ImportSettings, 这类资源不是Unity可以Create的.</p><p>预制体</p><p>材质呢?</p><p>你的理解很接近真实的Unity资源体系！我帮你进一步理清和补充：</p><hr><h2 id="你总结的三种类型资源">你总结的三种类型资源</h2><h3 id="1-外部导入资源（有Importer处理）">1. <strong>外部导入资源（有Importer处理）</strong></h3><p><strong>特征：</strong></p><ul><li>源文件本身不是Unity创建，比如 <code>.png</code>、<code>.jpg</code>、<code>.fbx</code>、<code>.wav</code>、<code>.mp3</code> 等</li><li>需要导入器（Importer），比如 TextureImporter、ModelImporter、AudioImporter</li><li>在Unity导入流程中，Importer负责转换参数、导入设置、生成meta数据和最终的Unity对象（如Texture、Mesh、AudioClip等）</li><li>你可以通过Importer批量修改这些资源的导入参数</li></ul><p><strong>例子：</strong></p><ul><li>外部图片 → TextureImporter → Texture2D</li><li>外部模型 → ModelImporter → Mesh, Material, AnimationClip</li><li>外部音频 → AudioImporter → AudioClip</li></ul><hr><h3 id="2-Unity创建且有专门管理模块-接口的资源">2. <strong>Unity创建且有专门管理模块/接口的资源</strong></h3><p><strong>特征：</strong></p><ul><li>这些资源类型由Unity原生创建和管理</li><li>编辑器暴露了专门的管理API或工具类用于批量处理、特殊保存</li><li>典型代表如Prefabs（PrefabUtility）、场景Scene（EditorSceneManager），还有Timeline Asset、AnimatorController等等</li><li>这类资源一般有特别的生命周期或内容变换机制</li></ul><p><strong>例子：</strong></p><ul><li>Prefab（通过PrefabUtility管理加载/保存/变更）</li><li>场景（通过EditorSceneManager管理保存/加载/脏标记）</li><li>AnimatorController（部分模块有专用API，但不全）</li></ul><hr><h3 id="3-Unity创建但没有专用管理模块的资源">3. <strong>Unity创建但没有专用管理模块的资源</strong></h3><p><strong>特征：</strong></p><ul><li>Unity里手动创建的资产，但官方没有专门的批量接口或&quot;导入管理器&quot;</li><li>通常直接通过AssetDatabase和EditorUtility.SetDirty来批量处理</li><li>典型如Material、ScriptableObject、普通.asset文件、PhysicMaterial等</li></ul><p><strong>例子：</strong></p><ul><li>Material</li><li>ScriptableObject（自定义游戏数据）</li><li>PhysicMaterial</li><li>LightingDataAsset等</li></ul><hr><h2 id="补充细节">补充细节</h2><ul><li>有些资源类型可能同时涉及多种管理方式，比如模型文件（.fbx）导入，既由ModelImporter处理，也会自动生成Material和Prefab资源。</li><li>Unity的资源归类实际还和“如何生成/管理/编辑/导入/保存/批量变更”有关，而不是单纯“能不能创建”。</li><li>一些资源有编辑器扩展，但没有专门管理器（比如LightingSettings之类）。</li><li>场景、Prefab等是少数拥有专门流程和API的资产；绝大多数Unity资产都是“你需要自己查找、编辑、SetDirty然后SaveAssets。”</li></ul><hr><h2 id="总结归纳表">总结归纳表</h2><table><thead><tr><th>类型</th><th>来源</th><th>管理方式</th><th>例子</th></tr></thead><tbody><tr><td>外部导入资源</td><td>Unity外部</td><td>Importer/AssetPostprocessor</td><td>.png, .fbx, .wav</td></tr><tr><td>Unity专有模块资源</td><td>Unity内部创建</td><td>专用API（PrefabUtility等）</td><td>Prefab, Scene</td></tr><tr><td>普通Unity资产</td><td>Unity内部创建</td><td>AssetDatabase+EditorUtility</td><td>Material, ScriptableObject</td></tr></tbody></table><hr><h3 id="你的理解是正确的！">你的理解是正确的！</h3><ul><li>可完全理解为：“Importer类仅服务于外部导入的资源，部分Unity资产（Prefab/Scene）有专门工具模块管理，剩下绝大多数Unity自己创建的资产（如Material）则没有专门模块，需要自己脚本批量处理。”</li></ul><h1>GUID与FileID</h1><p>一个fbx文件中可能有多个子模型 或者说的更普遍的情况: 一个被AssetDatabase收录的资产中可能包含多个部分, 需要通过guid+fileId的方式才能定位到一个资产</p><p>FileID中并没有被序列化在meta文件中, 在翻阅的Unity的源码之后, 找到了FileID的生成逻辑:</p><p>在<code>YAMLNode.cpp</code>脚本里面, YAMLMapping方法, 用来向meta文件中添加fileID, FileId被PersistentManager管理</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">YAMLMapping::<span class="built_in">YAMLMapping</span>(<span class="type">const</span> PPtr&lt;Object&gt;&amp; value) : <span class="built_in">useInlineStyle</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">GetPersistentManager</span>().<span class="built_in">Lock</span>();</span><br><span class="line"></span><br><span class="line">    SerializedObjectIdentifier identifier;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetPersistentManager</span>().<span class="built_in">InstanceIDToSerializedObjectIdentifier</span>(value.<span class="built_in">GetInstanceID</span>(), identifier))</span><br><span class="line">    &#123;</span><br><span class="line">        FileIdentifier id = <span class="built_in">GetPersistentManager</span>().<span class="built_in">PathIDToFileIdentifierInternal</span>(identifier.serializedFileIndex);</span><br><span class="line">        <span class="built_in">Append</span>(<span class="string">&quot;fileID&quot;</span>, identifier.localIdentifierInFile);</span><br><span class="line">        <span class="built_in">Append</span>(<span class="string">&quot;guid&quot;</span>, id.guid);</span><br><span class="line">        <span class="built_in">Append</span>(<span class="string">&quot;type&quot;</span>, id.type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">GetPersistentManager</span>().<span class="built_in">Unlock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是取的, 在<code>AssetImporter.cpp</code>中, 根据导入资产的名字和资产的类型生成一个id</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LocalIdentifierInFileType <span class="title">AssetImporter::GenerateFileIDHashBased</span><span class="params">(<span class="type">const</span> Unity::Type* type, <span class="type">const</span> core::string&amp; name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MdFourGenerator mdfourGen;</span><br><span class="line">    mdfourGen.<span class="built_in">Feed</span>(<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(type-&gt;<span class="built_in">GetPersistentTypeID</span>()));</span><br><span class="line">    mdfourGen.<span class="built_in">Feed</span>(name);</span><br><span class="line">    Hash128 Hash128 = mdfourGen.<span class="built_in">Finish</span>();</span><br><span class="line">    LocalIdentifierInFileType fileID = (SInt32)(*<span class="built_in">reinterpret_cast</span>&lt;UInt32*&gt;(&amp;Hash128));</span><br><span class="line">    <span class="built_in">Assert</span>(m_FileIDToRecycleName.<span class="built_in">empty</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m_UsedFileIDs.<span class="built_in">count</span>(fileID) == <span class="number">1</span> || fileID == kAssetImporterFileID || fileID == kAssetMetaDataFileID)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fileID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/qq_33060405/article/details/147315678">Unity的序列化中的几个概念：“GUID”、“Local ID”、“ Instance ID”</a></li><li><a href="https://zhuanlan.zhihu.com/p/654506392">unity fileID vs GUID</a></li><li><a href="https://blog.csdn.net/qq_17758883/article/details/105345454">Unity文件、文件引用、Meta详解</a></li></ul><h1>Unity的序列化中的几个概念：“GUID”、“Local ID”、“ Instance ID”</h1><p><a href="https://blog.csdn.net/qq_33060405/article/details/147315678">文档</a></p>]]></content>
      
      
      <categories>
          
          <category> UnityEditor开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目经验总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏开发中的设计模式 —— 命令模式</title>
      <link href="/posts/1b7f45c3/"/>
      <url>/posts/1b7f45c3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p></blockquote><p>在GTA、巫师这一类游戏中，我们可以使用<code>WASD</code>操控角色的移动，我们也可以使用相同的按键操控载具、马匹的移动。无论是载具还是角色，当你按下了<code>W</code>键，它们都会执行了向前移动的指令。我们可以在代码中写出如下的代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(CurrentControllingObject == Horse)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.W))&#123;</span><br><span class="line">            HorseMoveForward();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.A))&#123;</span><br><span class="line">            HorseMoveLeft();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.S))&#123;</span><br><span class="line">            HorseMoveBackward();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.D))&#123;</span><br><span class="line">            HorseMoveRight();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(CurrentControllingObject == Hero)&#123;</span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.W))&#123;</span><br><span class="line">            HeroMoveForward();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.A))&#123;</span><br><span class="line">            HeroMoveLeft();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.S))&#123;</span><br><span class="line">            HeroMoveBackward();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(Input.GetKeyDown(KeyCode.D))&#123;</span><br><span class="line">            HeroMoveRight();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的代码太丑陋了，但是更严重的问题是，这样的写法很不利于维护和拓展。想象一下，如果我们想让我们的游戏支持玩家自定义按键操作的功能，上面的代码根本就没办法实现，因为按键的绑定是被我们硬编码进脚本里的。而且，游戏中各种可以被控制移动的物体都被耦合在了一起，这不符合面向对象的设计原则。</p><p>因此，笔者希望通过本文介绍的命令模式解决上面两个问题：</p><ul><li>按键与游戏物体行为硬编码绑定</li><li>所有游戏物体的行为处理逻辑耦合在了一起</li></ul><h1>命令模式</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记-（十五）-使用噪声</title>
      <link href="/posts/200401f7/"/>
      <url>/posts/200401f7/</url>
      
        <content type="html"><![CDATA[<p>很多时候，向规则的事物里添加一些“杂乱无章”的效果往往会有意想不到的效果。而这些“杂乱无章”的效果来源就是噪声。在本章中，我们将会学习如何使用噪声来模拟各种看似“神奇”的效果。在15.1节中，我们将会使用一张噪声纹理来模拟火焰的消融效果。15.2节则把噪声应用在模拟水面的波动上，从而产生波光粼粼的视觉感受。在15.3节中，我们会回顾13.3节中实现的全局雾效，并向其中添加噪声来模拟不均匀的飘渺雾效。</p><h2 id="消融效果">消融效果</h2><p>消融效果常见于游戏中的角色死亡、地图烧毁等效果.在这些小锅中,消融往往从不同的区域开始,并向看似随机的方向扩张,最后整个物体都将消失不见.在本节中,我们将学习如何在Unity中实现这种效果.<br>要实现这种效果,原理非常简单,概括来说,就是使用噪声纹理+透明度测试.我们使用对噪声纹理采样的结果和某个控制消融程度的阈值比较,如果小于阈值,就使用clip函数把它对应的像素裁剪掉,这些部分就对应了图中被“烧毁”的区域.而镂空区域边缘的烧焦效果则是将两种颜色混合,再用pow函数处理之后,与原纹理颜色混合后的结果.</p><ol><li>首先,声明消融效果需要的各个属性</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Properties</span><br><span class="line">&#123;</span><br><span class="line">    _BurnAmount (&quot;Burn Amount&quot;, Range(0.0, 1.0)) = 0.0</span><br><span class="line">    _LineWidth(&quot;Burn Line Width&quot;, Range(0.0, 0.2)) = 0.1</span><br><span class="line">    _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">    _BumpMap (&quot;Normal Map&quot;, 2D) = &quot;bump&quot; &#123;&#125;</span><br><span class="line">    _BurnFirstColor(&quot;Burn First Color&quot;, Color) = (1, 0, 0, 1)</span><br><span class="line">    _BurnSecondColor(&quot;Burn Second Color&quot;, Color) = (1, 0, 0, 1)</span><br><span class="line">    _BurnMap(&quot;Burn Map&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_BurnAmount属性用于控制消融程度,当值为0时,物体为正常效果,当值为1时,物体会完全消融._LineWidth属性用于控制模拟烧焦效果时的线宽,它的值越大,火焰边缘的蔓延范围越广._MainTex和_BumpMap分别对应了物体原本的漫反射纹理和法线纹理._BurnFirstColor和_BurnSecondColor对应了火焰边缘的两种颜色值._BurnMap则是关键的噪声纹理.</p><ol start="2"><li>我们在SubShader块中定义消融所需要的Pass:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;  &quot;LightMode&quot;=&quot;ForwardBase&quot; &#125;</span><br><span class="line">            Cull Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line">            #include &quot;AutoLight.cginc&quot;</span><br><span class="line"></span><br><span class="line">            #pragma multi_compile_fwdbase</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>为了得到正确的光照,我们设置了Pass的LightMode和multi_compile_fwdbase的编译指令.值得注意的是,我们还使用Cull命令关闭了该Shader的面片剔除,也就是说,模型的正面和背面都会被渲染.这是因为,消融会导致裸露内部的构造,如果只渲染正面会出现错误的结果.</p><ol start="3"><li>定义顶点着色器</li></ol><p>顶点着色器中的代码很常规.我们使用宏TRANSFORM_TEX计算了三张纹理对应的纹理坐标,再把光源方向从模型空间变换到了切线空间.最后,为了得到阴影信息,计算了世界空间下的顶点位置和阴影纹理的采样坐标(使用了TRANSFER_SHADOW宏).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">v2f vert(a2v v)</span><br><span class="line">&#123;</span><br><span class="line">    v2f o;</span><br><span class="line">    o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">    o.uvMainTex = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">    o.uvBumpMap = TRANSFORM_TEX(v.texcoord, _BumpMap);</span><br><span class="line">    o.uvBurnMap = TRANSFORM_TEX(v.texcoord, _BurnMap);</span><br><span class="line"></span><br><span class="line">    TANGENT_SPACE_ROTATION;</span><br><span class="line"></span><br><span class="line">    o.lightDir = mul(rotation, ObjSpaceLightDir(v.vertex)).xyz;</span><br><span class="line"></span><br><span class="line">    o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line"></span><br><span class="line">    TRANSFER_SHADOW(o);</span><br><span class="line"></span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用TANGENT_SPACE_ROTATION实现了从坐标空间到切线空间的变换矩阵.<br>4. 我们还需要片元着色器来模拟消融的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">fixed4 frag(v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    fixed3 burn = tex2D(_BurnMap, i.uvBurnMap).rgb;</span><br><span class="line">    clip(burn.r - _BurnAmount);</span><br><span class="line"></span><br><span class="line">    float3 tangentLightDir = normalize(i.lightDir);</span><br><span class="line">    fixed3 tangentNormal = UnpackNormal(tex2D(_BumpMap, i.uvBumpMap));</span><br><span class="line"></span><br><span class="line">    fixed3 albedo = tex2D(_MainTex, i.uvMainTex).rgb;</span><br><span class="line"></span><br><span class="line">    fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">    fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(tangentNormal, tangentLightDir));</span><br><span class="line"></span><br><span class="line">    fixed t = 1 - smoothstep(0.0, _LineWidth, burn.r - _BurnAmount);</span><br><span class="line">    fixed3 burnColor = lerp(_BurnFirstColor, _BurnSecondColor, t);</span><br><span class="line">    burnColor = pow(burnColor, 5);</span><br><span class="line"></span><br><span class="line">    UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br><span class="line"></span><br><span class="line">    fixed3 finalColor = lerp(ambient + diffuse * atten, burnColor, t * step(0.0001l, _BurnAmount));</span><br><span class="line"></span><br><span class="line">    return fixed4(finalColor, 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们首先对噪声纹理进行采样,并将采样结果和用于控制消融程度的属性_BurnAmount相减,传递给clip函数. 当结果小于0时,该像素将会被剔除,从而不会显示到屏幕上.如果通过了测试,则进行正常的光照计算.我们首先根据漫反射纹理得到材质的反照率albedo,并由此计算得到环境光照, 进而得到漫反射光照.然后,我们计算了烧焦颜色burnColor. 我们想要在宽度为_LineWidth的范围内模拟一个烧焦的颜色变化,第一步就是用了smoothstep函数来计算混合系数t.当t的值为1时,表明该像素位于消融的边界处,当t值为0时,表明该像素为正常的模型颜色,而中间的插值则表示需要模拟一个烧焦效果.我们首先用t来混合两种火焰颜色_BurnFirstColor和_BurnSecondColor,为了让效果更佳接近烧焦的痕迹,我们还使用pow函数对结果进行处理.然后,我们再次使用t来混合正常的光照颜色(环境光+漫反射)和烧焦颜色.我们这里又使用了step函数来报称当_BurnAmount为0时,不显示任何消融效果.最后,返回混合后的颜色值finalColor</p><p>与之前的实现不同,我们在本例中还定义了一个用于投射阴影的Pass.正如我们在之前解释过的一样:使用透明度测试的物体的阴影需要特别处理,如果仍然使用普通的阴影Pass,那么被剔除的区域仍然会向其他物体投射阴影,造成穿帮.为了让物体的阴影也能配合透明度测试产生正确的效果,我们需要定义一个投射阴影的Pass.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Pass</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    Tags&#123; &quot;LightMode&quot;=&quot;ShadowCaster&quot; &#125;</span><br><span class="line">    CGPROGRAM</span><br><span class="line"></span><br><span class="line">    #pragma vertex vert</span><br><span class="line">    #pragma fragment frag</span><br><span class="line"></span><br><span class="line">    #pragma multi_compile_shadowcaster</span><br><span class="line"></span><br><span class="line">    struct v2f</span><br><span class="line">    &#123;</span><br><span class="line">        V2F_SHADOW_CASTER;</span><br><span class="line">        float2 uvBurnMap : TEXCOORD1;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    v2f vert(appdata_base v)</span><br><span class="line">    &#123;</span><br><span class="line">        v2f o;</span><br><span class="line"></span><br><span class="line">        TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)</span><br><span class="line"></span><br><span class="line">        o.uvBurnMap = TRANSFORM_TEX(v.texcoord, _BurnMap);</span><br><span class="line">        return o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">        fixed3 burn = tex2D(_BurnMap,i.uvBurnMap).rgb;</span><br><span class="line"></span><br><span class="line">        clip(burn.r - _BurnAmount);</span><br><span class="line"></span><br><span class="line">        SHADOW_CASTER_FRAGMENT(i)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ENDCG</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阴影投射的重点在于我们需要按正常Pass的处理来剔除片元或进行定点动画,以便可以和物体正常渲染的结果相匹配.在自定义的阴影投射的Pass中,我们通常会使用Unity提供的内置宏<code>V2F_SHADOW_CASTER</code>、<code>TRANSFER_SHADOW_CASTER_NORMALOFFSET</code>和<code>SHADOW_CASTER_FRAGMENT</code>来帮助我们计算阴影投射时所需要的各种变量,而我们可以只关注自定义计算的部分.在上面的代码中,我们首先在v2f结构体中利用V2F_SHADOW_CASTER来定义阴影投射需要定义的变量.随后,在顶点着色器中,我们使用TRANSFER_SHADOW_CASTER_NORMALOFFSET来填充V2F_SHADOW_CASTER在背后声明的一些变量,这是由Unity在背后为我们完成的. 我们需要在顶点着色器中关注自定义的计算部分,这里指的就是我们需要计算噪声纹理的采样坐标uvBurnMap. 在片元着色器中,我们首先按之前的处理方法使用噪声纹理的采样结果来剔除片元,最后再利用SHADOW_CASTER_FRAGMENT来让Unity为我们完成阴影投射的部分,把结果输出到深度图和阴影映射纹理中.<br>通过Unity提供的这三个内置宏,我们可以方便地定义需要阴影投射的Pass, 但由于这些宏需要使用一些特定的输入变量,因此我们需要保证为它们提供了这些变量. 例如TRANSFER_SHADOW_CASTER_NORMALOFFSET会使用名称v作为输入结构体,v中需要包含顶点位置v.vertex和顶点法线v.normal的信息,我们可以直接使用内置的appdata_base结构体,它包含了这些必须的顶点变量. 如果我们需要进行定点动画,可以在顶点着色器中直接修改v.vertex,再传递给TRANSFER_SHADOW_CASTER_NORMALOFFSET.</p><p>投射阴影“三剑客” 想投射阴影除了编写Shader代码还要把MeshRenderer中的<code>CastShadows</code>选项打开 <code>V2F_SHADOW_CASTER</code>、<code>TRANSFER_SHADOW_CASTER_NORMALOFFSET</code>和<code>SHADOW_CASTER_FRAGMENT</code></p><p>接收阴影“三剑客” <code>SHADOW_COORDS</code> <code>TRANSFER_SHADOW</code> <code>SHADOW_ATTENUATION</code></p><p>统一管理光照衰减(Attenuation)和接收阴影<code>SHADOW_COORDS</code> <code>TRANSFER_SHADOW</code> 将<code>SHADOW_ATTENUATION</code>替换为<code>UNITY_LIGHT_ATTENUATION</code></p><h2 id="水波效果">水波效果</h2><p>在模拟实时水面的过程中,我们往往也会使用噪声纹理.此时,噪声纹理通常会用作一个高度图, 以不断修改水面的法线方向. 为了模拟水不断流动的效果,我们会使用和时间相关的变量来对噪声纹理进行采样,当得到法线信息后,再进行正常的反射和折射计算,最后得到水面波动的效果.</p><p>我们将会使用一个由噪声纹理得到的法线贴图,实现一个包含菲涅耳反射的水面效果.</p><p>我们使用一张立方体纹理作为环境纹理,模拟反射.为了模拟折射效果,我们使用GrabPass来获取当前屏幕的渲染纹理,并使用切线空间下的法线方向对像素的屏幕坐标进行偏移,再使用该坐标对渲染纹理进行纹理采样,从而模拟近似折射的效果. 与之前实现不同的是,水波的法线纹理是由一张噪声纹理生成而得,而且会随着时间变化不断平移,模拟波光粼粼的效果.除此之外,我们没有使用一个定值来混合反射和折射的颜色,而是使用之前提到的菲涅耳系数来动态决定混合系数.我们使用如下公式来计算菲涅耳系数:<br>$$ fresnel=pow(1 - max(0, v \cdot n), 4)$$<br>其中,v和n分别对应了视角方向和法线方向. 它们之间的夹角越小,fresnel值越小, 反射越弱, 折射越强. 菲涅耳系数还经常会用于边缘光照的计算中.</p>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记——乔布斯传</title>
      <link href="/posts/e27b9cd3/"/>
      <url>/posts/e27b9cd3/</url>
      
        <content type="html"><![CDATA[<ul><li>只有疯狂到认为自己可以改变世界的人，才能真正改变世界 —— 苹果1997年广告 “非同凡想”</li><li>他说：“我小时候一直觉得自己是一个偏文艺的人，但也喜欢电子的东西。后来，我读到宝丽来创始人埃德温·兰德(Edwin Land)的一段话。他说，能站在人文与科技的交汇处，取两者之长的人，才是社会的中流砥柱。他是我的偶像，我当时就立志要成为这样的人。”</li><li>激发热情，内向探索，脱离体制(turn on, tune in, drop out)</li><li>马库拉在一页纸上写下了一篇名为《苹果营销哲学》的文章，强调了营销文学的三个要点。第一点是“共鸣”，就是要设身处地为用户着想。“我们会比其他任何企业都更加充分地了解用户需求。”第二点是“专注”，“为了出色完成既定目标，我们必须心无旁骛，放弃所有无关紧要地心思和追求。”第三点同样重要，叫做“灌输”，其中心思想是人们对一个公司或产品的印象基于其对外传递的信号。他写道：“消费者的确会以貌取物。即使我们拥有最好的产品、最佳的品质和最强大的软件，但是如果产品的呈现方式粗糙敷衍，人们就会认为我们的产品和服务也是草草了事；如果我们以一种充满创意、专业认真的态度进行呈现，消费者就会被我们传递和灌输的积极信息浸染渗透，我们的形象就会在它们的意识当中确立起来。”</li><li>最终的设计方案敲定后，乔布斯把麦金塔电脑团队的成员都召集到一起，举行了一个仪式。他说：“真正的艺术家都会在作品上签上名字。”于是他拿出一张绘图纸和一只三幅笔，让所有人都签上了自己的名字。这些名字被刻在了每一台麦金塔电脑的内部。除了维修电脑的人，没有人会看到这些名字。但团队里的每一个成员都知道在哪里有自己的名字，就如同每个人都知道那里面的电路板已经被设计得尽善尽美了。乔布斯一个一个叫出大家的名字，让他们签名。伯勒尔·史密斯是第一个。乔布斯等到了最后，其他45个人都签过名后，他在图纸的正中间找到了一个位置，用小写字母潇洒地签下了自己的名字。然后他以香槟向大家祝酒。“在这样的时刻，他让我们觉得自己的成果就是艺术品。”阿特金森说。——十三章 制造</li><li>你的想法会在自己的头脑中创建出模式，就像脚手架一样。大脑中的化学反应蚀刻出思维的模式。在大多数情况下，人们会陷入这些模式，就像唱片上的针槽，并且再也出不来了。<br>我会永远保持与苹果的关系。我希望这一生，能让自己的生命历程和苹果的命运彼此交错，就像编织一副挂毯一样，可能我会离开苹果几年，但我终究是会回来的。这就是我可能想要做的事情。<br>如果你希望像艺术家一样，充满创造力地度过此生，就不能沉溺于过往，无论以前你是谁，你做过什么，你都必须欣然接受，淡然放手，然后毅然决然地轻装前行。<br>外界越是试图固化你的形象，你就越难继续保持艺术家的初心。这也是为什么很多时候，艺术家不得不说“再见了，我必须离开，我快被逼疯了，必须逃出现实的牢笼。”然后他们会挥手告别，找个地方藏行隐迹，闭关潜修。也许过一段时间，他们会重出江湖，但会跟以往有所不同。</li><li>至繁归于至简</li><li>我的动力是什么？我觉得，大多数创造者都想为我们能够得益于前人取得的成就而表达感激。我并没有发明我的语言或数学。我的食物基本不是我自己做的，衣服更是一件都没做过。我所做的每一件事都有赖于我们人类的其他成员，以及他们的贡献和成就。我们很多人都想回馈社会，在历史长河中再添一笔。我们只能用这种大多数人都掌握的方式去表达——因为我们不会写鲍勃迪伦的歌或汤姆斯托帕德的戏剧。我们试图用我们仅有的天分去表达我们深层的感受，去表达我们对前人所有贡献的感激，趣味历史长河加上点什么。这就是推动我的力量。</li><li>《虫虫危机》打败了《小蚁雄兵》，但比票房更重要的是，这部电影让皮克斯证明了自己不是一家昙花一现的公司。《虫虫危机》的票房成绩可以媲美《玩具总动员》，证明皮克斯当初的旗开得胜并非侥幸。乔布斯后来说：“商业领域存在一个经典的现象，叫做‘第二产品综合症’。”意思是说，人们因为没有理解第一件产品成功的真正原因，所以做出的第二个产品往往是失败的。“我在苹果就经历过这种情况。我当时觉得，如果我们的第二部电影能够经受住考验，皮克斯就能立住脚了。”</li><li>记住自己将不久于人世，是我面对人生重大抉择时最重要的航标。因为几乎所有东西——外界的期待、骄傲、对窘迫或失败的恐惧——在死亡面前都会烟消云散，只会留下真正重要的东西。时刻铭记人终有一死，是我知道的避免患得患失陷阱的最佳方式。人赤条条地来，再赤条条地走。既然生不带来，死不带去，就没有什么理由不追随内心。</li><li>向疯狂人士致敬。他们特立独行。他们桀骜不驯。他们惹是生非。他们方枘圆凿。他们眼光独到。他们讨厌条条框框。他们不屑安于现状。你可以把他们的话语引作经典，也可以反对他们的观点，你可以颂扬他们，也可以贬损他们，但唯独不能忽视他们。因为他们带来了改变。他们推动了人类不断向前。他们或许是别人眼里的疯子，但确是我们心中的天才。只有疯狂到认为自己可以改变世界的人，才能真正改变世界。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 读万卷书 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记-（十四）-非真实感渲染</title>
      <link href="/posts/8d920ebf/"/>
      <url>/posts/8d920ebf/</url>
      
        <content type="html"><![CDATA[<p>尽管游戏渲染一般是以照相写实主义(photorealism)作为主要目标，但也有很多游戏使用了非真实感渲染(Non-PhotorealisticRendering, NPR)的方法来渲染游戏画面。非真实感渲染的一个主要目标是，使用一些渲染方法使得画面达到和某些特殊的绘画风格相似的效果，例如卡通、水彩风格等。</p><p>在本章中，我们将会介绍两种常见的非真实感渲染方法。14.1节中，我们会学习如何实现一个包含简单漫反射、高光和描边的卡通风格的渲染效果。14.2节将会介绍一种实时素描效果的实现。在本章的最后，我们还会给出一些关于非真实感渲染的资料，读者可以在这些文献中找到更多非真实感渲染的实现方法。</p><h1>卡通风格的渲染</h1><p>卡通风格是游戏中常见的一种渲染风格。使用这种风格的游戏画面通常有一些共同的特点，比如物体都被黑色的线条描边，以及分明的明暗变化等。由日本卡普空株式会社开发的游戏《大神》就使用了水墨+卡通风格来渲染整个画面。</p><img src="/posts/8d920ebf/image.png" class=""><p>要实现卡通渲染有很多方法，其中之一就是使用基于色调的着色技术(tone-based shading)。Gooch等人在他们1998年的一篇理论文中提出并实现了基于色调的光照模型。在实现中，我们往往会使用漫反射系数对一张一维纹理进行采样，以控制漫反射的色调。我们曾在7.3节使用渐变纹理实现过这样的效果。卡通风格的高光效果也和我们之前学习的光照不同。在卡通风格中，模型的高光往往是一块块分界明显的纯色区域。</p><p>除了光照模型不一样，卡通风格通常还需要在物体边缘部分绘制轮廓。在之前的章节中，我们曾介绍使用屏幕后处理技术对屏幕图像进行描边。在本节中，我们将会介绍基于模型的描边方法，这种方法的实现更加简单，而且在很多情况下也能得到不错的效果。在本节结束后我们将实现类似下图的效果。</p><img src="/posts/8d920ebf/image-1.png" class=""><h2 id="渲染轮廓线">渲染轮廓线</h2><p>在实时渲染中，轮廓线的渲染是应用非常广泛的一种效果。近20年来，有许多绘制模型轮廓线的方法被先后提出来。在《Real Time Rendering, third edition》一书中，作者把这些方法分成了五种类型。</p><ul><li>基于观察角度和表面法线的轮廓线渲染。这种方法使用视角方向和表面法线的点乘结果来得到轮廓线的信息。这种方法简单快速，可以在一个Pass中就得到渲染结果，但是局限性很大，很多模型渲染出来的描边效果都不尽如人意。</li><li>过程式几何轮廓线渲染。这种方法的核心是使用两个Pass渲染，第一个Pass渲染背面的面片，并使用某些技术让它的轮廓可见；第二个Pass再正常渲染正面的面片。这种方法的优点在于快速有效，并且适用于绝大多数表面平滑的模型，但它的缺点是不适合类似于立方体这种平整的模型。</li><li>基于图像处理的轮廓线渲染。我们在12、13章介绍的边缘检测的方法就属于这个类别。这种方法的优点在于，可以适用于任何种类的模型。但它也有自身的局限所在，一些深度和法线变化很小的轮廓无法被检测出来，例如桌子上的纸张。</li><li>基于轮廓边缘检测的轮廓线渲染。上面提到的各种方法，一个最大的问题是，无法控制轮廓线的风格渲染。对于一些情况，我们希望可以渲染出独特的轮廓线，例如水墨风格等。为此，我们希望可以检测出精确的轮廓边，然后直接渲染它们。检测一条边是否是轮廓边的公式很简单，我们只需要检查和这条边相邻的两个三角面片是否满足以下条件：<br>$$(n_0 \cdot v &gt; 0) \neq (n_1 \cdot v &gt; 0) $$</li></ul><p>其中，$n_0$和$n_1$分别表示两个相邻三角面片的法向，v是从视角到该边山任意顶点的方向。上述公式的本质在于检查两个相邻的三角面片是否一个朝正面、一个朝背面。我们可以在几何着色器(Geometry Shader)的帮助下实现上面的检测过程。当然，这种方法也有缺点，除了实现相对复杂外，它还会有动画连贯性的问题。也就是说由于是逐帧单独提取轮廓，所以在帧与帧之间会出现跳跃性。</p><ul><li>最后一个种类就是混合了上述的几种渲染方法。例如，首先找到精确的轮廓边，把模型和轮廓边渲染到纹理中，再使用图像处理的方法识别出轮廓线，并在图像空间下进行风格化渲染。</li></ul><p>在本节中，我们将会在Unity中使用过程式几何轮廓线渲染方法来对模型进行轮廓描边。我们将使用两个Pass渲染模型：在第一个Pass中我们会使用轮廓线颜色渲染整个背面的图片，并在视角空间下把模型顶点沿着法线方向向外扩张一段距离，以此来让背部轮廓线可见。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">viewPos = viewPos + viewNormal * _Outline;</span><br></pre></td></tr></table></figure><p>但是，如果直接使用顶点法线进行扩展，对于一些内凹的模型，就可能发生背面面片遮挡正面面片的情况。为了尽可能防止出现这样的情况，在扩张背面顶点之前，我们首先对顶点法线的z分量进行处理，使它们等于一个定值，然后把法线归一化后再对顶点进行扩张。这样的好处在于，扩展后的背面更加扁平化，从而降低了遮挡正面面片的可能性。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">viewNormal.z = -0.5;</span><br><span class="line">viewNormal = normalize(viewNormal);</span><br><span class="line">viewPos = viewPos + viewNormal * _Outline;</span><br></pre></td></tr></table></figure><h2 id="添加高光">添加高光</h2><p>前面提到过，卡通风格中的高光往往是模型上一块块分界明显的纯色区域。为了实现这种效果，我们就不能再使用之前学习的光照模型。回顾一下，在之前实现Blinn-Phong模型的过程中，我们使用法线点乘光照方向以及视角方向的一半，再和另一个参数进行指数操作得到高光反射系数。代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float spec = pow(saturate(dot(normal, halfDir)), _Gloss)</span><br></pre></td></tr></table></figure><p>对于卡通渲染需要的高光反射光照模型，我们同样需要计算normal和halfDir的点乘结果，但是不同的是，我们把该值和一个阈值进行比较，如果小于该阈值，那么高光反射系数就是0，否则返回1.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">float spec = dot(worldNormal, worldHalfDir);</span><br><span class="line">spec = step(threshold, spec);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用CG的step函数来实现和阈值比较的目的。step函数接受两个参数，第一个参数是参考值，第二个参数是待比较的数值。如果第二个参数大于等于第一个参数，则返回1，否则返回0。</p><p>但是这种粗暴的判断方法会在高光区域的边界造成锯齿，如下图的左图所示。出现这种问题的原因在于，高光区域的边缘不是平滑渐变的，而是由0突变到1。想要对其进行抗锯齿处理，我们可以在边界处很小的一块区域内，进行平滑处理。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">float spec = dot(worldNormal, worldHalfDir);</span><br><span class="line">spec = lerp(0, 1, smoothstep(-w, w, spec - threshold));</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们没有像之前一样直接使用step函数返回0或1，而是首先使用了CG的smoothstep函数。其中w是一个很小的值，当spec - threshold小于-w时，返回0，大于w时，返回1，否则在0到1之间进行差值。这样的效果是，我们可以在[-w, w]区间内，即高光区域的边界处，得到一个从0到1平滑变化的spec值，从而实现抗锯齿的目的。尽管我们可以把w设置为一个很小的定值，但在本例中，我们选择使用邻域像素之间的近似导数值，这可以通过CG的fwidth函数来得到。</p><img src="/posts/8d920ebf/image-2.png" class=""><p>当然，卡通渲染中的高光往往有更过个性化的需要。例如，很多卡通高光特效希望可以随意伸缩、方块化光照区域。Anjyo等人在他们2003年的一篇论文中给出了一种风格化的卡通高光的实现。可以在本书作者的<a href="http://blog.csdn.net/candycat1992/article/details/47284289">这篇博客</a>中找到这种方法在Unity中的实现</p><h2 id="实现">实现</h2><h1>素描风格的渲染</h1><p>另一个非常流行的非真实感渲染是素描风格的渲染。微软研究院的Praun等人在2001年的SIGGRAPH上发表了一篇著名的论文。在这篇文章中，他们使用了提前生成的素描纹理来实现实时的素描风格渲染，这些纹理组成了一个色调艺术映射(Tonal Art Map, TAM)，如下图所示。在下图中，从左到右纹理中的笔触逐渐增多，用于模拟不同光照下的漫反射效果，从上到下则对应了每张纹理的多级渐远纹理(mipmaps)。这些多级渐远纹理的生成并不是简单的对上一级纹理进行降采样，而是需要保持笔触之间的间隔，一边更真实地模拟素描效果。</p><img src="/posts/8d920ebf/image-3.png" class=""><p>本节将会实现简化版的论文中提出的方法，我们不考虑多级渐远纹理的生成，而直接使用6张素描纹理进行渲染。在渲染阶段，我们首先在顶点着色器阶段计算逐顶点的光照，根据光照结果来决定六张纹理的混合权重，并传递给片元着色器。然后，在片元着色器中根据这些权重来混合六张纹理的采样结果。本节过后，会得到如下图所示的效果。</p><img src="/posts/8d920ebf/image-4.png" class="">]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记（十三）——使用深度和法线纹理</title>
      <link href="/posts/b2c547d7/"/>
      <url>/posts/b2c547d7/</url>
      
        <content type="html"><![CDATA[<p>在第12章中，我们学习的屏幕后处理效果都只是在屏幕颜色图像上进行各种操作来实现的。然而，很多时候我们不仅需要当前屏幕的颜色信息，还希望得到深度和法线信息。例如，在进行边缘检测的时候，枝节利用颜色信息会使检测到的边缘信息收物体纹理和光照等外部因素的影响，得到很多我们不需要的边缘点。一种更好的方法是，我们可以在深度纹理和法线纹理上进行边缘检测，这些图像不会受纹理和光照的影响，而仅仅保存了当前渲染物体的模型信息，通过这样的方式检测出来的边缘更加可靠。</p><p>在本章中，我们将学习如何在Unity中获取深度纹理和法线纹理来实现特定的屏幕后处理效果。在13.1节中，我们首先会学习如何在Unity中获取这两种纹理。在13.2节中，我们会利用深度纹理来计算摄像机的移动速度，实现摄像机的运动模糊效果。在13.3节中，我们会学习如何利用深度纹理来重建屏幕像素在世界空间中的位置，从而模拟屏幕雾效。13.4节会再次学习边缘检测的另一种实现，即利用深度和法线纹理进行边缘检测。</p><h1>获取深度和法线纹理</h1><p>虽然在Unity中获取深度和法线纹理的代码十分简单，但是我们有必要在这之前首先了解它们背后的实现原理。</p><h2 id="背后的原理">背后的原理</h2><p>深度纹理实际就是一张渲染纹理，只不过它里面存储的像素值不是颜色值，而是一个高精度的深度值。由于被存储在一张纹理中，深度纹理里的深度值范围是[0,1]，而且通常是非线性分布的。那么，这些深度值是从哪里得到的呢？要回答这个问题，我们需要回顾在第4章学习过的顶点变换的过程。总体来说，这些深度值来自于顶点变换后得到的归一化的设备坐标(Normalized Device Coordinates, NDC)。回顾一下，一个模型想要最终被绘制在屏幕上，需要把它的顶点从模型空间变换到齐次裁剪坐标系下，这是通过在顶点着色器中乘以MVP变换矩阵得到的。在变换的最后一步，我们需要使用一个投影矩阵来变换顶点，当我们使用的是透视投影类型的摄像机时，这个投影矩阵就是非线性的，具体过程可以回顾4.6.7小节。</p><p>下图显示了在4.6.7小节中给出的Unity中透视投影对顶点的变换过程。图中左侧的图显示了投影变换前，即观察空间下视锥体的结构以及相应顶点的位置，中间图显示了应用透视裁剪矩阵后的变换结果，即顶点着色器阶段输出的顶点变换的结果，最右侧的图则是底层硬件进行了透视除法后得到的归一化的设备坐标。需要注意的是，这里的投影过程是建立在Unity对坐标系的假定上的，也就是说，我们针对的是观察空间为右手坐标系，使用列矩阵在矩阵右侧进行相乘，且变换到NDC后z分量范围将在[-1,1]之间的情况。而在类似DirectX这样的图形接口中，变换后z分量范围将在[0,1]之间。如果需要在其他图形接口下实现本章的类似效果，需要对一些计算参数作出相应的变化。</p><img src="/posts/b2c547d7/image.png" class=""><p>下图显示了在使用正交摄像机时投影变换的过程。同样，变换后会得到一个范围为[-1,1]的正方体。正交投影使用的变换矩阵是线性的。</p><img src="/posts/b2c547d7/image-1.png" class=""><p>在得到NDC之后，深度纹理中的像素值就可以很方便的计算到了，这些深度值就对应了NDC中顶点坐标的z分量的值。由于NDC中z分量的范围在[-1,1]，为了让这些值能够存储在一张图像中，我们需要使用下面的公式对其进行映射：<br>$$d = 0.5z_{ndc} + 0.5$$</p><p>其中，d对应了深度纹理中的像素值，$z_{ndc}$对应了NDC坐标中的z分量的值。</p><p>那么Unity是怎么得到这样一张深度纹理的呢？在Unity中，深度纹理可以直接来自于真正的深度缓存，也可以使用一个单独的Pass渲染而得。具体实现是，Unity会使用着色器替换(Shader Replacement)技术选择那些渲染类型(即SubShader的RenderType标签)为Opaque的物体，判断他们的渲染队列是否小于等于2500(内置的Background、Geometry和AlphaTest渲染队列均在此范围内)，如果满足条件，就把它渲染到深度和法线纹理中。因此，要想让物体能够出现在深度和法线纹理中，就必须在Shader中设置正确的RenderType标签。</p><p>在Unity中，我们可以选择让一个摄像机生成一张深度纹理或是一张深度+法线纹理。当选择前者，即只需要一张单独的深度纹理时，Unity会直接获取深度缓存或是按之前讲到的着色器替换技术，选取需要的不透明物体，并使用它投射阴影时使用的Pass(即LightMode被设置为ShadowCaster的Pass)来得到深度纹理。如果Shader中不包括这样一个Pass，那么这个物体就不会出现在深度纹理中（当然也不能像其他物体投射阴影。深度纹理的精度通常是24位或者16位，这取决于使用的深度缓存的精度，如果选择生成一张深度+法线纹理。Unity会创建一张和屏幕分辨率相同、精度为32位（每个通道为8位）的纹理，其中观察空间下的法线信息会被编码进纹理的R和G通道，而深度信息会被编码进B和A通道。法线信息的获取在延迟渲染中是可以非常容易就得到的，Unity只需要合并深度和法线缓存即可。而在前向渲染中，默认情况下是不会创建法线缓存的，因此Unity底层使用了一个单独的Pass把整个场景再渲染一遍来完成。这个Pass被包含在Unity内置的一个Unity Shader中，我们可以在内置的builtin_shaders-xxx/DefaultResources/Camera-DepthNormalTexture.shader文件中找到这个用于渲染深度和法线信息的Pass。</p><h2 id="如何获取">如何获取</h2><p>在Unity中，获取深度纹理是非常简单的，我们只需要告诉Unity：“嘿！把深度纹理给我！”然后在Shader中直接访问特定的纹理属性即可。这个与Unity沟通的过程是通过在脚本中设置摄像机的depthTextureMode来完成的，例如我们可以通过下面的代码来获取深度纹理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">camera.depthTextureMode = DepthTextureMode.Depth;</span><br></pre></td></tr></table></figure><p>一旦设置好了上面的摄像机模式后，我们就可以在Sahder中通过声明_CameraDepthTexture变量来访问它。这个过程非常简单，但我们需要知道这两行代码的背后，Unity为我们做了很多工作。</p><p>同理，如果想要获得深度+法线纹理，我们只需要在代码中这样设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">camera.depthTextureMode = DepthTextureMode.DepthNormals;</span><br></pre></td></tr></table></figure><p>然后在Shader中通过声明_CameraDepthNormalsTexture变量来访问它。<br>我们还可以组合这些模式，让一个摄像机同时产生一张深度和深度+法线纹理:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">camera.depthTextureMode |= DepthTextureMode.Depth;</span><br><span class="line">camera.depthTextureMode |= DepthTextureMode.DepthNormals;</span><br></pre></td></tr></table></figure><p>在Unity中我们还可以在摄像机的Camera组件上看到当前摄像机是否需要渲染深度或深度+法线纹理。当在Shader中访问深度纹理_CameraDepthTexture后，我们就可以使用当前像素的纹理坐标对它进行采样。绝大多数情况下，我们直接使用tex2D函数采样即可，但是在某一些平台上，我们需要一些特殊处理。Unity为我们提供了一个统一的宏SAMPLE_DEPTH_TEXTURE，用来处理这些由于平台差异造成的问题。而我们只需要在Shader中使用SAMPLE_DEPTH_TEXTURE宏对深度纹理进行采样。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float d = SAMPLE_DEPTH_TEXTURE(_CameraDdepthTexture, i.uv);</span><br></pre></td></tr></table></figure><p>其中，i.uv是一个float2类型的变量，对应了当前像素的纹理坐标。类似的宏还有SAMPLE_DEPTH_TEXTURE_PROJ和SAMPLE_DEPTH_TEXTURE_LOD。SAMPLE_DEPTH_TEXTURE_PROJ宏同样接受两个参数——深度纹理和一个float3或float4类型的纹理坐标，它的内部使用了tex2Dproj这样的函数进行投影纹理采样，纹理坐标的前两个分量首先会除以最后一个分量，再进行纹理采样。如果提供了第四个分量，还会进行一次比较，通常用于阴影的实现中。SAMPLE_DEPTH_TEXTURE_PROJ的第二个参数通常是由顶点着色器输出的插值而得的屏幕坐标。例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float d = SAMPLE_DEPTH_TEXTURE_PROJ(_CameraDepthTexture, UNITY_PROJ_COORD(i.scrPos))</span><br></pre></td></tr></table></figure><p>其中, i.scrPos是再顶点着色器中通过调用ComputeScreenPos(o.pos)得到的屏幕坐标。上述这些宏的定义，我们可以在Unity内置的HLSLSupport.cginc文件中找到。</p><p>当通过纹理采样得到深度值后，这些深度值往往是非线性的，这种非线性来自于透视投影使用的裁剪矩阵。然而，在我们计算过程中通常是需要线性的深度值，也就是说，我们需要把投影后的深度值变换到线性空间下，例如视角空间下的深度值。那么，我们应该如何进行这个转换呢？实际上，我们只需要倒推顶点变换的过程即可。下面我们以透视投影为例，推导如何由深度纹理中的深度信息计算得到视角空间下的深度值。</p><p>由4.6.7节可知，当我们使用透视投影的裁剪矩阵$P_{clip}$对视角空间下的一个顶点进行变换后，裁剪空间下顶点的z和w分量为：</p><p>$$z_{clip} = -z_{view}\frac{Far + Near}{Far - Near} - \frac{2\cdot Near \cdot Far}{Far - Near}$$<br>$$w_{clip} = -z_{view}$$</p><p>其中，Far和Near分别是远近裁切平面的距离。然后，我们通过齐次除法就可以得到NDC下的z分量：</p><p>$$z_{ndc} = \frac{z_{clip}}{w_{clip}} = \frac{Far + Near}{Far - Near} + \frac{2Near \cdot Far}{(Far - Near) \cdot z_{view}}$$</p><p>在13.1.1节中我们知道，深度纹理中的深度值是通过下面的公式由NDC计算而得的：<br>$$d = 0.5 \cdot z_{ndc} + 0.5$$</p><p>由上面的这些式子，我们可以推导出d表示而得的$z_{view}$的表达式：</p><p>$$z_{view} = \frac{1}{\frac{Far - Near}{Near \cdot Far}d - \frac{1}{Near}}$$</p><p>由于在Unity使用的视角空间中，摄像机正向对应的z值均为负值，因此为了得到深度值的正数表示，我们需要对上面的结果取反，最后得到的结果如下：</p><p>$$z_{view} = \frac{1}{\frac{Near - Far}{Near \cdot Far}d + \frac{1}{Near}}$$</p><p>它的取值范围就是视锥体的深度范围，即[Near, Far]。如果我们想要得到范围在[0,1]之前的深度值，只需要把上面得到的结果除以Far即可。这样，0就表示该点与摄像机处于同一位置，1表示该点位于视锥体的远裁剪平面上。结果如下：<br>$$z_{01} = \frac{1}{\frac{Near - Far}{Near }d + \frac{Far}{Near}}$$</p><p>幸运的是，Unity提供了两个辅助函数来为我们进行上述的计算过程——LinearEyeDepth和Linear01Depth。LinearEyeDepth负责把深度纹理的采样结果转换到视角空间下的深度值，也就是我们上面得到的。而Linear01Depth则会返回一个范围在[0,1]的线性深度值，也就是我们上面得到的$z_{01}$。这两个函数内部使用了内置的_ZBufferParams变量来得到远近裁剪平面的距离。</p><p>如果我们需要获取深度+法线纹理，可以直接使用tex2D函数对_CameraDepthNormalsTexture进行采样，得到里面存储的深度和法线信息。Unity提供了辅助函数来为我们对这个采样结果进行解码，从而得到深度值和法线方向。这个函数是DecodeDepthNormal，它在UnityCG.cginc里被定义:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inline void DecodeDepthNormal(float4 enc, out float depth, out float3 normal)&#123;</span><br><span class="line">    depth = DecodeFloatRG(enc.zw);</span><br><span class="line">    normal = DecodeViewNormalStereo(enc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DecodeDepthNormal的第一个参数是对深度+法线纹理的采样结果，这个采样结果是Unity对深度和法线信息编码后的结果，它的xy分量存储的是视角空间下的法线信息，而深度信息被编码进了zw分量。通过调用DecodeDepthNormal函数对采样结果编码后，我们就可以得到解码后的深度值和法线。这个深度值范围在[0,1]的线性深度值（这与单独的深度纹理中存储的深度值不同），而得到的法线则是视角空间下的法线方向。同样，我们也可以通过调用DecodeFloatRG和DecodeViewNormalStereo来解码深度+发现纹理中的深度和法线信息。</p><p>至此，我们已经学会了如何在Unity里获得及使用深度和法线纹理。下面，我们会学习如何使用它们实现各种屏幕特效。</p><h2 id="查看深度和法线纹理">查看深度和法线纹理</h2><p>很多时候，我们希望可以查看生成的深度和法线纹理，以便对Shader进行调试。Unity中可以使用Frame Debugger来查看摄像机生成的深度和法线纹理。如下图：</p><img src="/posts/b2c547d7/image-2.png" class=""><p>使用帧调试器查看到的深度纹理是非线性空间的深度值，而深度和法线纹理都是由Unity编码后的结果。有时，显示出线性空间下的深度信息或解码后的法线方向会更加有用。此时，我们可以自行在片元着色器中输出转换或解码后的深度和法线值，如下图所示。输出代码非常简单，我们可以使用类似下面的代码来输出线性深度值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">float depth = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, i.uv);</span><br><span class="line">float linearDepth = Linear01Depth(depth);</span><br><span class="line">return fixed4(linearDepth, linearDepth, linearDepth, 1.0);</span><br></pre></td></tr></table></figure><p>或是输出法线方向：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fixed3 normal = DecodeViewNormalStereo(tex2D(_CameraDepthNormalsTexture, i.uv).xy);</span><br><span class="line">return fixed4(normal * 0.5 + 0.5, 1.0);</span><br></pre></td></tr></table></figure><img src="/posts/b2c547d7/image-3.png" class=""><p><strong>在查看深度纹理时，我们得到的画面有可能几乎是全黑或者全白的。这时我们可以把摄像机的远裁剪平面的距离调小，使视锥体的范围刚好覆盖从近裁剪平面到远裁剪平面的所有深度区域，当远裁剪平面的距离过大时，会导致距离摄像机较近的距离映射到非常小的深度值，如果场景是一个封闭的区域，那么这就会导致画面看起来几乎是全黑的。相反，如果场景是一个开放区域，并且物体离摄像机的距离较远，就会导致画面几乎是全白的。</strong></p><h1>再谈运动模糊</h1><p>在12.6节中，我们学习了如何通过混合多张屏幕图像来模拟运动模糊的效果。但是，另外一种应用更加广泛的技术则是使用速度映射图。速度映射图中存储了每个像素的速度，然后使用这个速度来决定模糊的大小和方向。速度缓冲的生成有多种方法，一种方法是把场景中所有物体的速度渲染到一张纹理中。但这种方法的缺点是需要修改场景中所有物体的Shader代码，使其添加计算速度的代码并输出到一个渲染纹理中。</p><p>GPU精粹在第27章中介绍了一种生成速度映射图的方法。这种方法利用深度纹理在片元着色器中为每个像素计算其在世界空间下的位置，这是通过使用当前的视角乘投影矩阵的逆矩阵对NDC下的顶点坐标进行变换得到的。当得到世界空间中的顶点坐标后，我们使用前一帧的视角乘投影矩阵对其进行变换，得到该位置在前一帧中的NDC坐标。然后，我们计算前一帧和当前帧的位置差，生成该像素的速度。这种方法的优点是可以在一个屏幕后处理步骤中完成整个效果的模拟，但是缺点需要在片元着色器中进行两次矩阵乘法的操作，对性能有所影响。</p><p>本节实现的运动模糊适用于场景静止、摄像机快速运动的情况，这是因为我们在计算时只考虑了摄像机的运动。因此，如果我们把本节的代码应用到一个物体快速运动而摄像机静止的场景，会发现不会产生任何运动模糊效果。如果我们想要对快速移动的物体产生运动模糊的效果，就需要生成更加精确的速度映射图。我们可以在Unity自带的Image Effect包中找到更多运动模糊的实现方法。</p><p>本节选择在片元着色器中使用逆矩阵来重建每个像素在世界空间下的位置。但是这种做法往往会影响性能，在13.3节中，我们会介绍一种更快速由深度纹理重建世界坐标的方法。</p><p>Shader代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;mul(UNITY_MATRIX_MVP,*)&#x27; with &#x27;UnityObjectToClipPos(*)&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;Custom/MotionBlur&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _BlurSize (&quot;Blur Size&quot;, Float) = 1.0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        CGINCLUDE</span><br><span class="line"></span><br><span class="line">        #include &quot;UnityCG.cginc&quot;</span><br><span class="line">            </span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line">        half4 _MainTex_TexelSize;</span><br><span class="line">        sampler2D _CameraDepthTexture;</span><br><span class="line">        float4x4 _CurrentViewProjectionInverseMatrix;</span><br><span class="line">        float4x4 _PreviousViewProjectionMatrix;</span><br><span class="line">        half _BlurSize;</span><br><span class="line"></span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            half2 uv : TEXCOORD0;</span><br><span class="line">            half2 uv_depth : TEXCOORD1;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        v2f vert(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line">            o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">            o.uv = v.texcoord;</span><br><span class="line">            o.uv_depth = v.texcoord;</span><br><span class="line"></span><br><span class="line">            #if UNITY_UV_STARTS_AT_TOP</span><br><span class="line">            if(_MainTex_TexelSize.y &lt; 0)</span><br><span class="line">                o.uv_depth = 1 - o.uv_depth.y;</span><br><span class="line">            #endif</span><br><span class="line"></span><br><span class="line">            return o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line"></span><br><span class="line">            float d = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, i.uv_depth);</span><br><span class="line"></span><br><span class="line">            float4 H = float4(i.uv.x * 2 - 1, i.uv.y * 2 - 1, d * 2 - 1, 1);</span><br><span class="line"></span><br><span class="line">            float4 D = mul(_CurrentViewProjectionInverseMatrix, H);</span><br><span class="line"></span><br><span class="line">            float4 worldPos = D / D.w;</span><br><span class="line"></span><br><span class="line">            float4 currentPos = H;</span><br><span class="line"></span><br><span class="line">            float4 previousPos = mul(_PreviousViewProjectionMatrix, worldPos);</span><br><span class="line"></span><br><span class="line">            previousPos /= previousPos.w;</span><br><span class="line"></span><br><span class="line">            float2 velocity = (currentPos.xy - previousPos.xy) / 2.0f;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            float2 uv = i.uv;</span><br><span class="line">float4 c = tex2D(_MainTex, uv);</span><br><span class="line">uv += velocity * _BlurSize;</span><br><span class="line">for (int it = 1; it &lt; 3; it++, uv += velocity * _BlurSize) &#123;</span><br><span class="line">float4 currentColor = tex2D(_MainTex, uv);</span><br><span class="line">c += currentColor;</span><br><span class="line">&#125;</span><br><span class="line">c /= 3;</span><br><span class="line"></span><br><span class="line">return fixed4(c.rgb, 1.0);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ENDCG</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZTest Always Cull Off ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fallback Off</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在片元着色器中，我们首先需要利用深度纹理和当前帧的视角乘投影矩阵的逆矩阵来求得该像素在世界空间下的坐标，过程开始于对深度纹理的采样，我们使用内置的SAMPLE_DEPTH_TEXTURE宏和纹理坐标对深度纹理进行采样，得到了深度值d。由13.1.2节可知，d是由NDC下的坐标映射而来的，我们想要构建像素的NDC坐标H，就需要把这个深度值重新映射回NDC，这个映射很简单，只需要使用原映射的反函数即可，即d*2 - 1。同样，NDC的xy分量可以由像素的纹理坐标映射而来(NDC下的xyz分量范围均为[-1,1])。当得到NDC下的坐标H后，我们就可以使用当前帧的视角乘<strong>投影矩阵的逆矩阵</strong>对其进行变换，并把结果值除以它的w分量来得到世界空间下的坐标表示<code>worldPos</code>。</p><blockquote><p>笔者在写这段博客的时候还没有好好看代码，被投影矩阵的逆矩阵这个概念搞糊涂了，在第四章中讲到了从世界空间到观察空间要经过视图变化、投影变换，怎么到这只有一个逆投影变换了，但是你看代码的话发现其实这个矩阵是视图变换和投影变化矩阵的乘积</p></blockquote><p>一旦得到了世界空间下的坐标，我们就可以使用前一帧的视角*投影矩阵对它进行变换，得到前一帧在NDC下的坐标previousPos。然后，我们计算前一帧和当前帧在屏幕空间下的位置差，得到该像素的velocity。</p><p>C#代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Shader.Chapter13</span><br><span class="line">&#123;</span><br><span class="line">    public class MotionBlurWithDepthTexture : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        private static readonly int BlurSize = UnityEngine.Shader.PropertyToID(&quot;_BlurSize&quot;);</span><br><span class="line">        private static readonly int PreviousViewProjectionMatrix = UnityEngine.Shader.PropertyToID(&quot;_PreviousViewProjectionMatrix&quot;);</span><br><span class="line">        private static readonly int CurrentViewProjectionInverseMatrix = UnityEngine.Shader.PropertyToID(&quot;_CurrentViewProjectionInverseMatrix&quot;);</span><br><span class="line">        public UnityEngine.Shader motionBlurShader;</span><br><span class="line">        </span><br><span class="line">        private Material motionBlurMaterial;</span><br><span class="line">        private Camera _camera;</span><br><span class="line"></span><br><span class="line">        private void OnEnable()</span><br><span class="line">        &#123;</span><br><span class="line">            if (motionBlurMaterial == null)</span><br><span class="line">            &#123;</span><br><span class="line">                motionBlurMaterial = new Material(motionBlurShader);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (_camera == null)</span><br><span class="line">            &#123;</span><br><span class="line">                _camera = GetComponent&lt;Camera&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            _camera.depthTextureMode |= DepthTextureMode.Depth;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [Range(0.0f, 1.0f)] public float blurSize = 0.5f;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        private Matrix4x4 previousViewProjectionMatrix;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        private void OnRenderImage(RenderTexture source, RenderTexture destination)</span><br><span class="line">        &#123;</span><br><span class="line">            if (motionBlurMaterial != null)</span><br><span class="line">            &#123;</span><br><span class="line">                motionBlurMaterial.SetFloat(BlurSize, blurSize);</span><br><span class="line">                motionBlurMaterial.SetMatrix(PreviousViewProjectionMatrix, previousViewProjectionMatrix);</span><br><span class="line">                </span><br><span class="line">                Matrix4x4 currentViewProjectionMatrix = _camera.projectionMatrix * _camera.worldToCameraMatrix;</span><br><span class="line">                Matrix4x4 currentCurrentViewProjectionInverseMatrix = currentViewProjectionMatrix.inverse;</span><br><span class="line">                motionBlurMaterial.SetMatrix(CurrentViewProjectionInverseMatrix, currentCurrentViewProjectionInverseMatrix);</span><br><span class="line">                previousViewProjectionMatrix = currentViewProjectionMatrix;</span><br><span class="line">                </span><br><span class="line">                Graphics.Blit(source, destination, motionBlurMaterial);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Graphics.Blit(source, destination);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>全局雾效</h1><p>雾效(Fog)是游戏里经常使用的一种效果。Unity内置的雾效可以产生基于距离的线性或指数雾效。然而，想要在自己编写的顶点/片元着色器中实现这些雾效，我们需要在Shader中添加<code>#pragma multi_compile_fog</code>指令，同时还需要使用相关的内置宏，例如UNITY_FOG_COORDS、UNITY_TRANSFER_FOG和UNITY_APPLY_FOG等。这种方法的缺点在于，我们不仅要为场景中所有物体添加相关的渲染代码，而且能够实现的效果非常有限。当我们需要对雾效进行一些个性化操作时，例如使用基于高度的雾效等，仅仅使用Unity内置的雾效就变得不再可行。</p><p>在本节中，我们将会学习一种基于屏幕后处理的全局雾效的实现。使用这种方法，我们不需要更改场景内渲染的物体所使用的Shader代码，而仅仅依靠一次屏幕后处理步骤即可。这种方法的自由度很高，我们可以方便地模拟各种雾效，例如均匀的雾效、基于距离的线性/指数雾效、基于高度的雾效等。在学习完本节后，我们可以得到类似下图的效果。</p><p>基于屏幕后处理的全局雾效的关键是，根据深度纹理来重建每个像素在世界空间下的位置。尽管在13.2节中，我们在模拟运动模糊时已经实现了这个需求，即构建出当前像素的NDC坐标，再通过当前摄像机的视角乘投影矩阵的逆矩阵来得到世界空间下的像素坐标。但是这样的实现需要在片元着色器中进行矩阵乘法的操作，而这通常会影响游戏的性能。在本节中，我们将会学习一个快速从深度纹理中构建世界坐标的方法。这种方法首先对图像空间下的视锥体射线（从摄像机出发，指向图像上的某点的射线）进行插值，这条射线存储了该像素在世界空间下到摄像机的方向信息。然后，我们把该射线和线性化后的视角空间下的深度值想成，再加上摄像机的世界位置，就可以得到该像素在世界空间下的位置。当我们得到世界坐标后，就可以轻松地使用各个公式来模拟全局雾效了。</p><h2 id="重建世界坐标">重建世界坐标</h2><p>在动手开始写代码之前，我们首先来了解如何从深度纹理中重建世界坐标。我们知道，坐标中的一个顶点坐标可以通过它相对于另一个顶点坐标的偏移量来求得。重建像素的世界坐标也是基于这样的思想。我们只需要知道摄像机在世界空间下的位置，以及世界空间下该像素相对于摄像机的偏移量，把它们相加就可以得到该像素的世界坐标。整个过程可以使用下面的代码来表示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float worldPos = _WorldSpaceCameraPos + linearDepth * interpolateRay;</span><br></pre></td></tr></table></figure><p>其中，<code>_WorldSpaceCameraPos</code>是摄像机在世界空间下的位置，这可以由Unity的内置变量直接访问得到。而<code>linearDepth * interpolatedRay</code>则可以计算得到该像素相对于摄像机的偏移量，<code>linearDepth</code>是由深度纹理得到的线性深度值，<code>interpolatedRay</code>是由顶点着色器输出并插值后得到的射线，它不仅包含了该像素到摄像机的方向，也包含了距离信息。<code>linearDepth</code>的获取我们已经在前面的小节中详细解释过了，因此，本节着重解释<code>interpolatedRay</code>的求法。</p><p><code>interpolatedRay</code>来源于对近裁切平面的4个角的某个特定向量的插值，这4个向量包括了它们到摄像机的方向和距离信息，我们可以利用摄像机的近裁切平面距离、FOV、纵横比计算而得。下图显示了计算时使用的一些辅助向量。为了方便计算，我们可以先计算两个向量——toTop和toRight，显示了计算时使用的一些辅助向量。分别指向摄像机正上方和正右方的向量。它们的计算公式如下：</p><p>$$half = Near \times tan(\frac{FOV}{2})$$<br>$$toTop = camera.up \times halfHeight$$<br>$$toRight = camera.right \times halfHeight \cdot aspect$$</p><p>其中，Near是近裁切平面的距离，FOV是竖直方向的视角范围，camera.up、camera.right分别对应了摄像机的正上方和正右方。<br>当得到这两个辅助向量后，我们就可以计算4个角相对于摄像机的方向了。我们以左上角为例(见下图的TL点)，它的计算公式如下：</p><p>$$TL = camera.forward \cdot Near + toTop - toRight$$</p><p>读者可以依靠基本的矢量运算验证上面的结果。同理，其他三个角的计算也是类似的:</p><p>$$TR = camera.forward \cdot Near + toTop + toRight$$<br>$$BL = camera.forward \cdot Near - toTop - toRight$$<br>$$BR = camera.forward \cdot Near - toTop + toRight$$</p><img src="/posts/b2c547d7/image-4.png" class=""><p>注意，上面求得的4个向量不仅包含了方向信息，它们的模对应了4个点到摄像机的空间距离。由于我们得到的线性深度值并非是点到摄像机的欧式距离，而是在z方向上的距离，因此我们不能直接使用深度值和4个角的单位方向的乘积来计算它们到摄像机的偏移量，如下图所示，想要把深度值转换成到摄像机的欧式距离也很简单，我们以TL点为例，根据相似三角形原理，TL所在的射线上，像素的深度值和它到摄像机的实际距离的比等于近裁剪平面的距离和TL向量的模的比，即:</p><p>$$\frac{depth}{dist} = \frac{Near}{|TL|}$$</p><p>由此可得，我们需要的TL距离摄像机的欧式距离dist:</p><p>$$ dist = \frac{|TL|}{Near} \times depth$$</p><p>由于4个点相互对称，因此其他三个向量的模和TL相等，即我们可以使用同一个因子和单位向量相乘，得到它们对应的向量值</p><p>$$scale = \frac{|TL|}{|Near|}$$</p><p>$$Ray_{TL} = \frac{TL}{|TL|} \times scale, Ray_{TR} = \frac{TR}{|TR|} \times scale$$<br>$$Ray_{BL} = \frac{BL}{|BL|} \times scale, Ray_{BR} = \frac{BR}{|BR|} \times scale$$</p><img src="/posts/b2c547d7/image-5.png" class=""><p>屏幕后处理的原理是使用特定的材质去渲染一个刚好填充整个屏幕的四边形面片。这个四边形面片的4个顶点就对应了近裁剪平面的4个角。因此我们可以把上面的计算结果传递给顶点着色器，顶点着色器根据当前的位置选择它所对应的向量，然后再将其输出，经过插值后传递给片元着色器得到interpolatedRay，我们就可以直接利用本节一开始提到的公式重建该像素在世界空间下的位置了。</p><h2 id="雾的计算">雾的计算</h2><p>在简单的雾效实现中，我们需要计算一个雾效系数f，作为混合原始颜色和雾的颜色的混合系数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float afterFog = f * fogColor + (1 - f) * origColor;</span><br></pre></td></tr></table></figure><p>这个雾效系数$f$有很多计算方法。在Unity内置的雾效实现中，支持三种雾效的计算方式——线性(Linear)、指数(Exponential)以及指数的平方(Exponential Squared)。当给定距离z后，$f$的计算公式分别如下:</p><p>Linear:</p><p>$$f = \frac{d_{max} - |z|}{d_{max} - d_{min}}$$</p><p>其中$d_{min}$和$d_{max}$分别表示受雾影响的最小距离和最大距离。</p><p>Exponential:</p><p>$$f = e^{-d \cdot |z|}$$</p><p>其中d是控制雾的浓度的参数</p><p>Exponential Squard：</p><p>$$f = e ^ {-(d - |z|)^2}$$</p><p>d是控制雾的浓度的参数</p><p>在本节中，我们将使用类似线性雾的计算方式，计算基于高度的雾效。具体方法是，当给定一点在世界空间下的高度y后，$f$的计算公式为：</p><p>$$f = \frac{H_{end} - y}{H_{end} - H_{start}}$$</p><p>其中$H_{start}$和$H_{end}$分别表示受雾影响的起始高度和终止高度。</p><h2 id="实现">实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Custom/FogWithDepthTexture&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _FogDensity (&quot;Rog Density&quot;, Float) = 1.0</span><br><span class="line">        _FogColor (&quot;Fog Color&quot;, Color) = (1, 1, 1, 1)</span><br><span class="line">        _FogStart (&quot;Fog Start&quot;, Float) = 0.0</span><br><span class="line">        _FogEnd (&quot;Fog End&quot;, Float) = 1.0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        CGINCLUDE</span><br><span class="line"></span><br><span class="line">        #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">        float4x4 _FrustumCornersRay;</span><br><span class="line">        </span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line">        half4 _MainTex_TexelSize;</span><br><span class="line">        sampler2D _CameraDepthTexture;</span><br><span class="line">        half _FogDensity;</span><br><span class="line">        fixed4 _FogColor;</span><br><span class="line">        float _FogStart;</span><br><span class="line">        float _FogEnd;</span><br><span class="line"></span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            half2 uv : TEXCOORD0;</span><br><span class="line">            half2 uv_depth : TEXCOORD1;</span><br><span class="line">            float4 interpolatedRay : TEXCOORD2;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        v2f vert(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line">            o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">            o.uv = v.texcoord;</span><br><span class="line">            o.uv_depth = v.texcoord;</span><br><span class="line"></span><br><span class="line">            #if UNITY_UV_STARTS_AT_TOP</span><br><span class="line">            if(_MainTex_TexelSize.y &lt; 0)</span><br><span class="line">                o.uv_depth = 1 - o.uv_depth.y;</span><br><span class="line">            #endif</span><br><span class="line"></span><br><span class="line">            int index = 0;</span><br><span class="line">            if(v.texcoord.x &lt; 0.5 &amp;&amp; v.texcoord.y &lt; 0.5)</span><br><span class="line">            &#123;</span><br><span class="line">                index = 0;</span><br><span class="line">            &#125;else if(v.texcoord.x &gt; 0.5 &amp;&amp; v.texcoord.y &lt; 0.5)</span><br><span class="line">            &#123;</span><br><span class="line">                index = 1;</span><br><span class="line">            &#125;else if(v.texcoord.x &gt; 0.5 &amp;&amp; v.texcoord.y &gt; 0.5)</span><br><span class="line">            &#123;</span><br><span class="line">                index = 2;</span><br><span class="line">            &#125;else</span><br><span class="line">            &#123;</span><br><span class="line">                index = 3;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            #if UNITY_UV_STARTS_AT_TOP</span><br><span class="line">            if(_MainTex_TexelSize.y &lt; 0)</span><br><span class="line">                index = 3 - index;</span><br><span class="line">            #endif</span><br><span class="line"></span><br><span class="line">            o.interpolatedRay = _FrustumCornersRay[index];            </span><br><span class="line">            </span><br><span class="line">            return o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line"></span><br><span class="line">            float linearDepth = LinearEyeDepth(SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, i.uv_depth));</span><br><span class="line"></span><br><span class="line">            float3 worldPos = _WorldSpaceCameraPos + linearDepth * i.interpolatedRay.xyz;</span><br><span class="line"></span><br><span class="line">            float fogDensity = (_FogEnd - worldPos.y) / (_FogEnd - _FogStart);</span><br><span class="line">            fogDensity = saturate(fogDensity * _FogDensity);</span><br><span class="line"></span><br><span class="line">            fixed4 finalColor = tex2D(_MainTex, i.uv);</span><br><span class="line">            finalColor.rgb = lerp(finalColor.rgb, _FogColor.rgb, fogDensity);</span><br><span class="line">            </span><br><span class="line">return finalColor;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ENDCG</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZTest Always Cull Off ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fallback Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Shader.Chapter13</span><br><span class="line">&#123;</span><br><span class="line">    public class FogWithDepthTexture : MonoBehaviour</span><br><span class="line">    &#123;</span><br><span class="line">        private static readonly int FrustumCornersRay = UnityEngine.Shader.PropertyToID(&quot;_FrustumCornersRay&quot;);</span><br><span class="line">        private static readonly int ViewProjectionInverseMatrix = UnityEngine.Shader.PropertyToID(&quot;_ViewProjectionInverseMatrix&quot;);</span><br><span class="line">        private static readonly int FogDensity = UnityEngine.Shader.PropertyToID(&quot;_FogDensity&quot;);</span><br><span class="line">        private static readonly int FogColor = UnityEngine.Shader.PropertyToID(&quot;_FogColor&quot;);</span><br><span class="line">        private static readonly int FogStart = UnityEngine.Shader.PropertyToID(&quot;_FogStart&quot;);</span><br><span class="line">        private static readonly int FogEnd = UnityEngine.Shader.PropertyToID(&quot;_FogEnd&quot;);</span><br><span class="line">        public UnityEngine.Shader fogShader;</span><br><span class="line">        private Material material;</span><br><span class="line"></span><br><span class="line">        private Camera _camera;</span><br><span class="line">        private Transform cameraTransform;</span><br><span class="line">        </span><br><span class="line">        private void OnEnable()</span><br><span class="line">        &#123;</span><br><span class="line">            _camera = GetComponent&lt;Camera&gt;();</span><br><span class="line">            cameraTransform = GetComponent&lt;Transform&gt;();</span><br><span class="line"></span><br><span class="line">            if (material == null)</span><br><span class="line">            &#123;</span><br><span class="line">                material = new Material(fogShader);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            _camera.depthTextureMode |= DepthTextureMode.Depth;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        [Range(0.0f, 3.0f)]</span><br><span class="line">        public float fogDensity = 1.0f;</span><br><span class="line">        </span><br><span class="line">        public Color fogColor = Color.white;</span><br><span class="line">        </span><br><span class="line">        public float fogStart = 0.0f;</span><br><span class="line">        public float fogEnd = 2.0f;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        private void OnRenderImage(RenderTexture source, RenderTexture destination)</span><br><span class="line">        &#123;</span><br><span class="line">            if (material != null)</span><br><span class="line">            &#123;</span><br><span class="line">                Matrix4x4 frustumCorners = Matrix4x4.identity;</span><br><span class="line"></span><br><span class="line">                float fov = _camera.fieldOfView;</span><br><span class="line">                float near = _camera.nearClipPlane;</span><br><span class="line">                float aspect = _camera.aspect;</span><br><span class="line"></span><br><span class="line">                float halfHeight = near * Mathf.Tan(fov * 0.5f * Mathf.Deg2Rad);</span><br><span class="line">                Vector3 toRight = cameraTransform.right * halfHeight * aspect;</span><br><span class="line">                Vector3 toTop = cameraTransform.up * halfHeight;</span><br><span class="line"></span><br><span class="line">                Vector3 topLeft = cameraTransform.forward * near + toTop - toRight;</span><br><span class="line">                float scale = topLeft.magnitude / near;</span><br><span class="line"></span><br><span class="line">                topLeft.Normalize();</span><br><span class="line">                topLeft *= scale;</span><br><span class="line"></span><br><span class="line">                Vector3 topRight = cameraTransform.forward * near + toRight + toTop;</span><br><span class="line">                topRight.Normalize();</span><br><span class="line">                topRight *= scale;</span><br><span class="line"></span><br><span class="line">                Vector3 bottomLeft = cameraTransform.forward * near - toTop - toRight;</span><br><span class="line">                bottomLeft.Normalize();</span><br><span class="line">                bottomLeft *= scale;</span><br><span class="line"></span><br><span class="line">                Vector3 bottomRight = cameraTransform.forward * near + toRight - toTop;</span><br><span class="line">                bottomRight.Normalize();</span><br><span class="line">                bottomRight *= scale;</span><br><span class="line"></span><br><span class="line">                frustumCorners.SetRow(0, bottomLeft);</span><br><span class="line">                frustumCorners.SetRow(1, bottomRight);</span><br><span class="line">                frustumCorners.SetRow(2, topRight);</span><br><span class="line">                frustumCorners.SetRow(3, topLeft);</span><br><span class="line"></span><br><span class="line">                material.SetMatrix(&quot;_FrustumCornersRay&quot;, frustumCorners);</span><br><span class="line"></span><br><span class="line">                material.SetFloat(&quot;_FogDensity&quot;, fogDensity);</span><br><span class="line">                material.SetColor(&quot;_FogColor&quot;, fogColor);</span><br><span class="line">                material.SetFloat(&quot;_FogStart&quot;, fogStart);</span><br><span class="line">                material.SetFloat(&quot;_FogEnd&quot;, fogEnd);</span><br><span class="line"></span><br><span class="line">                Graphics.Blit (source, destination, material);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Graphics.Blit(source, destination);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>再谈边缘检测</h1><p>在12.3节中，我们曾介绍如何使用Sobel算子对屏幕图像进行边缘检测，实现描边的效果。但是，这种直接利用颜色信息进行边缘检测的方法会产生很多我们不希望得到的边缘线，如下图所示。</p><img src="/posts/b2c547d7/image-6.png" class=""><p>可以看出，物体的纹理、阴影等位置也被描上黑边，而这往往不是我们希望看到的。在本节中，我们将学习如何在深度和法线纹理上进行边缘检测，这些图像不会受纹理和光照的影响，而仅仅保存了当前渲染物体的模型信息，通过这样的方式检测出来的边缘更加可靠。在学习完本节后我们可以得到下图的效果。</p><img src="/posts/b2c547d7/image-7.png" class=""><p>与12.3节使用的Sobel算子不同，本节将使用Roberts算子来进行边缘检测。它使用的卷积核如下图所示。</p><p>Robert算子的本质就是计算左上角和右上角的差值，乘以右上角和左下角的差值，作为评估边缘的依据。在下面的实现中，我们也会按照这样的方式，取对角方向的深度或法线值，比较它们之间的差值，如果超过某一个阈值，就认为它们之间存在一条边。</p><img src="/posts/b2c547d7/image-8.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">namespace Shader.Chapter13</span><br><span class="line">&#123;</span><br><span class="line">    public class EdgeDetectNormalsAndDepth : MonoBehaviour &#123;</span><br><span class="line">        private static readonly int EdgeOnly = UnityEngine.Shader.PropertyToID(&quot;_EdgeOnly&quot;);</span><br><span class="line"></span><br><span class="line">        public UnityEngine.Shader edgeDetectShader;</span><br><span class="line">        private Material material = null;</span><br><span class="line"></span><br><span class="line">        [Range(0.0f, 1.0f)]</span><br><span class="line">        public float edgesOnly = 0.0f;</span><br><span class="line"></span><br><span class="line">        public Color edgeColor = Color.black;</span><br><span class="line"></span><br><span class="line">        public Color backgroundColor = Color.white;</span><br><span class="line"></span><br><span class="line">        public float sampleDistance = 1.0f;</span><br><span class="line"></span><br><span class="line">        public float sensitivityDepth = 1.0f;</span><br><span class="line"></span><br><span class="line">        public float sensitivityNormals = 1.0f;</span><br><span class="line"></span><br><span class="line">        void OnEnable() &#123;</span><br><span class="line">            GetComponent&lt;Camera&gt;().depthTextureMode |= DepthTextureMode.DepthNormals;</span><br><span class="line">            material = new Material(edgeDetectShader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [ImageEffectOpaque]</span><br><span class="line">        void OnRenderImage (RenderTexture src, RenderTexture dest) &#123;</span><br><span class="line">            if (material != null) &#123;</span><br><span class="line">                material.SetFloat(EdgeOnly, edgesOnly);</span><br><span class="line">                material.SetColor(&quot;_EdgeColor&quot;, edgeColor);</span><br><span class="line">                material.SetColor(&quot;_BackgroundColor&quot;, backgroundColor);</span><br><span class="line">                material.SetFloat(&quot;_SampleDistance&quot;, sampleDistance);</span><br><span class="line">                material.SetVector(&quot;_Sensitivity&quot;, new Vector4(sensitivityNormals, sensitivityDepth, 0.0f, 0.0f));</span><br><span class="line"></span><br><span class="line">                Graphics.Blit(src, dest, material);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                Graphics.Blit(src, dest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，这里我们为OnRenderImage函数添加了[ImageEffectOpaque]属性，我们曾在12.1节提到过这个属性的含义。在默认情况下，OnRenderImage函数会在所有的不透明和透明的Pass执行完成之后被调用，以便对场景中的所有游戏对象都产生影响。但有时，我们希望在不透明的Pass(即渲染队列小于等于2500的Pass，内置的Background、Geometry和AlphaTest渲染队列均在此范围内)执行完毕后立即调用该函数，而不对透明物体(渲染队列为TransparentPass)产生影响，此时，我们可以在OnRenderImage函数前面添加[ImageEffectOpaque]属性来实现这样的目的。在本例中，我们只希望对不透明物体进行描边，而不希望透明物体也被描边，因此需要添加该属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;mul(UNITY_MATRIX_MVP,*)&#x27; with &#x27;UnityObjectToClipPos(*)&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;Unity Shaders Book/Chapter 13/Edge Detection Normals And Depth&quot; &#123;</span><br><span class="line">Properties &#123;</span><br><span class="line">_MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">_EdgeOnly (&quot;Edge Only&quot;, Float) = 1.0</span><br><span class="line">_EdgeColor (&quot;Edge Color&quot;, Color) = (0, 0, 0, 1)</span><br><span class="line">_BackgroundColor (&quot;Background Color&quot;, Color) = (1, 1, 1, 1)</span><br><span class="line">_SampleDistance (&quot;Sample Distance&quot;, Float) = 1.0</span><br><span class="line">_Sensitivity (&quot;Sensitivity&quot;, Vector) = (1, 1, 1, 1)</span><br><span class="line">&#125;</span><br><span class="line">SubShader &#123;</span><br><span class="line">CGINCLUDE</span><br><span class="line"></span><br><span class="line">#include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">sampler2D _MainTex;</span><br><span class="line">half4 _MainTex_TexelSize;</span><br><span class="line">fixed _EdgeOnly;</span><br><span class="line">fixed4 _EdgeColor;</span><br><span class="line">fixed4 _BackgroundColor;</span><br><span class="line">float _SampleDistance;</span><br><span class="line">half4 _Sensitivity;</span><br><span class="line"></span><br><span class="line">sampler2D _CameraDepthNormalsTexture;</span><br><span class="line"></span><br><span class="line">struct v2f &#123;</span><br><span class="line">float4 pos : SV_POSITION;</span><br><span class="line">half2 uv[5]: TEXCOORD0;</span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line">v2f vert(appdata_img v) &#123;</span><br><span class="line">v2f o;</span><br><span class="line">o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">half2 uv = v.texcoord;</span><br><span class="line">o.uv[0] = uv;</span><br><span class="line"></span><br><span class="line">#if UNITY_UV_STARTS_AT_TOP</span><br><span class="line">if (_MainTex_TexelSize.y &lt; 0)</span><br><span class="line">uv.y = 1 - uv.y;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">o.uv[1] = uv + _MainTex_TexelSize.xy * half2(1,1) * _SampleDistance;</span><br><span class="line">o.uv[2] = uv + _MainTex_TexelSize.xy * half2(-1,-1) * _SampleDistance;</span><br><span class="line">o.uv[3] = uv + _MainTex_TexelSize.xy * half2(-1,1) * _SampleDistance;</span><br><span class="line">o.uv[4] = uv + _MainTex_TexelSize.xy * half2(1,-1) * _SampleDistance;</span><br><span class="line"> </span><br><span class="line">return o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">half CheckSame(half4 center, half4 sample) &#123;</span><br><span class="line">half2 centerNormal = center.xy;</span><br><span class="line">float centerDepth = DecodeFloatRG(center.zw);</span><br><span class="line">half2 sampleNormal = sample.xy;</span><br><span class="line">float sampleDepth = DecodeFloatRG(sample.zw);</span><br><span class="line"></span><br><span class="line">// difference in normals</span><br><span class="line">// do not bother decoding normals - there&#x27;s no need here</span><br><span class="line">half2 diffNormal = abs(centerNormal - sampleNormal) * _Sensitivity.x;</span><br><span class="line">int isSameNormal = (diffNormal.x + diffNormal.y) &lt; 0.1;</span><br><span class="line">// difference in depth</span><br><span class="line">float diffDepth = abs(centerDepth - sampleDepth) * _Sensitivity.y;</span><br><span class="line">// scale the required threshold by the distance</span><br><span class="line">int isSameDepth = diffDepth &lt; 0.1 * centerDepth;</span><br><span class="line"></span><br><span class="line">// return:</span><br><span class="line">// 1 - if normals and depth are similar enough</span><br><span class="line">// 0 - otherwise</span><br><span class="line">return isSameNormal * isSameDepth ? 1.0 : 0.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fixed4 fragRobertsCrossDepthAndNormal(v2f i) : SV_Target &#123;</span><br><span class="line">half4 sample1 = tex2D(_CameraDepthNormalsTexture, i.uv[1]);</span><br><span class="line">half4 sample2 = tex2D(_CameraDepthNormalsTexture, i.uv[2]);</span><br><span class="line">half4 sample3 = tex2D(_CameraDepthNormalsTexture, i.uv[3]);</span><br><span class="line">half4 sample4 = tex2D(_CameraDepthNormalsTexture, i.uv[4]);</span><br><span class="line"></span><br><span class="line">half edge = 1.0;</span><br><span class="line"></span><br><span class="line">edge *= CheckSame(sample1, sample2);</span><br><span class="line">edge *= CheckSame(sample3, sample4);</span><br><span class="line"></span><br><span class="line">fixed4 withEdgeColor = lerp(_EdgeColor, tex2D(_MainTex, i.uv[0]), edge);</span><br><span class="line">fixed4 onlyEdgeColor = lerp(_EdgeColor, _BackgroundColor, edge);</span><br><span class="line"></span><br><span class="line">return lerp(withEdgeColor, onlyEdgeColor, _EdgeOnly);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ENDCG</span><br><span class="line"></span><br><span class="line">Pass &#123; </span><br><span class="line">ZTest Always Cull Off ZWrite Off</span><br><span class="line"></span><br><span class="line">CGPROGRAM      </span><br><span class="line"></span><br><span class="line">#pragma vertex vert  </span><br><span class="line">#pragma fragment fragRobertsCrossDepthAndNormal</span><br><span class="line"></span><br><span class="line">ENDCG  </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">FallBack Off</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本节实现的描边效果是基于整个屏幕空间进行的，也就是说，场景内的所有物体都会被添加描边效果。但有时，我们希望只对特定的物体进行描边，例如当玩家选中场景中的某个物体后，我们想要在该物体周围添加一层描边效果。这时，我们可以使用Unity提供的<code>Graphics.DrawMesh</code>或者<code>Graphics.DrawMeshNow</code>函数把需要描边的物体再渲染一次(在所有不透明物体渲染完毕之后)，然后再使用本节提到的边缘检测算法计算深度和法线纹理中每个像素的梯度值，判断它们是否小于某个阈值，如果是，就在Shader中使用clip()函数将该像素剔除掉，从而显示出原来的颜色。</p>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏开发中的设计模式 —— 缓存池</title>
      <link href="/posts/c41139c9/"/>
      <url>/posts/c41139c9/</url>
      
        <content type="html"><![CDATA[<p>在阅读UGUI源码的时候, 频繁地使用了Unity的ListPool结构:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetEventList</span>&lt;<span class="title">T</span>&gt;(<span class="params">GameObject go, IList&lt;IEventSystemHandler&gt; results</span>) <span class="keyword">where</span> T : IEventSystemHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Debug.LogWarning(&quot;GetEventList&lt;&quot; + typeof(T).Name + &quot;&gt;&quot;);</span></span><br><span class="line">    <span class="keyword">if</span> (results == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException(<span class="string">&quot;Results array is null&quot;</span>, <span class="string">&quot;results&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (go == <span class="literal">null</span> || !go.activeInHierarchy)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> components = ListPool&lt;Component&gt;.Get();</span><br><span class="line">    go.GetComponents(components);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> componentsCount = components.Count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; componentsCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ShouldSendToComponent&lt;T&gt;(components[i]))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Debug.Log(string.Format(&quot;&#123;2&#125; found! On &#123;0&#125;.&#123;1&#125;&quot;, go, s_GetComponentsScratch[i].GetType(), typeof(T)));</span></span><br><span class="line">        results.Add(components[i] <span class="keyword">as</span> IEventSystemHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    ListPool&lt;Component&gt;.Release(components);</span><br><span class="line">    <span class="comment">// Debug.LogWarning(&quot;end GetEventList&lt;&quot; + typeof(T).Name + &quot;&gt;&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你想要在业务逻辑中创建新的List的时候, 不妨想一想是否可以用缓存池来代替创建新的List.</p><p>思考一下 在使用协程的时候会用到yield return new WaitForSeconds, 这个能用ListPool来缓存吗?</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记（十二）——屏幕后处理效果</title>
      <link href="/posts/a07e7969/"/>
      <url>/posts/a07e7969/</url>
      
        <content type="html"><![CDATA[<p>屏幕后处理效果是游戏中实现屏幕特效的常见方法。在本章中我们将学习如何在Unity中利用渲染纹理来实现各种常见的屏幕后处理效果。我们首先要建立一个基本的屏幕后处理脚本系统，随后我们会使用这个系统实现一个简单的调整画面亮度、饱和度和对比度的屏幕特效。然后我们会接触到图像滤波的概念，并利用Sobel算子在屏幕空间中对图像进行边缘检测，实现描边效果。在此基础上，我们会实现一个高斯模糊的屏幕特效、Bloom和运动模糊的效果。</p><h1>建立一个基本的屏幕后处理脚本系统</h1><blockquote><p>在Unity5之后，书里面提到的这个后处理脚本系统的基类中使用的那些接口都已经废弃了，所以这个后处理脚本启动其实也没有什么存在的必要了。<br>另外，本书使用OnRenderImage的方法实现后处理效果的方式也逐渐被CommandBuffer给取代了，所以笔者会尝试用CommandBuffer的方式重新实现这章的所有后处理效果。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">[ExecuteInEditMode]</span><br><span class="line">[RequireComponent (typeof(Camera))]</span><br><span class="line">public class PostEffectsBase : MonoBehaviour &#123;</span><br><span class="line"></span><br><span class="line">    // Called when start</span><br><span class="line">    protected void CheckResources() &#123;</span><br><span class="line">        bool isSupported = CheckSupport();</span><br><span class="line"></span><br><span class="line">        if (isSupported == false) &#123;</span><br><span class="line">            NotSupported();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Called in CheckResources to check support on this platform</span><br><span class="line">    protected bool CheckSupport() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Called when the platform doesn&#x27;t support this effect</span><br><span class="line">    protected void NotSupported() &#123;</span><br><span class="line">        enabled = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void Start() &#123;</span><br><span class="line">        CheckResources();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Called when need to create the material used by this effect</span><br><span class="line">    protected Material CheckShaderAndCreateMaterial(Shader shader, Material material) &#123;</span><br><span class="line">        if (shader == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (shader.isSupported &amp;&amp; material &amp;&amp; material.shader == shader)</span><br><span class="line">            return material;</span><br><span class="line"></span><br><span class="line">        if (!shader.isSupported) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            material = new Material(shader);</span><br><span class="line">            material.hideFlags = HideFlags.DontSave;</span><br><span class="line">            if (material)</span><br><span class="line">                return material;</span><br><span class="line">            else </span><br><span class="line">                return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>调整屏幕的亮度、饱和度和对比度</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class BrightnessSaturationAndContrast : PostEffectsBase</span><br><span class="line">&#123;</span><br><span class="line">    public Shader briSatConShader;</span><br><span class="line">    public Material briSatConMat;</span><br><span class="line">    </span><br><span class="line">    private Material _material</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            briSatConMat = CheckShaderAndCreateMaterial(briSatConShader, briSatConMat);</span><br><span class="line">            return briSatConMat;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [Range(0.0f, 3.0f)] public float brightness = 1.0f;</span><br><span class="line">    [Range(0.0f, 3.0f)] public float saturation = 1.0f;</span><br><span class="line">    [Range(0.0f, 3.0f)] public float contrast = 1.0f;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void OnRenderImage(RenderTexture source, RenderTexture destination)</span><br><span class="line">    &#123;</span><br><span class="line">        if (_material != null)</span><br><span class="line">        &#123;</span><br><span class="line">            _material.SetFloat(&quot;_Brightness&quot;, brightness);</span><br><span class="line">            _material.SetFloat(&quot;_Saturation&quot;, saturation);</span><br><span class="line">            _material.SetFloat(&quot;_Contrast&quot;, contrast);</span><br><span class="line">            </span><br><span class="line">            Graphics.Blit(source, destination, _material);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Graphics.Blit(source, destination);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UnityShaderBook/Chapter 12/BrightnessSaturationAndContrast&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Brightness (&quot;Brightness&quot;, Float) = 1</span><br><span class="line">        _Saturation (&quot;Saturation&quot;, Float) = 1</span><br><span class="line">        _Contrast (&quot;Contrast&quot;, Float) = 1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZTest Always</span><br><span class="line">            Cull Off</span><br><span class="line">            ZWrite Off</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert;</span><br><span class="line">            #pragma fragment frag;</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            half _Brightness;</span><br><span class="line">            half _Saturation;</span><br><span class="line">            half _Contrast;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                half2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_img v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.uv = v.texcoord;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">                fixed4 renderTex = tex2D(_MainTex, i.uv);</span><br><span class="line"></span><br><span class="line">                fixed3 finalColor = renderTex.rgb * _Brightness;</span><br><span class="line"></span><br><span class="line">                fixed luminance = 0.2125 * renderTex.r + 0.7154 * renderTex.g + 0.0721 * renderTex.b;</span><br><span class="line">                fixed3 luminanceColor = fixed3(luminance, luminance, luminance);</span><br><span class="line">                finalColor = lerp(luminanceColor, finalColor, _Saturation);</span><br><span class="line"></span><br><span class="line">                fixed3 avgColor = fixed3(0.5, 0.5, 0.5);</span><br><span class="line">                finalColor = lerp(avgColor, finalColor, _Contrast);</span><br><span class="line"></span><br><span class="line">                return fixed4(finalColor, renderTex.a);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们得到对原屏幕图像（存储在_MainTex）中的采样结果renderTex。然后，利用_Brightness属性来计算来调整亮度。亮度的调整非常简单，我们只需要把原颜色乘以亮度系数_Brightness即可。然后，我们计算该像素值对应的亮度值（luminance），这是通过对每个颜色分量乘以一个特定的系数</p><h1>边缘检测</h1><p>边缘检测的原理是利用一些边缘检测算子对图像进行<code>卷积(convolution)</code>操作，我们首先来了解一下什么是卷积。</p><h2 id="什么是卷积">什么是卷积</h2><p>在图像处理中，卷积操作指的就是使用一个<code>卷积核(kernel)</code>对一张图片中的每个像素进行一系列的操作。卷积核通常是一个四方形的网格结构(比如 $2 \times 2$、$3 \times 3$的方形区域)，该区域内每个方格都有一个权重值。当对图像中某个像素进行卷积时，我们会把卷积核的中心放置于该像素上，翻转核之后再以此计算核中每个元素和其覆盖的图像像素值的乘积并求和，得到的结果就是该位置的新像素值。</p><p>这样的计算过程虽然简单，但是可以实现很多常见的图像处理效果，例如图像模糊、边缘检测等。例如，如果我们想要对图像进行均值模糊，可以使用一个$3 \times 3$的卷积核，核内每个元素的值均为1/9。</p><h2 id="常见的边缘检测算子">常见的边缘检测算子</h2><p>卷积操作的神奇之处在于选择的卷积。那么，用于边缘检测的卷积核应该长什么样呢？在回答这个问题前，我们可以先回想一下边到底是如何形成的。如果相邻像素之间存在差别明显的颜色、亮度、纹理等属性，我们就会认为它们之间应该有一条边界。这种相邻像素之间的差值可以用梯度(gradient)来表示，可以想象到，边缘处的梯度绝对值会比较大。</p><img src="/posts/a07e7969/image.png" class=""><p>3种常见的边缘算子如图所示，它们都包含了两个方向的卷积核，分别用于检测水平方向和竖直方向上的边缘信息。在进行边缘检测时，我们需要对每个像素分别进行一次卷积计算，得到两个方向上的梯度值$G_{x}$和$G_{y}$ ，而整体的梯度公式可以按照下面的公式计算而得：<br>$$G=\sqrt{G^2_{x} + G^2_{y}}$$</p><p>由于上面的计算包含了开根号的操作，出于性能考虑。我们有时会使用绝对值操作来代替开根号操作:<br>$$G = |G_{x}| + |G_{y}|$$</p><p>当我们得到梯度G后，我们就可以据此来判断哪些像素对应了边缘（梯度值越大越有可能是边缘点）。</p><h2 id="实现">实现</h2><p>本节会使用Sobel算子进行边缘检测，实现描边效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class EdgeDetection : PostEffectsBase</span><br><span class="line">&#123;</span><br><span class="line">    public Shader edgeDetectShader;</span><br><span class="line">    private Material edgeDetectMaterial = null;</span><br><span class="line"></span><br><span class="line">    public Material material</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            edgeDetectMaterial = CheckShaderAndCreateMaterial(edgeDetectShader, edgeDetectMaterial);</span><br><span class="line">            return edgeDetectMaterial;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [Range(0.0f, 1.0f)] public float edgesOnly = 0.0f;</span><br><span class="line">    </span><br><span class="line">    public Color edgeColor = Color.black;</span><br><span class="line">    </span><br><span class="line">    public Color backgroundColor = Color.white;</span><br><span class="line">    private static readonly int EdgeColor = Shader.PropertyToID(&quot;_EdgeColor&quot;);</span><br><span class="line">    private static readonly int EdgeOnly = Shader.PropertyToID(&quot;_EdgeOnly&quot;);</span><br><span class="line">    private static readonly int BackgroundColor = Shader.PropertyToID(&quot;_BackgroundColor&quot;);</span><br><span class="line"></span><br><span class="line">    private void OnRenderImage(RenderTexture source, RenderTexture destination)</span><br><span class="line">    &#123;</span><br><span class="line">        if (material != null)</span><br><span class="line">        &#123;</span><br><span class="line">            material.SetFloat(EdgeOnly, edgesOnly);</span><br><span class="line">            material.SetColor(EdgeColor, edgeColor);</span><br><span class="line">            material.SetColor(BackgroundColor, backgroundColor);</span><br><span class="line">            Graphics.Blit(source, destination, material);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Graphics.Blit(source, destination);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 12/Edge Detection&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _EdgeOnly (&quot;Edge Only&quot;, Float) = 1.0</span><br><span class="line">        _EdgeColor (&quot;Edge Color&quot;, Color) = (0,0,0,1)</span><br><span class="line">        _BackgroundColor (&quot;Background Color&quot;, Color) = (1,1,1,1)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZTest Always</span><br><span class="line">            Cull Off</span><br><span class="line">            ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert;</span><br><span class="line">            #pragma fragment frag;</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            half4 _MainTex_TexelSize;</span><br><span class="line">            fixed _EdgeOnly;</span><br><span class="line">            fixed4 _EdgeColor;</span><br><span class="line">            fixed4 _BackgroundColor;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                half2 uv[9] : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_img v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line"></span><br><span class="line">                half2 uv = v.texcoord;</span><br><span class="line">                o.uv[0] = uv + _MainTex_TexelSize.xy * half2(-1, -1);</span><br><span class="line">                o.uv[1] = uv + _MainTex_TexelSize.xy * half2(0, -1);</span><br><span class="line">                o.uv[2] = uv + _MainTex_TexelSize.xy * half2(1, -1);</span><br><span class="line">                o.uv[3] = uv + _MainTex_TexelSize.xy * half2(-1, 0);</span><br><span class="line">                o.uv[4] = uv + _MainTex_TexelSize.xy * half2(0, 0);</span><br><span class="line">                o.uv[5] = uv + _MainTex_TexelSize.xy * half2(1, 0);</span><br><span class="line">                o.uv[6] = uv + _MainTex_TexelSize.xy * half2(-1, 1);</span><br><span class="line">                o.uv[7] = uv + _MainTex_TexelSize.xy * half2(0, 1);</span><br><span class="line">                o.uv[8] = uv + _MainTex_TexelSize.xy * half2(1, 1);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed luminance(fixed4 color)</span><br><span class="line">            &#123;</span><br><span class="line">                return 0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            half Sobel(v2f i)</span><br><span class="line">            &#123;</span><br><span class="line">                const half Gx[9] = &#123;</span><br><span class="line">                    -1, -2, -1,</span><br><span class="line">                    0, 0, 0,</span><br><span class="line">                    1, 2, 1</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                const half Gy[9] = &#123;</span><br><span class="line">                    -1, 0, 1,</span><br><span class="line">                    -2, 0, 2,</span><br><span class="line">                    -1, 0, 1</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                half texColor;</span><br><span class="line">                half edgeX = 0;</span><br><span class="line">                half edgeY = 0;</span><br><span class="line">                for(int it = 0; it &lt; 9; it++)</span><br><span class="line">                &#123;</span><br><span class="line">                    texColor = luminance(tex2D(_MainTex, i.uv[it]));</span><br><span class="line">                    edgeX += texColor * Gx[it];</span><br><span class="line">                    edgeY += texColor * Gy[it];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                half edge = 1 - abs(edgeX) - abs(edgeY);</span><br><span class="line"></span><br><span class="line">                return edge;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line"></span><br><span class="line">                half edge = Sobel(i);</span><br><span class="line"></span><br><span class="line">                fixed4 withEdgeColor = lerp(_EdgeColor, tex2D(_MainTex, i.uv[4]), edge);</span><br><span class="line">                fixed4 onlyEdgeColor = lerp(_EdgeColor, _BackgroundColor, edge);</span><br><span class="line">                return lerp(withEdgeColor, onlyEdgeColor, _EdgeOnly);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fallback Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们还声明了一个新的变量_MainTex_TexelSize。xxx_TexelSize是unity为我们提供的访问xxx纹理对应的每个纹素的大小。例如一张512x512大小的纹理，该值大约是0.001953。由于卷积需要对相邻区域内的纹理进行采样，因此我们需要利用_MainTex_TexelSize来计算各个相邻区域的纹理坐标。</p><p>我们在v2f结构体中定义了一个维数为9的纹理数组，对应了使用Sobel算子采样时需要的9哥邻域纹理坐标。通过把计算采样纹理坐标的代码从片元着色器中转移到顶点着色器中，可以减少运算，提高性能。由于从顶点着色器到片元着色器的插值是线性的，因此这样的转移并不会影响纹理坐标的计算结果</p><p>我们首先调用Sobel函数计算当前像素的梯度值edge，并利用该值分别计算了背景为原图和纯色的颜色值，然后利用_EdgeOnly在两者之间插值得到最终的像素值。Sobel函数利用Sobel算子对原图进行边缘检测。</p><p>我们首先定义了水平方向和竖直方向使用的卷积核$G_{x}$和$G_{y}$。接着，我们依次对9个像素进行采样，计算它们的亮度值，再与卷积核G_{x}$和$G_{y}$中对应的权重相乘后，叠加到各自的梯度值上。最后我们从1中减去水平方向和树枝方向的梯度值的绝对值，得到edge。edge越小，表明该位置越可能是一个边缘点。至此，边缘检测的过程结束。</p><p>需要注意的是，本节实现的边缘检测仅仅利用了屏幕颜色信息，而在实际应用中，物体的纹理、阴影等信息均会影响边缘检测的结果，使得结果包含许多非预期的描边，为了得到更加准确的边缘信息，我们往往会在屏幕的深度纹理和法线纹理上进行边缘检测。我们将会在13.4节中实现这种方法。</p><h1>高斯模糊</h1><h2 id="高斯滤波">高斯滤波</h2><p>高斯模糊同样利用了卷积计算，它使用的卷积核名为高斯核。高斯核是一个正方形大小的滤波核，其中每个元素的计算都是基于下面的高斯方程：</p><p>$$G(x,y) = \frac{1}{2\pi\sigma^2}e^{\frac{x^2 + y^2}{2\sigma^2}}$$</p><p>其中$\sigma$是标准方差，一般取值为1，x和y分别对应了当前位置到卷积核中心的整数距离。要构建一个高斯核，我们只需要计算高斯核中各个位置对应的高斯值。为了保证滤波后的图像不会变暗，我们需要对高斯核中的权重进行归一化，即让每个权重除以所有权重的和，这样可以保证所有权重的和为1.因此，高斯函数e前面的系数实际不会对结果产生任何影响。下图显示了一个标准方差为1的5$\times$5大小的高斯核。</p><img src="/posts/a07e7969/image-1.png" class=""><p>高斯方程很好地模拟了邻域每个像素对当前处理像素的影响程度——距离越近，影响越大。高斯核的维数越高，模糊程度就越大。使用一个NxN的高斯核对图像进行卷积滤波，就需要N$\times$N$\times$W$\times$H(W和H分别是图像的宽和高)次纹理采样。当N的大小不断增加时，采样的次数就会变得非常巨大。幸运的是，我们可以把这个二维的高斯函数拆分成两个一维函数。也就是说，我们可以使用两个一维的高斯核先后对图像进行滤波，它们得到的结果和直接使用二维高斯核是一样的，但采样次数只需要2$\times$N$\times$W$\times$H。我们可以进一步观察到，两个一维高斯核中包含了很多重复的权重，对于一个大小为5的一维高斯核，我们实际上只需要记录3个权重值就可以了。</p><blockquote><p>为啥两个一维的高斯核先后对图像进行滤波，它们得到的结果和直接使用二维高斯核是一样？</p></blockquote><p>在本节中，我们会使用上述的5$\times$5的高斯核对原图像进行高斯模糊。我们将先后调用两个Pass，第一个Pass将会使用竖直方向的一维高斯核对图像进行滤波，第二个Pass使用水平方向的一维高斯核对图像进行滤波，得到最终的目标图像。在实现中我们还会利用图像缩放来进一步提高性能，并通过调整高斯滤波的应用次数来控制模糊程度（次数越多，图像越模糊）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">public class GaussianBlur : PostEffectsBase &#123;</span><br><span class="line"></span><br><span class="line">public Shader gaussianBlurShader;</span><br><span class="line">private Material gaussianBlurMaterial = null;</span><br><span class="line"></span><br><span class="line">public Material material &#123;  </span><br><span class="line">get &#123;</span><br><span class="line">gaussianBlurMaterial = CheckShaderAndCreateMaterial(gaussianBlurShader, gaussianBlurMaterial);</span><br><span class="line">return gaussianBlurMaterial;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Blur iterations - larger number means more blur.</span><br><span class="line">[Range(0, 4)]</span><br><span class="line">public int iterations = 3;</span><br><span class="line"></span><br><span class="line">// Blur spread for each iteration - larger value means more blur</span><br><span class="line">[Range(0.2f, 3.0f)]</span><br><span class="line">public float blurSpread = 0.6f;</span><br><span class="line"></span><br><span class="line">[Range(1, 8)]</span><br><span class="line">public int downSample = 2;</span><br><span class="line"></span><br><span class="line">void OnRenderImage (RenderTexture src, RenderTexture dest) &#123;</span><br><span class="line">if (material != null) &#123;</span><br><span class="line">int rtW = src.width/downSample;</span><br><span class="line">int rtH = src.height/downSample;</span><br><span class="line"></span><br><span class="line">RenderTexture buffer0 = RenderTexture.GetTemporary(rtW, rtH, 0);</span><br><span class="line">buffer0.filterMode = FilterMode.Bilinear;</span><br><span class="line"></span><br><span class="line">Graphics.Blit(src, buffer0);</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; iterations; i++) &#123;</span><br><span class="line">material.SetFloat(&quot;_BlurSize&quot;, 1.0f + i * blurSpread);</span><br><span class="line"></span><br><span class="line">RenderTexture buffer1 = RenderTexture.GetTemporary(rtW, rtH, 0);</span><br><span class="line"></span><br><span class="line">// Render the vertical pass</span><br><span class="line">Graphics.Blit(buffer0, buffer1, material, 0);</span><br><span class="line"></span><br><span class="line">RenderTexture.ReleaseTemporary(buffer0);</span><br><span class="line">buffer0 = buffer1;</span><br><span class="line">buffer1 = RenderTexture.GetTemporary(rtW, rtH, 0);</span><br><span class="line"></span><br><span class="line">// Render the horizontal pass</span><br><span class="line">Graphics.Blit(buffer0, buffer1, material, 1);</span><br><span class="line"></span><br><span class="line">RenderTexture.ReleaseTemporary(buffer0);</span><br><span class="line">buffer0 = buffer1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Graphics.Blit(buffer0, dest);</span><br><span class="line">RenderTexture.ReleaseTemporary(buffer0);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">Graphics.Blit(src, dest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码显示了如何利用两个临时缓存在迭代之间进行交替的过程。在迭代开始前，我们首先定义了第一个缓存buffer0，并把src中的图像缩放后存储到buffer0中。在迭代过程中，我们又定义了第二个缓存buffer1。在执行第一个Pass时，输入是buffer0，输出是buffer1，完毕后首先把buffer0释放，再把结果值buffer1存储到buffer0中，重新分配buffer1，然后再调用第二个Pass重复上面的过程。迭代完成后，buffer0将存储最终的图像，我们再利用Graphic.Blit(buffer0, dest)把结果显示到屏幕上，并释放缓存。</p><p>下面是Shader实现部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 12/GaussianBlur&quot;</span><br><span class="line">&#123;</span><br><span class="line">Properties &#123;</span><br><span class="line">_MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">_BlurSize (&quot;Blur Size&quot;, Float) = 1.0</span><br><span class="line">&#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        CGINCLUDE</span><br><span class="line"></span><br><span class="line">        #include &quot;UnityCG.cginc&quot;</span><br><span class="line">        </span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line">        half4 _MainTex_TexelSize;</span><br><span class="line">        float _BlurSize;</span><br><span class="line"></span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            half2 uv[5] : TEXCOORD0;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        v2f vertexBlurVertical(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">v2f o;</span><br><span class="line">o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">half2 uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">o.uv[0] = uv;</span><br><span class="line">o.uv[1] = uv + float2(0.0, _MainTex_TexelSize.y * 1.0) * _BlurSize;</span><br><span class="line">o.uv[2] = uv - float2(0.0, _MainTex_TexelSize.y * 1.0) * _BlurSize;</span><br><span class="line">o.uv[3] = uv + float2(0.0, _MainTex_TexelSize.y * 2.0) * _BlurSize;</span><br><span class="line">o.uv[4] = uv - float2(0.0, _MainTex_TexelSize.y * 2.0) * _BlurSize;</span><br><span class="line"> </span><br><span class="line">return o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        v2f vertexBlurHorizontal(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">           v2f o;</span><br><span class="line">o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">half2 uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">o.uv[0] = uv;</span><br><span class="line">o.uv[1] = uv + float2(_MainTex_TexelSize.x * 1.0, 0.0) * _BlurSize;</span><br><span class="line">o.uv[2] = uv - float2(_MainTex_TexelSize.x * 1.0, 0.0) * _BlurSize;</span><br><span class="line">o.uv[3] = uv + float2(_MainTex_TexelSize.x * 2.0, 0.0) * _BlurSize;</span><br><span class="line">o.uv[4] = uv - float2(_MainTex_TexelSize.x * 2.0, 0.0) * _BlurSize;</span><br><span class="line"></span><br><span class="line">            return o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed4 fragBlur(v2f i) : SV_Target&#123;</span><br><span class="line">            float weight[3] = &#123;0.4026, 0.2442, 0.0545&#125;;</span><br><span class="line"></span><br><span class="line">            fixed3 sum = tex2D(_MainTex, i.uv[0]).rgb * weight[0];</span><br><span class="line"></span><br><span class="line">            for(int it = 1; it &lt; 3; it++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += tex2D(_MainTex, i.uv[it*2 - 1]).rgb * weight[it];</span><br><span class="line">                sum += tex2D(_MainTex, i.uv[it*2]).rgb * weight[it];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return fixed4(sum, 1.0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ENDCG</span><br><span class="line">        </span><br><span class="line">        ZTest Always</span><br><span class="line">        Cull Off</span><br><span class="line">        ZWrite Off</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Name &quot;GAUSSIAN_BLUR_VERTICAL&quot;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vertexBlurVertical</span><br><span class="line">            #pragma fragment fragBlur</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Name &quot;GAUSSIAN_BLUR_HORIZONTAL&quot;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vertexBlurHorizontal</span><br><span class="line">            #pragma fragment fragBlur</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本节中，我们将第一次使用CGINCLUDE来组织代码。我们在SubShader块中利用CGINCLUDE和ENDCG语义定义了一系列的代码。<br>这些代码不需要包含在任何Pass语义块中，在使用时，我们只需要在Pass中直接指定需要使用的顶点着色器和片元着色器函数名即可。CGINCLUDE类似于C++中头文件的功能。由于高斯模糊需要定义两个Pass，但它们使用的片元着色器代码是完全相同的，使用CGINCLUDE可以避免我们编写两个完全一样的frag函数。</p><p>由于要得到相邻像素的纹理坐标，我们这里再一次使用了Unity提供的_MainTex_TexelSize变量以计算相邻像素的纹理坐标偏移量。</p><p>在本节中我们会利用5$\times$5大小的高斯核对原图像进行高斯模糊，而由12.4.1节可知，一个5$\times$5的二维高斯核可以拆分成两个大小为5的一维高斯核，因此我们只需要计算5个纹理坐标即可。为此我们在v2f结构体中定义了一个5维的纹理坐标数组。鼠族的第一个坐标存储了当前的采样纹理，剩余的四个坐标则是高斯模糊中对邻域采样时使用的纹理坐标。我们还和属性_BlurSize相乘来控制采样距离。在高斯核维数不变的情况下，_BlurSize越大，模糊程度越高，但是采样数却不会受到影响。但是过大的_BlurSize会造成虚影，这可能并不是我们希望的。通过把计算采样纹理坐标的代码从片元着色器移动到顶点着色器中，可以减少运算，提高信念。由于从顶点着色器到片元着色器的插值是线性的，因此这样的转移并不会影响纹理坐标的计算结果。</p><p>水平方向的顶点着色器和上面的代码类似，只是在计算4个纹理坐标时使用了水平方向的纹素大小进行纹理偏移。</p><p>注意，我们仍然首先设置了渲染状态。和之前不同的是，我们为两个Pass使用NAME语义定义了它们的名字。这是因为，高斯模糊是非常常见的图像处理操作，很多屏幕特效都是建立在它的基础上的，例如Bloom效果。为Pass定义名字，可以在其他Shader中直接通过它们的名字来使用该Pas，而不需要再重复编写代码。</p><p>同样的，由于高斯核的对称性，我们只需要记录3个高斯权重，也就是代码中的weight变量。我们首先声明了各个邻域像素对应的权重weight，然后将结果值sum初始化为当前的像素值乘以它的权重值。根据对称性，我们进行了两次迭代，每次迭代包含了两次纹理采样，并把像素值和权重相乘后的结果叠加到sum中。最后，函数返回滤波结果sum。</p><h1>Bloom效果</h1><p>Bloom效果是游戏中常见的一种效果。这种特效可以模拟真实摄像机的一种图像效果，它让画面中较亮的区域“扩散”到周围区域中，造成一种朦胧的效果。</p><p>Bloom效果的实现原理非常简单：我们首先根据一个阈值提取出图像中较亮的区域，把它们存储到一张渲染纹理中，再利用高斯模糊对这样渲染纹理进行模糊处理，模拟光线扩散的效果，最后再将其和原图像混合，得到最终的效果。</p><p>尽管在大多数情况下，图像的亮度值不会超过1.但是如果我们开启了HDR，硬件就会允许我们把颜色值存储在一个更高精度范围的缓冲中，此时像素的亮度值可能会超过1。因此，在这里我们把luminanceThreashold的值规定在[0,4]范围内。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class Bloom : PostEffectsBase</span><br><span class="line">&#123;</span><br><span class="line">    public Shader bloomShader;</span><br><span class="line">    private Material bloomMaterial = null;</span><br><span class="line"></span><br><span class="line">    public Material material</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            bloomMaterial = CheckShaderAndCreateMaterial(bloomShader, bloomMaterial);</span><br><span class="line">            return bloomMaterial;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [Range(0, 4)] public int iterations = 3;</span><br><span class="line">    [Range(0.2f, 3.0f)] public float blurSpread = 0.6f;</span><br><span class="line">    [Range(1, 8)] public int downSample = 2;</span><br><span class="line">    [Range(0.0f, 4.0f)] public float luminanceThreshold = 0.6f;</span><br><span class="line">    private static readonly int LuminanceThreshold = Shader.PropertyToID(&quot;_LuminanceThreshold&quot;);</span><br><span class="line">    private static readonly int Bloom1 = Shader.PropertyToID(&quot;_Bloom&quot;);</span><br><span class="line">    private static readonly int BlurSize = Shader.PropertyToID(&quot;_BlurSize&quot;);</span><br><span class="line"></span><br><span class="line">    private void OnRenderImage(RenderTexture source, RenderTexture destination)</span><br><span class="line">    &#123;</span><br><span class="line">        if (material != null)</span><br><span class="line">        &#123;</span><br><span class="line">            material.SetFloat(LuminanceThreshold, luminanceThreshold);</span><br><span class="line"></span><br><span class="line">            int rtW = source.width / downSample;</span><br><span class="line">            int rtH = source.height / downSample;</span><br><span class="line"></span><br><span class="line">            RenderTexture buffer0 = RenderTexture.GetTemporary(rtW, rtH, 0);</span><br><span class="line">            buffer0.filterMode = FilterMode.Bilinear;</span><br><span class="line"></span><br><span class="line">            Graphics.Blit(source, buffer0, material, 0);</span><br><span class="line"></span><br><span class="line">            for (int i = 0; i &lt; iterations; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                material.SetFloat(BlurSize, 1.0f + i * blurSpread);</span><br><span class="line"></span><br><span class="line">                RenderTexture buffer1 = RenderTexture.GetTemporary(rtW, rtH, 0);</span><br><span class="line">                </span><br><span class="line">                Graphics.Blit(buffer0, buffer1, material, 1);</span><br><span class="line">                </span><br><span class="line">                RenderTexture.ReleaseTemporary(buffer0);</span><br><span class="line"></span><br><span class="line">                buffer0 = buffer1;</span><br><span class="line">                buffer1 = RenderTexture.GetTemporary(rtW, rtH, 0);</span><br><span class="line">                </span><br><span class="line">                Graphics.Blit(buffer0, buffer1, material, 2);</span><br><span class="line">                </span><br><span class="line">                RenderTexture.ReleaseTemporary(buffer0);</span><br><span class="line">                buffer0 = buffer1;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            material.SetTexture(Bloom1, buffer0);</span><br><span class="line">            Graphics.Blit(source,destination, material, 3);</span><br><span class="line">            </span><br><span class="line">            RenderTexture.ReleaseTemporary(buffer0);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Graphics.Blit(source, destination);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 12/Bloom&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Bloom (&quot;Bloom (RGB)&quot;, 2D) = &quot;black&quot; &#123;&#125;</span><br><span class="line">        _LuminanceThreshold (&quot;Luminance Threshold&quot;, Float) = 0.5</span><br><span class="line">        _BlurSize (&quot;Blur Size&quot;, Float) = 1.0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        CGINCLUDE</span><br><span class="line"></span><br><span class="line">        #include &quot;UnityCG.cginc&quot;</span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line">        half4 _MainTex_TexelSize;</span><br><span class="line">        sampler2D _Bloom;</span><br><span class="line">        float _LuminanceThreshold;</span><br><span class="line">        float _BlurSize;</span><br><span class="line"></span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            half2 uv : TEXCOORD0;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        v2f vertExtractBright(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line"></span><br><span class="line">            o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line"></span><br><span class="line">            o.uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">            return o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed luminance(fixed4 color)</span><br><span class="line">        &#123;</span><br><span class="line">            return 0.2125 * color.r + 0.7154 * color.g + 0.0721 * color.b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed4 fragExtractBright(v2f i) : SV_Target&#123;</span><br><span class="line">            fixed4 c = tex2D(_MainTex, i.uv);</span><br><span class="line">            fixed val = clamp(luminance(c) - _LuminanceThreshold, 0.0, 1.0);</span><br><span class="line">            return c * val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        struct v2fBloom</span><br><span class="line">        &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            half4 uv : TEXCOORD0;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        v2fBloom vertBloom(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2fBloom o;</span><br><span class="line">            o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line"></span><br><span class="line">            o.uv.xy = v.texcoord;</span><br><span class="line">            o.uv.zw = v.texcoord;</span><br><span class="line"></span><br><span class="line">            #if UNITY_UV_STARTS_AT_TOP</span><br><span class="line">            if(_MainTex_TexelSize.y &lt; 0.0)</span><br><span class="line">            &#123;</span><br><span class="line">                o.uv.w = 1.0 - o.uv.w;</span><br><span class="line">            &#125;</span><br><span class="line">            #endif</span><br><span class="line"></span><br><span class="line">            return o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed4 fragBloom(v2fBloom i) : SV_Target&#123;</span><br><span class="line">            return tex2D(_MainTex, i.uv.xy) + tex2D(_Bloom, i.uv.zw);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ENDCG</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vertExtractBright</span><br><span class="line">            #pragma fragment fragExtractBright</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;   </span><br><span class="line">        </span><br><span class="line">        UsePass &quot;Unity Shader Book/Chapter 12/GaussianBlur/GAUSSIAN_BLUR_VERTICAL&quot;</span><br><span class="line">        UsePass &quot;Unity Shader Book/Chapter 12/GaussianBlur/GAUSSIAN_BLUR_HORIZONTAL&quot;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vertBloom</span><br><span class="line">            #pragma fragment fragBloom</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    Fallback Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>运动模糊</h1><p>运动模糊是真实世界中的摄像机的一种效果。如果在摄像机曝光时，拍摄场景发生了变化，就会产生模糊的画面。运动模糊在我们的日常生活中是非常常见的，只要留心观察，就可以发现无论是体育报道还是各个电影中，都有运动模糊的身影。运动模糊的效果可以让物体运动起来更加真实平滑，但在计算机产生图像的过程中，由于不存在曝光这一物理现象，渲染出来的图像往往都是棱角分明，缺少运动模糊。在一些注入赛车类型的游戏中，为画面添加运动模糊是一种常见的处理方法。在这一节中，我们将学习如何在屏幕后处理中实现运动模糊的效果。</p><p>运动模糊的实现有很多种方法。一种实现方法是利用一块<strong>累计缓存(accumulation buffer)<strong>来混合多张连续的图像。当物体快速移动产生多张图像后，我们取它们之间的平均值作为最后的运动模糊图像。然而这种暴力的方法对性能的消耗很大，因为想要获得多张帧图像往往意味着我们要在同一帧内渲染多次场景。另一种应用广泛的方法是创建和使用</strong>速度缓存(velocity buffer)</strong>，这个缓存种存储了各个像素当前的运动速度，然后利用该值来决定模糊的方向和大小。</p><p>在本节中，我们将使用类似上述第一种方法的实现来模拟运动模糊的效果。我们不需要在一帧中把场景渲染多次，但需要保存之前的渲染结果，不断把当前的渲染图像叠加到之前的渲染图像中，从而产生一种运动轨迹的视觉效果。这种方法与原始的利用累计缓存的方法相比性能更好，但模糊效果可能会略有影响。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class MotionBlur : PostEffectsBase</span><br><span class="line">&#123;</span><br><span class="line">    public Shader motionBlurShader;</span><br><span class="line">    private Material motionBlurMaterial = null;</span><br><span class="line"></span><br><span class="line">    public Material material</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            motionBlurMaterial = CheckShaderAndCreateMaterial(motionBlurShader, motionBlurMaterial);</span><br><span class="line">            return motionBlurMaterial;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [Range(0.0f, 0.9f)] public float blurAmount = 0.5f;</span><br><span class="line"></span><br><span class="line">    private RenderTexture accumulationTexture;</span><br><span class="line">    private static readonly int BlurAmount = Shader.PropertyToID(&quot;_BlurAmount&quot;);</span><br><span class="line"></span><br><span class="line">    private void OnDisable()</span><br><span class="line">    &#123;</span><br><span class="line">        DestroyImmediate(accumulationTexture);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private void OnRenderImage(RenderTexture source, RenderTexture destination)</span><br><span class="line">    &#123;</span><br><span class="line">        if (material != null)</span><br><span class="line">        &#123;</span><br><span class="line">            if (accumulationTexture == null || accumulationTexture.width != source.width ||</span><br><span class="line">                accumulationTexture.height != source.height)</span><br><span class="line">            &#123;</span><br><span class="line">                DestroyImmediate(accumulationTexture);</span><br><span class="line">                accumulationTexture = new RenderTexture(source.width, source.height, 0);</span><br><span class="line"></span><br><span class="line">                accumulationTexture.hideFlags = HideFlags.HideAndDontSave;</span><br><span class="line">                Graphics.Blit(source, accumulationTexture);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            material.SetFloat(BlurAmount, 1.0f - blurAmount);</span><br><span class="line">            Graphics.Blit(source, accumulationTexture, material);</span><br><span class="line">            Graphics.Blit(accumulationTexture, destination);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Graphics.Blit(source, destination);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 12/Motion Blur&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Base(RGB)&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _BlurAmount (&quot;Blur Amount&quot;, Float) = 1.0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        CGINCLUDE</span><br><span class="line"></span><br><span class="line">        #include &quot;UnityCG.cginc&quot;</span><br><span class="line">        fixed _BlurAmount;</span><br><span class="line">        sampler2D _MainTex;</span><br><span class="line"></span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            half2 uv : TEXCOORD0;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        v2f vert(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line"></span><br><span class="line">            o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line"></span><br><span class="line">            o.uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">            return o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed4 fragRGB(v2f i) : SV_Target&#123;</span><br><span class="line">            return fixed4(tex2D(_MainTex, i.uv).rgb, _BlurAmount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed4 fragA(v2f i) : SV_Target&#123;</span><br><span class="line">            return tex2D(_MainTex, i.uv);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ENDCG</span><br><span class="line">        </span><br><span class="line">        ZTest Always Cull Off ZWrite Off</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Blend  SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            ColorMask RGB</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment fragRGB</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Blend One Zero</span><br><span class="line">            ColorMask A</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment fragA</span><br><span class="line">                </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fallback Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记（十一）——让画面动起来</title>
      <link href="/posts/e01b0f68/"/>
      <url>/posts/e01b0f68/</url>
      
        <content type="html"><![CDATA[<p>没有动画的画面往往会让人觉得很无趣，在本章中，我们将会学习如何向UnityShader中引入时间变量，以实现各种动画效果。</p><h1>Unity Shader中的内置变量(时间篇)</h1><p>动画效果往往是把时间添加到一些变量的计算中，以便在时间变化时画面也可以随之变化。UnityShader提供了一些列关于时间的内置变量来允许我们方便地在Shader中访问运行时间，实现各种动画效果。下表是Unity中内置地时间变量。</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>_Time</td><td>float4</td><td>t是自该场景加载开始所经过地时间，4个分量分别是(t/20, t, 2t, 3t)</td></tr><tr><td>_SinTime</td><td>float4</td><td>t是时间的正弦值，4个分量的值分别是(t/8, t/4, t/2, t)</td></tr><tr><td>_CosTime</td><td>float4</td><td>t是时间的余弦值 ，4个分量分别是(t/8,t/4, t/2, t)</td></tr><tr><td>unity_DeltaTime</td><td>float4</td><td>dt是时间增量，4个分量的值分别是(dt, 1/dt, smoothDt, 1/smoothDt)</td></tr></tbody></table><p>在后面的章节中，我们会使用上述的时间变量来实现纹理动画和顶点动画。</p><h1>纹理动画</h1><p>纹理动画在游戏中非常广泛。尤其在各种资源都比较局限的移动平台上，我们往往会使用纹理动画来代替复杂的粒子系统等模拟各种动画效果。</p><h2 id="序列帧动画">序列帧动画</h2><p>最常见的纹理动画之一就是序列帧动画。序列帧动画的原理十分简单，它像放电影一样，依次播放一系列关键帧图像，当播放速度达到一定数值时，看起来就像是一个连续的动画化。它的优点在于灵活性强，我们不需要进行任何的物理计算就可以得到非常细腻的动画效果。而它的缺点也很明显，由于序列帧中每张关键帧图像都不一样，因此要制作一张出色的序列帧纹理所需要的工程量很大。</p><p>想要实现序列帧动画，我们首先要提供一张包含关键帧图像的图像。<br>序列帧动画的精髓在于，我们需要在每个时刻计算下个应该播放的关键帧的位置，并对关键帧进行采样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UnityShaderBook/Chapter11/ImageSequenceAnimation&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;Color Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;Image Sequence&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _HorizontalAmount (&quot;Horizontal Amount&quot;, Float) = 4</span><br><span class="line">        _VerticalAmount (&quot;Vertical Amount&quot;, Float) = 4</span><br><span class="line">        _Speed (&quot;Speed&quot;, Range(1, 100)) = 30</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags&#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;TransParent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ZWrite Off</span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            float _HorizontalAmount;</span><br><span class="line">            float _VerticalAmount;</span><br><span class="line">            float _Speed;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                return  o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line"></span><br><span class="line">                float time = floor(_Time.y * _Speed);</span><br><span class="line">                float row = floor(time / _HorizontalAmount);</span><br><span class="line">                float column = time - row * _HorizontalAmount;</span><br><span class="line"></span><br><span class="line">                half2 uv = i.uv + half2(column, -row);</span><br><span class="line">                uv.x /= _HorizontalAmount;</span><br><span class="line">                uv.y /= _VerticalAmount;</span><br><span class="line"></span><br><span class="line">                fixed4 c = tex2D(_MainTex, uv);</span><br><span class="line"></span><br><span class="line">                c.rgb *= _Color;</span><br><span class="line">                </span><br><span class="line">                return c;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Fallback &quot;Transparent/VertexLit&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于序列帧图像通常是透明纹理，我们需要设置Pass的相关状态，以渲染透明效果，由于序列帧图像通常包含了透明通道，因此可以被当成是一个半透明对象，在这里我们使用半透明的“标配”来设置它的SubShader标签，即把Queue和RenderType设置成Transparent，把IgnoreProjector设置为True。在Pass中，我们使用Blend命令来开启并设置混合模式，同时关闭了深度写入。</p><p>顶点着色器的代码十分简单，我们进行了基本的顶点变换，并把顶点纹理坐标存储到了v2f结构体中。</p><p>要播放帧动画，从本质上来说，我们需要计算出每个时刻需要播放的关键帧在纹理中的位置，而由于序列帧纹理都是按行按列进行排列的，因此这个位置可以认为时该关键帧所在的行列索引数。因此，在上面的代码的前3行中我们计算计算行列式，其中使用了Unity的内置时间变量_Time。由上表知道，_Time.y就是自该场景加载后经过的时间。我们首先把_Time.y和速度属性_Speed相乘来得到模拟的时间，并使用CG的floor函数对结果值取整来得到整数时间time。然后，我们使用time除以_HorizontalAmount的结果的商来作为当前对应的行索引，除法结果的余数对应的则时列索引。接下来，我们需要使用行列索引值来构建真正的采样坐标。由于序列帧图像包含了许多关键帧图像，这意味着采样坐标需要映射到每个关键帧图像的坐标范围内。我们可以首先把原纹理坐标i.uv按行数和列数进行等分，得到每个子图像的纹理坐标范围。然后，我们使用当前行列数对上面的结果进行偏移，得到当前子图像的纹理坐标范围。需要注意的时，对竖直方向上的坐标偏移要使用减法，这是因为在Unity中纹理坐标竖直方向的顺序和序列帧纹理中的顺序是相反的。这样，我们就得到了真正的纹理采样坐标。</p><p>代码中的<code>half2 uv = i.uv + half2(column, -row);</code>这一行让我迷惑了很久，我迷惑的点在于，i中的v最大值是1，而row的最小值为1，也就是说uv最终的结果里的v的值是一个小于等于0的值，为什么通过这个值能够得到正确的UV采样坐标呢？好了现在我们来解答这个问题，我们回顾一下在UnityShader入门精要第七章的7.1.2节，介绍纹理属性那一部分，书中给我们演示了使用Tilling和offset对纹理的表现造成的影响，我们把这一部分搞懂了，上面这行代码也就自然而然搞懂了。</p><h2 id="滚动的背景">滚动的背景</h2><p>很多2D游戏都使用了不断滚动的背景来模拟游戏角色在场景中的穿梭，这些背景往往包含了多个层(layer)来模拟一种视差效果。而这些背景的实现往往就是利用了纹理动画。在本节中，我们将实现一个包含了两层的无限滚动的2D游戏背景。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UnityShaderBook/Chapter11/ScrollingBackground&quot;&#123;</span><br><span class="line"></span><br><span class="line">    Properties&#123;</span><br><span class="line">        _MainTex (&quot;Base Layer (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _DetailTex (&quot;2nd Layer (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125; </span><br><span class="line">        _ScrollX (&quot;Base Layer Scroll Speed&quot;, Float) = 1.0</span><br><span class="line">        _Scroll2X (&quot;2nd Layer Scroll Speed&quot;, Float) = 1.0</span><br><span class="line">        _Multiplier (&quot;Layer Multiplier&quot;, Float) = 1.0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader&#123;</span><br><span class="line">        </span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Opaque&quot;</span><br><span class="line">            &quot;Queue&quot;=&quot;Geometry&quot;   </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">                </span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot; </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            sampler2D _DetailTex;</span><br><span class="line">            float4 _DetailTex_ST;</span><br><span class="line">            float _ScrollX;</span><br><span class="line">            float _Scroll2X;</span><br><span class="line">            float _Multiplier;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float4 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.uv.xy = TRANSFORM_TEX(v.texcoord, _MainTex) + frac(float2(_ScrollX, 0.0) * _Time.y);</span><br><span class="line">                o.uv.zw = TRANSFORM_TEX(v.texcoord, _DetailTex) + frac(float2(_Scroll2X, 0.0) * _Time.y);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 firstLayer = tex2D(_MainTex, i.uv.xy);</span><br><span class="line">                fixed4 secondLayer = tex2D(_DetailTex, i.uv.zw);</span><br><span class="line"></span><br><span class="line">                fixed4 c = lerp(firstLayer, secondLayer, secondLayer.a);</span><br><span class="line"></span><br><span class="line">                c.rgb *= _Multiplier;</span><br><span class="line"></span><br><span class="line">                return c;</span><br><span class="line">            &#125;</span><br><span class="line">         </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>lerp是干啥的？已经看到过好多次了，在这个例子中，我们使用lerp函数来混合两张纹理。frac方法用于计算并返回一个数值的小数部分。并不是很理解为什么这里要用一个frac方法，猜测是只取小数部分来避免大量的计算。</p></blockquote><h1>顶点动画</h1><p>如果一个游戏中所有的物体都是静止的，这样枯燥的世界恐怕很难引起玩家的兴趣。顶点动画可以让我们的场景变得更加生动有趣。在游戏中，我们常常使用顶点动画来模拟飘动的旗帜、湍流的小溪等效果。本节中，我们将学习两种常见的顶点动画的应用——流动的河流以及广告牌技术。在本节的最后，我们还将给出一些顶点动画中的注意事项以及解决方法。</p><h2 id="流动的河流">流动的河流</h2><p>河流的模拟是顶点动画最常见的应用之一。它的原理通常是使用正弦函数等来模拟水流的波动特效。在本小节中，我们将学习如何模拟一个2D河流的效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UnityShaderBook/Chapter11/Water&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Main Tex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Color (&quot;Color Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Magnitude (&quot;Distortion Magnitude&quot;, Float) = 1</span><br><span class="line">        _Frequency (&quot;Distortion Frequency&quot;, Float) = 1</span><br><span class="line">        _InvWaveLength (&quot;Distortion Inverse Wave Length&quot;, Float) = 10</span><br><span class="line">        _Speed (&quot;Speed&quot;, Float) = 0.5</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;DisableBatching&quot;=&quot;True&quot;    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">                    </span><br><span class="line">            ZWrite Off</span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            Cull Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #include&quot;UnityCG.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            </span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            float _Magnitude;</span><br><span class="line">            float _Frequency;</span><br><span class="line">            float _InvWaveLength;</span><br><span class="line">            float _Speed;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                float4 offset;</span><br><span class="line">                offset.yzw = float3(0.0, 0.0, 0.0);</span><br><span class="line"></span><br><span class="line">                offset.x = sin(_Frequency * _Time.y + v.vertex.x * _InvWaveLength + v.vertex.y * _InvWaveLength + v.vertex.z * _InvWaveLength) * _Magnitude;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex + offset);</span><br><span class="line"></span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                o.uv += float2(0.0, _Time.y * _Speed);</span><br><span class="line"></span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 c = tex2D(_MainTex, i.uv);</span><br><span class="line">                c.rgb *= _Color.rgb;</span><br><span class="line">                return c;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Transparent/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你遇到了显示不正确的问题，很可能是因为你使用的了Unity内置的Quad模型，如果你使用Unity内置的Plane模型或者随书附带的模型，就能得到正确的效果了。为啥用Quad就不行呢？你在Scene窗口中，将Shading Mode改为Wireframe，你会看到，Quad模型上的顶点很少，所以我们的Shader没有办法做出流畅的曲线，因此，只要沿着y、z轴方向上的顶点数越多，实现出来的效果越流畅丝滑。</p><p>为了得出这个正确的结论，踩了很多坑：</p><p>一开始我以为是Quad和Plane模型中顶点的分布位置问题导致的效果不一样：Plane平面中，所有点的y轴分量都是一致的，而Quad模型中，所有点的z轴分量都是一致的。但是我反复读了几遍实现水流效果的Shader脚本，我终于理解了，这个脚本要做的是在x轴分量上进行偏移，与y和z轴的分量其实是没有关系的，也就是说Plane和Quad的表现应该是一样的。</p><p>在这里说一下我对Plane和Quad的理解：Plane模型是用来做“地面”的，而Quad是用来做“墙面”的。你没有必要使用Plane，旋转90度（无论是哪个轴）来做墙面，直接用Quad就好了。</p><p>然后，我将这个材质附给了一个Cube，我在旋转这个立方体的过程中发现了一些奇怪的效果，不过在说奇怪效果之前，我们先来说一下立方体上六个面的纹理坐标系，如果我们给立方体添加一个包含单张纹理的材质，这六个面都会显示这个纹理，但是每个面的显示规则是什么呢？或者说每个面的纹理坐标的原点是如何确定的呢？经过我的一番研究，我得到了下面的结论：想象一下将一个立方体展开，也就是说将立方体的六个面粘连着展开成一张平面图如下：</p><img src="/posts/e01b0f68/dc5fccaa317db0bbbe6e46f5f950cc3.jpg" class=""><p>注意，上面提到的坐标轴都是在模型空间下的。</p><p>但我发现我看到的一些面的纹理坐标并没有按照立方体展开的纹理坐标展开，首先上面的结论肯定是没有问题的，于是又是对代码一顿苦心研究，因为Water的Shader代码中关闭了Cull和ZWrite，导致发生了Z-Fighting的现象。也就是我看到的那些纹理坐标异常的面，其实不是我以为的那个面，而是和这个面对应的“背后”的那个面，离摄像机近的那个面根本就没有被渲染，而是被剔除了，但我还不知道为什么会这样的具体原因，因为有的面是正常显示而有的面却被剔除掉了，我也不想在这里深究，不过我知道的是，产生这样的原因是在Sahder中同时配置了ZWrite和Cull Off导致的。我的眼睛都要看晕了。</p><h2 id="广告牌">广告牌</h2><p>另一种常见的顶点动画就是广告牌技术(Billboarding)。广告牌技术会根据视角方向来旋转一个被纹理着色的多边形(通常就是简单的四边形，这个多边形就是广告牌)，使得多边形看起来好像总是面对着摄像机。广告牌技术被用于很多应用，比如渲染烟雾、云朵、闪光效果等。</p><p>广告牌技术的本质就是构建旋转矩阵，而我们知道一个变换矩阵需要3个基向量。广告牌技术使用的基向量通常就是表面法线(normal)、指向上的方向(up)以及指向右的方向。除此之外，我们还需要一个锚点，这个锚点在旋转过程中是固定不变的，以此来确定多边形在空间中的位置。</p><p>广告牌技术的难点在于如何根据需求来构建3个相互正交的基向量。计算过程通常是，我们首先会通过初始计算得到目标的表面法线(例如就是视角方向)和指向上的方向，而两者往往是不垂直的。但是，两者其中之一是固定的，例如当模拟草丛时，我们希望广告牌指向上的方向永远是(0,1,0)，而法线方向应该随视角变化；而当模拟粒子效果时，我们希望广告牌的法线方向是固定的，即总是指向视角方向，指向上的方向则可以发生变化。这里的指向上和指向右的表述是在模型空间下的。</p><p>我们假设法线方向是固定的，首先我们根据初始的表面法线和指向上的方向来计算出目标方向的指向右的方向(通过叉积操作):<br>$$right = up \times normal$$</p><p>对其归一化后，再由法线方向和指向右的方向计算出正交的指向上的方向即可</p><p>$$up’ = normal \times right$$</p><p>至此，我们就可以得到用于旋转的3个正交基了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UnityShaderBook/Chapter11/BillBoard&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Color (&quot;Color&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _VerticalBillboarding (&quot;Vertical Restraints&quot;, Range(0,1)) = 1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;DisableBatching&quot;=&quot;True&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ZWrite Off</span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            Cull Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            float4 _Color;</span><br><span class="line">            float _VerticalBillboarding;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                float3 center = float3(0,0,0);</span><br><span class="line">                float3 viewer = mul(unity_WorldToObject, float4(_WorldSpaceCameraPos, 1));</span><br><span class="line"></span><br><span class="line">                float3 normalDir = viewer - center;</span><br><span class="line">                normalDir.y = normalDir.y * _VerticalBillboarding;</span><br><span class="line">                normalDir = normalize(normalDir);</span><br><span class="line"></span><br><span class="line">                float3 upDir = abs(normalDir.y) &gt; 0.999 ? float3(0,0,1) : float3(0,1,0);</span><br><span class="line">                float3 rightDir = normalize(cross(upDir, normalDir));</span><br><span class="line">                upDir = normalize(cross(normalDir, rightDir));</span><br><span class="line"></span><br><span class="line">                float3 centerOffs = v.vertex.xyz - center;</span><br><span class="line">                float3 localPos = center + rightDir * centerOffs.x + upDir * centerOffs.y + normalDir * centerOffs.z;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, float4(localPos,1));</span><br><span class="line"></span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 c = tex2D(_MainTex, i.uv);</span><br><span class="line">                c.rgb *= _Color.rgb;</span><br><span class="line">                return c;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Transparent/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码可以看到，法线的方向不是通过流水线的输入进来的，而是由摄像机的视角和center点的位置算出来的。</p><p>另外，为了防止法线方向和向上方向平行，如果平行，那么叉积得到的结果就是错误的，我们对法线方向的y分量进行判断，以得到合适的向上方向，然后根据法线方向和粗略的向上方向得到向右方向，并对结果进行归一化。但由于此时向上的方向还是不准确的，我们又根据确定的法线方向和向右方向得到了最后的向上方向。</p><p>而且，我们使用的是Unity自带的Quad来作为广告牌，而不能使用自带的平面。这是因为，我们的代码是建立在一个竖直摆放的多边形的基础上，也就是说，这个多边形的顶点结构需要满足在模型空间下是竖直排列的。只有这样，我们才能用v.vertex来计算得到正确的相对于中心的位置的偏移量。</p><h2 id="注意事项">注意事项</h2><p>顶点动画虽然非常灵活有效，但是有一些注意事项要在此提醒一下。</p><p>首先如我们在11.3.2节看到的那样，如果我们在模型空间下进行了一些顶点动画，那么批处理往往会破坏这种动画效果。这时，我们可以通过SubShader的DisableBatching标签来强制取消对该unityShader的批处理。然而，取消批处理会带来一定的性能下降，增加了Draw Call，因此我们应该尽量避免使用模型空间下的一些绝对位置和方向进行计算。在广告牌的例子中，为了避免显式使用模型空间的中心来作为锚点，我们可以利用顶点颜色来存储每个顶点到锚点的距离值，这种做法在商业游戏中很常见。</p><p>其次，如果我们想要对包含了顶点动画的物体添加阴影，那么仍然像9.4节中那样使用内置的Diffuse等包含阴影的Pass来渲染，就得不到正确的阴影效果(这里指的是无法向其他物体正确地投射阴影)。这是因为，我们讲过Unity地阴影绘制需要调用一个ShadowCasterPass，而如果直接使用这些内置地ShaddowCaster Pass，这个Pass中并没有进行相关的顶点动画，因此Unity会仍然按照原来的顶点位置来计算阴影，这并不是我们希望看到的。这是，我们就需要提供一个自定义的ShadowCasterPass，在这个Pass中我们将进行同样的顶点变换的过程。需要注意的是，在前面的实现中，如果涉及半透明物体我们都把Fallback设置成了Transparent/VertexLit，而Transparent/VertexLit没有定义ShadowCaster Pass，因此也就不会产生阴影。</p><p>下面是得到水流正确阴影效果的Shader脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shader &quot;UnityShaderBook/Chapter11/Water&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;Main Tex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Color (&quot;Color Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Magnitude (&quot;Distortion Magnitude&quot;, Float) = 1</span><br><span class="line">        _Frequency (&quot;Distortion Frequency&quot;, Float) = 1</span><br><span class="line">        _InvWaveLength (&quot;Distortion Inverse Wave Length&quot;, Float) = 10</span><br><span class="line">        _Speed (&quot;Speed&quot;, Float) = 0.5</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;DisableBatching&quot;=&quot;True&quot;    </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">                    </span><br><span class="line">            ZWrite Off</span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            Cull Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #include&quot;UnityCG.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            </span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            float _Magnitude;</span><br><span class="line">            float _Frequency;</span><br><span class="line">            float _InvWaveLength;</span><br><span class="line">            float _Speed;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                float4 offset;</span><br><span class="line">                offset.yzw = float3(0.0, 0.0, 0.0);</span><br><span class="line"></span><br><span class="line">                offset.x = sin(_Frequency * _Time.y + v.vertex.x * _InvWaveLength + v.vertex.y * _InvWaveLength * 300 + v.vertex.z * _InvWaveLength) * _Magnitude;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex + offset);</span><br><span class="line">                // o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line"></span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                o.uv += float2(0, _Time.y * _Speed);</span><br><span class="line"></span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 c = tex2D(_MainTex, i.uv);</span><br><span class="line">                c.rgb *= _Color.rgb;</span><br><span class="line">                return c;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ShadowCaster&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #pragma multi_compile_shadowcaster</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">            float _Magnitude;</span><br><span class="line">            float _Frequency;</span><br><span class="line">            float _InvWaveLength;</span><br><span class="line">            float _Speed;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                V2F_SHADOW_CASTER;                </span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_base v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                float4 offset;</span><br><span class="line"></span><br><span class="line">                offset.yzw = float3(0.0, 0.0, 0.0);</span><br><span class="line"></span><br><span class="line">                offset.x = sin(_Frequency * _Time.y + v.vertex.x * _InvWaveLength + v.vertex.y * _InvWaveLength + v.vertex.z * _InvWaveLength) * _Magnitude;</span><br><span class="line"></span><br><span class="line">                v.vertex = v.vertex + offset;</span><br><span class="line"></span><br><span class="line">                TRANSFER_SHADOW_CASTER_NORMALOFFSET(o);</span><br><span class="line"></span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                SHADOW_CASTER_FRAGMENT(i)       </span><br><span class="line">            &#125;</span><br><span class="line">                                      </span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Transparent/VertexLit&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>阴影投射的重点在于我们需要按照正常Pass的处理来剔除片元或者进行顶点动画，以便阴影可以和物体正常渲染的结果下匹配。在定义的阴影投射Pass中，我们通常会使用Unity提供的内置宏V2F_SHADOW_CASTER、TRANSFER_SHADOW_CASTER_NORMALOFFSET和SHADOW_CASTER_FRAGMENT来计算阴影投射时需要的各种变量，而我们可以只关注自定义计算的部分。在上面的代码中，我们首先在v2f结构体中利用V2F_SHADOW_CASTER来定义阴影投射所需要的变量，随后，在顶点着色器中，我们首先按之前对顶点的处理方法计算顶点的偏移量，不同的是，我们直接把偏移值加到顶点位置变量中，再使用TRANSFER_SHADOW_CASTER_NORMALOFFSET来让Unity为我们完成剩下的工作。在片元着色器中，我们直接使用SHADOW_CASTER_FRAGMENT来让Unity自动完成阴影投射部分，把结果输出到深度图和阴影映射纹理中。</p><p>通过Unity提供的这3个内置宏，我们可以方便地自定义需要地阴影投射地Pass，但由于这些宏里需要使用一些特定的输入变量，因此我们需要保证为它们提供了这些变量。例如TRANSFER_SHADOW_CASTER_NORMALOFFSET会使用名称为v作为输入结构体，v中需要包含顶点位置v.vertex和顶点法线v.normal的信息，我们可以直接使用内置的appdata_base结构体，它包含了这些必需的顶点变量。如果我们需要进行顶点动画，可以在顶点着色器中直接修改v.vertex，再传递给TRANSFER_SHADOW_CASTER_NORMALOFFSET即可。</p>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记（十）——高级纹理</title>
      <link href="/posts/f8400f04/"/>
      <url>/posts/f8400f04/</url>
      
        <content type="html"><![CDATA[<h1>立方体纹理</h1><p>在图形学中，立方体纹理(Cubemap)是**环境映射(Environment Mapping)**的一种实现方法。环境映射可以模拟物体周围的环境，而使用了环境映射的物体可以看起来像是镀了一层金属一样反射处周围的环境。</p><p>和之前见到的纹理不同，立方体纹理总共包含六张图片，这些图像对应了一个立方体的六个面，立方体纹理的名称也由此而来。立方体的每个面表示沿着世界空间下的轴向（上、下、左、右、前、后）观察所得的图像。那么我们如何对这样的一种纹理进行采样呢？和之前使用的二维纹理坐标不同，对立方体纹理采样我们需要提供一个三维的纹理坐标，这个三维纹理坐标表示了我们在世界空间下的一个3D方向。这个方向矢量从立方体的中心出发，当它向外部延伸时就会和立方体的6个纹理之一发生相交，而采样得到的结果就是由该交点计算而来的。</p><p>使用立方体纹理的好处在于，它的实现简单快速，而且得到的效果也是比较好的。但是它也有一些缺点，例如，当场景中引入了新的物体、光源，或者物体发生移动时，我们就需要重新生成立方体纹理。除此之外，立方体纹理也仅可以反射环境，但不能反射使用了该立方体纹理的物体本身。这是因为，立方体纹理不能模拟多次反射的结果，例如两个金属球互相反射的情况，不过Unity中引入的全局光照系统允许我们实现这样的自反射效果。由于这样的原因，想要得到令人信服的渲染结果，我们应该尽量对凸面体而不要对凹面体使用立方体纹理，因为凹面体会反射自身。</p><p>立方体纹理在实时渲染中有很多应用，最常见的是用于天空盒子以及环境映射。</p><h2 id="天空盒子">天空盒子</h2><p>需要说明的是，在Window -&gt; Lighting -&gt; Skybox中设置的天空盒子会应用于该场景中所有的摄像机。如果我们希望某些摄像机可以使用不同的天空盒子，可以通过向该摄像机添加Skybox组件来覆盖掉之前的设置。也就是说，在挂载有摄像机组件的物体上点击Component -&gt; Rendering -&gt; Skybox来完成对场景默认天空盒子的覆盖。</p><p>在Unity中，天空盒子是在所有不透明物体之后渲染的，而其被后使用的网格是一个立方体或一个细分后的球体。</p><h2 id="创建用于环境映射的立方体纹理">创建用于环境映射的立方体纹理</h2><p>除了天空盒子，立方体纹理最常见的用处就是用于环境映射。通过这种方法，我们可以模拟出具有金属质感的材质。</p><p>在Unity中创建用于环境映射的立方体纹理的方法有三种：第一种方法是直接由一些特殊布局的纹理创建；第二种方法是手动创建一个Cubemap资源，再把6张图赋给它；第三种方法是由脚本生成。</p><p>如果使用第一种方法，我们需要提供一张具有特殊布局的纹理，例如类似正方体展开图的交叉布局、全景布局等。然后，我们只需要把该纹理的Texture Type设置成Cubemap即可，Unity会为我们做好剩下的事情。在基于物理的渲染中，我们通常会使用一张HDR图像来生成高质量的Cubemap。</p><p>第二种方法是Unity5之前的方法，我们首先需要在项目资源中创建一个Cubemap，然后把6张纹理拖拽到它的面板中。在Unity5中，官方推荐使用第一种方法来创建立方体纹理，这是因为第一种方法可以对纹理数据进行压缩，而且可以支持边缘修正、光滑反射(Glossy Reflection)和HDR等功能。</p><p>前面两种方法都需要我们提前准备好立方体纹理的图像，它们得到的立方体纹理往往是被场景中的物体所共用的。但在理想情况下，我们希望根据物体所在场景中位置的不同，生成它们各自不同的立方体纹理。这时我们就可以在Unity中通过脚本来创建。这是通过利用Unity提供的<code>Camera.RenderToCubemap</code>函数来实现的。这个函数可以把从任意位置观察到的场景图像存储在6张图片中，从而创建出该位置上对应的立方体纹理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using UnityEditor;</span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">public class RenderCubemapWizard : ScriptableWizard &#123;</span><br><span class="line"></span><br><span class="line">public Transform renderFromPosition;</span><br><span class="line">public Cubemap cubemap;</span><br><span class="line"></span><br><span class="line">void OnWizardUpdate () &#123;</span><br><span class="line">helpString = &quot;Select transform to render from and cubemap to render into&quot;;</span><br><span class="line">isValid = (renderFromPosition != null) &amp;&amp; (cubemap != null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void OnWizardCreate () &#123;</span><br><span class="line">// create temporary camera for rendering</span><br><span class="line">GameObject go = new GameObject( &quot;CubemapCamera&quot;);</span><br><span class="line">go.AddComponent&lt;Camera&gt;();</span><br><span class="line">// place it on the object</span><br><span class="line">go.transform.position = renderFromPosition.position;</span><br><span class="line">// render into cubemap</span><br><span class="line">go.GetComponent&lt;Camera&gt;().RenderToCubemap(cubemap);</span><br><span class="line"></span><br><span class="line">// destroy temporary camera</span><br><span class="line">DestroyImmediate( go );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[MenuItem(&quot;GameObject/Render into Cubemap&quot;)]</span><br><span class="line">static void RenderCubemap () &#123;</span><br><span class="line">ScriptableWizard.DisplayWizard&lt;RenderCubemapWizard&gt;(</span><br><span class="line">&quot;Render cubemap&quot;, &quot;Render!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射">反射</h2><p>使用了反射效果的物体通常看起来就像是镀了一层金属。想要模拟反射效果十分简单，我们只需要通过入射光线的方向和表面法线方向来计算反射方向，再利用反射方向对立方体纹理进行采样即可。</p><p>物体反射到摄像机中的光线方向，可以由光路可逆的原则来反向求得。也就是说，我们可以计算视角方向关于顶点法线的反射方向来求得入射光线的方向。</p><blockquote><p><strong>疑问</strong> 看到这里的时候我是很懵的，因为如果按照上述光路可逆的方式来计算<strong>入射光线</strong>的方向，那么对一个凹凸不平的Mesh来说，每一个顶点或者片元处的入射方向可以都是不一样的，也就是说光线的方向是可以任意变化的，怎么会这样？</p></blockquote><blockquote><p><strong>2024-8-1更新</strong> 这里是书中的描述并不准确，原文是“我们只需要通过入射光线的方向和表面法线方向来计算反射方向”，此处入射光线表述有误，应该是从Camera出发射向当前操作的这一顶点或者片元方向的向量。另外我觉得书中对反射的表现描述也不够形象，反射其实就是镜面反射，但这面镜子不是平整的，不过我们可以把单个顶点或者片元看成是一个平整的镜面，我们的视线从摄像机处出发，看向这面平整的镜子，然后我们就看到了经过反射后的画面了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 10/Reflection&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;Color Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _ReflectColor (&quot;Reflect Color&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _ReflectAmount (&quot;Relect Amount&quot;, Range(0,1)) = 1</span><br><span class="line">        _Cubemap (&quot;Reflecttion Cubmap&quot;, Cube)  = &quot;_Skybox&quot; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Opaque&quot;</span><br><span class="line">            &quot;Queue&quot;=&quot;Geometry&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;    </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma multi_compile_fwdbase</span><br><span class="line">            </span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line">            #include &quot;AutoLight.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            fixed4 _ReflectColor;</span><br><span class="line">            fixed _ReflectAmount;</span><br><span class="line">            samplerCUBE _Cubemap;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float3 worldViewDir : TEXCOORD2;</span><br><span class="line">                float3 worldRefl : TEXCPPRD3;</span><br><span class="line">                SHADOW_COORDS(4)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">                o.worldViewDir = UnityWorldSpaceViewDir(o.worldPos);</span><br><span class="line">                o.worldRefl = reflect(-o.worldViewDir, o.worldNormal);</span><br><span class="line">                </span><br><span class="line">                TRANSFER_SHADOW(o);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">                fixed3 worldViewDir = normalize(i.worldNormal);</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Color.rgb * saturate(dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                fixed3 reflection = texCUBE(_Cubemap, i.worldRefl).rgb * _ReflectColor.rgb;</span><br><span class="line"></span><br><span class="line">                UNITY_LIGHT_ATTENUATION(atten, i,i.worldPos)</span><br><span class="line"></span><br><span class="line">                fixed3 color = ambient + lerp(diffuse, reflection, _ReflectAmount) * atten;</span><br><span class="line"></span><br><span class="line">                return fixed4(color, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Reflective/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用了<code>reflect</code>方法来计算光线的入射方向，这个方法在第六章学习标准光照模型中使用过。上面这段Shader代码中我们还计算了阴影，但在随书附带的这一节的示例场景里计算阴影的Shader代码根本就没有起作用。对于反射效果的表现没有任何影响。</p><blockquote><p>看完这小节的代码，我当时有很多疑问？为什么这段代码跟第六章中计算标准光照模型的代码不一样？问过GPT之后，我得到了能够说服我自己的说法：标准光照模型并不是适用于像这种需要有金属光泽的材质材质中，因此可以认为这一小节的代码是一种类似标准光照模型的“金属光泽模型”，世界上还有很多很多其他的“光照模型”。当然这个称谓是我瞎编的。</p></blockquote><h2 id="折射">折射</h2><p>在这一节中，我们将学习如何在Unity中模拟另一种环境映射常见的应用——折射。</p><p>好吧，我承认在看到这一小节的时候，我的思绪还停留在上一节的反射小结中，并且我并没有完全理解折射的含义，而且这一小节对折射的介绍也有误导性（至少对我来说）。现在我按照我自己的理解说一下Unity中的折射：场景中有一个半透明的物体，光线从物体的一面射入，光线的方向会发生变化，但是光线最终是会射出这个半透明的物体，然后我们就能看到这个半透明物体后面的一些物体，想象一下在一个倒满水的透明玻璃杯中插入一根筷子，我们是在玻璃被的外面看到光线穿过杯子、又穿过一部分水然后看到了发生形变的躲在杯子和水“后面”的筷子。这一小节我们要实现的就是这种效果。</p><p>折射的物理原理比反射更复杂一些。我们在初中物理就已经接触过折射的定义：当光线从一种介质（比如空气）斜射进入另一种介质（比如玻璃）时，传播方向一般会发生变化。当给定入射角时，我们可以用斯涅耳定律(Snell’a Law)来计算反射角。公式如下：</p><p>$$\eta_1\sin\theta_1 =\eta_2\sin\theta_2 $$</p><p>其中，$\eta_1$和$\eta_2$分别是两个介质的折射率，折射率是一项十分重要的物理常数，例如真空的折射率是1，而玻璃的折射率一般是1.5.</p><p>通常来说，当得到折射方向后我们就会直接使用它来对立方体纹理进行采样，但是这是不符合物理规律的。对于一个透明物体来说，一种更准确的模拟方法需要计算两次折射——一次是当光线进入它的内部时，而另一次则是它从内部射出的时候。但是想要在实时渲染中模拟出第二次折射方向是比较复杂的，而且仅仅模拟一次得到的效果从视觉上看起来也挺像那么回事的。正如我们之前提到的图形学第一准则如果它看起来是对的，那么它就是对的。因此在实时渲染中，我们通常仅模拟一次折射。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UnityShaderBook/Chapter10/Refraction&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">      _Color (&quot;Color Tint&quot;, Color) = (1, 1, 1, 1)</span><br><span class="line">_RefractColor (&quot;Refraction Color&quot;, Color) = (1, 1, 1, 1)</span><br><span class="line">_RefractAmount (&quot;Refraction Amount&quot;, Range(0, 1)) = 1</span><br><span class="line">_RefractRatio (&quot;Refraction Ratio&quot;, Range(0.1, 1)) = 0.5</span><br><span class="line">_Cubemap (&quot;Refraction Cubemap&quot;, Cube) = &quot;_Skybox&quot; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Opaque&quot;</span><br><span class="line">            &quot;Queue&quot;=&quot;Geometry&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #pragma multi_compile_fwdbase</span><br><span class="line">            </span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line">            #include &quot;AutoLight.cginc&quot;</span><br><span class="line"></span><br><span class="line">fixed4 _Color;</span><br><span class="line">fixed4 _RefractColor;</span><br><span class="line">float _RefractAmount;</span><br><span class="line">fixed _RefractRatio;</span><br><span class="line">samplerCUBE _Cubemap;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">          struct v2f &#123;</span><br><span class="line">float4 pos : SV_POSITION;</span><br><span class="line">float3 worldPos : TEXCOORD0;</span><br><span class="line">fixed3 worldNormal : TEXCOORD1;</span><br><span class="line">fixed3 worldViewDir : TEXCOORD2;</span><br><span class="line">fixed3 worldRefr : TEXCOORD3;</span><br><span class="line">SHADOW_COORDS(4)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">                o.worldViewDir = UnityWorldSpaceViewDir(o.worldPos);</span><br><span class="line"></span><br><span class="line">                o.worldRefr = refract(-normalize(o.worldViewDir), normalize(o.worldNormal), _RefractRatio);</span><br><span class="line"></span><br><span class="line">                TRANSFER_SHADOW(o);</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Color.rgb * saturate(dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                fixed3 refraction = texCUBE(_Cubemap, i.worldRefr).rgb * _RefractColor.rgb;</span><br><span class="line"></span><br><span class="line">UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br><span class="line"></span><br><span class="line">            fixed3 color = ambient + lerp(diffuse, refraction, _RefractAmount) * atten;</span><br><span class="line">            </span><br><span class="line">                return fixed4(color, 1.0);   </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Reflecive/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用了CG的refract函数来计算折射方向。它的第一个参数即为入射光线的方向，它必须是归一化之后的矢量；第二个参数是表面法线，法线方向同样需要是归一化之后的；第三个参数是入射光线所在介质的折射率和折射光线所在介质的折射率之间的比值，例如如果光是从空气射到玻璃表面，那么这个参数应该是空气的折射率和玻璃的折射率之间的比值，即1/1.5.它的返回值就是计算而得的折射方向，它的模则对应入射光线的模。</p><p>然后我们在片元着色器中使用折射方向对立方体纹理进行采样。同样，我们也没有对i.worldRefr进行归一化操作，因为对立方体纹理的采样只需要提供方向即可。最后，我们使用_RefractAmount来混合漫反射颜色和折射颜色，并和环境光照相加后返回。</p><h2 id="菲涅尔反射">菲涅尔反射</h2><p>在实时渲染中，我们经常会使用菲涅尔反射(<code>Fresnel reflection</code>)来根据视角方向控制反射程度。通俗来讲，菲涅尔反射描述了一种光学现象，即当光线照射到物体表面上时，一部分发生反射，一部分进入物体内部发生折射或散射。被反射的光和入射光之间存在一定的比率关系，这个比率关系可以通过菲涅尔等式进行计算。一个常用的例子就是，当你站在湖边，直接低头看脚边的水面时，你会发现水几乎是透明的，你可以直接看到水底下的小鱼和石子；但是，当你抬头看向远处的水面时，会发现几乎看不到水下的情景，只能看到水表面反射的环境。这就是所谓的菲涅尔效果，事实上，不只是水、玻璃这样的反光物体具有菲涅尔效果，几乎任何物体都或多或少地包含了菲涅尔效果，这是基于物理的渲染中非常重要的一项高光反射计算因子。</p><p>那么，我们如何计算菲涅尔反射呢？这就需要使用菲涅尔等式进行计算。真实世界的菲涅尔等式是十分复杂的，但在实时渲染中，我们通常会使用一些近似的公式来计算。其中一个著名的近似公式就是Schlick菲涅尔近似等式：</p><p>$$F_{Schlink}(v,n) = F_0 + (1 - F_0)(1 - v \cdot n)^5$$</p><p>其中，$F_0$是一个反射系数，用于控制菲涅尔反射的强度，v是视角方向，n是表面法线。另一个应用比较广泛的等式是Empricial菲涅尔近似等式：</p><p>$$F_{Empricial}(v,n) = max(0, min(1, bias + scale \times (1 - v \cdot n)^{power}))$$</p><p>其中，bias、scale和power是控制项。</p><p>使用上面的菲涅尔近似等式，我们可以在边界处模拟反射光强度和折射光强度/漫反射光强之间的变化，在许多车漆、水面等材质的渲染中，我们经常会使用菲涅尔反射来模拟更加真实的反射效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UnityShaderBook/Chapter10/Fresnel&quot;&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;Color Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _FresnelScale (&quot;Fresnel Scale&quot;, Range(0,1)) = 0.5</span><br><span class="line">        _Cubemap (&quot;Reflection Cubemap&quot;, Cube) = &quot;_Skybox&quot; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Geometry&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Opaque&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;   </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #pragma multi_compile_fwdbase</span><br><span class="line">            </span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line">            #include &quot;AutoLight.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            float _FresnelScale;</span><br><span class="line">            samplerCUBE _Cubemap;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float3 worldViewDir : TEXCOORD2;</span><br><span class="line">                float3 worldRefl : TEXCOORD3;</span><br><span class="line">                SHADOW_COORDS(4)</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.worldViewDir = UnityWorldSpaceViewDir(o.worldPos);</span><br><span class="line">                o.worldRefl = reflect(-o.worldViewDir, o.worldNormal);</span><br><span class="line">                TRANSFER_SHADOW(o);</span><br><span class="line">                </span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">                fixed3 worldViewDir = normalize(i.worldViewDir);</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">                UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos)</span><br><span class="line">                </span><br><span class="line">                fixed3 reflection = texCUBE(_Cubemap, i.worldRefl).rgb;</span><br><span class="line"></span><br><span class="line">                fixed fresnel = _FresnelScale + (1 - _FresnelScale) * pow(1 - dot(worldViewDir, worldNormal), 5);</span><br><span class="line">                </span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Color.rgb * saturate(dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                fixed3 color = ambient + lerp(diffuse, reflection, saturate(fresnel)) * atten;</span><br><span class="line"></span><br><span class="line">                return fixed4(color, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">Fallback &quot;Reflective/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>渲染纹理</h1><p>在之前的学习中，一个摄像机的渲染结果会输出到颜色缓冲中，并显示到我们的屏幕上。现在的GPU允许我们把整个三维场景渲染到一个中间缓冲中，即渲染目标纹理，而不是传统的帧缓冲或后备缓冲。与之相关的是多重渲染目标，这种技术指的是GPU允许我们把场景同时渲染到多个渲染目标纹理中，而不再需要为每个渲染目标纹理单独渲染完整的场景。延迟渲染就是使用多重渲染目标的一个应用。</p><p>Unity为渲染目标纹理定义了一种专门的纹理类型——渲染纹理(Render Texture)。在Unity中使用渲染纹理通常有两种方式：一种方式是在Project目录下创建一个渲染纹理，然后把某个摄像机的渲染目标设置成该渲染纹理，这样一来该摄像机的渲染结果就会实时更新到渲染纹理中，而不会显示在屏幕上。使用这种方法，我们还可以选择渲染纹理的分辨率、滤波模式等纹理属性。另一种方式是在屏幕后处理时使用GrabPass命令或者OnRenderImage函数来获取当前屏幕图像，Unity会把这个屏幕图像放到一张和屏幕分辨率等同的渲染纹理中，下面我们可以在自定义的Pass中把它们当作普通的纹理来进行处理，从而实现各种屏幕的特效。我们将依次学习这两种方法在Unity中的实现。</p><h2 id="镜子效果">镜子效果</h2><p>在本节中我们将来学习一下如何使用渲染纹理来模拟镜子效果。</p><p>最后，为了得到从镜子出发观察到的场景图像，我们还需要创建一个摄像机，并调整它的位置、裁剪平面、视角等，使得它的显示图像是我们希望的镜子图像。由于这个摄像机不需要直接显示在屏幕上，而是用于渲染纹理。因此，我们把上一步中创建的MirrorTexture拖拽到该摄像机的TargetTexture。</p><p>镜子实现的原理很简单，它使用一个渲染纹理作为输入属性，并把该渲染纹理在水平方向上翻转后直接显示到物体上即可。在新建的Shader文件中实现以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UnityShaderBook/Chapter10/Mirror&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">                &quot;RenderType&quot;=&quot;Opaque&quot;</span><br><span class="line">                &quot;Queue&quot;=&quot;Geometry&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                fixed4 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">                // 镜子效果需要反转x轴</span><br><span class="line">                o.uv.x = 1 - o.uv.x;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">                return tex2D(_MainTex, i.uv);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中我们反转了x分量的纹理坐标，这是因为，镜子里显示的图像都是左右相反的。<br>保存后返回场景，并把我们创建的MirrorTexture渲染纹理拖拽到材质的MainTex属性中。就可以得到镜子效果了。<br>在上面的实现中，我们把渲染纹理的分辨率大小设置成256 $\times$ 256。有时，这样的分辨率会使图像模糊不清，此时我们可以使用更高的分辨率或更多的抗锯齿采样等。但是需要注意更高的分辨率会影响带宽和性能，我们应当尽量使用较小的分辨率。</p><h2 id="玻璃效果">玻璃效果</h2><p>在Unity中，我们还可以在UnityShader中使用一种特殊的Pass来完成获取屏幕图像的目的，这就是GrabPass。当我们在Shader中定义了一个GrabPass后，Unity会把当前屏幕的图像绘制在一张纹理中，以便我们在后续的Pass中访问它。我们通常会使用GrabPass来实现诸如玻璃等透明材质的模拟，与使用简单的透明混合不同，使用grabPass可以让我们对该物体后面的图像进行更加复杂的处理，例如使用法线来模拟折射效果，而不再是简单的屏幕颜色进行混合。</p><p>需要注意的时，在使用GrabPass的时候，我们需要额外小心物体的渲染队列的设置。正如之前所说，GrabPass通常用于渲染透明物体。尽管代码里面并不包含混合指令，但我们往往仍然需要把所有的物体的渲染队列设置成透明队列。这样才可以保证，当渲染该物体的时候，所有的不透明物体都已经被绘制在屏幕上，从而获得正确的屏幕图像。</p><p>本节中，我们会使用一个GrabPass来模拟玻璃的效果，这种效果的实现非常简单，我们首先使用一张法线纹理来修改模型的法线信息，然后使用了10.1节介绍的反射方法，通过一个Cubmap来模拟玻璃的反射，而在模拟偏移后，再对屏幕图像进行采样模拟近似的折射效果。</p><p>我们首先在SubShader的标签中将渲染队列设置成Transparent，尽管在后面的RenderType被设置成了Opaque。这两者看似矛盾，但实际上服务于不同的需求。我们在之前说过，把Queue设置成Transparent可以确保物体渲染时，其他所有的不透明物体都已经被渲染到屏幕上了，否则就可能无法正确得到&quot;透过玻璃看到的图像&quot;。而设置RenderType则是为了在使用着色器替换(Shader Replacement)时，该物体可以在需要时被正确渲染。这通常发生在我们需要得到摄像机的深度和法线纹理时，这会在十三章的时候讲到。</p><p>随后，我们通过关键词GrabPass定义了一个抓取屏幕图像的Pass，在这个pass中我们定义了一个字符串，这个字符串内部的名称决定了抓取得到的屏幕图像会被存入哪个纹理中。实际上，我们可以省略声明该字符串，但直接声明纹理名称的方法往往可以得到更高的性能，具体原因见本节最后的部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;_Object2World&#x27; with &#x27;unity_ObjectToWorld&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;UnityShaderBook/Chapter10/GlassRefraction&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">       _MainTex (&quot;Main Tex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">_BumpMap (&quot;Normal Map&quot;, 2D) = &quot;bump&quot; &#123;&#125;</span><br><span class="line">_Cubemap (&quot;Environment Cubemap&quot;, Cube) = &quot;_Skybox&quot; &#123;&#125;</span><br><span class="line">_Distortion (&quot;Distortion&quot;, Range(0, 100)) = 10</span><br><span class="line">_RefractAmount (&quot;Refract Amount&quot;, Range(0.0, 1.0)) = 1.0</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Opaque&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        GrabPass&#123;&quot;_RefractionTex&quot;&#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include &quot;UnityCG.cginc&quot;</span><br><span class="line">sampler2D _MainTex;</span><br><span class="line">float4 _MainTex_ST;</span><br><span class="line">sampler2D _BumpMap;</span><br><span class="line">float4 _BumpMap_ST;</span><br><span class="line">samplerCUBE _Cubemap;</span><br><span class="line">float _Distortion;</span><br><span class="line">fixed _RefractAmount;</span><br><span class="line">sampler2D _RefractionTex;</span><br><span class="line">float4 _RefractionTex_TexelSize;</span><br><span class="line">            </span><br><span class="line">           struct a2v &#123;</span><br><span class="line">float4 vertex : POSITION;</span><br><span class="line">float3 normal : NORMAL;</span><br><span class="line">float4 tangent : TANGENT; </span><br><span class="line">float2 texcoord: TEXCOORD0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct v2f &#123;</span><br><span class="line">float4 pos : SV_POSITION;</span><br><span class="line">float4 scrPos : TEXCOORD0;</span><br><span class="line">float4 uv : TEXCOORD1;</span><br><span class="line">float4 TtoW0 : TEXCOORD2;  </span><br><span class="line">    float4 TtoW1 : TEXCOORD3;  </span><br><span class="line">    float4 TtoW2 : TEXCOORD4; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">              v2f o;</span><br><span class="line">o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">o.scrPos = ComputeGrabScreenPos(o.pos);</span><br><span class="line"></span><br><span class="line">o.uv.xy = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">o.uv.zw = TRANSFORM_TEX(v.texcoord, _BumpMap);</span><br><span class="line"></span><br><span class="line">float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;  </span><br><span class="line">fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);  </span><br><span class="line">fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);  </span><br><span class="line">fixed3 worldBinormal = cross(worldNormal, worldTangent) * v.tangent.w; </span><br><span class="line"></span><br><span class="line">o.TtoW0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);  </span><br><span class="line">o.TtoW1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);  </span><br><span class="line">o.TtoW2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);  </span><br><span class="line"></span><br><span class="line">return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">float3 worldPos = float3(i.TtoW0.w, i.TtoW1.w, i.TtoW2.w);</span><br><span class="line">fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));</span><br><span class="line"></span><br><span class="line">// Get the normal in tangent space</span><br><span class="line">fixed3 bump = UnpackNormal(tex2D(_BumpMap, i.uv.zw));</span><br><span class="line"></span><br><span class="line">// Compute the offset in tangent space</span><br><span class="line">float2 offset = bump.xy * _Distortion * _RefractionTex_TexelSize.xy;</span><br><span class="line">i.scrPos.xy = offset * i.scrPos.z + i.scrPos.xy;</span><br><span class="line">fixed3 refrCol = tex2D(_RefractionTex, i.scrPos.xy/i.scrPos.w).rgb;</span><br><span class="line"></span><br><span class="line">// Convert the normal to world space</span><br><span class="line">bump = normalize(half3(dot(i.TtoW0.xyz, bump), dot(i.TtoW1.xyz, bump), dot(i.TtoW2.xyz, bump)));</span><br><span class="line">fixed3 reflDir = reflect(-worldViewDir, bump);</span><br><span class="line">fixed4 texColor = tex2D(_MainTex, i.uv.xy);</span><br><span class="line">fixed3 reflCol = texCUBE(_Cubemap, reflDir).rgb * texColor.rgb;</span><br><span class="line"></span><br><span class="line">fixed3 finalColor = reflCol * (1 - _RefractAmount) + refrCol * _RefractAmount;</span><br><span class="line"></span><br><span class="line">return fixed4(finalColor, 1);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">Fallback &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，我们还定义了<code>_RefactionTex</code>和<code>_RefactionTex_TexelSize</code>变量，这对应了用GrabPass时指定的纹理名称，<code>_RefactionTex_TexelSize</code>可以让我们得到该纹理的纹素大小。我们需要在对屏幕图像的采样坐标进行偏移时使用该变量。</p><p>然后，我们在顶点着色器中，进行了必要的顶点坐标变换后，我们通过调用内置的ComputeGrabScreenPos函数来得到对应被抓取的屏幕图像的采样坐标。我们可以在UnityCG.cginc文件中找到它的声明，它的主要代码和ComputeScreenPos基本类似，最大的不同时针对平台差异造成的采样坐标问题进行了处理。接着，我们计算了_MainTex和_BumpMap的采样坐标，并把它们分别存储在了一个float4类型变量的xy和zw中。由于我们需要在片元着色器中把法线方向从切线空间变换到世界空间下，以便对Cubemap进行采样，因此我们需要在这里计算该顶点对应的从切线空间到世界空间的变换矩阵，并把该矩阵的每一行分别存储在TtoW0、TtoW1和TtoW2的xyz分两种。这里面使用的数学方法就是，得到切线空间下的3个坐标轴(xyz轴分别对应了切线、副切线和法线的方向)在世界坐标空间下的表示，再把它们依次按列组成一个变换矩阵即可。TtoW0等值的w轴被同样利用起来，用于存储世界空间下的顶点坐标。</p><p>然后，在片元着色器中，我们首先通过TtoW0等变量的w分量得到世界坐标，并用该值得到该片元对应的视角方向。随后，我们对法线纹理进行采样，得到切线空间下的法线方向。我们使用该值和_Distortion属性以及_RefractionTex_TexelSize来对屏幕图像的采样坐标进行偏移，模拟折射效果。_Distortion值越大，偏移量越大，玻璃背后的物体看起来变形程度就越大。在这里，我们选择使用切线空间下的法线方向来进行偏移，这是因为该空间下的法线可以反映顶点局部空间下的法线方向。随后，我们对scrPos透视除法得到真正的屏幕坐标，再使用该坐标对抓取的屏幕图像_RefractionTex进行采样，得到模拟的折射颜色。</p><p>之后，我们把法线方向从切线空间变换到了世界空间下(使用变换矩阵的每一行，即TtoW0、TtoW1和TtoW2，分别和法线方向点乘，构成新的法线方向)，并据此得到视角方向相对于法线方向的反射方向。随后使用反射方向对Cubemap进行采样，并把结果和主纹理颜色相乘后得到反射颜色。</p><p>最后，我们使用_RefractAmount属性对反射和折射颜色进行混合，作为最终的输出颜色。</p><p>在前面的实现中，我们在GrabPass中使用一个字符串指明了被抓取的屏幕图像将会被存储在哪个名称的纹理中。实际上，GrabPass支持两种形式。</p><ul><li>直接使用GrabPass{}，虽然后在后续的Pass中直接使用_GrabTexture来访问屏幕图像。但是，当场景中有多个物体都使用了这样的形式来抓取屏幕时，这种方法的性能消耗比较大，因为对于每一个使用它的物体，Unity都会为它单独进行一次昂贵的屏幕抓取操作。但这种方法可以让每个物体得到不同的瓶木图像，这取决于它们的渲染队列以渲染它们时当前的屏幕缓冲中的颜色。</li><li>使用GrabPass{“TextureName”}，正如本节中的实现，我们可以在后续的Pass中使用TextureName来访问屏幕图像，使用这种方法同样可以抓取屏幕，但是Unity只会在每一帧时为第一个使用名为TextureName的纹理的物体进行依次抓取屏幕的操作，这个纹理同样可以在其他的Pass中被访问。这种方法更加高效，因为不管场景中有多少个物体使了该命令，每一帧中Unity都会执行一次抓取工作，但这也意味着所有物体都会使用同一张屏幕图像。不过在大多数情况下这已经足够了。</li></ul><h2 id="渲染纹理-vs-GrabPass">渲染纹理 vs. GrabPass</h2><p>尽管GrabPass和10.2.1节中使用的渲染纹理 + 额外摄像机的方式都可以抓取屏幕图像，但是它们之间还是有一些不同的。GrabPass的好处在于实现简单，我们只需要在Shader中写几行代码就可以实现抓取屏幕的目的。而要渲染纹理的话，我们首先需要创建一个渲染纹理和一个额外的摄像机，再把摄像机的RenderTarget设置为新建的渲染纹理对象，最后把该渲染纹理传递给相应的Shader。</p><p>但是从效率上来讲，使用渲染纹理的效果往往要好于GrabPass，尤其是在移动设备上。使用渲染纹理我们可以自定义渲染纹理的大小，尽管这种方法需要把部分场景再渲染一次，但我们可以通过调整摄像机额渲染层来减少二次渲染时的场景大小，或使用其他方法来控制摄像机是否开启。而GrabPass获取到的图像分辨率和显示屏幕是一致的，这意味着再一些高分辨率的设备上可能会造成严重的带宽影响。而再移动设备上，GrabPass虽然不会重新渲染场景，但它往往需要CPU直接读取后备缓冲中的数据，破坏了CPU和GPU之间的并行性，这样做是比较耗时的，甚至在一些移动设备上这是不支持的。</p><p>现在的Unity引入了CommandBuffer来允许我们扩展Unity的渲染流水线。使用命令缓冲我们也可以得到类似抓屏的效果，它可以在不透明的物体渲染后把当前的图像复制到一个临时的渲染目标纹理中，然后在那里进行一些额外的操作，例如模糊等，最后把图像传递给需要使用它的物体进行处理和显示。当然CommandBuffer能够实现的效果还远远不止这些。</p><h1>程序纹理</h1><p>程序纹理是指那些用由计算机生成的图像，我们通常使用一些特定的算法来创建个性化图案或者非常真实的自然元素，例如木头、石子等。使用程序纹理的好处在于我们可以使用各种参数来控制纹理的外观，而这些属性不仅仅是那些颜色属性，甚至可以是完全不同类属性的图案属性，这使得我们可以得到更加丰富的动画和视觉效果。在本节中，我们会首先尝试使用算法来实现一个非常简单的程序材质，然后我们会介绍Unity中一类专门使用程序纹理的材质——程序材质。</p><h2 id="在Unity中实现简单的程序纹理">在Unity中实现简单的程序纹理</h2><p>首先，我们新建一个材质，使用一个第7章中我们编写的SingleTexture的Shader，我们不会给这个材质添加纹理，这是因为我们希望使用脚本来创建程序纹理。为此，我们要再创建一个脚本ProceduralTextureGeneration.cs，并把这个脚本添加得到我们在场景中创建的一个Cube的模型上。</p><p>ProceduralTextureGeneration.cs脚本内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">[ExecuteInEditMode]</span><br><span class="line">public class ProceduralTextureGeneration : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Material Material = null;</span><br><span class="line"></span><br><span class="line">    #region Material properties</span><br><span class="line"></span><br><span class="line">    [SerializeField] private int m_textureWidth = 512;</span><br><span class="line"></span><br><span class="line">    private int TextureWidth =&gt; m_textureWidth;</span><br><span class="line"></span><br><span class="line">    [SerializeField] private Color m_backgroundColor = Color.white;</span><br><span class="line"></span><br><span class="line">    public Color backgroundColor</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return m_backgroundColor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set</span><br><span class="line">        &#123;</span><br><span class="line">            m_backgroundColor = value;</span><br><span class="line">            UpdateMaterial();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [SerializeField] private Color m_circleColor = Color.yellow;</span><br><span class="line">    private Color circleColor</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return m_circleColor;</span><br><span class="line">        &#125;</span><br><span class="line">        set</span><br><span class="line">        &#123;</span><br><span class="line">            m_circleColor = value;</span><br><span class="line">            UpdateMaterial();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [SerializeField] private float m_blurFactor = 2.0f;</span><br><span class="line"></span><br><span class="line">    public float blurFactor</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return m_blurFactor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set</span><br><span class="line">        &#123;</span><br><span class="line">            m_blurFactor = value;</span><br><span class="line">            UpdateMaterial();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    #endregion</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private Texture2D m_generatedTexture = null;</span><br><span class="line">    private static readonly int MainTex = Shader.PropertyToID(&quot;_MainTex&quot;);</span><br><span class="line"></span><br><span class="line">    private void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Material == null)</span><br><span class="line">        &#123;</span><br><span class="line">            Renderer renderer = gameObject.GetComponent&lt;Renderer&gt;();</span><br><span class="line">            if (renderer == null)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(&quot;Can not find a renderer&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Material = renderer.material;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        UpdateMaterial();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void UpdateMaterial()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Material == null)</span><br><span class="line">        &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_generatedTexture = _GenerateProceduralTexture();</span><br><span class="line">        Material.SetTexture(MainTex, m_generatedTexture);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private Texture2D _GenerateProceduralTexture()</span><br><span class="line">    &#123;</span><br><span class="line">        Texture2D proceduralTexture = new Texture2D(TextureWidth, TextureWidth);</span><br><span class="line">        </span><br><span class="line">        var circleInterval = TextureWidth / 4.0f;</span><br><span class="line">        var radius = TextureWidth / 10.0f;</span><br><span class="line">        var edgeBlur = 1.0f / blurFactor;</span><br><span class="line"></span><br><span class="line">        for (int w = 0; w &lt; TextureWidth; w++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int h = 0; h &lt; TextureWidth; h++)</span><br><span class="line">            &#123;</span><br><span class="line">                Color pixel = backgroundColor;</span><br><span class="line">                </span><br><span class="line">                // 依次画九个圆</span><br><span class="line">                for (int i = 0; i &lt; 3; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    for (int j = 0; j &lt; 3; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Vector2 circleCenter = new Vector2(circleInterval * (i + 1), circleInterval * (j + 1));</span><br><span class="line"></span><br><span class="line">                        float dist = Vector2.Distance(new Vector2(w, h), circleCenter) - radius;</span><br><span class="line"></span><br><span class="line">                        Color color = _MixColor(circleColor, new Color(pixel.r, pixel.g, pixel.b, 0f),</span><br><span class="line">                            Mathf.SmoothStep(0f, 1.0f, dist * edgeBlur));</span><br><span class="line"></span><br><span class="line">                        pixel = _MixColor(pixel, color, color.a);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                proceduralTexture.SetPixel(w,h, pixel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        proceduralTexture.Apply();</span><br><span class="line">        return proceduralTexture;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private Color _MixColor(Color color0, Color color1, float mixFactor) &#123;</span><br><span class="line">        Color mixColor = Color.white;</span><br><span class="line">        mixColor.r = Mathf.Lerp(color0.r, color1.r, mixFactor);</span><br><span class="line">        mixColor.g = Mathf.Lerp(color0.g, color1.g, mixFactor);</span><br><span class="line">        mixColor.b = Mathf.Lerp(color0.b, color1.b, mixFactor);</span><br><span class="line">        mixColor.a = Mathf.Lerp(color0.a, color1.a, mixFactor);</span><br><span class="line">        return mixColor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Unity的程序材质">Unity的程序材质</h2><p>在Unity中，有一类 专门使用程序纹理的材质，叫做程序材质(Procedural Materials)。这类材质和我们之前使用的那些材质在本质上是一样的，不同的是，它们使用的纹理不是普通的纹理，而是程序纹理。需要注意的是，程序材质和它使用的程序纹理并不是在Unity中创建的，而是使用一个叫Substance Designer的软件在Unity外部生成的。</p><p><a href="https://www.cnblogs.com/zhyan8/p/17760973.html">【Unity3D】程序纹理简单应用</a></p>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记（九）——更复杂的光照</title>
      <link href="/posts/e52a9ff3/"/>
      <url>/posts/e52a9ff3/</url>
      
        <content type="html"><![CDATA[<h1>Unity 的渲染路径</h1><p>在Unity中， 渲染路径(Render Path)决定了光照是如何被应用到Unity Shader中的。因此，如果要和光源打交道，我们需要为每个Pass指定它使用的渲染路径，只有这样才能让Unity知道，“哦，原来这个程序员想要这种渲染路径，那么好的，我把光源和处理后的光照信息都放在这些数据里，你可以访问啦！”也就是说，我们只有为Shader正确地选择和设置了需要地渲染路径，该Shader地光照计算才能被正确执行。</p><p>Unity支持多种类型的渲染路径。在Unity5.0之前，Unity主要有3种：<code>前向渲染路径(Forward Rendering Path)</code>、<code>延迟渲染路径(Deferred Rendering Path)</code>和<code>顶点照明渲染路径(Vertex Lit Rendering Path)</code>。unity5.0之后，Unity做了很多更改，主要有两个变化：首先顶点照明渲染路径已经被Unity抛弃。其次，新的延迟渲染路径已经代替了原来的延迟渲染路径。</p><p>大多数情况下，一个项目只会使用一种渲染路径，因此我们可以为整个项目设置渲染时的渲染路径。我们可以通过在Unity的<code>Edit -&gt; Project Settings -&gt; Player -&gt; Other Settings -&gt; Rendering Path</code>种进行这是。默认情况下是前向渲染路径。有时我们希望可以使用多个渲染路径，例如摄像机A渲染的物体使用前向渲染路径，而摄像机B渲染的物体使用延迟渲染路径。这时，我们可以在每个摄像机的渲染设置种设置该摄像机的渲染路径，以覆盖Project Setting种的设置。需要注意的是，如果当前的显卡不支持所选择的渲染路径，Unity会自动使用更低一级的渲染路径。例如如果一个GPU不支持延迟渲染，那么Unity就会使用前向渲染。</p><p>完成了上面的设置后，我们就可以在每个Pass种使用标签来指定该Pass使用的渲染路径。这是通过设置Pass中的<code>LightMode</code>标签来实现的。不同类型的渲染路径可能会包含多种标签设置。例如，我们之前在代码中写的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pass&#123;</span><br><span class="line">    Tags&#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将告诉Unity，该Pass使用前向渲染路径中的ForwardBase路径。而前向渲染路径还有一种路径叫做ForwardAdd。下表给出了Pass的LightMode标签支持的渲染路径设置选项。</p><table><thead><tr><th>标签名</th><th>描述</th></tr></thead><tbody><tr><td>Always</td><td>不管使用哪种渲染路径，该Pass都会被渲染，但是不会计算任何光照</td></tr><tr><td>ForwardBase</td><td>用于<strong>前向渲染</strong>。该Pass会计算环境光、最重要的平行光、逐顶点/SH光源和Lightmaps</td></tr><tr><td>ForwardAdd</td><td>用于<strong>前向渲染</strong>。该Pass会计算额外的逐像素光源，每个Pass对应一个光源</td></tr><tr><td>Deferred</td><td>用于<strong>延迟渲染</strong>。该Pass会渲染G缓冲(G-Buffer)</td></tr><tr><td>ShadowCaster</td><td>把物体的深度信息渲染到阴影映射纹理(shadowmap)或者一张深度纹理中</td></tr><tr><td>PerpassBase</td><td>用于<strong>遗留的延迟渲染</strong>。该Pass会渲染法线和高光反射的指数部分</td></tr><tr><td>PerpassFinal</td><td>用于遗留的<strong>延迟渲染</strong>。该Pass通过合并纹理、光照和自发光来渲染得到最后的颜色</td></tr><tr><td>Vertex、VertexLMRGBM和VertexLM</td><td>用于<strong>遗留的顶点照明渲</strong>染</td></tr></tbody></table><p>那么指定渲染路径到底有什么用呢？如果一个Pass没有指定任何渲染路径会有什么问题吗？通俗来讲，指定渲染路径是我们和Unity的底层渲染引擎的一次重要的沟通。例如，如果我们为一个Pass设置了前向渲染路径的标签，相当于会告诉Unity引擎：“嘿，我准备使用前向渲染了，你把这些光照属性都按照前向渲染的流程给我准备好，我一会儿要用！”随后，我们可以通过Unity提供的内置光照变量来访问这些属性。如果我们没有指定任何渲染路径，那么一些光照变量很可能不会被正确赋值，我们计算出的效果也就很可能是错误的。那么Unity的渲染引擎是如何处理这些渲染路径的呢？下面我们会对这些渲染路径进行更加详细的解释。</p><h2 id="前向渲染路径">前向渲染路径</h2><p>前向渲染路径是传统的渲染方式，也是我们最常用的一种渲染路径。在本节，我们首先会概括前向渲染路径的原理，然后再给出Unity对于前向渲染路径的实现细节和要求，最后给出Unity Shader中哪些内置变量是用于前向渲染路径的。</p><ol><li>前向渲染路径原理</li></ol><p>每进行一次完整的前向渲染，我们需要渲染该对象的渲染图元，并计算两个缓冲区的信息，一个是颜色缓冲区，一个是深度缓冲区。我们利用深度缓冲来决定一个片元是否可见，如果可见就更新颜色缓冲区的颜色值。我们可以用下面的伪代码来描述前向渲染路径的大致过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Pass&#123;</span><br><span class="line">    for(each primitive in this model)&#123;</span><br><span class="line">        // primitive 就是图元的意思</span><br><span class="line">        for(each fragment coverd by this primitive)&#123;</span><br><span class="line">            if(failed in depth test)&#123;</span><br><span class="line">                // 如果没有通过深度测试，就丢弃</span><br><span class="line">                discard;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line"></span><br><span class="line">                // 如果该片元可见就进行光照计算</span><br><span class="line">                float4 color = Shading(materialInfo, pos, normal, lightDir, viewDir);</span><br><span class="line"></span><br><span class="line">                // 将颜色写入颜色缓冲</span><br><span class="line">                writeFrameBuffer(fragment, color);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于每个逐像素光源，我们都需要及逆行上面一次完整的渲染流程。如果一个物体再多个逐像素光源的影响区域内，那么该物体就需要执行多个Pass，每个Pass计算一个逐像素光源的光照结果，那么该物体就需要执行多个Pass，每个Pass计算一个逐像素光源的光照结果，然后再帧缓冲中把这些光照结果混合起来得到最终的颜色值。假设，场景中有N个物体，每个物体受M个光源的影响，那么渲染整个场景一共需要N*M个Pass。可以看出，如果有大量逐像素光照，那么执行的Pass数目也会很大。因此，渲染引擎通常会限制每个物体的逐像素光照的数目。</p><ol start="2"><li>Unity中的前向渲染</li></ol><p>事实上，一个Pass不仅仅可以用来计算逐像素光照，它也可以用来计算逐顶点等其他光照，这取决于光照计算所处流水线阶段以及计算时使用的数学模型。当我们渲染一个物体时，Unity会计算哪些光源照亮了它，以及这些光照亮该物体的方式。</p><p>在Unity中，前向渲染路径有3种处理光照(即照亮物体)的方式：逐顶点处理、逐像素处理、球谐函数(Spherical harmonics, SH)处理。而决定一个光源使用哪种处理模式取决于它的类型和渲染模式。光源类型指的是光源是平行光还是其他类型的光源，而光源的渲染模式指的是该光源是否是重要的。如果我们把一个光照的模式设置为Important，意味着我们告诉Unity“嘿老兄，这个光源很重要，我希望你可以认真对待它，把它当成一个逐像素光源来处理！”我们可以在光源的Light组件中设置这些属性。</p><p>在前向渲染中，当我们渲染一个物体时，Unity会根据场景中各个光源的设置以及这些光源对物体的影响程度(例如，距离该物体的远近、光源强度等)对这些光源进行一个重要程度的排序。其中，一定数目的光源会按照逐像素的方式处理，然后最多有4个光源按照逐顶点的方式处理，剩下的光源可以按照SH的方式处理.Unity使用的判断规则如下:</p><ul><li>场景中最亮的平行光总是按像素处理的。</li><li>渲染模式被设置成Not Important的光源，会按照逐顶点或者SH处理</li><li>渲染模式被设置成Important的光源，会按逐像素处理</li><li>如果根据以上规则得到逐像素光源数量小于Quality Setting中的逐像素光源数量(Pixel Light Count)，会有更多的光源以逐像素的方式进行渲染。</li></ul><p>那么，在哪里进行光照计算呢？当然是在Pass里，前面提到过，前向渲染路径有两种Pass:Base Pass和Additional Pass。通常来说，这两种Pass进行的标签和渲染设置以及常规光照计算如下图：</p><img src="/posts/e52a9ff3/image.png" class=""><p>图中有几点要说明的地方</p><ul><li>首先，可以发现在渲染设置中，我们除了设置Pass的标签以外，还是用了<code>#pragma multi_compile_fwdbase</code>这样的编译指令。根据官方文档中的解释，我们可以知道，这些编译指令会保证Unity可以为相应的Pass生成所有需要的Shader变种，这些变种会处理不同条件下的渲染逻辑，例如是否使用光照贴图、当前处理哪种光源类型、是否开启了阴影等，同时Unity也会在背后声明相关的内置变量并传递到Shader中。通俗来讲，只有分别为Base Pass和Additional Pass使用这两个编译指令，我们才可以在相关的Pass中得到一些正确的光照变量，例如光照衰减值等。</li><li>Base Pass旁边的标注给出了Base Pass中支持的一些二光照特性。例如在Base Pass中，我们可以访问光照纹理(light map)。</li><li>Base Pass中渲染的平行光默认是支持阴影的(如果开启了光源的阴影功能)，而Additional Pass中渲染的光源在默认情况下是没有阴影的，即便我们在它的Light组件中设置了有阴影的Shadow Type。但我们可以在Additional Pass中使用 #pragma_multi_compile_fwdadd_fullshadows代替#pragma_multi_compile_fwdadd编译指令，为点光源和聚光灯开启阴影效果，但这需要Unity在内部使用更多的Shader变种。</li><li>环境光和自发光也是在Base Pass中计算的。这是因为，对于一个物体来说，环境光和自发光我们只希望计算一次即可，而如果我们在Additional Pass中计算两种光照，就会造成叠加多次环境光和自发光，这不是我们想要的。</li><li>在Additional Pass的渲染设置中，我们还开启和设置了混合模式。这是因为，我们希望每个Additional Pass可以与上一次的光照结果在帧缓存中进行叠加，从而得到最终的有多个光照的渲染结果。如果我们没有开启和设置混合模式，那么Additional Pass的渲染结果会覆盖掉之前的渲染结果，看起来就好像该物体只受该光源的影响。通常境况下，我们选择的混合模式是<code>Blend One One</code>。</li><li>对于前向渲染来说，一个Unity Shader通常会定义一个Base Pass(Base Pass也可以定义多次，例如需要双面渲染的情况)以及一个Additional Pass。一个Base Pass仅会执行一次(定义了多个Base Pass的情况除外)，而一个Additional Pass会根据影响物体的其他逐像素光源的数目而被多次调用，即每个逐像素的光源都会执行一次Additional Pass。</li></ul><p>上图中给出的光照计算是通常情况下我们在每种Pass中进行的计算。实际上，渲染路径的设置用于告诉Unity该Pass在前向渲染路径中的位置，然后底层的渲染引擎会进行相关的计算并填充一些内置变量比如_Lightcolor0等，如何使用这些内置变量进行计算完全取决于开发者的选择。例如，我们完全可以利用Unity提供的内置变量在Base Pass中只进行逐顶点的光照；同样我们也完全可以在Additional Pass中按逐顶点的方式进行光照计算，不进行任何逐像素光照计算。</p><ol start="3"><li>内置的光照变量和函数</li></ol><p>前面说过，根据我们使用的渲染路径，Unity会把不同的光照变量传递给Shader。<br>在Unity5中，对于前向渲染ForwardBase和ForwardAdd来说，下表给出了我们可以在Shader中访问到的光照变量</p><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>_LightColor0</td><td>float4</td><td>该Pass处理的逐像素光源的颜色</td></tr><tr><td>_WorldSpaceLight0</td><td>float4</td><td>_WorldSpaceLightPos0.xyz是该Pass处理的逐像素光源的位置。如果该光源是平行光，那么_WorldSpaceLightPos0.w是0，其他光源类型的w值为1</td></tr><tr><td>_LightMatrix0</td><td>float4$\times$4</td><td>从世界空间到光源空间的变换矩阵。可以用于采样cookie和光强衰减(attenuation)纹理</td></tr><tr><td>unity_4LightPosX0，unity_4LightPosY0,unity_4LightPosZ0、</td><td>float4</td><td>仅用于BasePass 前4个非重要的点光源在世界空间中的位置</td></tr><tr><td>unity_4LightAtten0</td><td>float4</td><td>仅用于BasePass                                                                                                               。存储了前4个非重要的点光源的衰减因子</td></tr><tr><td>unity_LightColor</td><td>half[4]</td><td>仅用于BasePass。存储了前4个非常重要的点光源的颜色。</td></tr></tbody></table><p>我们在之前的学习中已经给出了一些可以用于前向渲染路径的函数，例如WorlSpaceLightDir、UnityWorldSpaceLightDir和ObjSpaceLightDir。为了完整性，下表再次给出了前向渲染中可以使用的内置光照函数</p><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>float3 WorldSpaceLightDir(float4 v)</td><td><strong>仅可以用于前前向渲染中</strong>。输入一个模型空间中的顶点位置，返回世界空间中从该点到光源的光照方向。内部实现使用了UnityWorldSpaceLightDir函数，没有被归一化</td></tr><tr><td>float3 UnityWorldSpaceLightDir(float4 v)</td><td><strong>仅可以用于前向渲染中</strong>。输入一个世界空间中的顶点位置，返回世界空间中从该点到光源的光照方向。没有被归一化。</td></tr><tr><td>float3 ObjSpaceLightDir(float4 v)</td><td><strong>仅可以用于前向渲染中</strong>。输入一个模型空间中的顶点位置，返回模型空间中从该点到光源的光照方向，没有被归一化。</td></tr><tr><td>float3 Shade4PointLights(…)</td><td><strong>仅可用于前向渲染中</strong>。计算四个光源的光照，它的参数是已经打包进矢量的光照数据，也就是上张表中的内置变量，如unity_4LightPosX0，unity_4LightPosY0,unity_4LightPosZ0、unity_LightColor和unity_4LightAtten0等。前向渲染通常会使用这个函数来计算逐顶点光照</td></tr></tbody></table><p>需要说明的是，上面给出的变量和函数并不是完整的，一些前向渲染可以使用的内置变量和函数官方文档中并没有给出说明。在后面的学习中，我们会使用到一些不在这些表中的变量和函数，那时我们会特别说明。</p><h2 id="顶点照明渲染路径">顶点照明渲染路径</h2><p>顶点照明路径是对硬件配置要求最少、运算性能最高，但同时也是得到的效果最差的一种类型，它不支持那些逐像素才能得到的效果，比如阴影、法线映射、高精度的高光反射等。实际上，它仅仅是前向渲染路径的一个子集，也就是说，所有可以在顶点照明路径中可以实现的效果都能够在前向渲染路径中实现。就如同它的名字一样，顶点照明路径只是使用了逐顶点的方式来计算光照，并没有什么神奇的地方。实际上，我们在前向渲染路径中也可以计算一些逐顶点的光照。但是如果选择使用顶点照明渲染路径，那么Unity只会填充哪些逐顶点相关的变量，意味着我们不能使用一些逐像素的光照变量。</p><ol><li>Unity中的顶点照明渲染<br>顶点照明渲染路径通常在一个Pass中就可以完成对物体的渲染。在这个Pass中，我们会计算我们关心的所有光源对该物体的照明，并且这个计算是按照逐顶点的方式处理的。这是Unity中最快速的渲染路径，并且具有最广泛的硬件支持。由于顶点照明渲染路径仅仅是前向渲染路径的一个子集，因此现在Unity其实已经抛弃这种渲染路径了。</li><li>可访问的内置变量和函数<br>在Unity中，我们可以在一个顶点照明的Pass中最多访问到8个逐顶点光源。如果我们只需要渲染其中两个光源对物体的照明。可以仅使用下表中内置光照数据的前两个。如果影响该物体的光源数目小于8个，那么数组中剩下的光源颜色都会被设置成黑色。</li></ol><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>unity_LightColor</td><td>half4[8]</td><td>光源颜色</td></tr><tr><td>unity_LightPosition</td><td>float4[8]</td><td>xyz分量是视角空间中的光源位置。如果光源是平行光 ，那么z分量值为0，其他光源类型z分量值为1</td></tr><tr><td>unity_LightAtten</td><td>half4[8]</td><td>光源衰减因子。如果光源是聚光灯，x分量是cos(spotAngle/2)，y分量是1/cos(spotAngle/4)；如果是其他类型的光源，x分量是-1，y分量是1.z分量是衰减的平方，w分量是光源范围开根号的结果</td></tr><tr><td>unity_SpotDirection</td><td>float4[8]</td><td>如果光源是聚光灯的话，值为视角空间的聚光灯的位置；如果是其他类型的光源，值为(0,0,1,0)</td></tr></tbody></table><p>可以看出，一些变量我们同样可以在前向渲染路径中使用，例如unity_LightColor。但是这些变量的数组的维度和数值在不同渲染路径下的值是不一样的。</p><p>下表给出了顶点照明路径中可以使用的内置函数。</p><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>float3 ShadeVertexLights(float4 vertex, float3 normal)</td><td>输入模型空间中顶点位置和法线，计算四个逐顶点光源的光照以及环境光，内部实现实际上调用了ShadeVertexLightsFull函数</td></tr><tr><td>float3 ShadeVertexLightsFull(float3 vertex, float3 normal, int lightCount, bool spotlight)</td><td>输入模型空间中的顶点位置和法线，计算lightCount个光源的光照以及环境光。如果spotLight值为true，那么这些光源会被当成聚光灯来处理，虽然结果更加精确，但是计算更加耗时；否则按照点光源处理</td></tr></tbody></table><h2 id="延迟渲染路径">延迟渲染路径</h2><p>前向渲染的问题是：当场景中包含大量的实时光源时，前向渲染的性能会技术下降。例如，如果我们在场景的某一块区域放置了多个光源，这些光源影响的区域互相重叠，那么为了得到最终的光照效果，我们就需要为该区域内的每个物体执行多个Pass来计算不同光源对该物体的光照结果，然后在颜色缓冲中把这些结果混合起来得到最终的光照。然而，每执行一个Pass我们都需要重新渲染一遍物体，但是很多的计算是重复的。</p><p>延迟渲染是一种更加古老的算法，但是由于上述前向渲染可能造成瓶颈问题，近几年来又流行起来。除了前向渲染中使用的颜色缓冲和深度缓冲外，延迟渲染还会利用额外的缓冲区，这些缓冲区也被称为G缓冲(G-buffer)，其中G是英文Geometry的缩写。G缓冲存储了我们所关心的表面(通常是指离摄像机更近的表面)的其他信息。例如该表面的法线、位置、用于光照计算的材质属性等。</p><ol><li>延迟渲染的原理<br>延迟渲染主要包括了两个Pass。在第一个Pass中，我们不进行任何的光照计算，而是仅仅计算哪些片元是可见的，这主要是通过深度缓冲技术来实现的，当发现一个片元是可见的，我们就把它的相关信息存储到G缓冲区中。然后，在第二个Pass中，我们利用G缓冲区的各个片元信息，例如表面法线、视角方向、漫反射系数等，进行真正的光照计算。<br>延迟渲染的过程大致可以用下面的伪代码来描述</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Pass 1&#123;</span><br><span class="line">    // 第一个Pass不进行真正的光照计算</span><br><span class="line">    // 仅仅把光照计算需要的信息存储到G缓冲中</span><br><span class="line"></span><br><span class="line">    for(each primitive in this model)&#123;</span><br><span class="line">        for(each fragment cover by this primitive)&#123;</span><br><span class="line">            if(failed in depth test)&#123;</span><br><span class="line">                // 没有通过深度测试，说明该片元是不可见的</span><br><span class="line">                discard;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                // 如果该片元可见</span><br><span class="line">                // 就把需要的信息存储到G缓冲中</span><br><span class="line">                writeGBuffer(materialInfo, pos, normal);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pass 2&#123;</span><br><span class="line">    // 利用G缓冲中的信息进行真正的光照计算</span><br><span class="line"></span><br><span class="line">    for(each pixel in the screen)&#123;</span><br><span class="line">        if(the pixel is valid)&#123;</span><br><span class="line">            // 如果该像素是有效的</span><br><span class="line">            // 读取它对应的G缓冲中的信息</span><br><span class="line">            readGBuffer(pixel, materialInfo, pos, normal);</span><br><span class="line"></span><br><span class="line">            // 根据读取到的信息进行光照计算</span><br><span class="line">            float4 color = Shading(materialInfo, pos, normal, lightDir, viewDir);</span><br><span class="line"></span><br><span class="line">            // 更新帧缓冲</span><br><span class="line">            writeFrameBuffer(pixel, color)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，延迟渲染使用的Pass数通常就是两个，这跟场景中包含的光源数量是没有关系的。换句话说，延迟渲染的效率不依赖于场景的复杂度，而是和我们使用的屏幕空间的大小有关。这是因为，我们需要的信息都存储在缓冲区中，而这些缓冲区可以理解成是一张张2D图像，我们的计算实际上就是在这些图像空间中进行的。</p><ol start="2"><li>Unity中的延迟渲染<br>第二个Pass用于计算真正的光照模型，这个Pass会使用上一个Pass中的渲染数据来计算最终的光照颜色，再存储到帧缓冲中。<br>默认的G缓冲区，注意不同的Unity版本的渲染纹理存储内容会有所不同，包含了以下几个渲染纹理(Render Texture, RT)。<ul><li>RT0: 格式是ARGB32，RGB通道用于存储漫反射颜色，A通道没有被使用</li><li>RT1: 格式是ARGB32，RGB通道用于存储高光反射颜色，A通道用于存储高光反射的指数部分。</li><li>RT2: 格式是ARGB2101010，RGB用于存储法线，A通道没有被使用。</li><li>RT3: 格式是ARGB32(非HDR)或ARGBHalf(HDR)，用于存储自发光+lightmap+反射探针(reflection probes)</li><li>深度缓冲和模板缓冲<br>在第二个Pass中计算光照时，默认情况下尽可以使用Unity内置的Standard光照模型，如果我们想使用其他的光照模型，就需要替代掉原有的Internal-DeferredShading.shader文件。</li></ul></li><li>可访问的内置变量和函数<br>下表给除了处理延迟渲染路径可以使用的光照变量。这些变量都可以在<code>UnityDeferredLibrary.cginc</code>文件中找到它们的声明。</li></ol><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>_LightColor</td><td>float4</td><td>光源颜色</td></tr><tr><td>_LightMatrix0</td><td>float4 $\times$ 4</td><td>从世界空间到光源空间的变换矩阵，可以用于采样cookie和光强衰减纹理</td></tr></tbody></table><h1>Unity中的光源类型</h1><p>Unity一共支持4种类型的光源：平行光、点光源、聚光灯和面光源(area light)。面光源仅在烘培时才可以发挥作用，因此不在本书的讨论范围内。由于每种光源的几何定义不同，因此它们对应的光源属性也就各不相同。这就要求我们要区别对待它们。幸运的是Unity提供了很多内置函数帮助我们处理这些光源，在本章最后我们会介绍这些函数，但首先，我们要先来了解它们背后的原理。</p><h2 id="光源类型有什么影响">光源类型有什么影响</h2><p>我们来看一下光源类型的不同到底会给Shader带来哪些影响。我们可以考虑Shader种使用了光源的哪些属性。最常用的光源属性有光源的**位置、方向（更具体的说时到某点的方向）、颜色、强度以及衰减（更具体地说是到某点的衰减，与该点到光源的距离有关）**这5个属性。而这些属性与它们的几何定义息息相关。</p><ol><li><p>平行光<br>对于我们能之前使用的平行光来说，它的几何定义是最简单的。平行光可以照亮的范围是没有限制的，它通常是作为太阳这样的角色在场景中出现的。<br>平行光之所以简单，是因为它没有一个唯一的位置，也就是说，它可以放在场景中的任意位置，它的几何属性只有方向，我们可以调整平行光的Transform组件中的Rotation属性来改变它的光源方向，而且平行光到场景中所有点的方向都是一样的，这也是平行光的由来。除此之外，由于平行光没有一个具体的位置，因此也没有衰减的概念，也就是说，光照强度不会随着距离而发生变化。</p></li><li><p>点光源<br>点光源的照亮空间则是有限的，它是由空间中的一个球体定义的。点光源可以表示由一个点发出的、向所有方向无限延伸的光。需要注意，我们要在Scene视图中开启光照才能看到预览光源是如何影响场景中的物体的。<br>球体的半径可以由面板中的Range属性来调整，也可以在Scene视图中直接拖拉点光源的线框来修改它的属性。点光源是有位置属性的，它是由点光源的Transform组件中的Position属性定义的。对于方向属性，我们需要用点光源的位置减去某点的位置来得到它到该点的方向。而点光源的颜色和强度可以在Light组件面板中调整。同时，点光源也是会衰减的，随着物体逐渐远离点光源，它接收到的光照强度也会逐渐减小。点光源球心处的光照强度最强，球体边界处的最弱，值为0.其中间的衰减值可以由一个函数定义。</p></li><li><p>聚光灯<br>聚光灯是这三种光源中最复杂的一种。它的照亮空间同样是有限的，但不再是简单的球体，而是由空间中的一块锥形区域定义的。聚光灯可以用于表示由一个特定位置触发、向特定方向延伸的光。<br>这块锥形区域的半径由面板中的Range属性决定，而锥体的张开角度由SpotAngle属性决定。我们同样也可以在Scene视图中直接拖拉聚光灯的线框来修改它的属性。聚光灯的位置同样是由Transform组件中的Position属性定义的。对于方向属性，我们需要使用聚光灯的位置减去某点的位置来得到它到该点的方向。聚光灯的衰减也是随着物体逐渐远离光源而逐渐减小，在锥形的顶点处光照强度最强，在锥形的边界处强度为0.其中的衰减值可以由一个函数定义，这个函数相对于点光源衰减计算公式要更加复杂，因为我们需要判断一个点是否在锥体范围内。</p></li></ol><h2 id="在前向渲染中处理不同的光源类型">在前向渲染中处理不同的光源类型</h2><p>在了解了三种光源的几何定义之后，我们来看一下如何在Unity Shader中访问它们的5个 属性：位置、方向、颜色、强度以及衰减。需要注意的是，我们本节都是建立在使用前向渲染路径的基础上。</p><ol><li>实践<br>我们的代码使用了Blinn-Phong光照模型，并为前向渲染定义了BasePass和Additional Pass来处理多个光源。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;_LightMatrix0&#x27; with &#x27;unity_WorldToLight&#x27;</span><br><span class="line"></span><br><span class="line">// Upgrade NOTE: replaced &#x27;_LightMatrix0&#x27; with &#x27;unity_WorldToLight&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;UnityShaderBook/Chapter 9/ForwardRendering&quot;</span><br><span class="line">&#123;</span><br><span class="line">   // 使用Blinn-Phong光照模型</span><br><span class="line">   </span><br><span class="line">   Properties</span><br><span class="line">   &#123;</span><br><span class="line">      _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">      _Diffuse (&quot;Diffuse&quot;, Color) = (1,1,1,1)</span><br><span class="line">      _Gloss (&quot;Gloss&quot;, Range(8.0, 256)) = 20      </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   SubShader</span><br><span class="line">   &#123;</span><br><span class="line">      Pass</span><br><span class="line">      &#123;</span><br><span class="line">         Tags</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">         &#125;     </span><br><span class="line">         </span><br><span class="line">         CGPROGRAM</span><br><span class="line"></span><br><span class="line">         #include &quot;Lighting.cginc&quot;</span><br><span class="line">         #pragma multi_compile_fwdbase</span><br><span class="line">         #pragma vertex vert</span><br><span class="line">         #pragma fragment frag</span><br><span class="line">         </span><br><span class="line">         fixed4 _Specular;</span><br><span class="line">         fixed4 _Diffuse;</span><br><span class="line">         float _Gloss;</span><br><span class="line">         </span><br><span class="line">         struct a2v</span><br><span class="line">         &#123;</span><br><span class="line">            float4 vertex : POSITION;</span><br><span class="line">            float3 normal : NORMAL;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         struct v2f</span><br><span class="line">         &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            float3 worldNormal : TEXCOORD0;</span><br><span class="line">            float3 worldPos : TEXCOORD1;</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         v2f vert(a2v v)</span><br><span class="line">         &#123;</span><br><span class="line">            v2f o;</span><br><span class="line"></span><br><span class="line">            o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">            o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">            o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">            </span><br><span class="line">            return o;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">            </span><br><span class="line">            fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">            fixed3 lightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">            fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">            </span><br><span class="line">            fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">            fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal,lightDir));</span><br><span class="line">            </span><br><span class="line">            fixed3 halfDir = normalize(worldViewDir + lightDir);      </span><br><span class="line">            </span><br><span class="line">            fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(i.worldNormal, halfDir)),_Gloss);</span><br><span class="line"></span><br><span class="line">            return fixed4(ambient + diffuse + specular, 1.0);</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         ENDCG</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      Pass</span><br><span class="line">      &#123;</span><br><span class="line">         Tags</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;LightMode&quot;=&quot;ForwardAdd&quot;  </span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         Blend One One</span><br><span class="line">         </span><br><span class="line">         CGPROGRAM</span><br><span class="line"></span><br><span class="line">         #pragma multi_compile_fwdadd</span><br><span class="line">         </span><br><span class="line">         #include &quot;Lighting.cginc&quot;</span><br><span class="line">         #include &quot;AutoLight.cginc&quot;</span><br><span class="line">         </span><br><span class="line">         #pragma vertex vert</span><br><span class="line">         #pragma fragment frag</span><br><span class="line">         </span><br><span class="line">         fixed4 _Specular;</span><br><span class="line">         fixed4 _Diffuse;</span><br><span class="line">         float _Gloss;</span><br><span class="line">         </span><br><span class="line">         struct a2v</span><br><span class="line">         &#123;</span><br><span class="line">            float4 vertex : POSITION;</span><br><span class="line">            float3 normal : NORMAL;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         struct v2f</span><br><span class="line">         &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            float3 worldNormal : TEXCOORD0;</span><br><span class="line">            float3 worldPos : TEXCOORD1;</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         v2f vert(a2v v)</span><br><span class="line">         &#123;</span><br><span class="line">            v2f o;</span><br><span class="line"></span><br><span class="line">            o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">            o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">            o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">            </span><br><span class="line">            return o;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">            </span><br><span class="line">            fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">#ifdef USING_DIRECTIONAL_LIGHT</span><br><span class="line">            fixed3 lightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">#else</span><br><span class="line">            fixed3 lightDir = normalize(_WorldSpaceLightPos0.xyz - i.worldPos.xyz);</span><br><span class="line">#endif</span><br><span class="line">            </span><br><span class="line">            fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line"></span><br><span class="line">            fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal,lightDir));</span><br><span class="line">            </span><br><span class="line">            fixed3 halfDir = normalize(worldViewDir + lightDir);      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ifdef USING_DIRECTIONAL_LIGHT</span><br><span class="line">            fixed atten = 1.0;</span><br><span class="line">#else</span><br><span class="line">            float3 lightCoord = mul(unity_WorldToLight, float4(i.worldPos, 1)).xyz;</span><br><span class="line">            fixed atten = tex2D(_LightTexture0, dot(lightCoord, lightCoord).rr).UNITY_ATTEN_CHANNEL;</span><br><span class="line">#endif</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(i.worldNormal, halfDir)),_Gloss);</span><br><span class="line"></span><br><span class="line">            return fixed4( diffuse + specular, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">         ENDCG</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>实验：Base Pass 和 Additional Pass的调用<br>我们在介绍前向渲染原理的章节中解释了Unity是如何决定哪些光源是逐像素光，而哪些是逐顶点或SH光。下面我们做一个实验：<br>新建一个场景，创建一个胶囊体，并给它附上我们上一小节中实现的材质，在场景中创建一个绿色的平行光和四个红色的点光。那么我们会得到如下的效果：<img src="/posts/e52a9ff3/image1.png" class="">那么，这样的结果是怎么来的呢？当我们创建一个光源时，默认情况下它的Render Mode(可以在Light组件中设置)是Auto。这意味着，Unity会在背后为我们判断哪些光源会按照逐像素处理，而哪些按照逐顶点或SH的方式处理。由于我们没有更改<code>Edit -&gt; ProjectSettings -&gt; Quality -&gt; Pixel Light Count</code>中的数值，因此默认情况下一个物体可以接收除最亮的平行光外的4个逐像素光照。在这个例子中，场景中一共包含了5个光源，其中一个是平行光，它会在我们Shader的BasePass中按照逐像素的方式被处理；其余4个都是点光源，由于它们的Render Mode为Auto且数目正好为4，因此都会在Shader中的Additional Pass中逐像素的方式被处理，每个光源都会调用一次Additional Pass。<br>我们可以通过Frame Debugger来查看场景的绘制过程。从Frame Debugger中可以看出，这个场景Unity一共进行了6此渲染实践，由于本例只创建了一个物体，因此这6个渲染事件几乎都是用于渲染物体的光照结果。我们可以通过依次单击Frame Debugger中的渲染事件，来看看Unity是怎么样渲染物体的： <img src="/posts/e52a9ff3/image3.png" class=""> <img src="/posts/e52a9ff3/image4.png" class=""></li></ol><p>从上图中可以看出：在第一个渲染事件中Unity首先清除颜色、深度和模板缓冲，为后面的渲染做准备；在第二个渲染事件中，Unity利用Shader的第一个Pass，即BasePass，将平行光的光照渲染到帧缓存中；在后面的4个事件中，Unity使用第二个Pass依次将4个点光源的光照应用到物体上，得到最终的渲染结果。</p><p>可以注意到，Unity处理这些点光源的顺序是按照它们的重要程度来排序的。在这个例子中，由于所有的点光源的颜色和强度都相同，因此它们的重要成都取决于它们距离胶囊体的远近，因此在上图中首先绘制的是距离胶囊体最近的点光源。但是如果光源的强度和颜色互不相同，那么距离就不再是唯一的衡量标准。例如如果我们把现在距离最近的点光源的强度设置为0.2，那么从FrameDebugger中我们可以发现绘制顺序发生了变化，此时首先绘制的是距离胶囊体第二近的点光源，最近的点光源则会在最后被渲染。Unity官方并没有给出光源强度、颜色和距离物体的远近是如何具体影响光源的重要程度排序的，我们仅知道排序结果和这三者都有关系。</p><p>对于场景中的一个物体，如果它不在一个光源的光照范围内，Unity是不会为这个物体调用Pass来处理这个光源的。在本例中，我们可以把距离最远的点光源的范围缩小，使得胶囊体在它的照亮范围外。此时再看FrameDebugger，我们可以发现渲染事件比之前少了一个，如下图所示，如果一个物体不在某个聚光灯范围内，Unity也是不会为该物体调用相关的渲染事件的。</p> <img src="/posts/e52a9ff3/image1.png" class=""><p>我们知道，如果逐像素的光源数目很多的话，该物体的Additional Pass就会被多次调用，影响性能。我们可以通过把光源的Render Mode设置为Not Important来告诉Unity，我们不希望把这个光源当成逐像素处理。在本例中，我们可以把四个点光源的RenderMode都设置为Not Important，就可以得到下面的结果：</p> <img src="/posts/e52a9ff3/image2.png" class=""><p>由于我们没有在Shader脚本的BasePass中计算逐顶点和SH光源，因此场景中的这四个点光源实际上不会对物体造成任何影响。同样，如果我们把平行光的Render Mode也设置为Not Important，物体就仅仅会显示环境光的光照结果了。那么我们如何在前向渲染路径的BasePass中计算逐顶点计算和SH光呢？我们可以用前面章节提到的内置变量和函数来计算这些光源的光照效果。</p><h1>Unity的光照衰减</h1><p>在上一节中，我们提到了Unity使用一张纹理作为查找表来在片元着色器中计算逐像素光照的衰减。这样的好处在于，计算衰减不依赖于数学公式的复杂性，我们只要使用一个参数值去纹理中采样即可。但是使用纹理查找查找来计算衰减也有一些弊端。</p><ul><li>需要预处理得到采样纹理，而且纹理的大小也会影响衰减的精度。</li><li>不直观，同时也不方便，因此一旦把数据存储到查找表中，我们就无法使用其他的数学公式来计算衰减。</li></ul><p>但是因为这种方法在一定程度上提升性能，而且得到的效果在大部分情况下都是良好的，因此Unity默认就是使用这种纹理查找的方式来计算逐像素的点光源和聚光灯的衰减的。</p><h2 id="用于光照衰减的纹理">用于光照衰减的纹理</h2><p>Unity在内部使用了一张名为_LightTexture0的纹理来计算光源衰减。需要注意的时，如果我们对该光源使用了cookie，那么衰减查找纹理时_LightTextureB0，但这里不讨论这种情况，我们通常只关心_LightTexture0对角线上的纹理颜色值，这些值表明了在光源空间中不同位置的点的衰减值。例如(0,0)表明了与光源位置重合的点的衰减值，而(1,1)表明了在光源空间中所关心的距离最远的点的衰减。</p><p>为了对_LightTexture0纹理采样得到给定点到该光源的衰减值，我们首先需要得到该点在光源空间中的位置，这是通过_LightMatrix0变换矩阵得到的。在上面小节中，我们已经知道_LightMatrix0可以把顶点从世界空间变换到光源空间。因此，我们只需要把_LightMatrix0和世界空间中的顶点坐标相乘即可得到光源空间中的相应位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">float3 lightCoord = mul(_LightMatirx0, float4(i.worldPosition,1)).xyz;</span><br></pre></td></tr></table></figure><p><code>.rr</code>这是一个swizzle操作，用于从向量中选择组件。在这里，rr表示重复选取点积结果（一个标量，因此它的每个组件都是相同的值）作为一个新的二维向量的两个组件。在GLSL或HLSL这样的着色语言中，swizzle操作允许你重新排列或重复向量中的元素。例如，对于一个向量v = (x, y, z, w)，v.xy会得到(x, y)，而v.zwzw会得到(z, w, z, w)。</p><p>然后，我们可以使用这个坐标的模的平方对衰减纹理进行采样，得到衰减值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fixed atten = tex2D(_LightTexture0, dot(lightCoord, lightCoord).rr).UNITY_ATTEN_CHANNEL;</span><br></pre></td></tr></table></figure><p>可以发现，在上面的代码中，我们使用了光源空间中顶点距离的平方(通过dot函数来得到)来对纹理采样，之所以没有使用距离值来采样是因为这种方法可以避免开方操作。然后我们使用宏UNITY_ATTEN_CHANNEL来得到衰减纹理中衰减值所在的分量，以得到最终的衰减值</p><h2 id="使用数学公式计算衰减">使用数学公式计算衰减</h2><p>尽管纹理采样的方法可以减少计算衰减时的复杂度，但有时我们希望可以在代码中利用公式来计算光源的衰减。例如下面的代码可以计算光源的线性衰减：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">float distance = length(_WorldSpaceLightPos0.xyz - i.worldPosition.xyz);</span><br><span class="line">atten = 1.0 / distance;</span><br></pre></td></tr></table></figure><p>可惜的是，Unity没有在文档中给出内置衰减计算的相关说明。尽管我们仍然可以在片元着色器中利用一些数学公式来计算衰减，但是由于我们无法在Shader中通过内置变量得到光源的范围、聚光灯的朝向、张开的角度等信息，因此得到的效果往往在有些时候不尽人意，尤其来物体离开光源的照明范围时会发生突变（这是因为，如果物体不在该光源的照明范围内，Unity就不会为物体执行一个Additional Pass）。当然我们可以利用脚本将光源的相关信息传递给Shader，但这样的灵活性更低。我们只能期待未来Unity版本可以开放更多的参数给我们使用。</p><h1>Unity的阴影</h1><h2 id="阴影是如何实现的">阴影是如何实现的</h2><p>我们可以先考虑下生活中的阴影是如何产生的。当一个光源发射的一条光线遇到一个不透明的物体时，这条光线就不可以再继续照亮其他的物体（这里不考虑光线的反射）。因此，这个物体会向它旁边的物体投射阴影，那些阴影区域的产生时因为光线无法到达这些区域。</p><p>在实时渲染中，我们常用的是一种名为ShadowMap的技术。这种技术理解起来非常简单，它首先会把摄像机的位置放在与光源重合的位置上，那么场景中该光源的阴影区域就是那些摄像机看不到的地方。而Unity就是使用的这种技术。</p><p>在前向渲染路径中，如果场景中最重要的平行光开启了阴影，Unity就会为该光源计算它的阴影映射纹理(shadowmap)。这张阴影映射纹理本质上也是一张深度图，它记录了从该光源的位置出发、能看到场景中距离它最近的表面位置（深度信息）。</p><p>那么在计算阴影映射纹理时，我们如何判定距离它最近的表面位置呢？一种方法是，先把摄像机放置在光源位置上，然后按照正常的渲染流程，即调用Base Pass 和 Additional Pass来更新深度信息，得到阴影映射纹理。这种方法会对性能造成一定的浪费，因为我们实际上仅仅需要选择使用一个额外的Pass来专门更新光源的阴影映射纹理，这个Pass就是LightMode标签被设置为ShadowCaster的Pass。这个Pass的渲染目标不是帧缓存，而是阴影映射纹理（或者深度纹理）。Unity首先把摄像机放置在光源位置上，然后调用该Pass，通过对顶点变换后得到光源空间下的位置，并据此来输出深度信息到阴影映射纹理中。因此，当开启了光源的阴影效果后，底层渲染引擎首先会在当前渲染物体的Unity Shader中找到LightMode为ShadowCater的Pass，如果没有，它就会在Fallback中指定的UnityShader中继续寻找，如果仍然没有找到，该物体就没有办法向其他物体投射阴影，但它仍然可以接收来自其他物体的阴影。当找到了一个LightMode为ShadowCaster的Pass后，Unity会使用该Pass来更新光源的阴影映射纹理。</p><p>在传统的阴影映射纹理的实现中，我们会在正常渲染的Pass中把顶点位置变换到光源空间下，以得到它在光源空间中的三维位置信息。然后，我们使用xy分量对阴影映射纹理进行采样，得到阴影映射纹理中该位置的深度信息。如果该深度值小于该顶点的深度值。然后我们使用xy分量对阴影映射纹理进行采样，得到阴影映射纹理中该位置的深度信息。如果该深度值小于该顶点的深度值（通常由z分量得到），那么说明该点位于阴影中。但在Unity5中，Unity使用了不同于这种传统的阴影采样技术，即屏幕空间的阴影映射技术（ScreenSpace Shadow Map）。屏幕空间的阴影映射原本是延迟渲染中产生阴影的方法。需要注意的是，并不是所有平台Unity都会使用这种技术。这是因为，屏幕空间的阴影映射需要显卡支持MRT（Multiple Render Texture），而有些移动平台不支持这种特性。</p><p>当使用了屏幕空间的阴影映射技术时，Unity首先会通过调用LightMode为ShadowCaster的Pass来得到可投射阴影的光源的阴影映射纹理以及摄像机的深度纹理。然后，根据光源的阴影映射纹理和摄像机的深度纹理来得到屏幕空间的阴影图。如果摄像机的深度图中记录的表面深度大于转换到阴影映射纹理中的深度值，就说明该表面虽然是可见的，但是却处于该光源的阴影中。通过这样的方式，阴影图就包含了屏幕空间的中所有的阴影区域。如果我们想要一个物体接收来自其他物体的阴影，只需要在Shader中对阴影图进行采样。由于阴影图是屏幕空间下的，因此，我们首先需要把表面坐标从模型空间变换到屏幕空间中，然后使用这个坐标对阴影图进行采样即可。</p><p>总结一下，一个物体接收来自其他物体的阴影，以及它向其他物体投射阴影是两个过程</p><ul><li>如果我们想要一个物体接收来自其他物体的阴影，就必须在Shader中对阴影映射纹理（包括屏幕空间的阴影图）进行采样，把采样结果和最后的光照结果相乘来产生阴影结果。</li><li>如果我们想要一个物体向其他物体投射阴影，就必须把该物体加入到光源的阴影映射纹理的计算中，从而让其他物体在对阴影映射纹理采样时可以得到该物体的相关信息。在Unity中，这个过程是通过为该物体执行LightMode为ShadowCaster的Pass来实现的。如果使用了屏幕空间的投影映射技术，Unity还会使用这个Pass产生一张摄像机的深度纹理。</li></ul><h2 id="不透明物体的阴影">不透明物体的阴影</h2><p>新建一个场景，创建一个正方体，为它添加上一节实现的前向渲染路径下的包含Base Pass和Additional Pass的Shader的材质。</p><p>首先，我们要在想要产生阴影的光源的<code>Inspector</code>窗口中设置它的<code>ShadowType</code>属性，在本例中，我们选择了软阴影（Soft Shadows）。</p><p>然后我们来说一下如何让物体投射阴影以及如何让物体接收阴影。</p><ol><li>让物体投射阴影</li></ol><p>在Unity中，我们可以选择是否让一个物体投射或者接收阴影，这是通过设置Mesh Renderer中的Cast Shadows和Receive Shadows属性来实现的。</p><p>Cast Shadows可以被设置为开启或者关闭。如果开启了Cast Shadows属性，那么Unity就会把该物体加入到光源的阴影映射纹理的计算中，从而让其他物体在对阴影映射纹理采样时就可以得到该物体的相关信息。正如之前所说，这个过程是通过为该物体执行LightMode为ShadowCaster的Pass来实现的。Receive Shadows则可以选择是否让物体接收来自其他物体的阴影，如果没有开启Receive Shadows，那么当我们调用Unity的内置宏和变量计算阴影时，这些宏通过判断该物体有没有开启接收阴影的功能，就不会在内部为我们计算阴影。</p><p>我们把正方体和两个平面的Cast Shadows和Receive Shadows都设置为开启状态。就会得到下面的结果：</p> <img src="/posts/e52a9ff3/image5.png" class=""><p>在上图中，我们可以发现，尽管我们没有对Shader做任何修改，但是正方体仍然可以向下面的平面投射阴影。这是因为，我们在Shader中添加了Fallback语义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fallback &quot;Specular&quot;</span><br></pre></td></tr></table></figure><p>在我们的Shader代码中，我们为它的Fallback指定了一个用于回调的Unity Shader，即内置的Specular。虽然Specular本身也没有包含这样一个Pass，但是由于它的Fallback调用了VertexLit，它会继续回调，并最终回调到内置的VertexLit。我们可以在Unity内置的着色器中找到它，实现LightMode为ShadowCaster的Pass代码大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Pass&#123;</span><br><span class="line">    Name &quot;ShadowCaster&quot;</span><br><span class="line">    Tags &#123;&quot;LightMode&quot;=&quot;ShadowCaster&quot;&#125;</span><br><span class="line"></span><br><span class="line">    CGPROGRAM</span><br><span class="line"></span><br><span class="line">    #pragma vertex vert</span><br><span class="line">    #pragma fragment frag</span><br><span class="line">    #pragma multi_compile_shadowcaster</span><br><span class="line">    #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">    struct v2f&#123;</span><br><span class="line">        V2F_SHADOW_CASTER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v2f vert(appdata_base v)&#123;</span><br><span class="line">        v2f o;</span><br><span class="line">        TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)</span><br><span class="line">        retrun o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    float4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">        SHADOW_CASTER_FRAGMENT(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ENDCG</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码非常短，尽管有一些指令和宏是我们之前没有遇到过的，但它们的用处实际上就是为了把深度信息写入渲染目标中。在unity5中，这个Pass的渲染目标可以是光源的阴影映射纹理，或是摄像机的深度纹理。</p><p>如果我们把我们Shader代码中的Fallback注释掉，就可以法线正方体不会再向平面投射阴影了。当然我们可以额不依赖Fallback，而自行在SubShader中定义自己的LightMode为ShadowCaster的Pass。这种自定义的Pass可以让我们更加灵活地控制阴影的产生。但由于这个Pass地功能通常是可以在多个UnityShader中通用地，因此直接Fallback是一个更加方便的用法。在之前的章节中，我们有时也在Fallback中使用内置的Diffuse，虽然Diffuse本身也没有包含这样一个Pass，但是由于它的Fallback调用了VertexLit，因此Unity最终还是会找到一个LightMode为ShadowCaster的Pass，从而可以让物体产生阴影。在下面小节中我们将继续看到LightMode为ShadowCaster的Pass对产生正确的阴影的重要性。</p><p>另外，上图中还有一个有意思的现象，就是右侧的平面并没有向最下面的平面投射阴影，尽管它的Caster Shadows已经被开启了。在默认情况下，我们在计算光源的阴影映射纹理时会剔除掉物体的背面。但对于内置的平面来说，它只有一个面，因此在本例中当计算阴影纹理映射时，由于在右侧的平面在光源空间下没有任何正面(frontface)，因此就不会添加到阴影映射纹理中。我们可以将CastShadows设置为Two Sided来允许对物体的所有面都计算阴影信息，这样我们就得到了下面的效果：</p> <img src="/posts/e52a9ff3/image6.png" class=""><p>在本例中，最下面的平面之所以可以接收阴影是因为它使用了内置的Standard Shader，而这个内置的Shader进行了接受阴影的相关操作。但是由于正方体使用了我们自己实现的Shader并没有对阴影进行任何处理，因此它不会显示出右侧平面投射来的阴影，在下一小节中，我们将学习如何让正方体也可以接收阴影。</p><ol start="2"><li>让物体接收阴影</li></ol><p>为了让正方体可以接收阴影，我们首先新建一个UnityShader，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;_LightMatrix0&#x27; with &#x27;unity_WorldToLight&#x27;</span><br><span class="line"></span><br><span class="line">// Upgrade NOTE: replaced &#x27;_LightMatrix0&#x27; with &#x27;unity_WorldToLight&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;UnityShaderBook/Chapter 9/Shadow&quot;</span><br><span class="line">&#123;</span><br><span class="line">   // 使用Blinn-Phong光照模型</span><br><span class="line">   </span><br><span class="line">   Properties</span><br><span class="line">   &#123;</span><br><span class="line">      _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">      _Diffuse (&quot;Diffuse&quot;, Color) = (1,1,1,1)</span><br><span class="line">      _Gloss (&quot;Gloss&quot;, Range(8.0, 256)) = 20      </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   SubShader</span><br><span class="line">   &#123;</span><br><span class="line">      Pass</span><br><span class="line">      &#123;</span><br><span class="line">         Tags</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">         &#125;     </span><br><span class="line">         </span><br><span class="line">         CGPROGRAM</span><br><span class="line"></span><br><span class="line">         #include &quot;Lighting.cginc&quot;</span><br><span class="line">         #include &quot;AutoLight.cginc&quot;</span><br><span class="line">         #pragma multi_compile_fwdbase</span><br><span class="line">         #pragma vertex vert</span><br><span class="line">         #pragma fragment frag</span><br><span class="line">         </span><br><span class="line">         fixed4 _Specular;</span><br><span class="line">         fixed4 _Diffuse;</span><br><span class="line">         float _Gloss;</span><br><span class="line">         </span><br><span class="line">         struct a2v</span><br><span class="line">         &#123;</span><br><span class="line">            float4 vertex : POSITION;</span><br><span class="line">            float3 normal : NORMAL;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         struct v2f</span><br><span class="line">         &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            float3 worldNormal : TEXCOORD0;</span><br><span class="line">            float3 worldPos : TEXCOORD1;</span><br><span class="line">            SHADOW_COORDS(2)</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         v2f vert(a2v v)</span><br><span class="line">         &#123;</span><br><span class="line">            v2f o;</span><br><span class="line"></span><br><span class="line">            o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">            o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">            o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line"></span><br><span class="line">            TRANSFER_SHADOW(o);</span><br><span class="line">            </span><br><span class="line">            return o;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">            </span><br><span class="line">            fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">            fixed3 lightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">            fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">            </span><br><span class="line">            fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">            fixed shadow = SHADOW_ATTENUATION(i);</span><br><span class="line"></span><br><span class="line">            fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal,lightDir)) * shadow;</span><br><span class="line">            </span><br><span class="line">            fixed3 halfDir = normalize(worldViewDir + lightDir);      </span><br><span class="line">            </span><br><span class="line">            fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(i.worldNormal, halfDir)),_Gloss) * shadow;</span><br><span class="line">            </span><br><span class="line">            return fixed4(ambient + diffuse + specular, 1.0);</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         ENDCG</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      Pass</span><br><span class="line">      &#123;</span><br><span class="line">         Tags</span><br><span class="line">         &#123;</span><br><span class="line">            &quot;LightMode&quot;=&quot;ForwardAdd&quot;  </span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         Blend One One</span><br><span class="line">         </span><br><span class="line">         CGPROGRAM</span><br><span class="line"></span><br><span class="line">         #pragma multi_compile_fwdadd</span><br><span class="line">         </span><br><span class="line">         #include &quot;Lighting.cginc&quot;</span><br><span class="line">         #include &quot;AutoLight.cginc&quot;</span><br><span class="line">         </span><br><span class="line">         #pragma vertex vert</span><br><span class="line">         #pragma fragment frag</span><br><span class="line">         </span><br><span class="line">         fixed4 _Specular;</span><br><span class="line">         fixed4 _Diffuse;</span><br><span class="line">         float _Gloss;</span><br><span class="line">         </span><br><span class="line">         struct a2v</span><br><span class="line">         &#123;</span><br><span class="line">            float4 vertex : POSITION;</span><br><span class="line">            float3 normal : NORMAL;</span><br><span class="line">         &#125;;</span><br><span class="line">         </span><br><span class="line">         struct v2f</span><br><span class="line">         &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            float3 worldNormal : TEXCOORD0;</span><br><span class="line">            float3 worldPos : TEXCOORD1;</span><br><span class="line">         &#125;;</span><br><span class="line"></span><br><span class="line">         v2f vert(a2v v)</span><br><span class="line">         &#123;</span><br><span class="line">            v2f o;</span><br><span class="line"></span><br><span class="line">            o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">            o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">            o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">            </span><br><span class="line">            return o;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">            </span><br><span class="line">            fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">#ifdef USING_DIRECTIONAL_LIGHT</span><br><span class="line">            fixed3 lightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">#else</span><br><span class="line">            fixed3 lightDir = normalize(_WorldSpaceLightPos0.xyz - i.worldPos.xyz);</span><br><span class="line">#endif</span><br><span class="line">            </span><br><span class="line">            fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line"></span><br><span class="line">            fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal,lightDir));</span><br><span class="line">            </span><br><span class="line">            fixed3 halfDir = normalize(worldViewDir + lightDir);      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ifdef USING_DIRECTIONAL_LIGHT</span><br><span class="line">            fixed atten = 1.0;</span><br><span class="line">#else</span><br><span class="line">            float3 lightCoord = mul(unity_WorldToLight, float4(i.worldPos, 1)).xyz;</span><br><span class="line">            fixed atten = tex2D(_LightTexture0, dot(lightCoord, lightCoord).rr).UNITY_ATTEN_CHANNEL;</span><br><span class="line">#endif</span><br><span class="line">            </span><br><span class="line">            fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(i.worldNormal, halfDir)),_Gloss);</span><br><span class="line"></span><br><span class="line">            return fixed4( (diffuse + specular) * atten, 1.0);</span><br><span class="line">         &#125;</span><br><span class="line">         ENDCG</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面这段代码中，我们在顶点着色器的输出结构体中添加了一个内置宏<strong>SHADOW_COORDS</strong>，这个宏的作用很简单，就是声明一个用于对阴影纹理采样的坐标。需要注意的是，这个宏的参数需要是下一个可用的插值寄存器的索引值，在本例中，<strong>TEXCOORD0</strong>和<strong>TEXCOORD1</strong>插值寄存器被用作存储worldPos和worldNormal，因此需要向该宏中传递的参数是2。<br>然后我们在顶点着色器返回之前添加另一个内置宏<strong>TRANSFER_SHADOW</strong>，这个宏用于在顶点着色器中计算上一步中声明的阴影纹理坐标。</p><p>接着，我们在片元着色器中计算阴影值，这同样使用了一个内置宏<strong>SHADOW_ATTENUATION</strong>。</p><p><strong>SHADOW_COORDS</strong>、<strong>TRANSFER_SHADOW</strong>、<strong>SHADOW_ATTENUATION</strong>是计算阴影时的三剑客。这些内置宏帮助我们在必要时计算光源的阴影。我们可以在<code>AutoLight.cginc</code>中找到它们的声明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// ----------------</span><br><span class="line">//  Shadow helpers</span><br><span class="line">// ----------------</span><br><span class="line"></span><br><span class="line">// If none of the keywords are defined, assume directional?</span><br><span class="line">#if !defined(POINT) &amp;&amp; !defined(SPOT) &amp;&amp; !defined(DIRECTIONAL) &amp;&amp; !defined(POINT_COOKIE) &amp;&amp; !defined(DIRECTIONAL_COOKIE)</span><br><span class="line">    #define DIRECTIONAL 1</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">// ---- Screen space direction light shadows helpers (any version)</span><br><span class="line">#if defined (SHADOWS_SCREEN)</span><br><span class="line"></span><br><span class="line">    #if defined(UNITY_NO_SCREENSPACE_SHADOWS)</span><br><span class="line">        UNITY_DECLARE_SHADOWMAP(_ShadowMapTexture);</span><br><span class="line">        #define TRANSFER_SHADOW(a) a._ShadowCoord = mul( unity_WorldToShadow[0], mul( unity_ObjectToWorld, v.vertex ) );</span><br><span class="line">        #define TRANSFER_SHADOW_WPOS(a, wpos) a._ShadowCoord = mul( unity_WorldToShadow[0], float4(wpos.xyz, 1.0f) );</span><br><span class="line">        inline fixed unitySampleShadow (unityShadowCoord4 shadowCoord)</span><br><span class="line">        &#123;</span><br><span class="line">            #if defined(SHADOWS_NATIVE)</span><br><span class="line">                fixed shadow = UNITY_SAMPLE_SHADOW(_ShadowMapTexture, shadowCoord.xyz);</span><br><span class="line">                shadow = _LightShadowData.r + shadow * (1-_LightShadowData.r);</span><br><span class="line">                return shadow;</span><br><span class="line">            #else</span><br><span class="line">                unityShadowCoord dist = SAMPLE_DEPTH_TEXTURE(_ShadowMapTexture, shadowCoord.xy);</span><br><span class="line">                // tegra is confused if we use _LightShadowData.x directly</span><br><span class="line">                // with &quot;ambiguous overloaded function reference max(mediump float, float)&quot;</span><br><span class="line">                unityShadowCoord lightShadowDataX = _LightShadowData.x;</span><br><span class="line">                unityShadowCoord threshold = shadowCoord.z;</span><br><span class="line">                return max(dist &gt; threshold, lightShadowDataX);</span><br><span class="line">            #endif</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    #else // UNITY_NO_SCREENSPACE_SHADOWS</span><br><span class="line">        UNITY_DECLARE_SCREENSPACE_SHADOWMAP(_ShadowMapTexture);</span><br><span class="line">        #define TRANSFER_SHADOW(a) a._ShadowCoord = ComputeScreenPos(a.pos);</span><br><span class="line">        #define TRANSFER_SHADOW_WPOS(a, wpos) a._ShadowCoord = ComputeScreenPos(a.pos);</span><br><span class="line">        inline fixed unitySampleShadow (unityShadowCoord4 shadowCoord)</span><br><span class="line">        &#123;</span><br><span class="line">            fixed shadow = UNITY_SAMPLE_SCREEN_SHADOW(_ShadowMapTexture, shadowCoord);</span><br><span class="line">            return shadow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    #define SHADOW_COORDS(idx1) unityShadowCoord4 _ShadowCoord : TEXCOORD##idx1;</span><br><span class="line">    #define SHADOW_ATTENUATION(a) unitySampleShadow(a._ShadowCoord)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// ---- Shadows off</span><br><span class="line">#if !defined (SHADOWS_SCREEN) &amp;&amp; !defined (SHADOWS_DEPTH) &amp;&amp; !defined (SHADOWS_CUBE)</span><br><span class="line">#define SHADOW_COORDS(idx1)</span><br><span class="line">#define TRANSFER_SHADOW(a)</span><br><span class="line">#define TRANSFER_SHADOW_WPOS(a, wpos)</span><br><span class="line">#define SHADOW_ATTENUATION(a) 1.0</span><br><span class="line">#define READ_SHADOW_COORDS(a) 0</span><br><span class="line">#else</span><br><span class="line">#ifndef READ_SHADOW_COORDS</span><br><span class="line">#define READ_SHADOW_COORDS(a) a._ShadowCoord</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>上面的代码实际上只是Unity为了处理不同的光源类型、不同平台而定义了多个版本的宏。在前向渲染中，宏<strong>SHADOW_COORDS</strong>实际上就是声明了一个名为_ShadowCoord的阴影纹理坐标变量。而<strong>TRANSFER_SHADOW</strong>的实现会根据平台不同而有所差异。如果当前平台可以使用屏幕空间的阴影映射技术(通过判断是否定义了<strong>UNITY_NO_SCREENSPACE_SHADOWS</strong>来得到)，<strong>TRANSFER_SHADOW</strong>会调用内置的ComputeScreenPos函数来计算_ShadowCoord；如果该平台不支持屏幕空间的阴影映射技术，就会使用传统的阴影映射技术，<strong>TRANSFER_SHADOW</strong>会把顶点坐标从模型空间变换到光源空间后存储到_ShadowCoord中。然后<strong>SHADOW_ATTENUATION</strong>负责使用_ShadowCoord对相关的纹理进行采样，得到阴影信息。</p><p>注意到，上面的内置代码的最后定义了在关闭阴影的时候的处理代码。可以看出，当关闭了阴影后，<strong>SHADOW_COORDS</strong>和<strong>TRANSFER_SHADOW</strong>实际没有任何作用，而<strong>SHADOW_ATTENUATION</strong>的值会直接等于数值1。</p><p>需要注意的是，由于这些宏会使用上下文变量来进行相关计算，例如TRANSFER_SHADOW会使用v.vertex或a.pos来计算坐标，因此为了能够让这些宏工作，我们需要保证自定义的变量名和这些宏中使用的变量名相匹配。<strong>我们需要保证：a2v结构体的顶点坐标变量名必须是vertex，顶点着色器的输入结构体a2v必须命名为v，且v2f中的顶点位置变量必须命名为pos。</strong></p><p>在完成了上面的所有操作之后，我们只需要把阴影值shadow和漫反射以及高光反射颜色相乘即可。</p><p>需要注意的是，我们在代码中只更改了Base Pass中的代码，使其可以得到阴影效果，而没有对Additional Pass进行任何更改。大体上，Additional Pass的阴影处理和Base Pass是一样的。本小节实现的代码只是为了解释如何让物体接收阴影，不可以直接用于项目中。我们在本篇文章的最后会给出完整的包含光照处理的Unity Shader</p><h2 id="使用Frame-Debugger查看阴影的绘制过程">使用Frame Debugger查看阴影的绘制过程</h2><p>通过FrameDebugger，我们可以看到，绘制上面的场景的渲染事件可以被分成四个部分：UpdateDepthTexture，即更新摄像机的深度纹理；RenderShadowmap，即渲染得到平行光的阴影映射纹理；CollectShadows，即根据深度纹理和阴影映射纹理得到屏幕空间的阴影图；最后绘制渲染结果。</p> <img src="/posts/e52a9ff3/image7.png" class=""><h2 id="统一管理光照衰减和阴影">统一管理光照衰减和阴影</h2><p>我们已经讲过如何在Unity Shader的前向渲染路径中计算光照衰减——在Base Pass中，平行光的衰减因子总是等于1，而在Additional Pass中，我们需要判断该Pass处理的光源类型，再使用内置变量和宏去计算衰减因子。实际上，光照衰减和阴影对物体最终的渲染结果的影响本质上是相同的——我们都是把光照衰减因子和阴影值及光照结果相乘得到最终的渲染结果。那么，是不是有什么方法可以同时计算两个信息呢？在Unity中这个功能主要是通过内置的<strong>UNITY_LIGHT_ATTENUATION</strong>宏来实现的。</p><p>尽管之前的Shader代码已经可以得到正确的阴影效果了，但是在实践中我们通常还是会使用Unity的内置宏和函数在计算衰减和阴影，从而隐藏一些细节。</p><h2 id="透明度物体的阴影">透明度物体的阴影</h2><p>我们从一开始就强调，想要在Unity中让物体能够向其他物体投射阴影，一定要在它使用的UnityShader中提供一个LightMode为ShadowCaster的Pass。在前面的例子中，我们使用内置的VertexLit中提供的ShadowCaster来投射阴影。VertexLit中的ShadowCaster实现很简单，它会正常渲染整个物体，然后把深度结果输出到一张深度图或阴影映射纹理中。</p><p>对于大多数不透明的物体来说，把Fallback设为VertexLit就可以得到正确的阴影。但是对于透明物体来说，我们就需要小心处理它的阴影。透明物体的实现通常会使用透明度测试或者透明度混合，我们需要小心设置这些物体的Fallback。</p><p>透明度测试的处理比较简单，如果我们仍然直接使用VertexLit、Diffuse、Specular等作为回调，往往无法得到正确的阴影。这是因为透明度测试需要在片元着色器中舍弃某些片元，而VertexLit中的阴影投射纹理没有这样的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 9/AlphaTestWithShadow&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;Main Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Cutoff (&quot;Alpha Cutoff&quot;, Range(0,1)) = 0.5</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">       Tags</span><br><span class="line">       &#123;</span><br><span class="line">           &quot;Queue&quot;=&quot;AlphaTest&quot;</span><br><span class="line">           &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">           &quot;RenderType&quot;=&quot;TransparentCutout&quot;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       Pass</span><br><span class="line">       &#123;</span><br><span class="line">           Tags</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line">            #include &quot;AutoLight.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed _Cutoff;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">               float4 vertex : POSITION;</span><br><span class="line">               float3 normal : NORMAL;</span><br><span class="line">               float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">                SHADOW_COORDS(3)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)&#123;</span><br><span class="line"></span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP,v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                TRANSFER_SHADOW(o);</span><br><span class="line">                return o;                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line"></span><br><span class="line">                clip(texColor.a - _Cutoff);</span><br><span class="line"></span><br><span class="line">                // if((texColor.a - _Cutoff) &lt; 0.0)</span><br><span class="line">                // &#123;</span><br><span class="line">                //     discard;</span><br><span class="line">                // &#125;</span><br><span class="line"></span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse * atten, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">           ENDCG</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;VertexLit&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了让使用透明度测试的物体得到正确的阴影效果，我们只需要在Unity Shader中更改一行代码，即把Fallback设置为Transparent/Cutout/VertexLit，在这个Shader代码中的ShadowCaster Pass也计算了透明度测试，因此会把裁剪后的物体深度信息写入深度图和阴影映射纹理中。但是需要注意的是，由于Transparent/Cutout/VertexLit中计算透明度测试时，使用了名为_Cutoff的属性来进行透明度测试，因此，这就要求我们的Shader中也必须提供名为_Cutoff的属性。否则就无法得到正确的阴影结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 9/AlphaTestWithShadow&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;Main Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Cutoff (&quot;Alpha Cutoff&quot;, Range(0,1)) = 0.5</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">       Tags</span><br><span class="line">       &#123;</span><br><span class="line">           &quot;Queue&quot;=&quot;AlphaTest&quot;</span><br><span class="line">           &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">           &quot;RenderType&quot;=&quot;TransparentCutout&quot;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       Pass</span><br><span class="line">       &#123;</span><br><span class="line">           Tags</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line">            #include &quot;AutoLight.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed _Cutoff;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">               float4 vertex : POSITION;</span><br><span class="line">               float3 normal : NORMAL;</span><br><span class="line">               float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">                SHADOW_COORDS(3)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)&#123;</span><br><span class="line"></span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP,v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                TRANSFER_SHADOW(o);</span><br><span class="line">                return o;                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line"></span><br><span class="line">                clip(texColor.a - _Cutoff);</span><br><span class="line"></span><br><span class="line">                // if((texColor.a - _Cutoff) &lt; 0.0)</span><br><span class="line">                // &#123;</span><br><span class="line">                //     discard;</span><br><span class="line">                // &#125;</span><br><span class="line"></span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse * atten, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">           ENDCG</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Transparent/Cutout/VertexLit&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是，这样的结果仍然有些问题，例如出现了一些不应该透过光的问题。出现这种情况的原因是，默认情况下把物体渲染到深度图和阴影映射纹理中仅考虑物体的正面。但对于本例的正方体来说，由于一些面完全背对光源，因此这些面的深度信息并没有加入到阴影映射纹理的计算中。为了得到正确的结果，我们可以将正方体的MeshRenderer组件中的CastShadows属性设置为Two Sided，强制Unity在计算阴影映射纹理时计算所有面的深度信息。</p><p>与透明度测试的物体相比，想要为使用透明度混合的物体添加阴影是一件比较复杂的事情。实际上，所有内置的透明度混合的UnityShader，如Transparent/VertexLit等，都没有包含阴影投射的Pass，这意味着，这些半透明物体不会参与深度图和阴影映射纹理计算，也就是说，它们不会向其他物体投射阴影，同样的，它们也不会接收来自其他物体的阴影。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;mul(UNITY_MATRIX_MVP,*)&#x27; with &#x27;UnityObjectToClipPos(*)&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;Shader Book/Chapter 9/AlphaBlendWithShadow&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;ColorTine&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _AlphaScale (&quot;AlphaScle&quot;, Range(0,1)) = 1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags&#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line">            #include&quot;AutoLight.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed _AlphaScale;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                // 因为需要做MVP变换 需要一个四维矩阵</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">                SHADOW_COORDS(3)</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                TRANSFER_SHADOW(o)</span><br><span class="line">                </span><br><span class="line">                return o; </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">                UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse * atten, texColor.a * _AlphaScale);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Transparent/VertexLit&quot;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unity会这样处理半透明的物体是有它的原因的。由于透明度混合需要关闭深度写入，由此带来的问题也影响了阴影的生成。总台来说，想要为这些半透明的物体产生正确的阴影，需要在每个光源空间下严格按照从后往前的顺序进行渲染，这会让阴影处理变得十分复杂，而且也会影响性能。因此，在Unity中，所有的半透明Shader都是不会产生任何阴影效果的。当然，我们可以使用一些dirty trick来强制为半透明的物体生成阴影，这可以通过把它们的Fallback设置为VertexLit、Diffuse这些不透明物体使用的UnityShader，这样Unity就会在它们的Fallback上找到一个阴影投射的Pass。然后，我们可以通过物体的Mesh Renderer组件上的Cast Shadows和Reveive Shadows选项来控制时候需要向其他物体投射或接收阴影。如下图，可以看出，此时右侧平面的阴影投射到了半透明的立方体上，但是它不会再穿透立方体把阴影投射到下方的平面上，这其实是不对的。同时，立方体也可以把自身的阴影投射在下面的平面上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;mul(UNITY_MATRIX_MVP,*)&#x27; with &#x27;UnityObjectToClipPos(*)&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;Shader Book/Chapter 9/AlphaBlendWithShadow&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;ColorTine&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _AlphaScale (&quot;AlphaScle&quot;, Range(0,1)) = 1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags&#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line">            #include&quot;AutoLight.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed _AlphaScale;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                // 因为需要做MVP变换 需要一个四维矩阵</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">                SHADOW_COORDS(3)</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                TRANSFER_SHADOW(o)</span><br><span class="line">                </span><br><span class="line">                return o; </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">                UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse * atten, texColor.a * _AlphaScale);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;VertexLit&quot;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准的Unity-Shader">标准的Unity Shader</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记（八）——透明效果</title>
      <link href="/posts/b4321fd8/"/>
      <url>/posts/b4321fd8/</url>
      
        <content type="html"><![CDATA[<p>Unity中实现透明效果有两种方式，透明度测试(Alpha Test)和透明度混合(Alpha Blend)</p><h1>渲染顺序很重要</h1><p>在使用透明度混合技术的时候需要关闭深度写入，为什么呢？如果不关闭深度写入的话，一个半透明的物体表面背后的表面本来是可以透过它被我们看到的，但是由于深度测试时判断结果时该半透明表面距离摄像机更近，导致后面的表面将会被剔除，我们也就无法通过半透明表面看到后面的物体了。但是，我们由此也破坏了深度缓冲的工作机制，这是一个很糟糕的事情，尽管我们不得不这样做。</p><p>渲染引擎一般都会先对物体进行排序，再渲染。常用的方法是：</p><ol><li>先渲染所有不透明的物体，并且开启它们的深度测试和深度写入</li><li>把半透明物体按照它们距离摄像机的远近进行排序，然后按照从后往前的顺序渲染透明物体，并开启它们的深度测试，但关闭深度写入。</li></ol><p>为了减少错误排序的情况，我们可以尽可能让模型是凸面体。并且考虑将复杂的模型拆成可以独立排序的子模型等。其实就算排序错误结果有时也不会非常糟糕，如果我们不想分割网格，可以试着让透明通道更加柔和，使穿插看起来并不是那么明显。我们也可以使用开启了深度写入的半透明效果来近似模拟物体的半透明。</p><h1>透明度测试</h1><p>透明度测试的原理是：给定一个透明度阈值，当片元的透明度低于这个值的时候，直接舍弃该片元。<br>这种方式虽然简单，但是无法实现真正的半透明效果，要么是完全透明的，什么也看不到；要么是完全不透明的，就像不透明的物体一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 8/Alpha Test&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties&#123;</span><br><span class="line">        //</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        //</span><br><span class="line">        _Color (&quot;MainTint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        </span><br><span class="line">        // 阈值，</span><br><span class="line">        _Cutoff (&quot;Cutoff&quot;, Range(0,1)) = 0.5</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader&#123;</span><br><span class="line"></span><br><span class="line">        Tags&#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;AlphaTest&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;TransparentCutout&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Pass&#123;</span><br><span class="line">            Tags&#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的片元着色器方法的返回值都是fixed4的，它代表的就是输出到屏幕上的每个像素的颜色，</p><h1>透明度混合</h1><p>透明度混合的原理是：它会使用当前片元的透明度作为混合因子，与已经存储在颜色缓冲中的颜色值进行混合，得到新的颜色。但是透明度混合关闭了深度写入，这使得我们需要十分小心物体的渲染顺序。这种方法可以得到真正的半透明效果。</p><p>为了进行混合，我们需要使用Unity提供的混合命令——Blend，Blend是Unity提供的设置混合的命令。想要实现半透明的效果就需要把当前自身的颜色和已经存在于颜色缓冲中的颜色值进行混合，混合时使用的函数就是由该指令决定的。下表给出了Blend命令的语义：</p><p>两个透明物体的渲染顺序也很重要</p><p>A和B两个物体，如果谁先渲染，最终显示在屏幕上看起来就是谁被挡在了后面，为什么呢？混合操作的实现原理是什么？</p><table><thead><tr><th>语义</th><th>描述</th></tr></thead><tbody><tr><td>BlendOff</td><td>关闭混合</td></tr><tr><td>Blend SrcFactor DstFactor</td><td>开启混合，并设置混合因子。源颜色（该片元产生的颜色）会乘以SrcFactor，而目标颜色（已经存在于颜色缓冲中的颜色）会乘以DstFactor，然后把两者相加后再存入颜色缓冲中</td></tr><tr><td>Blend SrcFactor DstFactor SrcFactorA DstFactorA</td><td>和上面几乎一样 只是使用了不同的混合因子来混合透明通道</td></tr><tr><td>BlendOp BlendOperation</td><td>并非是把源颜色和目标颜色简单相加后混合，而是使用BlendOperation对他们进行其他操作</td></tr></tbody></table><p>在本节中，我们会使用上表中的第二种语义，并且我们会把源颜色的混合因子SrcFactor设置成SrcAlpha，而目标颜色的混合因子DstFactor设置为OneMinusSrcAlpha。这意味着，经过混合后的新颜色是：<br>$$DstColor_{new} = SrcAlpha \times SrcColor + (1 - SrcAlpha) \times DstColor_{old}$$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;mul(UNITY_MATRIX_MVP,*)&#x27; with &#x27;UnityObjectToClipPos(*)&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;Shader Book/Chapter 8/AlphaBlend&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;ColorTine&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _AlphaScale (&quot;AlphaScle&quot;, Range(0,1)) = 1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags&#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed _AlphaScale;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                // 因为需要做MVP变换 需要一个四维矩阵</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                </span><br><span class="line">                return o; </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">                </span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse, texColor.a * _AlphaScale);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Transparent/VertexLit&quot;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们前面提到了关闭深度写入带来的种种问题，当模型本身有十分复杂的遮挡关系或者是包含了复杂的非凸网格的时候，就会有各种因为排序错误而产生的错误的透明效果。</p><p>因此我们需要想办法重新利用深度写入，让模型可以像半透明物体一样淡入淡出。</p><h1>开启深度写入的半透明效果</h1><p>上一小结最后我们提到了由于关闭深度写入而导致错误排序的情况。一种解决方法是<strong>使用两个Pass</strong>来渲染模型：第一个Pass开启深度写入，但是不输出颜色，它的目的仅仅是把模型的深度值写入深度缓冲中；第二个Pass进行正常的透明度混合，由于上一个Pass已经得到了逐像素的正确深度信息，该Pass就可以按照逐像素级别的深度排序结果进行透明渲染。但这种方法的缺点就是会对性能造成一定的开销，使用这种方法，我们仍然可以实现模型与它后面的背景的混合效果，但是模型内部之间不会有任何真正的半透明效果。</p><p>本节使用的Shader代码和上一节中的代码几乎一样，只是在Pass前面新添加一个Pass：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;mul(UNITY_MATRIX_MVP,*)&#x27; with &#x27;UnityObjectToClipPos(*)&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;Shader Book/Chapter 8/AlphaBlendZWrite&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;ColorTine&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _AlphaScale (&quot;AlphaScle&quot;, Range(0,1)) = 1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ColorMask 0</span><br><span class="line">            ZWrite On</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags&#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed _AlphaScale;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                // 因为需要做MVP变换 需要一个四维矩阵</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                </span><br><span class="line">                return o; </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">                </span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse, texColor.a * _AlphaScale);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Transparent/VertexLit&quot;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个新添加的Pass的目的仅仅是为了把模型的深度信息写入深度缓冲中，从而剔除模型中被自身遮挡的片元。因此，Pass的第一行开启了深度写入。在第二行，我们使用了一个新的渲染命令——<strong>ColorMask</strong>，在ShaderLab中，ColorMask用于设置颜色通道的写掩码（write mask），它的语义如下：<br>ColorMask RGB | A | 0 | 其他任何R、G、B、A的组合<br>当ColorMask设置为0时，意味着该Pass不写入任何颜色通道，即不会输出任何颜色，这正是我们需要的——该Pass只需要写入深度缓存即可。</p><h1>ShaderLab的混合命令</h1><p>我们先来看一下混合是如何实现的。当片元着色器产生一个颜色的时候，可以选择与颜色缓存中的颜色进行混合，这样一来，混合就和两个操作数有关：源颜色（Source Color）和目标颜色（Destination Color），源颜色我们用<strong>S</strong>来表示，指的是由片元着色器产生的颜色值；目标颜色我们用<strong>D</strong>来表示，指的是从颜色缓冲中读取到的颜色值。对它们进行混合后得到的输出颜色，我们用<strong>O</strong>表示，它会重新写入颜色缓冲中，需要注意的是，当我们谈及混合中的源颜色、目标颜色和输出颜色的时候，它们都包含了RGBA四个通道的值，而并非RGB通道。</p><h2 id="混合等式和参数">混合等式和参数</h2><p>在之前的章节中我们提到过，混合是一个逐片元的操作，而且它是不可编程的，但却是高度可配置的。也就是说，我们可以设置混合时使用的运算操作、混合因子等来影响混合。</p><p>现在，我们已知两个操作数：源颜色S和目标颜色D，想要得输出颜色O就必须使用一个等式来计算。我们把这个等式成为<strong>混合等式（blend equation）<strong>当进行混合时，我们需要两个混合等式：一个用于混合RGB通道，一个用于混合A通道。当设置混合状态时，我们实际上设置的就是混合等式中的</strong>操作</strong>和<strong>因子</strong>。在默认情况下，混合等式使用的操作都是加操作（我们也可以使用其他操作），我们只需要再设置一下混合因子即可。由于需要两个等式（分别用于混合RGB通道和A通道），每个等式都有两个因子（一个用于和源颜色相乘，另一个用于和目标颜色相乘），因此一共需要四个因子。</p><table><thead><tr><th>语义</th><th>描述</th></tr></thead><tbody><tr><td>Blend SrcFactor DstFactor</td><td>开启混合，并设置混合因子。源颜色（该片元产生的颜色）会乘以SrcFactor，而目标颜色（已经存在于颜色缓冲中的颜色）会乘以DstFactor，然后把两者相加后再存入颜色缓冲中</td></tr><tr><td>Blend SrcFactor DstFactor SrcFactorA DstFactorA</td><td>和上面几乎一样 只是使用了不同的混合因子来混合透明通道</td></tr></tbody></table><p>可以发现，上面这个表中的第一个语义只提供了两个因子，这意味着将使用同样的混合因子来混合RGB通道和A通道，即此时SrcFactorA将等于SrcFactor，DstFactorA将等于DstFactor。下面就是使用这些因子进行加法混合时的公式：<br>$$ O_{rgb} = SrcFactor \times S_{rgb} + DstFactor \times D_{rgb} $$<br>$$ O_{a} = SrcFactor \times S_{a} + DstFactor \times D_{a} $$<br>下表给出了ShaderLab支持的混合因子</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>One</td><td>因子为1</td></tr><tr><td>Zero</td><td>因子为0</td></tr><tr><td>SrcColor</td><td>因子为源颜色值，当用于混合RGB的混合等式时，使用SrcColor的RGB分量作为混合因子；当用于混合A的混合等式时，使用SrcColor的A分量作为混合因子</td></tr><tr><td>SrcAlpha</td><td>混合因子为源颜色的透明度值（A通道）</td></tr><tr><td>DstColor</td><td>因子为目标颜色值，当用于混合RGB通道等式时，使用DstColor的RGB分量作为混合因子；当用于混合A通道的</td></tr><tr><td>DstAlpha</td><td>因子为目标颜色的透明度值（A通道）</td></tr><tr><td>DsrColor</td><td>因子为目标颜色值，当用于混合RGB通道的混合等式时，使用结果的RGB分量作为混合因子；当用于混合A通道的混合等式时，使用DstColor的A分量作为混合因子</td></tr><tr><td>OneMinusSrcColor</td><td>因子为(1-源颜色)，当用于混合RGB的混合等式时，使用结果的RGB分量作为混合因子；当用于混合A的混合等式时，使用结果的A分量作为混合因子</td></tr><tr><td>OneMinusSrcAlpha</td><td>因子为(1-源颜色的透明度值)</td></tr><tr><td>OneMinusDstColor</td><td>因子为(1-目标颜色的颜色值)。当用于混合RGB的混合等式时，使用结果的RGB分量作为混合因子；当用于混合A的混合等式时，使用结果的A分量作为混合因子</td></tr><tr><td>OneMinusDstAlpha</td><td>因子为(1-目标颜色的透明度值)</td></tr></tbody></table><h2 id="混合操作">混合操作</h2><p>在上面涉及的混合等式中，当把源颜色和目标颜色与它们对应的混合因子相乘之后，我们都是把它们的结果相加起来作为输出颜色的。那么可不可以选择不使用加法，而使用减法呢？答案是肯定的，我们可以使用ShaderLab的<strong>BlendOp BlendOperation</strong>命令，即混合操作命令。下表给出了ShaderLab中支持的混合操作</p><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>Add</td><td>将混合后的源颜色和目标颜色相加。默认的混合操作。使用的混合等式是：<br>$O_{rgb} = SrcFactor \times S_{rgb} + DstFactor \times D_{rgb}$ <br>$O_{a} = SrcFactorA \times DstFactorA$</td></tr><tr><td>Sub</td><td>用混合后的源颜色减去混合后的目标颜色。使用的混合等式是：<br>$O_{rgb} = SrcFactor \times S_{rgb} - DstFactor \times D_{rgb}$ <br> $O_{a} = SrcFactorA \times S_{a} - DstFactorA \times D_{a}$</td></tr><tr><td>RevSub</td><td>使用混合后的目标颜色减去混合后的源颜色。使用的混合等式是: <br> $O_{rgb} = DstFactor \times D_{rgb} - SrcFactor \times S_{rgb}$ <br>$O_{a} = DstFactorA \times D_{a} - SrcFactor \times S_{a}$</td></tr><tr><td>Min</td><td>使用源颜色和目标颜色中较小的值，是逐分量比较的，使用的混合等式是：<br> $O_{rgba} = (min(S_{r}, D{r}),min(S_{g}, D{g}),min(S_{b}, D{b}),min(S_{a}, D{a}))$</td></tr><tr><td>Max</td><td>使用源颜色和目标颜色中较大的值，是逐分量比较的，使用的混合等式是: <br> $O_{rgba} = (max(S_{r}, D{r}),max(S_{g}, D{g}),max(S_{b}, D{b}),max(S_{a}, D{a}))$</td></tr><tr><td>其他逻辑操作</td><td>只在DirectX 11.1中支持</td></tr></tbody></table><p>混合操作命令通常是与混合因子命令一起工作的。但是需要注意的是，当使用<strong>Min</strong>和<strong>Max</strong>混合操作的时候，混合因子实际上是不起作用的，它们仅会判断原始的源颜色和目标颜色之间的比较结果。</p><h2 id="常见的混合类型">常见的混合类型</h2><p>通过混合操作和混合因子命令的组合，我们可以得到一些类似PhotoShop混合模式中的混合效果</p><ul><li><p>正常(Normal) 即透明度混合</p><p>Blend SrcAlpha OneMinusSrcAlpha</p></li><li><p>柔和相加(Soft Additive)</p><p>Blend OneMinusDstColor One</p></li><li><p>两倍相乘(2x Multiply)</p><p>Blend DstColor SrcColor</p></li><li><p>变暗(Darken)</p><p>BlendOp Min<br>Blend One One</p></li><li><p>变亮(Lighting)</p><p>BlendOp Max<br>Blend One one</p></li><li><p>滤色(Screen)</p><p>Blend OneMinusDstColor One</p><p>// 等同于<br>Blend One OneMinusSrcColor</p></li><li><p>线性减淡(Linear Doge)</p><p>Blend One one</p></li></ul><img src="/posts/b4321fd8/image.png" class="" title="alt text"><h1>双面渲染的透明效果</h1><p>在现实生活中，如果一个物体是透明的，因为着我们不仅可以投哦过它看到其他物体的样子，也可以看到它的内部结构。但在前面实现的透明效果中，无论是透明度测试还是透明度混合，我们都无法观察到正方体内部和其背面的形状，导致物体看起来只有半个一样。这是因为，默认情况下渲染引擎剔除了物体背面(相对于摄像机方向)的渲染图元，而只渲染了物体的正面。如果我们想要得到双面渲染的效果，可以使用Cull指令来控制需要剔除哪个面的渲染图元。在Unity中，Cull指令的语法如下：</p><blockquote><p>Cull Back | Front | Off</p></blockquote><p>如果设置为Back，那么那些背对着摄像机的渲染图元就不会被渲染，这也是默认情况下的剔除状态；如果设置为Front，那么那些朝向摄像机的渲染图元就不会被渲染；如果设置为Off，就会关闭剔除功能，那么所有的图元都会被渲染，但由于这时需要渲染的图元数目会成倍增加，因此除非是用于特殊效果，例如这里的双面渲染的透明效果，通常情况下是不会关闭剔除功能的。</p><h2 id="span-id-1-透明度测试的双面渲染-span"><span id = 1>透明度测试的双面渲染</span></h2><p>我们首先来看一下，如何让使用了透明度测试的物体实现双面渲染的效果，这非常简单，只需要在Pass的渲染设置中使用Cull指令来关闭剔除即可。因此拷贝AlphaTest小节部分的代码，并加入<code>Cull off</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 8/AlphaTestBothSides&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;Main Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Cutoff (&quot;Alpha Cutoff&quot;, Range(0,1)) = 0.5</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">       Tags</span><br><span class="line">       &#123;</span><br><span class="line">           &quot;Queue&quot;=&quot;AlphaTest&quot;</span><br><span class="line">           &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">           &quot;RenderType&quot;=&quot;TransparentCutout&quot;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       Cull Off</span><br><span class="line">       </span><br><span class="line">       Pass</span><br><span class="line">       &#123;</span><br><span class="line">           Tags</span><br><span class="line">           &#123;</span><br><span class="line">               &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed _Cutoff;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">               float4 vertex : POSITION;</span><br><span class="line">               float3 normal : NORMAL;</span><br><span class="line">               float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">               float4 pos : SV_POSITION;</span><br><span class="line">               float3 worldNormal : TEXCOORD0;</span><br><span class="line">               float3 worldPos : TEXCOORD1;</span><br><span class="line">               float2 uv : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)&#123;</span><br><span class="line"></span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP,v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                return o;                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line"></span><br><span class="line">                clip(texColor.a - _Cutoff);</span><br><span class="line"></span><br><span class="line">                // if((texColor.a - _Cutoff) &lt; 0.0)</span><br><span class="line">                // &#123;</span><br><span class="line">                //     discard;</span><br><span class="line">                // &#125;</span><br><span class="line"></span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">           ENDCG</span><br><span class="line">       &#125;</span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="透明度混合的双面渲染">透明度混合的双面渲染</h2><p>和透明度测试相比，想要让透明度混合实现双面渲染可能会更复杂一点，这是因为透明度混合需要关闭深度写入，而这是“一切混乱的开端”。我们知道，想要得到正确的透明效果，渲染顺序是十分重要的——<strong>我们需要保证图元是从后往前渲染的</strong>。对于透明度测试来说，由于我们没有关闭深度写入，因此可以利用深度缓冲按逐像素的粒度进行排序，从而保证渲染的正确性。然而一旦关闭了深度写入，我们就需要小心地控制渲染顺序来得到正确的深度关系。如果我们仍然采用<a href="#1"><strong>透明度测试的双面渲染</strong></a>小节中的方法直接关闭剔除功能，那么我们就无法保证同一个物体的正面和背面图元的渲染顺序，就有可能得到错误的半透明效果。</p><p>为此，我们选择把双面渲染的工作分成两个Pass——第一个Pass只渲染背面，第二个Pass只渲染正面，由于Unity会顺序执行SubShader中的各个Pass，因此我们可以保证背面总是在正面渲染之前渲染，从而可以保证正确的深度关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">// Upgrade NOTE: replaced &#x27;mul(UNITY_MATRIX_MVP,*)&#x27; with &#x27;UnityObjectToClipPos(*)&#x27;</span><br><span class="line"></span><br><span class="line">Shader &quot;Shader Book/Chapter 8/AlphaBlendBothSides&quot;</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;ColorTine&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _AlphaScale (&quot;AlphaScle&quot;, Range(0,1)) = 1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot;</span><br><span class="line">            &quot;IgnoreProjector&quot;=&quot;True&quot;</span><br><span class="line">            &quot;RenderType&quot;=&quot;Transparent&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags&#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Cull Front</span><br><span class="line">            </span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed _AlphaScale;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                // 因为需要做MVP变换 需要一个四维矩阵</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                </span><br><span class="line">                return o; </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">                </span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse, texColor.a * _AlphaScale);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags&#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Cull Back</span><br><span class="line">            </span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed _AlphaScale;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                // 因为需要做MVP变换 需要一个四维矩阵</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                </span><br><span class="line">                return o; </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">                </span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * max(0, dot(worldNormal, worldLightDir));</span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse, texColor.a * _AlphaScale);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Transparent/VertexLit&quot;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记（七）——基础纹理</title>
      <link href="/posts/5fb55013/"/>
      <url>/posts/5fb55013/</url>
      
        <content type="html"><![CDATA[<p>纹理的作用像是盖在模型表面的衣服，纹理决定了模型表面看起来是什么样子的。</p><h1>单张纹理</h1><p>我们通常会使用一张纹理来代替物体的漫反射颜色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;unityShaderBook/Chapter 7/Single Texture&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Color (&quot;Color&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(8.0, 256)) = 20</span><br><span class="line">        _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            </span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line">            </span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            float _Gloss;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.uv = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">                </span><br><span class="line">                fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _Color.rgb;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line">                </span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo.rgb * saturate(dot(worldNormal, worldLightDir));</span><br><span class="line">                </span><br><span class="line">                fixed3 viewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">                fixed3 halfDir = normalize(viewDir+worldLightDir);</span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(worldNormal, halfDir)), _Gloss);</span><br><span class="line">                </span><br><span class="line">                return fixed4(ambient + diffuse + specular, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>凹凸映射</h1><p>纹理的另一种常见的应用就是凹凸映射(bump mapping)。凹凸映射的目的是使用一张纹理来修改模型表面的法线，以便为模型提供更多的细节。这种方法不会真的改变模型的顶点位置，只是让模型看起来好像是凹凸不平的，但可以从模型的轮廓处看出破绽。</p><p>有两种主要的方法可以用来进行凹凸映射：一种方法是使用一张高度纹理(height map)来模拟表面位移(displacement),然后得到一个修改后的法线值，这种方法也被称为高度映射(height mapping)；另一种方法则是使用一张法线纹理(normal map)来直接存储表面法线，这种方法又被称为法线映射(normal mapping)。尽管我们常常将凹凸映射和法线映射当成是相同的技术，但是我们还是需要知道它们之间的不同。</p><h2 id="高度纹理">高度纹理</h2><p>我们首先来看第一种技术，即使用一张高度图来实现凹凸映射。高度图中存储的是强度值(intensity)，它用于表示模型表面局部的海拔高度。因此，颜色越浅的地方表明该位置的表面越向外凸起，而颜色越深的地方表明该位置越想里凹。这种方法的好处是非常直观，我们可以从高度图中明确地知道一个模型表面的凹凸情况，但缺点是计算更加复杂，在实时计算的时候不能直接得到表面法线，而是需要由像素的灰度值计算而得，因此需要消耗更多的性能。</p><p>高度图通常会和法线映射一起使用，用于给出表面凹凸的额外信息，也就是说，我们经常会使用法线映射来修改光照。</p><h2 id="法线纹理">法线纹理</h2><p>而法线纹理中存储的就是表面法线的方向。由于法线方向的分量范围在[-1,1]，而像素的分量范围为[0,1]，因此我们需要做一个映射，通常使用的映射就是：<br>$$pixel = \frac{normal + 1}{2}$$</p><p>这就要求，我们在Shader中对法线纹理进行纹理采样后，还需要对结果进行一次反映射的过程，以得到原先的法线方向。反映射的过程实际上就是使用上面的映射函数的逆函数:<br>$$normal = pixel \times 2 - 1$$</p><p>然而，由于方向是相对于坐标空间来说的，那么法线纹理中存储的法线方向在哪个坐标空间中呢？对于模型顶点自带的法线，它们是定义在模型空间中的，因此一种直接的想法就是将修改后的模型空间中的表面法线存储在一张纹理中，这种纹理被称为是模型空间的法线纹理(object-space normal map)。然而，在实际制作中，我们往往会采用另一种坐标空间，即模型顶点的切线空间(tangent space)来存储法线。对于模型的每个顶点，它都有属于自己的一个切线空间，这个切线空间的原点就是该顶点本身，而z轴是顶点的法线方向(n),x轴是顶点的切线方向(t),而y轴则可由法线和切线的叉乘积而得，也被称为是副切线(bitangent,b)或者副法线。切线空间坐标系是右手坐标系。</p><p>这种纹理被称为是切线空间的法线纹理(tangent-space normal map)</p><p>从图中可以看出，模型空间下的法线纹理看起来是五颜六色的，这是因为，所有法线所在的坐标空间是同一个坐标空间，即模型空间，而每个点存储的法线方向是各异的，有的是(0,1,0)，经过映射后存储到纹理中就对应了RGB(0.5,1,0.5)浅绿色，有的是(0,-1,0)，经过映射后存储到纹理中就对应了(0.5,0,0.5)紫色。而切线空间下的法线纹理看起来几乎全部是浅蓝色。这是因为，每个法线方向所在的坐标空间是不一样的，即是表难免每个点各自的切线空间。这种法线纹理其实就是存储了每个点在各自的且前空间中的法线扰动方向。也就是说，如果一个点的法线方向不变，那么在它的切线空间中，新的法线方向就是z轴方向，即值为(0,0,1)，经过映射后存储在纹理中就对应了RGB(0.5,0.5,1)浅蓝色。而这个颜色就是法线纹理中大片的蓝色。这些蓝色实际上说明顶点的大部分法线是和模型本身法线一样的，不需要改变。</p><p>总体来说，模型空间下的法线纹理更加符合人类的直观认识，而法线纹理本身也很直观，容易调整，因为不同的法线方向就代表了不同的颜色。但美术人员往往更喜欢使用切线空间下的法线纹理。那么，为什么他们更喜欢使用这个看起来很蹩脚的切线空间呢？</p><p>其实，发现本身存储在哪个坐标系中都是可以的，我们甚至可以选择存储在世界空间下。但问题是，我们并不是单纯地想要得到法线，后续的光照计算才是我们的目的。而选择哪个坐标系意味着我们需要把不同信息转换到相应的坐标系中。例如，如果选择了切线空间，我们需要把从法线纹理中得到的法线方向从切线空间转换到世界空间(或其他空间)中。</p><p>总体来说，使用模型空间来存储法线的优点如下。</p><ul><li>实现简单，更加直观。我们甚至都不需要模型初始的法线和切线等信息，也就是说，计算更少。生成它也非常简单，而如果要生成切线空间下的法线纹理，由于模型的切线一般是和UV方向相同，因此想要得到效果比较好的法线映射就要求纹理映射也是连续的。</li><li>在纹理坐标的缝合处和尖锐的边角部分，可见的突变(缝隙)较少，即可以提供平滑的边界。这是因为模型空间下的法线纹理存储的是同一坐标系下的发现信息，因此在边界处通过插值得到的法线可以平滑变化。而切线空间下的法线纹理中的法线信息是依靠纹理坐标的方向得到的结果，因此可能会在边缘处或者尖锐的部分造成更多可见的缝合迹象。</li></ul><p>但是使用切线空间有更多的优点</p><ul><li>自由度很高。模型空间下的法线纹理记录的是<strong>绝对法线信息</strong>，仅可以用于创建它时的那个模型，而应用到其他模型上的效果就完全错误了。而切线空间下的法线纹理记录的是相对法线信息，这意味着，即便是把该纹理应用到一个完全不同的网格上，也可以得到一个合理的结果。</li><li>可进行UV动画。比如，我们可以移动一个纹理的UV坐标来实现一个凹凸移动的效果，但使用模型空间下的法线纹理会得到完全错误的结果。原因同上。这种UV动画在水或者火山熔岩这种类型的物体上会经常用到。</li><li>可以重用法线纹理。比如，一个砖块，我们仅使用一张发现纹理就可以用到所有的6个面上，原因同上。</li><li>可压缩。由于切线空间下的法线纹理中法线Z方向总是正方向，因此我们可以仅存储XY方向，进而推到Z方向。而模型空间下的法线纹理由于每个方向都是可能的，因此必须存储3个方向的值，不可压缩。</li></ul><p>切线空间下的法线纹理的前两个优点足以让很多人放弃模型空间下的法线纹理而选择它。从上面的优点可以看出，切线空间在很多情况下都优于模型空间，而且可以节省美术人员的工作，因此我们也会主要使用切线空间下的法线纹理。</p><h3 id="实践">实践</h3><p>我们需要在计算光照模型中统一各个方向矢量所在的坐标空间。由于法线纹理中存储的法线是切线空间下的方向，因此我们通常有两种选择：一种选择是在切线空间下进行光照计算，此时我们需要把光照方向、视角方向变换到坐标空间下；另一种选择是在切线空间下进行光照计算，此时我们需要把采样得到的法线方向变换到切线空间下，再和世界空间下的光照方向和视角方向进行计算。从效率上来说，第一种方式要由于第二种方式，因为我们可以在顶点着色器中完成对光照方向和视角方向的转变，而第二种方法由于要先对法线纹理进行采样，所以变换过程必须在片元着色器中实现，这就意味着我们在片元着色器中要进行一次矩阵操作。但从通用性角度来说，第二种方法要优于第一种方法，因为有的时候我们需要在世界空间下进行一些计算，例如在使用Cubemap进行环境映射，我们需要使用世界空间下的反射方向对Cubmap进行采样。如果同时需要进行法线映射，我们就需要把法线方向变换到世界空间下。当然我们也可以选择其他坐标空间进行计算，例如模型空间，但是切线空间和世界空间是最为常用的两种空间，本节会依次实现上面两种方法。</p><ol><li>在切线空间下计算</li></ol><p>我们首先来实现第一种方法，即在切线空间下计算光照模型。基本思路是：在片元着色器中通过纹理采样得到切线空间下的法线，然后再与切线空间下的视角方向、光照方向等进行计算，得到最终的光照结果。</p><p>为此，我们首先需要在顶点着色器中把视角方向和光照方向从模型空间变换到切线空间中，即我们需要知道从模型空间到切线空间的变换矩阵。这个变换矩阵的逆矩阵，即从切线空间到模型空间的变换矩阵是非常容易求的，我们在顶点着色器中按切线(x轴)、副切线(y轴)、法线(z轴)的顺序按<strong>列</strong>排列即可。我们已经知道，如果一个变换中仅有平移和旋转变换，那么这个变换的逆变换矩阵就等于它的转置矩阵，而从切线空间到模型空间的变换正是符合这样要求的变换。因此，从模型空间到切线空间的变换矩阵就是从切线空间到模型空间变换矩阵的转置矩阵，我们把切线(x轴)、副切线(y轴)、法线(z轴)的顺序按<strong>行</strong>排列即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;UnityShaderBook/Chapter 7/NormalMapInTangentSpace&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;Colcor Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;MainTex&quot;,2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _BumpMap (&quot;Normal Map&quot;, 2D) = &quot;bump&quot; &#123;&#125;</span><br><span class="line">        _BumpScale (&quot;Bump Scale&quot;, Float) = 1.0</span><br><span class="line">        _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(8.0,256)) = 20</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;  </span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            fixed4 _MainTex_ST;</span><br><span class="line">            sampler2D _BumpMap;</span><br><span class="line">            float4 _BumpMap_ST;</span><br><span class="line">            float _BumpScale;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            float _Gloss;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float4 uv : TEXCOORD0;</span><br><span class="line">                float3 lightDir : TEXCOORD1;</span><br><span class="line">                float3 viewDir : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;</span><br><span class="line">                o.uv.zw = v.texcoord.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;</span><br><span class="line"></span><br><span class="line">                TANGENT_SPACE_ROTATION;</span><br><span class="line"></span><br><span class="line">                o.lightDir = mul(rotation, ObjSpaceLightDir(v.vertex)).xyz;</span><br><span class="line"></span><br><span class="line">                o.viewDir = mul(rotation, ObjSpaceViewDir(v.vertex)).xyz;</span><br><span class="line">                </span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                fixed3 tangentLightDir = normalize(i.lightDir);</span><br><span class="line">                fixed3 tangentViewDir = normalize(i.viewDir);</span><br><span class="line"></span><br><span class="line">                fixed4 packedNormal = tex2D(_BumpMap, i.uv.zw);</span><br><span class="line">                fixed3 tangentNormal;</span><br><span class="line"></span><br><span class="line">                tangentNormal = UnpackNormal(packedNormal);</span><br><span class="line">                tangentNormal.xy *= _BumpScale;</span><br><span class="line">                tangentNormal.z = sqrt(1.0 - saturate(dot(tangentNormal.xy,tangentNormal.xy)));</span><br><span class="line"></span><br><span class="line">                fixed3 albedo = tex2D(_MainTex,i.uv.xy).xyz * _Color.rgb;</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * saturate(dot(tangentNormal, tangentLightDir));</span><br><span class="line"></span><br><span class="line">                fixed3 halfDir = normalize(tangentViewDir + tangentLightDir);</span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(tangentNormal, halfDir)), _Gloss);</span><br><span class="line">                </span><br><span class="line">                return fixed4(ambient + diffuse + specular,1);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在世界空间下计算<br>现在我们来实现第二种方法，即在世界空间下计算光照模型。我们需要在片元着色器中把法线方向从切线空间变换到世界空间下。这种方法的基本思想是：在顶点着色器中</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 7/NormalMapWorldSpace&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _BumpMap (&quot;BumpMap&quot;, 2D) = &quot;bump&quot; &#123;&#125;</span><br><span class="line">        _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _BumpScale (&quot;BumpScale&quot;, Float) = 1.0</span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(8.0, 256)) = 20</span><br><span class="line">        _Color (&quot;Color Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            fixed4 _MainTex_ST;</span><br><span class="line">            sampler2D _BumpMap;</span><br><span class="line">            fixed4 _BumpMap_ST;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            float _Gloss;</span><br><span class="line">            float _BumpScale;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : POSITION;</span><br><span class="line">                float4 uv : TEXCOORD0;</span><br><span class="line">                float4 TtoW0 : TEXCOORD1;</span><br><span class="line">                float4 TtoW1 : TEXCOORD2;</span><br><span class="line">                float4 TtoW2 : TEXCOORD3;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;</span><br><span class="line">                o.uv.zw = v.texcoord.xy * _BumpMap_ST.xy + _BumpMap_ST.zw;</span><br><span class="line"></span><br><span class="line">                // 求变换矩阵</span><br><span class="line">                float3 worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line"></span><br><span class="line">                fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                fixed3 worldTangent = UnityObjectToWorldDir(v.tangent);</span><br><span class="line">                fixed3 worldBinormal = cross(worldNormal, worldTangent) * v.tangent.w;</span><br><span class="line"></span><br><span class="line">                o.TtoW0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);</span><br><span class="line">                o.TtoW1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);</span><br><span class="line">                o.TtoW2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);</span><br><span class="line">                </span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                float3 worldPos = float3(i.TtoW0.w, i.TtoW1.w, i.TtoW2.w);</span><br><span class="line">                fixed3 worldLightDir = normalize(UnityWorldSpaceLightDir(worldPos));</span><br><span class="line">                fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));</span><br><span class="line"></span><br><span class="line">                fixed3 bump = UnpackNormal(tex2D(_BumpMap, i.uv.zw));</span><br><span class="line">                bump.xy *= _BumpScale;</span><br><span class="line">                bump.z = sqrt(1.0 - saturate(dot(bump.xy, bump.xy)));</span><br><span class="line">                bump = normalize(half3(dot(i.TtoW0.xyz, bump), dot(i.TtoW1.xyz, bump), dot(i.TtoW2.xyz, bump)));</span><br><span class="line"></span><br><span class="line">                fixed3 albedo = tex2D(_MainTex, i.uv.xy).rgb * _Color.rgb;</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo.rgb * saturate(dot(bump, worldLightDir));</span><br><span class="line"></span><br><span class="line">                fixed3 halfDir = normalize(bump + worldLightDir);</span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(bump, halfDir)), _Gloss);</span><br><span class="line">                </span><br><span class="line">                return fixed4(ambient + diffuse + specular, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Unity中的法线纹理类型">Unity中的法线纹理类型</h2><p>将法线纹理的纹理类型标识成Normal Map时，可以使用Unity的内置函数UnpackNormal来得到正确的法线方向。<br>当我们需要使用那些包含了法线映射的内置的Unity Shader时，必须把使用的法线纹理按照上面的方式标识成Normal map才能得到正确的结果(即使你忘了这么做，Unity也会在材质面板中提醒你修正这个问题)，这是因为这些Unity Shader都使用了内置的unpackNormal函数来采样法线方向。那么，当我们把纹理类型设置成Normal map的时候到底发生了什么呢？为什么要这么做呢？<br>简单来说，这么做可以让Unity根据不同平台对纹理进行压缩，例如使用DXT5nm格式，再通过UnpackNormal函数来针对不同的压缩格式对法线纹理进行正确的采样。我们可以再UnityCG.cginc里面找到UnpackNormal函数的内部实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">inline fixed3 UnpackNormalDXT5nm(fixed4 packednormal)&#123;</span><br><span class="line">    fixed3 normal;</span><br><span class="line">    normal.xy = packednormal.wy *2 - 1;</span><br><span class="line">    normal.z = sqrt(1 - saturate(dot(normal.xy, normal.xy)));</span><br><span class="line">    return normal; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline fixed3 UnpackNormal(fixed4 packnormal)&#123;</span><br><span class="line">#if defined(UNITY_NO_DXT5nm)</span><br><span class="line">    return packednormal.xyz * 2 - 1;</span><br><span class="line">#else</span><br><span class="line">    return UnpackNormalDXT5nm(packednormal);</span><br><span class="line">#endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看出，在某些平台上由于使用了DXT5nm的压缩格式，因此需要针对这种格式对法线进行解码。在DXT5nm格式的法线纹理中，纹素的a通道(即w分量)对应了法线的x分量，g通道对应了法线的y分量，而纹理的r和b通道则会被舍弃法线的z分量可以由xy分量推导而得。为什么之前的普通纹理不能按照这种方式压缩，而法线就需要使用DXT5nm格式来进行压缩呢？这是因为，按照我们之前的处理方式，法线纹理被当成一个和普通纹理无异的图，但实际上，它只有两个通道是真正必不可少的，因为第三个通道的值可以用另外两个推导出来(法线是单位向量，并且切线空间下的法线方向的z分量始终为正)。使用这种压缩方法就可以减少法线纹理占用的内存空间。</p><p>当我们把纹理类型设置成normal map之后，还有一个复选框是Creat from Grayscale，那么它是做什么用的呢？还记得我们在本节一开始提到的另一种凹凸映射的方法，即使用高度图，而这个复选框就是用于从高度图中生成法线纹理的。高度图本身记录的是相对高度，是一张灰度图，白色部分相对更高，黑色表示相对更低。当我们把一张高度图导入Unity后，除了需要把它的纹理类型设置成Normal map外，还需要勾选Create from Grayscale，这样就可以得到类似下图的结果。然后，我们就可以把它和切线空间下的法线纹理等同对待了。</p><h1>渐变纹理</h1><p>尽管在一开始，我们在渲染中使用纹理是为了定义一个物体的颜色，但是后来人们发现，纹理其实可以用于存储任何表面属性。一种常见的用法就是使用渐变纹理来控制漫反射的光照结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 7/Ramp Texture&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _RampTex (&quot;Ramp&quot;, 2D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _Color (&quot;Color Tint&quot;, Color) = (1,1,1,1)git</span><br><span class="line">        _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(8.0, 256)) = 20</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">               </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            </span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            sampler2D _RampTex;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            fixed4 _RampTex_ST;</span><br><span class="line">            float _Gloss;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                // 把UV传过去也不用</span><br><span class="line">                // 可以把uv这个字段移除掉</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _RampTex);</span><br><span class="line">                </span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) :SV_Target&#123;</span><br><span class="line"></span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                fixed3 lightDir = normalize(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">                fixed halfLambert = 0.5 * dot(worldNormal, lightDir) + 0.5;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuseColor = tex2D(_RampTex, fixed2(halfLambert, halfLambert)).rgb * _Color.rgb;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * diffuseColor;</span><br><span class="line"></span><br><span class="line">                fixed3 viewDir = UnityWorldSpaceViewDir(i.worldPos);</span><br><span class="line"></span><br><span class="line">                fixed3 halfDir = normalize(viewDir + lightDir);</span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(worldNormal, halfDir)), _Gloss);</span><br><span class="line"></span><br><span class="line">                return fixed4(diffuse + ambient + specular,1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，我们需要把渐变纹理的Wrap Mode设为<code>Clamp</code>模式，以防止对纹理进行采样时由于浮点数的精度而造成的问题。</p><h1>遮罩纹理</h1><p>遮罩纹理(mask texture)是本章要介绍的最后一种纹理，它非常有用，在很多商业游戏中都可以见到它的身影。那么什么是遮罩呢？简单来讲，遮罩允许我们可以保护某些区域，使它们免于某些修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;ShaderBook/Chapter7/MaskTexture&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;Color Tint&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _MainTex (&quot;Main Tex&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _BumpMap (&quot;Normal Map&quot;, 2D) = &quot;bump&quot; &#123;&#125;</span><br><span class="line">        _BumpScale (&quot;Bump Scale&quot;, Float) = 1.0</span><br><span class="line">        </span><br><span class="line">        _SpecularMask (&quot;Specular Mask&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _SpecularScale (&quot;SpecularScale&quot;, Float) = 1.0</span><br><span class="line">        _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">        </span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(8.0, 256)) = 8.0</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;            </span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            </span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            sampler2D _MainTex;</span><br><span class="line">            fixed4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">            sampler2D _BumpMap;</span><br><span class="line">            float _BumpScale;</span><br><span class="line"></span><br><span class="line">            sampler2D _SpecularMask;</span><br><span class="line">            float _SpecularScale;</span><br><span class="line"></span><br><span class="line">            fixed4 _Specular;</span><br><span class="line"></span><br><span class="line">            float _Gloss;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;****</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                float3 lightDir : TEXCOORD1;</span><br><span class="line">                float3 viewDir : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.uv.xy = v.texcoord.xy * _MainTex_ST.xy + _MainTex_ST.zw;</span><br><span class="line"></span><br><span class="line">                TANGENT_SPACE_ROTATION;</span><br><span class="line">                o.lightDir = mul(rotation, ObjSpaceLightDir(v.vertex)).xyz;</span><br><span class="line">                o.viewDir = mul(rotation, ObjSpaceViewDir(v.vertex)).xyz;</span><br><span class="line"></span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 tangentLightDir = normalize(i.lightDir);</span><br><span class="line">                fixed3 tangentViewDir = normalize(i.viewDir);</span><br><span class="line"></span><br><span class="line">                fixed3 tangentNormal = UnpackNormal(tex2D(_BumpMap, i.uv));</span><br><span class="line">                tangentNormal.xy *= _BumpScale;</span><br><span class="line">                tangentNormal.z = sqrt(1 - saturate(dot(tangentNormal.xy, tangentNormal.xy)));</span><br><span class="line"></span><br><span class="line">                fixed3 albedo = tex2D(_MainTex, i.uv).rgb * _Color.rgb;</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * saturate(dot(tangentNormal, tangentLightDir));</span><br><span class="line">                </span><br><span class="line">                fixed3 halfDir = normalize(tangentViewDir + tangentLightDir);</span><br><span class="line"></span><br><span class="line">                fixed specularMask = tex2D(_SpecularMask, i.uv).r * _SpecularScale;</span><br><span class="line"></span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(tangentNormal, halfDir)), _Gloss) * specularMask;</span><br><span class="line"></span><br><span class="line">                return fixed4(diffuse + specular + ambient, 1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity性能优化</title>
      <link href="/posts/6e973c22/"/>
      <url>/posts/6e973c22/</url>
      
        <content type="html"><![CDATA[<p>本文是笔者近期开展性能优化工作的知识点记录，性能优化涉及渲染、内存代码逻辑等方方面面，内容特别繁杂。以笔者目前的能力没有办法将这些知识系统梳理，因此本文每小节之间并无关联性，是一个个独立的知识点。</p><h1>性能优化的原则</h1><p>本小结翻译自<a href="https://unity.com/cn/resources/ultimate-guide-to-profiling-unity-games">Unity官方的性能优化指导书</a></p><img src="/posts/6e973c22/Ultimate_Guide_to_Profiling_Unity_Games-19.jpg" class=""><h2 id="设置帧率预算">设置帧率预算</h2><h1>内存分析</h1><p>内存对运行时的性能表现的影响微乎其微，</p><p>在Unity中有两种方法来分析游戏的内存占用:</p><ul><li>Memory Profiler module: 这是Unity内置的模块，通过该模块我们可以分析我们的游戏基本的内存占用情况</li><li>Memory Profiler package: 这是一个Unity Package你可以将其安装到你的Unity项目中。这个模块为Unity Editor添加了额外的Memory Profiler窗口，让你能够更加详细地分析项目的内存使用情况。</li></ul><h1>Unity 性能分析工具</h1><p>Unity官方提供的性能分析工具有 ‘Profiler’ ‘Frame Debugger’ ‘Memory Profiler’ ‘Profile Analyzer’<br>笔者体验下来觉得这几个工具的使用还是很容易上手体验很好的</p><h2 id="判断是CPU瓶颈还是GPU瓶颈">判断是CPU瓶颈还是GPU瓶颈</h2><h2 id="Unity-Profiler">Unity Profiler</h2><p>在Unity Profiler中才看到的CPU Usage Module中 会看到一个Main Thread和Render Thread他们两个的关系是什么？<br><a href="https://forum.unity.com/threads/what-exactly-is-happening-in-the-renderthread.1011172/">Unity Forum的解答</a></p><h3 id="CPUUsage-TimeLine视图中常见的Marker">CPUUsage TimeLine视图中常见的Marker</h3><ul><li>Gfx.WaitForGfxCommandsFromMainThread : 此Marker会出现在RenderThread上，</li></ul><img src="/posts/6e973c22/image.png" class=""><h2 id="Memory-Profiler">Memory Profiler</h2><h2 id="Frame-Debugger">Frame Debugger</h2><h1>对DrawCall Batch SetCallPass的理解</h1><p>在Unity的Game窗口的工具栏上有一个Label叫Stats，激活该Label在Game窗口中会出现一个名叫Statistic的小弹窗。<br>你可以在这个小弹窗中找到Batches和SetPass calls两个字段。</p><p>那么SetPass Calls和Batches是什么？<br>DrawCall又是什么？<br>SetPass Call Batch和DrawCall的关系是什么？<br>DrawCall是一个在CPU上的操作，它指的是CPU向GPU发送一次绘制操作的命令，</p><p>在介绍SetPassCall之前，我们先确保我们能够对Shader有一个基本的了解，Shader的结构中会含有一个Pass<br>SetPassCall就和场景中所有的Material使用的Shader的Pass的个数有关， SetPassCall也是CPU向GPU发送的一种指令，用来告诉GPU要更换使用的Pass</p><p>Batches翻译过来是批次，它代表着在这一帧中CPU向GPU输送的绘制物体的次数</p><p>这是Unity的Dynamic Batching技术，如果没有这项技术的话，就会产生大量的DrawCall，Batch的意思是将多个DrawCall合并成一个DrawCall Batch的数量也就是CPU向GPU发送绘制命令的次数</p><p>在说Batches字段的含义之前，我们先来了解一下Unity的<a href="https://docs.unity3d.com/Manual/DrawCallBatching.html">合批(Batching)</a>技术，这项技术通过把一些渲染信息相同的物体合并在一起打包一并发送给GPU渲染，这些物体本来要分批次发送给GPU，现在只需要发送一次，这样就降低了CPU和GPU的渲染次数。所以Batches的含义就是在一帧内CPU最终向GPU发送绘制命令的次数，或者叫DrawCall数。但是把Batches叫做DrawCall在官方的说法中没有说的很明确，笔者觉得官方没把Batch和DrawCall的关系说的很清楚，按照笔者的理解，Batching技术把原本需要用多个DrawCall完成的绘制命令合并到一个或者几个DrawCall 也就是我们常说的合批，不过有可能这些物体的渲染状态也相同，但是最后还是因为各种原因不能合批，有可能原本十个DrawCall不能合并成一个 但是能合并成两个。</p><ul><li>如果Canvas中的UI元素的Z轴不为0 它们就无法被合批</li></ul><h1>一些想说的</h1><p>性能优化是一个十分琐碎的事，在性能优化的过程中了解了Unity底层的执行顺序、内存管理等</p><h1>参考资料</h1><ul><li><a href="https://unity.com/cn/resources/ultimate-guide-to-profiling-unity-games">Unity官方性能优化指导书</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布自定义UnityPackage到代码托管平台</title>
      <link href="/posts/a795165c/"/>
      <url>/posts/a795165c/</url>
      
        <content type="html"><![CDATA[<h1>背景</h1><p>笔者正筹划搭建自己的游戏框架，并希望基于Github和Gitee这类代码托管平台维护和迭代，实现在开发新游戏时快速移植。本文记录笔者将代码发布到Gitee上的过程。</p><h1>制定规范</h1><p>一个标准UnityPackage的内部结构大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── CHANGELOG.md</span><br><span class="line">├── README.md</span><br><span class="line">├── LICENSE.md</span><br><span class="line">├── Code</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><ul><li>README用来介绍Package的功能和用法；CHANGELOG用来记录Package所有历史版本功能修改、新增和维护日志；README和CHANGELOG不是必须的，但它们可以作为辅助文档帮助使用者更好的理解和使用该Package；而且维护README和CHANGELOG更新可以督促我们养成良好的开发习惯。</li><li>LICENSE是开源许可，如果你对你的代码版权不是很重视的话，这也是非必需的；你也可以使用最宽松的<a href="https://opensource.org/license/mit">MIT开源许可</a>。</li><li>Code是Package中实现功能的代码部分了，这一部分的细节会在实践章节中阐述。</li><li>package.json是Package中最重要的文件，它记录了Package的版本、url等各种能够标识该Package的信息，模板可以参考<a href="https://docs.npmjs.com/cli/v10/configuring-npm/package-json">npm官方文档</a>，笔者在实践章节也会给出自己使用到的模版中的字段。</li></ul><h1>实践</h1><ul><li><p>首先创建好本地项目和远端的仓库，在Asset下创建一个文件夹作为Package的根路径，依次创建好：<code>README</code>、<code>CHANGELOG</code>、<code>LICENSE</code>和<code>package.json</code>文件。</p></li><li><p>编写package.json信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.eddielee.candle-gameframework&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Candle Game Framework&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a game framework&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://gitee.com/SoIncredible/candle-game-framework.git&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eddie-lee&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2636060652@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://soincredible777.com.cn&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>编写Package代码<br>如果我们不做任何操作，我们编写的代码会被归属到名为<code>Assembly-CSharp</code>的程序集中，你可以在Unity项目的根目录下看到这个文件。为了让Package的代码独属于一个程序集，我们要<a href="https://docs.unity3d.com/Manual/ScriptCompilationAssemblyDefinitionFiles.html">划分程序集</a>。虽然这一步是非必需的，但是有意识的划分程序集能够加快你的编译速度和代码结构的清晰度，使整个项目更易于管理和维护。<br>在本文示例中，笔者在Package根目录下创建<code>Editor</code>和<code>Runtime</code>两个子目录包含在Editor和Runtime下运行的代码，然后在这两个目录下执行<code>Assets -&gt; Create -&gt; Assembly Definition</code>, 创建<code>asmdef</code>文件。注意程序集文件的名字和编译后程序集名字和该是没有关系的，程序集的命名由Inspector窗口中的Name字段决定。另外在Inspector窗口中，Runtime目录下的程序集要在Platforms部分勾所有平台都使用，而Editor目录下的程序集勾选只在Editor环境下使用。</p></li><li><p>编写好代码之后我们就可以将我们的代码上传了。按顺序输入以下指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git subtree split --prefix=Assets/yourPackageName --branch upm</span><br><span class="line"></span><br><span class="line">git tag 1.0.0 upm</span><br><span class="line"></span><br><span class="line">git push origin upm --tags</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>完成以上操作我们就完成了UnityPackage的发布。</p><h1>安装我们的Package</h1><p>打开Packages下面的manifest.json文件，在&quot;dependencies&quot;中输入我们的包名和Git仓库的地址，注意，从浏览器上复制的Git仓库地址是不带.git的，如果不带.git Unity会提示你找不到这个仓库，同时我们还需要添加#1.0.0这样的数字在末尾来安装指定版本的Package版本</p><p>开发后续版本的时候，记得更新ChangeLog、Readme还有package.json中的信息。</p><h2 id="注意">注意</h2><p>注意在配置package.json的时候 一定要在git repository的url前面添加git+,并且在url的最后添加.git，而且在其他项目中引用这个包的时候也要在url的最后添加.git</p><h1>参考资料</h1><p><a href="https://docs.unity3d.com/cn/2022.3/Manual/CustomPackages.html">Unity官方创建自定义包</a></p><p><a href="https://semver.org/lang/zh-CN/">语义版本控制介绍</a></p><p><a href="https://blog.csdn.net/qq_42672770/article/details/131193440">深入理解Unity的Asmdef</a></p><p><a href="https://zhuanlan.zhihu.com/p/258129649">【教程】使用git通过ump发布Unity插件包（PackageManager）</a></p><p><a href="https://www.patreon.com/posts/25070968">Tutorial: How to develop a package for UnityPackageManager</a></p><p><a href="https://yomunchan.moe/Post/582">使用OpenUPM发布自己的Unity项目</a></p><p><a href="https://docs.npmjs.com/cli/v10/configuring-npm/package-json">NPM Doc: package.json</a></p><p><a href="https://www.ruanyifeng.com/blog/2017/10/open-source-license-tutorial.html">开源许可介绍</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityShader入门精要笔记（六）——Unity中的基础光照</title>
      <link href="/posts/eb885af0/"/>
      <url>/posts/eb885af0/</url>
      
        <content type="html"><![CDATA[<h1>我们如何看到这个世界</h1><p>当我们说一个物体的颜色是红色时，是因为这个物体更多地反射了红光波长，而吸收了其他波长。要在计算机上模拟真实的光照环境来生成一张图像，需要考虑三个过程：</p><ul><li><p>首先， 光线从光源中被发射出来</p></li><li><p>然后，光线和场景中的一些物体相交；一些光线被物体吸收了，而另一些光线被散射到其他方向了</p></li><li><p>最后，摄像机吸收了一些光，产生了一张图像</p></li></ul><h2 id="光源">光源</h2><p>在光学中，使用<code>辐照度(irradiance)</code>来量化光。我们用<code>l</code>来表示光线的从光源射出的方向，对于平行光来说，它的辐照度可以用过计算在垂直于<code>l</code>的单位面积上单位时间内穿过的能量来得到。注意这个值表示的是<strong>垂直</strong>于光线方向上的辐照度，而我们在计算光照模型中，需要知道的是物体表面的辐照度，物体的表面往往是不垂直于<code>l</code>的，所以为了得到物体表面的辐照度，我们需要用光线方向<code>l</code>和物体表面发现<code>n</code>之间夹角的余弦值来得到。</p><h2 id="吸收和散射">吸收和散射</h2><p>光线由光源发射出来之后，就会和一些物体相交。通常相交的结果有两个：散射(scattering)和吸收(absorption)。</p><p><strong>散射只改变光线的方向，但是不改变光线的密度和颜色。而吸收只改变光线的密度和颜色，不改变光的方向。</strong></p><p>我们重点看散射部分，散射的结果也可以分成两种，第一种是散射到物体内部，被称为折射(refraction)或者透射(transmission)；第二种是散射到外部，被称为反射(reflection)。请反复理解这句话：<strong>散射到内部的光会与物体内部的颗粒相交，其中一些光线最后会重新发射出物体表面，而另一些则被物体吸收，这些从物体表面重新发射出的光线将具有和入射光线不同的方向分布和颜色。这个过程即包括散射也包括吸收。<strong>为了区分这两种不同的散射方向，我们在光照模型中使用了不同的部分来计算它们：<code>高光反射(specular)</code>部分表示物体表面是如何反射光线的，高光反射不会改变光线的颜色，<code>漫反射(diffuse)</code>部分表示有多少光会</strong>被折射、吸收和散射</strong>出表面。根据入射光线的数量和方向，我们可以计算出射光线的数量和方向，我们通常使用<code>出射度(exitance)</code>来描述它。辐照度和出射度之间是满足线性关系的，<strong>它们之间的比值就是材质的漫反射和高光反射属性</strong>。</p><img src="/posts/eb885af0/1.png" class=""><h2 id="着色">着色</h2><p><code>着色(Shading)</code>指的是：根据材质属性（如漫反射属性）、光源信息（如光源方向、辐照度），使用一个等式去计算<strong>沿着某个观察方向的出射度</strong>的过程。</p><h2 id="BRDF光照模型">BRDF光照模型</h2><p><code>BRDF(Bidirectional Reflectance Distribution Function)</code> 当给定模型表面上一个点时，BRDF包含了对该点外观的完整的描述。在图形学中，BRDF大多使用一个数学公式来表示，并且提供了在一些参数来调整材质属性。在给定入射光线的方向和辐照度之后，BRDF某个出射方向上的光照能量分布。</p><p><strong>计算机图形学第一定律：如果它看起来是对的，那么那就是对的。</strong></p><p>然而有时我们希望可以更加真实地模拟光和物体的交互，这就出现了<strong>基于物理</strong>的BRDF模型，在之后的章节会进行阐述。</p><h1>标准光照模型</h1><p>标准光照模型由学者裴祥风(Bui Tuong Phong)提出，标准光照模型只关心直接光照(direct light)，也就是那些直接从光源发射出来照射到物体表面后，经过物体表面的一次反射直接进入摄像机的光线。<br>它的基本方法是，把进入到摄像机内的光线分成4个部分，每个部分使用异种骨方法来计算它的贡献度。这四个部分是：</p><ul><li><code>自发光(emmissive)</code>部分，这个部分用于描述当给定一个方向时，一个表面本身会向该方向发射多少辐射量。需要注意的是，如果没有<code>全局光照(global illumination)</code>，这些自发光的表面并不会真的照亮周围的物体，而是它本身看起来更亮了而已。</li><li><code>高光反射(specular)</code>部分，这个部分用于描述当光线从光源照射到模型表面时，该表面会在完全镜面反射方向散射多少辐射量。</li><li><code>漫反射(diffuse)</code>部分，这个部分用来描述，当光线从光源照射到模型表面时，该表面会向每个方向散射多少辐射量。</li><li><code>环境光(ambient)</code>部分，用于描述其他所有的间接光照。</li></ul><h2 id="环境光">环境光</h2><p>虽然标准光照模型的重点在于描述直接光照，但是在真实世界中，物体也是可以<code>间接光照(indirect light)</code>所照亮。间接光照指的是，光线通常会在多个物体之间反射，最后进入摄像机。也就是说，光线在进入摄像机之前，经过了不止一次的物体反射。例如在红色地毯上放置一个灰色的沙发，那么沙发底部也会有红色，这些红色是由地毯反射了一部分光线，再反射到沙发上的。</p><p>在标准光照模型中，我们使用了一种被称为环境光的部分来近似模拟间接光照。环境光的计算十分简单，它通常是一个全局变量，即场景中的所有物体都使用这个环境光。下面这个等式给出了计算环境光的部分：</p><p>$$c_{ambient} = g_{ambient}$$</p><h2 id="自发光">自发光</h2><p>光线也可以直接由光源发射进入摄像机，而不需要经过任何物体的反射。标准光照模型使用自发光来计算这个部分的贡献度。它的计算也很简单，就是直接使用了该材质的自发光颜色：<br>$$c_{emissive} = m_{emissive}$$<br>通常在实时渲染中，自发光的表面往往不会照亮周围的表面，也就是说，这个物体并不会被当成一个光源。Unity5中引入了全新的全局光照系统可以模拟这类自发光物体对周围物体的影响，在之后的章节会阐述。</p><h2 id="漫反射">漫反射</h2><p>漫反射光照是用于对那些被物体表面随机散射到各个方向的辐射度进行建模的。在漫反射中，视角的位置是不重要的，因为反射是完全随机的，因此可以认为在任何反射方向上的分布都是一样的。到那时，入射光线的角度很重要。<br>漫反射光照符合<code>兰伯特定律(Lambert's law)</code>:<strong>反射光线的强度与表面法线和光源方向之间夹角的余弦值成正比</strong>。因此，漫反射部分的计算如下：</p><p>$$c_{diffuse} = (c_{light} · m_{diffuse})max(0, \vec{n} · \vec{l})$$</p><p>其中$\vec{n}$是表面法线，$\vec{l}$是指向光源的单位矢量，$m_{diffuse}$是材质的漫反射颜色，$c_{light}$是光源颜色。需要注意的是我们需要防止法线和光源方向点积的结果为负值，为此我们使用取最大值的函数来将其截取到0，这可以防止物体被从后面来的光源照亮。</p><h2 id="高光反射">高光反射</h2><p>这里的高光反射是一种经验模型，也就是说，它并不完全符合真实世界中的高光反射现象。它可用于计算那些沿着完全镜面反射方向被反射的光线，这可以让物体看起来是有光泽的，例如金属材质。</p><p>计算高光反射需要知道的信息比较多，比如表面法线、视角方向、光源方向、反射方向等。在本节中，我们假设这些矢量都是单位矢量。<br>在这四个矢量中，我们实际上只需要知道其中三个矢量即可，而第四个矢量——反射方向可以通过其他信息计算得到：</p><p>$$\vec{r} = 2(\vec{n} · \vec{l})\vec{n} - \vec{l}$$</p><p>这样，我们可以利用Phong模型来计算高光反射的部分：</p><p>$$c_{specular} = (c_{light} · m_{specular})max(0, \vec{v} · \vec{r})^{m_{gloss}}$$</p><p>其中，m_gloww是材质的<code>光泽度(gloss)</code>，也被称为<code>反光度(shiniess)</code>。它用于控制高光区域的亮点有多宽,$m_{gloss}$越大，亮点就越小。$m_{specular}$是材质的高光反射颜色，它用于控制该材质对于高光反射的强度和颜色。$c_{light}$则是光源的颜色和强度。同样，这里也需要防止$\vec{v} · \vec{r}$的结果为负数。</p><p>和上述Phong模型相比，Blinn提出了一个简单的修改方法来得到类似的效果。它的基本思想是，避免计算反射方向$\vec{r}$。为此Blinn模型引入了一个新的矢量$\vec{h}$，它是通过对$\vec{v}$和$\vec{l}$的取平均后再归一化得到的。即</p><p>$$\vec{h} = \frac{\vec{v} + \vec{l}}{|\vec{v} + \vec{l}|}$$</p><p>然后使用$\vec{n}$和$\vec{h}$之间的夹角进行计算，而非$\vec{v}$和$\vec{r}$之间的夹角<br>总结一下，Blinn模型的公式如下:</p><p>$$c_{specular} = (c_{light} · m_{specular})max(0, \vec{n} · \vec{h})^{m_{gloss}}$$</p><p>在硬件实现时，如果摄像机和光源距离模型足够远的话，Blinn模型会快于Phong模型，这是因为，此时可以认为$\vec{v}$和$\vec{l}$都是定值，因此$\vec{h}$将是一个常量；但是当$\vec{v}$或者$\vec{l}$不是定值的时候，Phong模型可能反而更快一些。需要注意的是，两种光照模型都是经验模型，也就是说，我们不应该认为Blinn模型是“对正确”的Phong模型的近似，实际上，在一些情况下，Blinn模型更符合实验结果。</p><h2 id="逐像素还是逐顶点">逐像素还是逐顶点</h2><p>上面我们给出了基本光照模型使用的数学公式，那么我们在哪里计算这些光照模型呢？通常来讲，我们有两种选择：在片元着色器中计算，也被称为<code>逐像素光照(per-pixel lighting)</code>；在顶点着色器中计算，也被称为<code>逐顶点光照(per-vertex lighting)</code>。<br>在逐像素光照中，我们会以每个像素为基础，得到它的法线(可以是对顶点法线插值得到的，也可以是从法线纹理中采样得到的)，然后进行光照模型的计算。这种在面片之间对顶点法线进行插值的技术被称为<code>Phong着色(Phong shading)</code>，也被称为Phong插值或者法线插值着色技术。这不同与我们前面降到的Phong光照模型。</p><p>与之相对的是顶点光照，也被称为<code>高洛德着色(Gouraud shading)</code>。在逐顶点光照中，我们在每个顶点上计算光照，然后会在渲染图元内部进行线性插值，最后输出成像素颜色。但是由于逐顶点数目往往远小于像素数目，因此逐顶点光照的计算量往往要小于逐像素的计算量。但是，由于逐顶点光照依赖于线性插值来得到像素光照，因此当光照模型中有非线性的计算(例如计算高光反射时)，逐顶点光照就会出问题。在后面的章节中就会看到这种情况。而且由于逐顶点光照会在渲染图元内部对顶点颜色进行插值，这回导致渲染图元内部的颜色总是暗于顶点处的最高颜色值，这在某些情况下会产生明显的棱角现象。</p><p>想象一下，如果要渲染一个三角形，使用逐顶点光照的计算方式我们只需要计算三个顶点的光照，而如果我们要使用逐像素的方式，显然构成这个三角形的像素要大于三。因此，逐像素光照的性能开销要高于逐顶点光照。</p><h2 id="总结">总结</h2><p>虽然标准光照模型仅仅是一个<strong>经验模型</strong>，也就是说，它并不完全符合真实世界的光照现象。但由于它的易用性、计算速度和得到的效果都比较好，因此仍然被广泛使用。而也是由于它的广泛适用性，这种标准光照模型由很多不同的叫法。例如一些资料中称它为<code>Phong光照模型</code>，因为裴祥风首先提出了使用漫反射和高光反射的和来对反射光照尽性建模的基本思想，并且提出了基于经验的计算高光反射的方法(用于计算漫反射光照的兰伯特模型在那时已经被提出了)。随后，由于Blinn的方法简化了计算而且在某些情况下计算更快，我们把这种模型称为<code>Blinn-Phong光照模型</code>。</p><p>但是这种模型有很多局限性。首先，有很多重要的物理现象无法用Blinn-Phong模型表现出来，例如<code>菲涅耳反射(Fresnel reflection)</code>。其次，Blinn-Phong模型是<code>各项同性(isotropic)</code>，也就是说，当我们固定视角和光源方向旋转这个表面的时候，反射不会发生任何改变。但是有些表面是具有<code>各向异性(anisotropic)</code>反射性质的，例如金属拉丝、毛发等。在第18章中会学习基于物理的光照模型，这些光照模型更加复杂，同时也可以更加真实地反应光和物体的交互。</p><h1>Unity中的环境光和自发光</h1><p>在标准光照模型中，环境光和自发光的计算是最简单的。<br>在Unity中，场景中的环境光可以在<code>Window-&gt;Rendering-&gt;Lighting-&gt;Environment-&gt;EnvironmentLighting</code>中控制，首先在Source选择Color，然后就能看到Ambient Color选项了。在Shader中我们只需要通过Unity的内置变量<code>UNITY_LIGHTMODEL_AMBIENT</code>就可以得到环境光的颜色和强度信息。</p><p>而大多数物体是没有自发光特性的，因此在本书中绝大部分的Shader中都没有计算自发光部分，如果要计算自发光也十分简单，我们只需要在片元着色器输出最后的颜色之前，把材质的自发光颜色添加到输出颜色上即可。</p><h1>在Unity Shader中实现漫反射光照模型</h1><p>在了解了上述理论之后，现在来看一下如何在Unity中实现这些基本的光照模型。首先我们来实现标准光照模型中的漫反射部分。<br>在前面的章节中我们给出了基本光照模型中漫反射部分的计算公式：<br>$$c_{diffuse} = (c_{light} · m_{diffuse})max(0,\vec{n} · \vec{l})$$<br>从公式可以看出，要计算漫反射需要知道4个参数：入射光线的颜色和强度、材质的漫反射系数、表面法线$\vec{n}$以及光源方向$\vec{l}$。<br>为了防止点击的结果为负，我们需要使用max操作，Cg提供了这样的函数<code>saturate(x)</code>参数x是用来操作的标量或者矢量，可以是float、float2、float3等类型。它同来把x截取在[0,1]范围内，如果x是一个矢量，那么会对它的每一个分量进行这个操作。</p><h2 id="实践：逐顶点光照">实践：逐顶点光照</h2><h3 id="准备工作">准备工作</h3><ul><li>创建好场景</li><li>在场景中添加一个平行光</li><li>去掉场景中的天空盒子 在Unity2022中，笔者是通过设置MainCamera中的ClearFlags去除的天空盒，与书上有些出入</li><li>创建一个胶囊体</li></ul><h3 id="编写Shader">编写Shader</h3><p>需要注意的点：</p><ol><li>要包括头文件</li><li>要正确设置LightMode，只有这样我们才能正确获得_</li><li>要把Diffuse暴露在材质的面板上，并将这个属性和Shader中的脚本联系起来</li><li>顶点的法线和光源方向要归一化，还是要搞清楚_WorldSpaceLightPos0的含义</li></ol><p>Shader代码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 6/Diffuse Vertex Level&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">          _Diffuse (&quot;Diffuse&quot;, Color) = (1,1,1,1)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                fixed3 color : COLOR;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            // 漫反射如何计算？</span><br><span class="line">            // 逐顶点光照需要在顶点着色器中进行光照的计算</span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                fixed3 worldNormal = normalize(UnityObjectToWorldNormal(v.normal));</span><br><span class="line">                fixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                fixed3 diffuse =  _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight));</span><br><span class="line">                o.color = ambient + diffuse;</span><br><span class="line">                </span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                return fixed4(i.color, 1);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Fallback &quot;Diffuse&quot;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实践：逐像素光照">实践：逐像素光照</h2><p>准备工作同上</p><p>我们只需要对Shader进行一点更改就可以得到逐像素的漫反射效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 6/Diffuse Pixel Level&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse (&quot;Diffuse&quot;, Color) = (1,1,1,1)    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;       </span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            // 半兰伯特模型是在逐像素的漫反射光照明模型的基础上实现的。</span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                </span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldNormal = normalize(UnityObjectToWorldNormal(v.normal));</span><br><span class="line">                </span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                fixed3 amibient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                </span><br><span class="line">                fixed3 worldSpaceLightDir = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(i.worldNormal, worldSpaceLightDir));</span><br><span class="line">                // fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * (dot(i.worldNormal, worldSpaceLightDir) * 0.5 + 0.5) ;</span><br><span class="line">                </span><br><span class="line">                fixed3 color = amibient + diffuse;</span><br><span class="line">                return fixed4(color,1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逐像素光照可以达到更加平滑的效果，但是即便是使用了逐像素漫反射光照，有一个问题仍然存在，在光照无法到达的区域，模型的外观通常全是黑色的，没有任何明暗变化，这会使得模型的背光区域看起来就像一个平面一样，失去了模型细节的表现。事实上我们可以通过添加环境光来得到非全黑的效果，但即便这样仍然无法解决背光明暗一样的缺点。为此，有一种改善技术被提出来，这就是<code>半兰伯特(Half Lambert)光照模型</code>。</p><h3 id="编写Shader-2">编写Shader</h3><p>这次我们要在片元着色器中进行光照的计算</p><h2 id="半兰伯特模型">半兰伯特模型</h2><p>在前面几个小节中我们使用到的漫反射光照模型也被称为兰伯特光照模型，因为它符合兰伯特定律——在平面某点漫反射光的强度与该反射点的法向量和入射光角度的余弦值成正比。<br>为了改善在6.4.2小节最后提出的问题，Valve公司在开发游戏《半条命》时提出了一种技术，由于该技术是在原兰伯特光照模型的基础上进行了一个简单的修改，因此被称为半兰伯特光照模型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 6/Half Lambert&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse (&quot;Diffuse&quot;, Color) = (1,1,1,1)    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;       </span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            // 半兰伯特模型是在逐像素的漫反射光照明模型的基础上实现的。</span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                </span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldNormal = normalize(UnityObjectToWorldNormal(v.normal));</span><br><span class="line">                </span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                fixed3 amibient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                </span><br><span class="line">                fixed3 worldSpaceLightDir = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                // fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(i.worldNormal, worldSpaceLightDir));</span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * (dot(i.worldNormal, worldSpaceLightDir) * 0.5 + 0.5) ;</span><br><span class="line">                </span><br><span class="line">                fixed3 color = amibient + diffuse;</span><br><span class="line">                return fixed4(color,1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Fallback &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>半兰伯特模型是没有任何物理依据的，它仅仅是一个视觉加强技术。</p><h1>在Unity Shader中实现高光反射光照模型</h1><p>基本光照模型中的高光反射部分的计算公式是：<br>$$c_{specular} = (c_{light} \cdot m_{specular})max(0, \vec{v} \cdot \vec{r})^{m_{gloss}}$$</p><p>从公式可以看出，要计算高光反射需要知道4个参数：入射光线的颜色和强度$c_{light}$，材质的高光反射系数$m_{specular}$，视角方向$\vec{v}$以及反射方向$\vec{r}$。其中，反射方向$\vec{r}$可以由表面法线$\vec{n}$和光源方向$\vec{l}$计算而得：<br>$$\vec{r} = \vec{l} - 2(\vec{n} \cdot \vec{l})\vec{n}$$</p><p>上述公式很简单，更幸运的是，Cg提供了计算反射方向的函数reflect。</p><blockquote><p><strong>函数</strong>：reflect(i,n)<br><strong>参数</strong>：i，入射方向；n法线方向。可以是float、float2、float3等类型<br><strong>描述</strong>：当给定入射方向i和法线方向n时，reflect函数可以返回反射方向</p></blockquote><h2 id="实践：逐顶点光照-2">实践：逐顶点光照</h2><p>逐顶点光照的高光反射是在逐顶点漫反射光照效果的基础上加入逐顶点高光反射的计算实现的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 6/Specular Vertex Lvel&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(8.0, 256)) = 20</span><br><span class="line">        _Diffuse (&quot;Diffuse&quot;, Color) = (1,1,1,1)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            </span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            float _Gloss;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                fixed3 color : COLOR;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                </span><br><span class="line">                // 环境光</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line">                </span><br><span class="line">                // 漫反射部分一样</span><br><span class="line">                // 计算世界坐标下的归一化的法线方向</span><br><span class="line">                fixed3 worldNormal = normalize(UnityObjectToWorldNormal(v.normal));</span><br><span class="line"></span><br><span class="line">                fixed3 worldLight = normalize(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                </span><br><span class="line">                // 知道光照强度</span><br><span class="line">                fixed3 diffuse =  _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, worldLight));</span><br><span class="line">                </span><br><span class="line">                // 高光反射部分</span><br><span class="line"></span><br><span class="line">                fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - mul(unity_ObjectToWorld, v.vertex).xyz);</span><br><span class="line"></span><br><span class="line">                fixed3 reflectDir = normalize(reflect(-worldLight,worldNormal));</span><br><span class="line">                </span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(viewDir , reflectDir)), _Gloss);</span><br><span class="line">                </span><br><span class="line">                o.color = diffuse + ambient + specular;</span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target&#123;</span><br><span class="line">                return fixed4 (i.color,1);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于高光反射部分，我们首先计算了入射光线方向关于表面法线的反射方向reflectDir。由于Cg的relect函数的入射方向要求是由光源指向交点处的，因此我们需要对worldLightDir取反后再传给reflect函数。然后我们通过_WorldSpaceCameraPos得到了世界空间中摄像机的位置，再把顶点位置从模型空间变换到世界空间下，再通过和_WorldSpaceCameraPos相减即可得到世界空间下的视角方向。</p><p>由此，我们已经得到了所有的四个参数，代入公式即可得到高光反射的光照部分。最后，再和环境光、漫反射相加存储到最后的颜色中。</p><h2 id="实践：逐像素光照-2">实践：逐像素光照</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 6/Specular Pixel Level&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse (&quot;Diffuse&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(8,256))  = 20</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;       </span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            float _Gloss;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float4 worldPos : TEXCOORD0;</span><br><span class="line">                float3 worldNormal : TEXCOORD1;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line"></span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">                fixed3 lightDir = normalize(_WorldSpaceLightPos0);</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                </span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, lightDir)); </span><br><span class="line"></span><br><span class="line">                fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - i.worldPos.xyz);</span><br><span class="line">                fixed3 reflectDir = normalize(reflect(-lightDir,worldNormal));</span><br><span class="line">                </span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(viewDir, reflectDir)), _Gloss);</span><br><span class="line"></span><br><span class="line">                fixed3 color = diffuse + ambient + specular;</span><br><span class="line">                return fixed4(color,1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Blinn-Phong光照模型">Blinn-Phong光照模型</h2><p>在6.5.2小节中，我们给出了Phong光照模型在Unity中的实现，而在6.2.4小节中，我们还提到了另一种高光反射的实现方法——Blinn光照模型。回忆一下，Blinn模型没有使用反射方向，而是引入了一个新的矢量$\vec{h}$，它是通过对视角方向$\vec{v}$和光照方向$\vec{l}$相加后再归一化得到的。即<br>$$\vec{h} = \frac{\vec{v} + \vec{l}}{|\vec{v} + \vec{l}|}$$</p><p>而Blinn模型计算高光反射的公式如下：<br>$$c_{specular} = (c_{light} \cdot m_{specular}) max(0, \vec{n} \cdot \vec{h})^{m_{gloss}}$$</p><p>Blinn-Phong模型的实现和6.5.2节中的代码很类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 6/Blinn-Phong&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse (&quot;Diffuse&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(8,256))  = 20</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;       </span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            float _Gloss;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float4 worldPos : TEXCOORD0;</span><br><span class="line">                float3 worldNormal : TEXCOORD1;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line"></span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">                fixed3 lightDir = normalize(_WorldSpaceLightPos0);</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                </span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, lightDir)); </span><br><span class="line">                </span><br><span class="line">                fixed3 viewDir = normalize(_WorldSpaceCameraPos.xyz - i.worldPos.xyz);</span><br><span class="line"></span><br><span class="line">                fixed3 halfDir = normalize(viewDir+lightDir);</span><br><span class="line">                </span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(worldNormal, halfDir)), _Gloss);</span><br><span class="line"></span><br><span class="line">                fixed3 color = diffuse + ambient + specular;</span><br><span class="line">                return fixed4(color,1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>召唤神龙——使用Unity内置函数</h1><p>在计算光照模型的时候，我们往往需要得到光源的方向、视角方向这两个基本的信息，在上面的例子中，我们都是自行在代码中计算的，例如使用normalize(_WorldSpaceLightPos0.xyz)来得到光源的方向（这种方法实际只使用于平行光），使用normalize(_WorldSpacecameraPos.xyz - i.worldPosition.xyz)来得到视角方向。但如果需要处理更复杂的光照类型，如点光源和聚光灯，我们计算光源方向的方法就是错误的。这需要我们在代码中先判断光源的类型，再计算光源的信息。</p><p>手动计算这些光源信息的过程比较麻烦，幸运的是，Unity提供了一些内置函数来帮助我们计算这些信息。在之前的章节中，我们给出了unityCG.cginc里面一些非常有用的帮助函数，这里我们再次回顾一下他们：</p><table><thead><tr><th>函数名</th><th>描述</th></tr></thead><tbody><tr><td>float3 WorldSpaceViewDir(float4 v)</td><td>输入一个模型空间中的顶点位置，返回世界空间中从该点到摄像机的观察方向。内部实现了使用UnityWorldSpaceViewDir函数</td></tr><tr><td>float3 UnityWorldSpaceviewDir(float4 v)</td><td>输入一个世界空间中的顶点位置，返回世界空间中从该点到摄像机的观察方向</td></tr><tr><td>float3 ObjSpaceViewDir(float4 v)</td><td>输入一个模型空间中的顶点位置，返回模型空间中从该点到摄像机的观察方向</td></tr><tr><td>float3 WorldSpaceLightDir(float4 v)</td><td><strong>仅可以用于前前向渲染中</strong>。输入一个模型空间中的顶点位置，返回世界空间中从该点到光源的光照方向。内部实现使用了UnityWorldSpaceLightDir函数，没有被归一化</td></tr><tr><td>float3 UnityWorldSpaceLightDir(float4 v)</td><td><strong>仅可以用于前向渲染中</strong>。输入一个世界空间中的顶点位置，返回世界空间中从该点到光源的光照方向。没有被归一化。</td></tr><tr><td>float3 ObjSpaceLightDir(float4 v)</td><td><strong>仅可以用于前向渲染中</strong>。输入一个模型空间中的顶点位置，返回模型空间中从该点到光源的光照方向，没有被归一化。</td></tr><tr><td>float3 UnityObjectToWorldNormal(float3 norm)</td><td>把法线方向从模型空间转换到世界空间中</td></tr><tr><td>float UnityObjectToWorldDir(float3 dir)</td><td>把方向矢量从模型空间变换到世界空间中</td></tr><tr><td>float3 unityWorldToObjectDir(float3 dir)</td><td>把方向矢量从是世界空间变换到模型空间中</td></tr></tbody></table><p>需要注意的是，这些函数都没有保证得到的方向矢量是单位矢量，因此，我们需要在使用前把它们归一化。</p><p>下面我们使用Unity内置的函数修改我们再Blinn-Phong小节的Shader代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Shader &quot;Unity Shader Book/Chapter 6/Blinn-Phong&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse (&quot;Diffuse&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Specular (&quot;Specular&quot;, Color) = (1,1,1,1)</span><br><span class="line">        _Gloss (&quot;Gloss&quot;, Range(8,256))  = 20</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;       </span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            #pragma vertex vert</span><br><span class="line">            #pragma fragment frag</span><br><span class="line"></span><br><span class="line">            #include&quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            float _Gloss;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float4 worldPos : TEXCOORD0;</span><br><span class="line">                float3 worldNormal : TEXCOORD1;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line"></span><br><span class="line">                o.pos = mul(unity_MatrixMVP, v.vertex);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line"></span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"></span><br><span class="line">                fixed3 lightDir = normalize(WorldSpaceLightDir(i.worldPos));</span><br><span class="line">                fixed3 worldNormal = normalize(i.worldNormal);</span><br><span class="line">                </span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _Diffuse.rgb * saturate(dot(worldNormal, lightDir)); </span><br><span class="line">                </span><br><span class="line">                fixed3 viewDir = normalize(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">                fixed3 halfDir = normalize(viewDir+lightDir);</span><br><span class="line">                </span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(saturate(dot(worldNormal, halfDir)), _Gloss);</span><br><span class="line"></span><br><span class="line">                fixed3 color = diffuse + ambient + specular;</span><br><span class="line">                return fixed4(color,1.0);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UnityShader </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于CommandBuffer的Bloom效果的实现</title>
      <link href="/posts/257b5b2c/"/>
      <url>/posts/257b5b2c/</url>
      
        <content type="html"><![CDATA[<h1>背景</h1><p>最近在配合动效同事使用后处理技术实现Bloom辉光的效果。首先如果要实现Bloom效果是必须开启HDR的，开启HDR之后内存里会增加两个RenderTexture，并且随着屏幕分辨率的增加这两个Render Texture会越来越大，这是无法避免的一部分开销。一开始我们使用的是Unity官方提供的兼容Build-in渲染管线的<a href="https://docs.unity3d.com/Packages/com.unity.postprocessing@3.4/manual/index.html">Post Processing stack V2</a>后处理插件，这个插件十分强大，除了Bloom效果还能实现很多其他的后处理效果。但同时这个插件的开销实在是太大了，在使用了这个插件之后我们只是为了实现一个Bloom效果而造成这么大的内存效是得不偿失的。比起我们要实现的Bloom效果，使用这个插件造成的开销是无法接受的。<br>为了做优化打出包来做了性能对比分析，发现整个插件造成的主要开销在内存占用上。<br>在网上找到了一个Bloom插件，但是插件已经比较老了，还是基于Graphics.Blit的方式实现的后处理效果，因此笔者在此插件的基础上实现了基于CommandBuffer的Bloom效果。</p><h1>前置知识</h1><h2 id="大概方案">大概方案</h2><h1>Post Processing后处理</h1><p>后处理值得是在渲染完整个场景得到屏幕图像后，再对这个图像进行一系列的操作，实现各种屏幕特效。<br>要实现后处理，需要用到Unity提供的接口：OnRenderImage函数，这个函数的调用时机是在所有的Shader中不透明和透明的Pass全部执行完毕后调用的</p><h1>Bloom效果</h1><p>Bloom效果模拟真实摄像机，让图片中的较亮区域“扩散”到周围区域，造成一种朦胧的效果。</p><h2 id="Bloom效果实现原理">Bloom效果实现原理</h2><p>Bloom的实现原理比较简单：首先根据一个阈值提取出图像中较亮的部分，把它们存储在一张渲染纹理(RenderTexture)中；再利用一些模糊算法对这张纹理进行模糊处理，模拟光线扩散的效果；最后再将其和原图像进行混合，得到最终的效果。</p><h2 id="Bloom效果实现">Bloom效果实现</h2><h3 id="Bloom的Shader实现">Bloom的Shader实现</h3><p>上文提到实现Bloom效果需要三个环节：提取高亮、进行模糊、与原图像混合。那么我们就要在Shader中去编写三个Pass分别处理这三个阶段。<br>另外考虑到移动平台的性能瓶颈，因此使用一些可选的操作项</p><p><strong>阶段一：提取图片高亮部分</strong></p><p><strong>阶段二：将高亮部分模糊处理</strong></p><p><strong>阶段三：将模糊处理后的图像与原图混合</strong></p><h3 id="提取高亮部分-结合Shader入门精要">提取高亮部分 结合Shader入门精要</h3><p>首先获得相机的屏幕纹理</p><p>对SetGlobalTexture的理解<br>CommandBuffer和Shader类中都可以执行一个SetGlobalTexture的方法，这个方法的使用还是要说一下</p><h1>参考资料</h1><p><a href="https://docs.unity3d.com/Packages/com.unity.postprocessing@3.4/manual/index.html">Unity PostProcessing后处理官方文档</a></p><p><a href="https://docs.unity3d.com/Manual/render-pipelines-overview.html">Unity Render Pipeline官方文档</a></p><p><a href="https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.html">CommandBuffer官方文档</a></p><p><a href="https://docs.unity3d.com/Manual/GraphicsCommandBuffers.html">Extending the Built-in Render Pipeline with CommandBuffers</a></p><p><a href="https://blog.unity.com/engine-platform/extending-unity-5-rendering-pipeline-command-buffers">Extending Unity 5 rendering pipeline: Command buffers</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shader </tag>
            
            <tag> 渲染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity渲染顺序</title>
      <link href="/posts/fff34a27/"/>
      <url>/posts/fff34a27/</url>
      
        <content type="html"><![CDATA[<p>在开始学习Unity渲染顺序之前, 我们最好对Unity事件执行顺序有一定的了解, 也就是下面这张图</p><p><a href="https://zhuanlan.zhihu.com/p/66558476">Gamma、Linear、sRGB 和Unity Color Space，你真懂了吗？</a></p><h1>如何理解UI的渲染</h1><h1>如何理解Mesh的渲染</h1><p>无论UI还是模型, 都是要先更新顶点的位置等信息, 然后再渲染出来, 实际渲染都是在RenderObject的时候, UI的顶点信息更新也是知道的, 模型顶点等数据的更新在什么时候呢?<br>除了UI以外, 普通的模型, 每一帧里面模型的顶点也都会发生变化, 那模型的</p><p>Unity中一个场景下的所有物体，不论是UI、2D物体还是3D物体，都是在一个三维空间中进行渲染的，然后我们透过场景中的一个或多个摄像机观察场景中物体渲染后的遮挡关系。当我们看到物体之间存在某种遮挡关系时，我们一般会直观地认为这是由于不同物体与摄像机之间的距离不同导致的。Unity确实会根据物体距离摄像机的距离来决定渲染结果，除此之外Unity中还提供了其他方式来影响渲染结果，进而改变物体之间的遮挡关系，比如对于两个Canvas物体，我们可以设置离摄像机远的Canvas的SortingOrder大于离摄像机近的Canvas的SortingOrder，然后我们就会看到离摄像机远的Canvas反而渲染在了离摄像机近的Canvas上面。本文记录笔者个人对Unity中渲染顺序的分析理解。</p><h1>Canvas组件</h1><p>Canvas组件具有一个名为RenderMode属性<br>ScreenSpace-Overlay模式下最简单 但是局限性也比较高 不能处理粒子和UI的层级关系<br>ScreenSpace-Camera 模式可以处理粒子和UI的层级关系<br>WorldSpace</p><h1>渲染顺序</h1><p>所有需要显示的物体都会有Renderer组件，MeshRenderer、SpriteRenderer、CanvasRenderer、PaticleSystemRenderer<br>SortingOrder SortingLayerID</p><p><strong>sortingLayer和order in layer(c#中属性名为sortingOrder)的属性只适用于Shader中没有ZWrite的，一旦Shader有进行ZTest、并且ZWrite有写入，那么Shader的ZTest优先级就是最高的反之，一旦没有ZWrite，那么控制Renderer的sortingLayer和order in layer(c#中属性名为sortingOrder)的属性就有效果</strong></p><h1>摄像机的Size</h1><p>找到场景中的MainCamera节点上的Camera组件，设置组件上的Projection属性为<code>Orthographic</code>，Camera上的就出现了Size属性，Size定义了透过该摄像机可以看到的视野高度的一半。<br>CanvasScaler和CameraSize搭配使用<br>Canvas只要不是ScreenOverLay模式， 就可以将Canvas看作一个3D场景中的物体，该物体和场景中的其他物体距离摄像机的远近不同，会直接影响最后的显示效果</p><p>Canvas下的所有组件都相当于是在一个新的坐标空间下进行计算，将Canvas中的元素由Canvas坐标空间转换到世界坐标空间下时需要有一个比例换算<br>粒子系统会经常和UI系统放在一起使用，但是由于UI的重叠等原因 粒子经常会出现显示层级不正确的问题，因此还需要手动去管理粒子和UI的层级</p><h1>SortingLayer</h1><h1>粒子和UI元素的渲染顺序</h1><p>距离摄像机的距离、LayerID、OrderInLayer和粒子UI的渲染顺序对最终屏幕上显示效果的影响<br>在Unity默认的渲染管线下同LayerID、同OrderInLayer的UI和粒子是先渲染粒子还是先UI</p><h1>参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/473875401">Unity渲染顺序</a><br><a href="https://zhuanlan.zhihu.com/p/673810066">UI和模型的层级处理</a><br><a href="https://docs.unity3d.com/2022.3/Documentation/Manual/built-in-rendering-order.html">Rendering Order In Build-in Render Pipeline</a><br><a href="https://docs.unity3d.com/2021.3/Documentation/Manual/2DSorting.html">2D Sorting</a><br><a href="https://docs.unity3d.com/Packages/com.unity.ugui@2.0/manual/script-CanvasScaler.html">Unity CanvasScaler</a><br><a href="https://blog.csdn.net/wjp494754224/article/details/105813042">关于UGUI和3D物体渲染顺序</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/posts/735e5788/"/>
      <url>/posts/735e5788/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/SoIncredible/programming-practice">Github仓库</a></p><h1>冒泡排序(Bubble)</h1><h2 id="思想">思想</h2><h2 id="代码实现">代码实现</h2><h1>快速排序(Quick)</h1><h2 id="思想-2">思想</h2><p>快速排序引入的pivot的概念,每次遍历序列时,从这个序列中选一个数(一般可以选择序列中的第一个数),遍历完一遍序列之后能够找到被选中数在这个序列中的位置,将该位置标记为pivot,<strong>交换pivot左侧大于pivotValue的数和右侧小于pivotValue的数,最终交换index为pivot和被选中数所在index位置</strong>,接着以该pivot为界将序列拆分成两个子序列,重复上面的操作,直到序列的长度为1.</p><h2 id="时间复杂度">时间复杂度</h2><p>快速排序不是一个稳定的算法,原因是pivot的取值会导致pivot两侧序列长度不是相等的,最坏的情况是,pivot每次取值取得都是数组中最大的那个值,这样他的分治递归层数就是n,在每一层中都需要遍历完所数组中所有的元素,因此每一层中的时间复杂度是<code>n</code>,所以最坏情况下快速排序的时间复杂度是<code>O(n^2)</code>.</p><p>平均情况下,快速排序的分治递归层数为<code>logn</code>,时间复杂度是<code>O(nlogn)</code>.</p><h2 id="注意">注意</h2><p>分区结束时：<br>left 指向第一个大于或等于 pivotValue 的元素。<br>right 指向最后一个小于 pivotValue 的元素。<br>因此pivot要和right交换.</p><h2 id="代码实现-2">代码实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void Swap(int *arr, int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    int temp = arr[x];</span><br><span class="line">    arr[x] = arr[y];</span><br><span class="line">    arr[y] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InnerQuickSort(int *arr, int beginIndex, int endIndex)</span><br><span class="line">&#123;</span><br><span class="line">    if (beginIndex &gt;= endIndex)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int left = beginIndex + 1;</span><br><span class="line">    int right = endIndex;</span><br><span class="line">    int pivotValue = arr[beginIndex]; // 选择起始位置的元素作为枢轴</span><br><span class="line"></span><br><span class="line">    while (left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        // 找到左侧第一个大于等于 pivot 的元素</span><br><span class="line">        while (left &lt;= right &amp;&amp; arr[left] &lt; pivotValue)</span><br><span class="line">        &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 找到右侧第一个小于 pivot 的元素</span><br><span class="line">        while (left &lt;= right &amp;&amp; arr[right] &gt;= pivotValue)</span><br><span class="line">        &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 如果左指针和右指针没有交错，交换它们</span><br><span class="line">        if (left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            Swap(arr, left, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 将枢轴放到正确的位置</span><br><span class="line">    Swap(arr, beginIndex, right);</span><br><span class="line"></span><br><span class="line">    // 递归地对左右子数组排序</span><br><span class="line">    InnerQuickSort(arr, beginIndex, right - 1);</span><br><span class="line">    InnerQuickSort(arr, right + 1, endIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void QuickSort(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">    // 选择pivot</span><br><span class="line">    // 能够标记两个子序列</span><br><span class="line">    InnerQuickSort(arr, 0, size - 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[10] = &#123;26, 99, 10, 77, 55, 89, 44, 32, 17, 18&#125;;</span><br><span class="line"></span><br><span class="line">    QuickSort(arr, 10);</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>插入排序(Insert)</h1><h2 id="思想-3">思想</h2><p>插入排序认为一个数组会被分成已排序部分和未排序部分,已排序部分长度默认是1.每次遍历的时候都从未排序数组中拿取第一个元素,插入到已经排序数组中.重复该步骤直到未排序部分长度为0.</p><h2 id="时间复杂度-2">时间复杂度</h2><p>外层是n<br>内层是T(n)=(n−1)+(n−2)+(n−3)+⋯+1= $\frac{n(n−1)}{2}$</p><p>所以时间复杂度O($n^{2}$)</p><h2 id="代码实现-3">代码实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void InsertionSort(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 1; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int preIndex = i - 1;</span><br><span class="line">        int current = arr[i];</span><br><span class="line">        // 从</span><br><span class="line">        while (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[preIndex + 1] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + 1] = current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[10] = &#123;26, 99, 10, 77, 55, 89, 44, 32, 17, 18&#125;;</span><br><span class="line">    InsertionSort(arr, 10);</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>选择排序(Selection)</h1><h2 id="思想-4">思想</h2><p>选择排序认为一个数组会被分成已排序部分和未排序部分,遍历整个数组,每次遍历的时候从未排序部分里面遍历出最小的值,将其与未排序部分的第一个元素交换,将未排序部分的第一个元素添加到已排序部分的末尾,重复该操作直到未排序部分长度为0</p><h2 id="时间复杂度-3">时间复杂度</h2><p>外层是n<br>内层是T(n)=(n−1)+(n−2)+(n−3)+⋯+1= $\frac{n(n−1)}{2}$</p><p>所以时间复杂度O($n^{2}$)</p><h2 id="代码实现-4">代码实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">// 遍历整个数组,每次遍历的时候从未排序的数组里面遍历出最小的值,将其与未排序部分的第一个元素交换,重复该操作直到未排序数组长度为0</span><br><span class="line"></span><br><span class="line">void Swap(int *arr, int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    int temp = arr[x];</span><br><span class="line">    arr[x] = arr[y];</span><br><span class="line">    arr[y] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SelectionSort(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 0; i &lt; size - 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int tempMinIndex = i;</span><br><span class="line">        for (int j = i + 1; j &lt; size; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            // 找到最小的</span><br><span class="line">            if (arr[tempMinIndex] &gt; arr[j])</span><br><span class="line">            &#123;</span><br><span class="line">                tempMinIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Swap(arr, tempMinIndex, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[10] = &#123;26, 99, 10, 77, 55, 89, 44, 32, 17, 18&#125;;</span><br><span class="line">    SelectionSort(arr, 10);</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>归并排序(Merge)</h1><h2 id="思想-5">思想</h2><p>归并排序采用分治的思想,先让局部有序,然后将多个有序的局部排序成一个更大的有序局部.</p><h2 id="实现思路">实现思路</h2><ol><li>传入一个数组,数组长度为size</li><li>分治,将数组分成size个长度为1的子数组,这些数组默认是有序的.</li><li>合并,将这size个长度为1的子数组合并成$\frac{size}{2}$个长度为2的子数组.注意,如果size为奇数,就要分成$\frac{size - 1}{2}$个长度为2的子数组和一个长度为1的子数组</li><li>重复第2、3步操作,直到子数组的长度变为<code>size</code>.</li></ol><h2 id="时间复杂度-4">时间复杂度</h2><p>外层循环时间复杂度是<code>log(n)</code>,内层循环复杂度<code>n</code>,总复杂度<code>O(nlogn)</code></p><h2 id="代码实现-5">代码实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">// 1. 传入一个数组, 数组长度为size</span><br><span class="line">// 2. 分治, 将数组分成size个长度为1的子数组, 这些数组默认是有序的.</span><br><span class="line">// 3. 合并, 将这size个长度为1的子数组合并成$\frac&#123;size&#125; &#123;2&#125; $个长度为2的子数组.注意, 如果size为奇数, 就要分成$\frac&#123;size - 1&#125; &#123;2&#125; $个长度为2的子数组和一个长度为1的子数组</span><br><span class="line">// 4. 重复第2、3步操作, 直到子数组的长度变为`size`.</span><br><span class="line"></span><br><span class="line">void MergeSort(int *arr, int size);</span><br><span class="line">void Merge(int *arr, int size, int begin, int mid, int end);</span><br><span class="line"></span><br><span class="line">void MergeSort(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">    for (int curSize = 1; curSize &lt; size; curSize *= 2)</span><br><span class="line">    &#123;</span><br><span class="line">        // 此处对边界值的判定</span><br><span class="line">        for (int index = 0; index &lt; size - curSize; index += 2 * curSize)</span><br><span class="line">        &#123;</span><br><span class="line">            Merge(arr, size, index, index + curSize, index + 2 * curSize - 1 &gt; size - 1 ? size - 1 : index + 2 * curSize - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Merge(int *arr, int size, int begin, int mid, int end)</span><br><span class="line">&#123;</span><br><span class="line">    int *temp = new int[size];</span><br><span class="line">    for (int i = 0; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[i] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int index = begin;</span><br><span class="line">    int left = begin;</span><br><span class="line">    int right = mid;</span><br><span class="line"></span><br><span class="line">    while (left &lt;= mid - 1 &amp;&amp; right &lt;= end)</span><br><span class="line">    &#123;</span><br><span class="line">        // 左边大于右边</span><br><span class="line">        if (temp[left] &gt; temp[right])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[index++] = temp[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        else // 右边大于左边</span><br><span class="line">        &#123;</span><br><span class="line">            arr[index++] = temp[left++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (left &lt;= mid - 1)</span><br><span class="line">        arr[index++] = temp[left++];</span><br><span class="line">    while (right &lt;= end)</span><br><span class="line">        arr[index++] = temp[right++];</span><br><span class="line"></span><br><span class="line">    delete[] temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[10] = &#123;26, 99, 10, 77, 55, 89, 44, 32, 17, 18&#125;;</span><br><span class="line">    MergeSort(arr, 10);</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经过ChatGPT优化过的代码">经过ChatGPT优化过的代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt; // 为了使用 std::min</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void MergeSort(int *arr, int size);</span><br><span class="line">void Merge(int *arr, int begin, int mid, int end);</span><br><span class="line"></span><br><span class="line">void MergeSort(int *arr, int size)</span><br><span class="line">&#123;</span><br><span class="line">    for (int curSize = 1; curSize &lt; size; curSize *= 2)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int index = 0; index &lt; size; index += 2 * curSize)</span><br><span class="line">        &#123;</span><br><span class="line">            int mid = index + curSize; // 中间位置</span><br><span class="line">            int end = std::min(index + 2 * curSize - 1, size - 1); // 右边界</span><br><span class="line">            if (mid &lt; size) // 确保中间位置在数组范围内</span><br><span class="line">            &#123;</span><br><span class="line">                Merge(arr, index, mid, end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Merge(int *arr, int begin, int mid, int end)</span><br><span class="line">&#123;</span><br><span class="line">    int *temp = new int[end - begin + 1];</span><br><span class="line">    for (int i = begin; i &lt;= end; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[i - begin] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int index = begin;</span><br><span class="line">    int left = 0; // temp 的左半部分起始位置</span><br><span class="line">    int right = mid - begin; // temp 的右半部分起始位置</span><br><span class="line"></span><br><span class="line">    while (left &lt; mid - begin &amp;&amp; right &lt; end - begin + 1)</span><br><span class="line">    &#123;</span><br><span class="line">        if (temp[left] &gt; temp[right])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[index++] = temp[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            arr[index++] = temp[left++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (left &lt; mid - begin)</span><br><span class="line">        arr[index++] = temp[left++];</span><br><span class="line">    while (right &lt; end - begin + 1)</span><br><span class="line">        arr[index++] = temp[right++];</span><br><span class="line"></span><br><span class="line">    delete[] temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int arr[10] = &#123;26, 99, 10, 77, 55, 89, 44, 32, 17, 18&#125;;</span><br><span class="line">    MergeSort(arr, 10);</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>希尔排序</h1><h2 id="思想-6">思想</h2><h2 id="代码实现-6">代码实现</h2><h1>基数排序</h1><h2 id="思想-7">思想</h2><h2 id="代码实现-7">代码实现</h2><h1>计数排序</h1><h2 id="思想-8">思想</h2><h2 id="代码实现-8">代码实现</h2><h1>桶排序</h1><h2 id="思想-9">思想</h2><h2 id="代码实现-9">代码实现</h2><h1>堆排序</h1><h2 id="思想-10">思想</h2><h2 id="代码实现-10">代码实现</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++问题记录</title>
      <link href="/posts/bcb0fea1/"/>
      <url>/posts/bcb0fea1/</url>
      
        <content type="html"><![CDATA[<h1>并不是所有的对象都是new出来的</h1><p>在使用了一年多C#之后,回头看C++时,有很多疑惑.首先是,在C#中,所有的对象都是需要new的.</p><p>看下面代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个简单的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std ::cout &lt;&lt; <span class="string">&quot;执行无参构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，用于初始化对象</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> std::string &amp;n, <span class="type">int</span> a) : <span class="built_in">name</span>(n), <span class="built_in">age</span>(a)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;执行有参构造函数&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数，用于显示对象信息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">displayInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;, Age: &quot;</span> &lt;&lt; age &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数，在对象销毁时自动调用</span></span><br><span class="line">    ~<span class="built_in">Person</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Destroying person: &quot;</span> &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 在栈上创建 Person 类的对象</span></span><br><span class="line">    <span class="function">Person <span class="title">person</span><span class="params">(<span class="string">&quot;Alice&quot;</span>, <span class="number">23</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用对象的成员函数</span></span><br><span class="line">    person.<span class="built_in">displayInfo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在栈上创建 Person 类对象</span></span><br><span class="line">    Person *p = <span class="keyword">new</span> <span class="built_in">Person</span>(<span class="string">&quot;Hank&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    p-&gt;<span class="built_in">displayInfo</span>();</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下在栈上创建的对象的特点:</p><ul><li>在栈上创建的对象不需要new,也不需要delete,其生命周期跟随其所在方法域的生命周期一致.</li><li>在栈上创建的对象不需要delete</li><li>在栈上创建的对象调用其字段和方法成员时,使用操作符<code>.</code>,在堆上创建的对象使用操作符<code>-&gt;</code>访问其成员.</li></ul><p><a href="https://blog.csdn.net/qq_30835655/article/details/68938861">这篇文章</a>介绍了如何在C++中实现只能在堆上或者只能在栈上创建的对象</p><h1>Warning: treating ‘c-header’ input as ‘c+±header’ when in C++ mode, this behavior is deprecated</h1><p>比如一个cpp文件中引用了某一个头文件,在编译的时候就没必要把这个头文件列出来.</p><p><a href="https://stackoverflow.com/questions/23534362/warning-treating-c-header-input-as-c-header-when-in-c-mode-this-behavi">https://stackoverflow.com/questions/23534362/warning-treating-c-header-input-as-c-header-when-in-c-mode-this-behavi</a></p><p>在C++中可以较为自由地控制某一个对象是创建在堆上还是栈上，而在C#中，值类型只能创建在栈上，堆类型只能创建在堆上，在不考虑装拆箱类型强转的情况下。</p><h1>C++宏的使用</h1><p>在 C++ 中，除了系统相关的宏，其他宏的开关控制方式主要有编译器默认定义、构建系统设置、头文件包含等，以下是具体介绍：<br>编译器默认定义<br>一些编译器会根据自身特性和编译选项，默认定义某些宏。例如，GCC 编译器会定义__GNUC__宏，用于标识使用的是 GCC 编译器，其值表示 GCC 的版本号。<br>对于 C++ 标准库相关的宏，如__cplusplus，它用于标识当前编译环境的 C++ 标准版本。在 C++11 环境下，__cplusplus的值通常被定义为201103L，在 C++20 环境下则为202002L等，编译器会根据所支持的 C++ 标准自动定义该宏。<br>构建系统设置<br>Makefile：可以在 Makefile 中通过CFLAGS（针对 C 语言）或CXXFLAGS（针对 C++ 语言）变量来定义宏。比如要定义一个名为MY_MACRO的宏，可以写成CFLAGS += -DMY_MACRO或CXXFLAGS += -DMY_MACRO。如果要为宏指定值，例如MY_MACRO的值为10，则可以写成CFLAGS += -DMY_MACRO=10或CXXFLAGS += -DMY_MACRO=10。<br>CMake：使用add_definitions命令来定义宏，如add_definitions(-DMY_MACRO)或add_definitions(-DMY_MACRO=10)。也可以通过set命令结合CMAKE_C_FLAGS或CMAKE_CXX_FLAGS变量来设置，例如set(CMAKE_CXX_FLAGS “${CMAKE_CXX_FLAGS} -DMY_MACRO=10”)。<br>Ninja：与 Makefile 类似，在生成 Ninja 构建文件时，可以通过相关的命令行参数或配置选项来添加宏定义。具体方式取决于生成 Ninja 文件的工具或脚本，例如使用 CMake 生成 Ninja 文件时，可以通过 CMake 的配置来间接影响 Ninja 构建时的宏定义。<br>头文件包含<br>许多库的头文件会根据自身的需求和条件定义一些宏。当包含这些头文件时，相应的宏就会被定义。例如，在包含&lt;stdio.h&gt;头文件时，可能会引入一些与标准输入输出相关的宏定义。<br>一些跨平台的库会在头文件中根据不同的平台来定义特定的宏。以 OpenGL 库为例，在 Windows 平台下包含&lt;windows.h&gt;头文件后，可能会定义一些与 Windows 图形系统相关的宏，然后在 OpenGL 的头文件中会根据这些宏来进一步定义与 OpenGL 在 Windows 平台上相关的特定宏。<br>命令行参数<br>在使用编译器命令行进行编译时，可以通过命令行参数来定义宏。例如，使用 GCC 编译时，可以通过-D选项来定义宏，如gcc -D MY_MACRO main.c会在编译main.c文件时定义MY_MACRO宏。如果要为宏赋值，可使用-D MY_MACRO=10的形式。<br>在使用 CMake 等构建系统时，也可以在命令行中通过-D选项来传递自定义的宏定义。例如cmake -D MY_MACRO=10…，这会在运行 CMake 配置项目时定义MY_MACRO宏，后续的编译过程中就可以使用该宏。</p><p>简单的使用可以看一下<a href="https://github.com/SoIncredible/programming-practice">这个仓库</a>下的<code>Code/CPP/assertAndMacro</code></p><h1>C++模板和C#范型(generic)之间的区别</h1><p>C# 泛型和 C++ 模板均是支持参数化类型的语言功能。 但是，两者之间存在很多不同。 在语法层次，C# 泛型是参数化类型的一个更简单的方法，而不具有 C++ 模板的复杂性。 此外，C# 不试图提供 C++ 模板所具有的所有功能。 在实现层次，主要区别在于 C# 泛型类型的替换在运行时执行，从而为实例化对象保留了泛型类型信息.</p><p>以下是 C# 泛型和 C++ 模板之间的主要差异：</p><p>C# 泛型的灵活性与 C++ 模板不同。 例如，虽然可以调用 C# 泛型类中的用户定义的运算符，但是无法调用算术运算符。</p><p>C# 不允许使用非类型模板参数，如 template C<int i> {}。</p><p>C# 不支持显式定制化；即特定类型模板的自定义实现。</p><p>C# 不支持部分定制化：部分类型参数的自定义实现。</p><p>C# 不允许将类型参数用作泛型类型的基类。</p><p>C# 不允许类型参数具有默认类型。</p><p>在 C# 中，泛型类型参数本身不能是泛型，但是构造类型可以用作泛型。 C++ 允许使用模板参数。</p><p>C++ 允许在模板中使用可能并非对所有类型参数有效的代码，随后针对用作类型参数的特定类型检查此代码。 C# 要求类中编写的代码可处理满足约束的任何类型。 例如，在 C++ 中可以编写一个函数，此函数对类型参数的对象使用算术运算符 + 和 -，在实例化具有不支持这些运算符的类型的模板时，此函数将产生错误。 C# 不允许此操作；唯一允许的语言构造是可以从约束中推断出来的构造。</p><h1>C++ wchar_t介绍以及和string类型的转换</h1><p><a href="https://blog.csdn.net/sxhlovehmm/article/details/40919607">https://blog.csdn.net/sxhlovehmm/article/details/40919607</a></p><h1>关于CMake</h1><p>还是回头来看一下从C++源文件变成可执行文件的过程.</p><p>执行CMake命令,实质上是在构建makefile的过程,即 生成构建文件.<br>执行CMake实在生成make, 执行make才是真正的开始将C++源代码转换成可执行文件.</p><h2 id="CMake中常用命令">CMake中常用命令</h2><h3 id="target-include-directories">target_include_directories</h3><p>在CMake中用于为特定的目标指定包含目录, 这些指定的目录在编译时会被添加到编译器的搜索路径中, 使得编译器可以找到目标的源文件包含的头文件. 当项目包含多个目录，并且源文件在不同目录下分布时，target_include_directories能够帮助编译器找到这些分散的头文件。这对于保持项目的组织结构清晰、解决头文件依赖问题非常有用。<br>使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">target_include_directories(&lt;target&gt;</span><br><span class="line">  [BEFORE]</span><br><span class="line">  &lt;INTERFACE|PUBLIC|PRIVATE&gt; [items1...]</span><br><span class="line">  [&lt;INTERFACE|PUBLIC|PRIVATE&gt; [items2...] ...])</span><br></pre></td></tr></table></figure><ul><li><target>: 目标的名称，可以是可执行文件或库。</li><li>BEFORE: 可选关键字，指定包含目录应该在默认目录之前被添加到编译器的搜索路径。</li><li>&lt;INTERFACE|PUBLIC|PRIVATE&gt;: 指定包含目录的范围：<ul><li>PRIVATE: 目录仅对该目标可见，不会影响依赖该目标的其他目标。</li><li>INTERFACE: 目录不会添加到该目标的编译选项中，但会添加到链接该目标的其他目标中。</li><li>PUBLIC: 目录既会添加到该目标的编译选项中，也会添加到链接该目标的其他目标中。</li></ul></li><li><code>[items...]</code>: 要添加为包含目录的路径列表。</li></ul><h3 id="add-executable">add_executable</h3><p>add_executable()命令用于定义一个新的可执行目标，也就是要生成的可执行文件。这个命令告诉CMake要编译一系列的源文件，然后将其链接以产生一个可执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_executable(&lt;name&gt; [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] source1 [source2 ...])</span><br></pre></td></tr></table></figure><p>其中</p><ul><li><code>&lt;name&gt;</code> 是要生成的可执行文件的名称。</li><li><code>[WIN32]</code> 在Windows上生成一个应用程序，而不是控制台应用程序。</li><li><code>[MACOSX_BUNDLE]</code> 在macOS上生成一个bundle。</li><li><code>[EXCLUDE_FROM_ALL]</code> 表示此目标不会被默认构建（例如，当你运行 “make” 或 “ninja” 时）。</li><li>source1, source2, … 是要编译的源文件。</li></ul><h3 id="target-link-options">target_link_options</h3><h3 id="pkg-check-modules">pkg_check_modules</h3><h3 id="include">include</h3><h3 id="find-package">find_package</h3><h3 id="set">set</h3><h3 id="add-subdirectory">add_subdirectory</h3><p>add_subdirectory() 是 CMake 中的一个命令，用于添加一个子目录到构建中。当此命令被执行时，CMake 会进入指定的子目录，并查找并处理那个子目录下的 CMakeLists.txt 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>source_dir：要加入构建的子目录的路径。这是必需的。</li><li>binary_dir：为子目录生成的构建文件（如 Makefiles 或项目文件）应放置的目录。通常，如果您没有指定，CMake 将在当前二进制目录下为子目录创建一个同名目录。这不是必需的。</li><li>EXCLUDE_FROM_ALL：当设置此选项时，这个子目录下的目标（例如库或可执行文件）不会被默认构建目标（例如 “make” 或 “ninja” 的默认目标）包括进来。<br>假设有以下的目录结构：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/my_project</span><br><span class="line">├── CMakeLists.txt</span><br><span class="line">└── /sub_project</span><br><span class="line">    └── CMakeLists.txt</span><br></pre></td></tr></table></figure><p>在 /my_project/CMakeLists.txt (根目录下面的CMakeLists.txt)中，你可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_subdirectory(sub_project)</span><br></pre></td></tr></table></figure><p>这样，当CMake处理 /my_project/CMakeLists.txt 时，它也会处理 /sub_project/CMakeLists.txt。</p><h3 id="CMAKE-MODULE-PATH">CMAKE_MODULE_PATH</h3><h3 id="CMAKE-MODULE-PATH-2">CMAKE_MODULE_PATH</h3><h3 id="CMAKE-PREFIX-PATH">CMAKE_PREFIX_PATH</h3><h3 id="FindXXX-cmake">FindXXX.cmake</h3><h3 id="XXX-INCLUDE-DIRS"><XXX>_INCLUDE_DIRS</h3><h3 id="XXX-LIBRARIES"><XXX>_LIBRARIES</h3><h3 id="XXX-EXECUTABLE"><XXX>_EXECUTABLE</h3><h3 id="XXX-ROOT-DIR"><XXX>_ROOT_DIR</h3><h3 id="XXX-FOUND"><XXX>_FOUND</h3><h1>关于C++中的*和&amp;符号</h1><p>&amp;符号多用于</p><p>在C++中有符合类型的概念,引用和指针就是符合类型中的两种,*和&amp;号是这两种符合类型中经常使用到的符号.</p><p>引用为对象起了另外一个名字,引用必须初始化.</p><p>C++中函数参数的传递方式有:</p><ul><li>按值传递</li><li>按指针传递</li><li>按引用传递</li></ul><p>函数传参的过程,发生了什么?<br>如何理解函数参数中的&amp;符号,比如下面这个例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    b++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">func</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在调用函数时,我们需要向函数中传入一系列的参数,如果我们不给参数添加&amp;时,你可以理解为,调用函数一方,也就是原始参数持有一方所持有的函数,和真正参与函数执行的参数,是完全没关系的. &amp;的作用就是将这两个参数关联起来,或者说,让这两个参数就是一个参数.因此,函数内对参数的操作会在函数执行完毕,回到调用函数侧时,对参数做的修改会得以保留.</p><p>那如果我想要把外层和函数内层的字段关联起来,该怎么做呢?通过指针啊,指针之间的传值是复制,但是只要指针指向的内存地址一样,就可以使用不同的指针对同一片内存地址操作啊.</p><p>引用&amp;符号的作用更多的是用在函数传参中,避免不必要的参数复制造成额外开销.<br>迷糊了,直接用指针就可以<br>比如一个站</p><h1>模版template的使用</h1><p>在 C++ 里，模板函数和模板类的定义和声明通常需要放在同一个头文件中。这是因为模板在编译时才会被实例化，编译器需要看到模板的完整定义才能生成具体的代码。在你的代码里，Stack 类的定义放在了 stack.h 头文件中，而成员函数的实现放在了 stack.cpp 文件中，这就导致编译器在编译 main.cpp 时，无法找到 Stack<custom> 类成员函数的具体实现，从而在链接阶段出现未定义符号的错误。</p><h1>如何在C++中实现C#中的反射 HybridCLR可能会用到</h1><h1>C++ volatile 关键字</h1><p>在 C++ 中，<code>volatile</code> 是一个类型修饰符（关键字），用于告诉编译器：<strong>被修饰的变量可能会被程序之外的因素（如硬件、中断、多线程等）修改</strong>，因此编译器不应对该变量的读写操作进行优化（如缓存到寄存器、重排指令等），必须每次都直接从内存中读取或写入。</p><h3 id="核心作用：阻止编译器优化">核心作用：阻止编译器优化</h3><p>编译器在编译时会对代码进行优化，例如：</p><ul><li>将频繁访问的变量缓存到寄存器（减少内存读写开销）</li><li>重排指令执行顺序（提高执行效率）</li><li>省略重复的读写操作（如连续多次读取同一个变量时，可能只读取一次）</li></ul><p>但对于 <code>volatile</code> 修饰的变量，这些优化可能导致错误，因为变量的值可能在编译器不知情的情况下被修改。<code>volatile</code> 强制编译器每次都直接与内存交互，确保操作的真实性。</p><h3 id="典型使用场景">典型使用场景</h3><ol><li><p><strong>硬件寄存器访问</strong><br>硬件设备的寄存器（如传感器数据、定时器计数）的值可能会被硬件直接修改，必须用 <code>volatile</code> 修饰，避免编译器缓存旧值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 0x1234 是硬件寄存器地址</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span>* sensor_data = (<span class="keyword">volatile</span> <span class="type">int</span>*)<span class="number">0x1234</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次都从内存（寄存器）读取最新值</span></span><br><span class="line"><span class="type">int</span> current_value = *sensor_data;</span><br></pre></td></tr></table></figure></li><li><p><strong>中断服务程序（ISR）与主程序共享变量</strong><br>中断程序可能随时修改变量，主程序必须每次都读取内存中的最新值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">bool</span> flag = <span class="literal">false</span>;  <span class="comment">// 被中断程序和主程序共享</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中断服务程序（ISR）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">interrupt_handler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    flag = <span class="literal">true</span>;  <span class="comment">// 修改标志</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!flag) &#123;  <span class="comment">// 每次都从内存读取 flag 的最新值</span></span><br><span class="line">        <span class="comment">// 等待中断</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>多线程共享变量（有限场景）</strong><br>在没有同步机制（如互斥锁）的情况下，<code>volatile</code> 可确保线程读取到变量的最新值（但<strong>不能替代线程同步</strong>，因为它不保证原子性）。</p></li></ol><h3 id="注意事项">注意事项</h3><ol><li><p><strong><code>volatile</code> 不保证原子性</strong><br>它仅确保变量的读写不被优化，但复杂操作（如 <code>i++</code>）仍可能被拆分为多个指令，在多线程环境中存在竞态条件。需配合原子操作（如 <code>std::atomic</code>）或锁机制使用。</p></li><li><p><strong><code>volatile</code> 与 <code>const</code> 可同时使用</strong><br>表示变量“可以被外部修改，但程序内部不能修改”：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">const</span> <span class="type">int</span>* config = <span class="comment">/* 硬件配置寄存器地址 */</span>;</span><br><span class="line"><span class="comment">// *config = 10;  // 错误：const 不允许修改</span></span><br><span class="line"><span class="comment">// 但硬件可以修改 *config 的值</span></span><br></pre></td></tr></table></figure></li><li><p><strong>函数参数和返回值也可被修饰</strong><br>表示参数/返回值可能被外部修改：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">volatile</span> <span class="type">int</span> <span class="title">read_data</span><span class="params">(<span class="keyword">volatile</span> <span class="type">int</span>* ptr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *ptr;  <span class="comment">// 读取 volatile 变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>不要过度使用</strong><br><code>volatile</code> 会禁用编译器优化，可能降低程序性能，仅在确实需要时使用。</p></li></ol><h3 id="总结">总结</h3><p><code>volatile</code> 的核心意义是<strong>告诉编译器：“这个变量的变化不受程序控制，请勿优化其读写操作”</strong>，主要用于硬件交互、中断处理等场景，确保程序能获取变量的最新值。但它不能解决线程同步问题，需与其他机制配合使用。</p><h1>C++ inline 关键字</h1><p>在 C++ 中，<code>inline</code> 关键字用于向编译器建议将函数<strong>内联展开</strong>（inline expansion），即把函数调用处直接替换为函数体代码，而不是通过传统的函数调用机制（如压栈、跳转、返回等）执行。<br><code>inline</code> 的核心价值是<strong>在不牺牲代码可读性和安全性的前提下，优化简短函数的调用效率</strong>。它是 C++ 对宏定义的一种改进，合理使用能提升程序性能，但过度使用（如对复杂函数加 inline）可能适得其反。</p><h3 id="主要作用：">主要作用：</h3><ol><li><p><strong>减少函数调用开销</strong><br>传统函数调用需要执行一系列操作（如保存寄存器、参数入栈、程序跳转等），这些操作会产生额外开销。对于简短的函数（如只包含几行代码），调用开销可能甚至超过函数本身的执行时间。<br><code>inline</code> 建议编译器在调用处直接插入函数体，消除这些额外开销，提高程序运行效率。</p></li><li><p><strong>不影响函数的封装性</strong><br>与 <code>#define</code> 宏定义相比，<code>inline</code> 函数既保留了函数的类型检查、作用域规则等封装特性，又能实现类似宏的&quot;代码替换&quot;效果，是更安全的选择。</p></li></ol><h3 id="使用注意事项：">使用注意事项：</h3><ol><li><p><strong>只是编译器的&quot;建议&quot;</strong><br><code>inline</code> 是给编译器的<strong>提示</strong>，而非强制命令。编译器可能会忽略该建议（例如，对于递归函数、包含循环/switch的复杂函数，编译器通常不会将其 inline）。</p></li><li><p><strong>通常用于简短函数</strong><br>如果函数体过长，inline 会导致代码膨胀（重复插入函数体），反而增加内存占用和指令缓存压力，降低性能。</p></li><li><p><strong>定义需放在头文件中</strong><br>与普通函数不同，<code>inline</code> 函数的定义通常需要放在头文件里（而非仅声明），因为编译器在编译调用处代码时，需要知道函数体内容才能进行 inline 展开。</p></li><li><p><strong>避免副作用</strong><br>与宏不同，<code>inline</code> 函数的参数只计算一次，不会产生类似宏的副作用。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宏可能产生副作用</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(a, b) (a + b)</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="built_in">ADD</span>(x++, x++);  <span class="comment">// 结果不确定（x可能被递增2次或1次）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// inline函数无此问题</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line"><span class="type">int</span> y = <span class="built_in">add</span>(x++, x++);  <span class="comment">// 明确：x先递增两次，再计算和</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="典型用法示例：">典型用法示例：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头文件中定义inline函数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用处会被编译器建议展开为：(a &gt; b) ? a : b</span></span><br><span class="line"><span class="type">int</span> result = <span class="built_in">max</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h1>C++ 友元</h1><p>在 C++ 中，<strong>友元（friend）</strong> 是一种打破类封装性的机制，允许特定的外部函数或类访问当前类的私有（private）和保护（protected）成员。</p><h3 id="友元的定义方式：">友元的定义方式：</h3><ol><li><p><strong>友元函数</strong>：在类内部声明一个外部函数为友元，使其能访问类的私有成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(<span class="type">int</span> v) : <span class="built_in">value</span>(v) &#123;&#125;</span><br><span class="line">    <span class="comment">// 声明外部函数为友元</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">printValue</span><span class="params">(MyClass obj)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 友元函数可以直接访问MyClass的私有成员</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printValue</span><span class="params">(MyClass obj)</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; obj.value &lt;&lt; endl;  <span class="comment">// 合法：访问私有成员value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>友元类</strong>：一个类可以声明另一个类为友元，友元类的所有成员函数都能访问当前类的私有成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> secret;</span><br><span class="line">    <span class="comment">// 声明B为友元类</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">accessA</span><span class="params">(A&amp; a)</span> </span>&#123;</span><br><span class="line">        a.secret = <span class="number">100</span>;  <span class="comment">// 合法：B是A的友元，可访问其私有成员</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="为什么需要友元？">为什么需要友元？</h3><p>C++ 的类封装性要求私有成员只能被类内部的成员函数访问，但在某些场景下，这种严格的封装会带来不便，友元机制正是为了解决这些特殊需求：</p><ol><li><p><strong>方便操作类的私有数据</strong><br>例如在实现运算符重载（如 <code>&lt;&lt;</code> 输出运算符）时，需要访问类的私有成员，但运算符重载函数通常是全局函数而非成员函数，此时可将其声明为友元。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="comment">// 声明输出运算符重载为友元</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Point&amp; p);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> Point&amp; p) &#123;</span><br><span class="line">    os &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; p.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; p.y &lt;&lt; <span class="string">&quot;)&quot;</span>;  <span class="comment">// 访问私有成员x、y</span></span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现类之间的协作</strong><br>当两个类关系紧密（如容器类与迭代器类），迭代器需要访问容器的内部数据结构时，可将迭代器类声明为容器类的友元，简化协作逻辑。</p></li><li><p><strong>避免过度暴露接口</strong><br>如果不使用友元，为了让外部访问私有成员，可能需要增加大量的 <code>getter/setter</code> 方法，反而破坏封装的简洁性。友元可以在不暴露接口的前提下，有选择地开放访问权限。</p></li></ol><h3 id="注意事项：">注意事项：</h3><ol><li><strong>友元关系是单向的</strong>：若 A 是 B 的友元，B 不一定是 A 的友元。</li><li><strong>友元关系不可传递</strong>：若 A 是 B 的友元，B 是 C 的友元，A 不一定是 C 的友元。</li><li><strong>破坏封装性</strong>：友元本质上是对封装的突破，过度使用会降低代码的安全性和可维护性，应谨慎使用。</li></ol><p>友元的核心价值是<strong>在保证封装性的前提下，为特殊场景提供灵活的访问机制</strong>，是对严格封装的一种补充，而非替代。</p><h2 id="C-也有自己的友元">C#也有自己的友元</h2><h1>C++ 继承多个类</h1><p>在 C++ 中，<strong>支持多继承</strong>，即一个派生类可以同时继承多个基类。这种机制增强了代码的灵活性，但也带来了一些复杂问题，需要特别注意。</p><h3 id="一、多继承的基本语法">一、多继承的基本语法</h3><p>派生类声明时，在基类列表中用逗号分隔多个基类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 派生类同时继承 Base1 和 Base2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123;</span><br><span class="line">    <span class="comment">// 派生类成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二、多继承需要注意的问题">二、多继承需要注意的问题</h3><ol><li><p><strong>菱形继承（钻石问题）导致的二义性</strong><br>最典型的问题是“菱形继承”：两个派生类（B、C）继承自同一个基类（A），而另一个派生类（D）同时继承 B 和 C。此时，D 会间接包含两份 A 的成员，导致访问 A 的成员时出现二义性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; <span class="keyword">public</span>: <span class="type">int</span> x; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">public</span> A &#123; &#125;;  <span class="comment">// B 继承 A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> A &#123; &#125;;  <span class="comment">// C 继承 A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123; &#125;;  <span class="comment">// D 继承 B 和 C</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    <span class="comment">// d.x = 10;  // 错误：二义性（B::x 和 C::x 冲突）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：使用<strong>虚继承（virtual inheritance）</strong>，让 B 和 C 虚继承自 A，确保 A 在 D 中只存在一份实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123; <span class="keyword">public</span>: <span class="type">int</span> x; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123; &#125;;  <span class="comment">// 虚继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123; &#125;;  <span class="comment">// 虚继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.x = <span class="number">10</span>;  <span class="comment">// 合法：A 只存在一份，无歧义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>成员名冲突</strong><br>若多个基类有同名成员（变量或函数），派生类访问时必须通过<strong>作用域限定符</strong>明确指定来自哪个基类，否则会产生二义性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base1::func&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Base2::func&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Derived d;</span><br><span class="line">    <span class="comment">// d.func();  // 错误：二义性（Base1::func 和 Base2::func 冲突）</span></span><br><span class="line">    d.Base1::<span class="built_in">func</span>();  <span class="comment">// 正确：指定访问 Base1 的 func</span></span><br><span class="line">    d.Base2::<span class="built_in">func</span>();  <span class="comment">// 正确：指定访问 Base2 的 func</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>构造函数与析构函数的调用顺序</strong></p><ul><li>构造函数：先调用所有基类的构造函数（按继承列表中的声明顺序），再调用派生类的构造函数。</li><li>析构函数：与构造函数顺序相反（先派生类，再基类，按继承列表的逆序）。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123; <span class="keyword">public</span>: <span class="built_in">Base1</span>() &#123; cout &lt;&lt; <span class="string">&quot;Base1 构造&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123; <span class="keyword">public</span>: <span class="built_in">Base2</span>() &#123; cout &lt;&lt; <span class="string">&quot;Base2 构造&quot;</span> &lt;&lt; endl; &#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>() &#123; cout &lt;&lt; <span class="string">&quot;Derived 构造&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 输出顺序：Base1 构造 → Base2 构造 → Derived 构造</span></span><br></pre></td></tr></table></figure></li><li><p><strong>代码复杂度与维护性</strong><br>多继承会增加类层次的复杂性，过度使用可能导致代码难以理解和维护。在很多场景下，可通过“组合”或“接口继承+实现分离”替代多继承（如 Java 的单继承+接口）。</p></li></ol><h3 id="三、多继承中的类型转换">三、多继承中的类型转换</h3><p>多继承中的类型转换与单继承类似，但需注意基类之间的独立性。</p><ol><li><p><strong>向上转型（派生类 → 基类）</strong><br>派生类对象可以隐式转换为任意基类的指针或引用（安全转换）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Derived d;</span><br><span class="line">    Base1* b1 = &amp;d;  <span class="comment">// 隐式转换：Derived* → Base1*</span></span><br><span class="line">    Base2* b2 = &amp;d;  <span class="comment">// 隐式转换：Derived* → Base2*</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>向下转型（基类 → 派生类）</strong><br>基类指针/引用转换为派生类指针/引用时，必须显式转换，且需确保安全性：</p><ul><li>若基类有虚函数，推荐使用 <code>dynamic_cast</code>（运行时检查，转换失败返回 <code>nullptr</code> 或抛出异常）。</li><li>若基类无虚函数，可使用 <code>static_cast</code>（编译时转换，无运行时检查，风险较高）。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123; <span class="keyword">public</span>: <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125; &#125;;  <span class="comment">// 有虚函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123; <span class="keyword">public</span>: <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base1* b1 = <span class="keyword">new</span> <span class="built_in">Derived</span>();  <span class="comment">// 向上转型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向下转型：Base1* → Derived*</span></span><br><span class="line">    Derived* d = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(b1);</span><br><span class="line">    <span class="keyword">if</span> (d) &#123;  <span class="comment">// 转换成功</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;转换成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> b1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>交叉转型（基类 → 另一个基类）</strong><br>两个基类（如 Base1 和 Base2）之间无继承关系，不能直接转换。需先转换为派生类，再转换为另一个基类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123; <span class="keyword">public</span>: <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123; <span class="keyword">public</span>: <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;&#125; &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base1, <span class="keyword">public</span> Base2 &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base1* b1 = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先转为 Derived*，再转为 Base2*</span></span><br><span class="line">    Derived* d = <span class="built_in">dynamic_cast</span>&lt;Derived*&gt;(b1);</span><br><span class="line">    <span class="keyword">if</span> (d) &#123;</span><br><span class="line">        Base2* b2 = d;  <span class="comment">// 隐式转换：Derived* → Base2*</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> b1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结-2">总结</h3><ul><li>C++ 支持多继承，允许一个类继承多个基类。</li><li>需重点注意菱形继承的二义性（通过虚继承解决）、成员名冲突（通过作用域限定符解决）。</li><li>类型转换中，向上转型隐式安全，向下转型需用 <code>dynamic_cast</code>（带虚函数时），交叉转型需通过派生类中转。</li></ul><p>多继承是一把“双刃剑”，合理使用可提升灵活性，但过度使用会增加复杂度，实践中需谨慎设计类层次。</p><p>在 C++ 中，<strong>虚继承（virtual inheritance）</strong> 是一种特殊的继承方式，用于解决多继承中可能出现的<strong>菱形继承（钻石问题）</strong> 导致的成员冗余和二义性问题。</p><h3 id="什么是菱形继承问题？">什么是菱形继承问题？</h3><p>当类的继承关系形成“菱形”结构时，会出现基类成员被多次继承的问题：</p><ul><li>类 A 是顶层基类，包含成员 <code>x</code>。</li><li>类 B 和类 C 分别继承自 A，因此都包含 A 的成员 <code>x</code>。</li><li>类 D 同时继承 B 和 C，此时 D 中会间接包含<strong>两份 A 的成员 <code>x</code></strong>（一份来自 B，一份来自 C）。</li></ul><p>这种情况下，访问 D 中的 <code>x</code> 会产生二义性（编译器无法确定访问的是 B 继承的 <code>x</code> 还是 C 继承的 <code>x</code>）。</p><h3 id="虚继承的作用">虚继承的作用</h3><p>虚继承通过让中间基类（如 B 和 C）<strong>虚继承</strong>顶层基类（如 A），确保顶层基类在最终派生类（如 D）中<strong>只存在一份实例</strong>，从而消除冗余和二义性。</p><h3 id="虚继承的语法">虚继承的语法</h3><p>在继承时使用 <code>virtual</code> 关键字声明：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 顶层基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">A</span>() : <span class="built_in">x</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间基类 B 虚继承 A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间基类 C 虚继承 A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终派生类 D 继承 B 和 C</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123; &#125;;</span><br></pre></td></tr></table></figure><p>此时，D 中只会包含<strong>一份 A 的成员 <code>x</code></strong>，访问 <code>d.x</code> 时不再有二义性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    d.x = <span class="number">10</span>;  <span class="comment">// 合法：A 只存在一份，无歧义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚继承的实现原理">虚继承的实现原理</h3><p>编译器通过<strong>虚基类表（virtual base table）</strong> 和<strong>虚基类指针（virtual base pointer）</strong> 实现虚继承：</p><ul><li>虚继承的中间类（B、C）会生成一个虚基类表，存储自身与顶层虚基类（A）的偏移量。</li><li>中间类的对象中会增加一个虚基类指针（指向虚基类表），最终派生类（D）通过该指针找到唯一的顶层基类实例。</li></ul><p>这种机制确保无论中间类被继承多少次，顶层虚基类在最终派生类中只存在一份。</p><h3 id="注意事项-2">注意事项</h3><ol><li><p><strong>构造函数的调用顺序</strong><br>虚基类的构造函数由<strong>最终派生类</strong>直接调用，而非中间基类。即使中间基类在构造函数中显式初始化虚基类，最终派生类也会覆盖这种初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> val) : <span class="built_in">x</span>(val) &#123;&#125;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>() : <span class="built_in">A</span>(<span class="number">10</span>) &#123;&#125;  <span class="comment">// 中间类对虚基类的初始化会被覆盖</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> : <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">D</span>() : <span class="built_in">A</span>(<span class="number">20</span>) &#123;&#125;  <span class="comment">// 最终派生类直接初始化虚基类</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    D d;</span><br><span class="line">    cout &lt;&lt; d.x;  <span class="comment">// 输出 20（而非 10）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>只在必要时使用</strong><br>虚继承会增加内存开销（额外的虚基类指针）和运行时开销（通过指针访问成员），仅在需要解决菱形继承问题时使用。</p></li><li><p><strong>避免复杂的虚继承层次</strong><br>多层虚继承可能导致代码逻辑复杂，降低可读性和维护性，设计类层次时应尽量简化。</p></li></ol><h3 id="总结-3">总结</h3><p>虚继承是 C++ 为解决多继承中菱形继承问题而设计的机制，通过让中间基类虚继承顶层基类，确保顶层基类在最终派生类中只存在一份实例，从而消除成员冗余和访问二义性。其核心价值是在支持多继承的同时，弥补了菱形继承带来的缺陷。</p><h1>C++中const的用法</h1><p>是的，<code>const</code> 在 C++ 中是一个非常丰富和多用途的关键字，除了你提到的三种用法，还有其他几种重要用法。以下是 <code>const</code> 关键字的全面总结：</p><hr><h3 id="1-Const-变量（命名常量）">1. Const 变量（命名常量）</h3><p>这是最基础的用法，用于声明一个其值不可被修改的变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAX_BUFFER_SIZE = <span class="number">1024</span>; <span class="comment">// 值不可修改</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> PI = <span class="number">3.14159f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试修改会导致编译错误</span></span><br><span class="line"><span class="comment">// MAX_BUFFER_SIZE = 2048; // ❌ 错误！</span></span><br></pre></td></tr></table></figure><p><strong>与 <code>#define</code> 的区别</strong>：<code>const</code> 变量有类型信息和作用域，更安全，便于调试。</p><hr><h3 id="2-Const-引用">2. Const 引用</h3><p>声明一个对常量的引用，不能通过这个引用来修改所引用的对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> originalValue = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; constRef = originalValue; <span class="comment">// 常量引用</span></span><br><span class="line"><span class="comment">// constRef = 100; // ❌ 错误！不能通过const引用修改值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>&amp; nonConstRef = originalValue;    <span class="comment">// 非常量引用</span></span><br><span class="line">nonConstRef = <span class="number">100</span>;                   <span class="comment">// ✅ 可以修改</span></span><br></pre></td></tr></table></figure><p><strong>主要用途</strong>：</p><ul><li>作为函数参数，避免不必要的拷贝同时保证不修改原对象（比传值更高效）。</li><li><pre><code class="language-cpp">void ProcessData(const std::string&amp; data) &#123;     // 可以读取data，但不能修改它     size_t len = data.length(); // ✅    // data.clear(); // ❌&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 3. Const 指针 vs 指向 Const 的指针</span><br><span class="line"></span><br><span class="line">这是一个容易混淆但很重要的区别：</span><br><span class="line"></span><br><span class="line">```cpp</span><br><span class="line">int value = 10;</span><br><span class="line">int anotherValue = 20;</span><br><span class="line"></span><br><span class="line">// 1. 指向常量的指针（Pointer to const）</span><br><span class="line">// - 指针本身可以改变指向，但不能通过它修改所指的值</span><br><span class="line">const int* ptrToConst = &amp;value;</span><br><span class="line">// *ptrToConst = 15; // ❌ 错误：不能通过ptrToConst修改value</span><br><span class="line">ptrToConst = &amp;anotherValue; // ✅ 正确：可以改变指针指向</span><br><span class="line"></span><br><span class="line">// 2. 常量指针（Const pointer）</span><br><span class="line">// - 指针本身不能改变指向，但可以通过它修改所指的值</span><br><span class="line">int* const constPtr = &amp;value;</span><br><span class="line">*constPtr = 15; // ✅ 正确：可以通过constPtr修改value</span><br><span class="line">// constPtr = &amp;anotherValue; // ❌ 错误：不能改变指针指向</span><br><span class="line"></span><br><span class="line">// 3. 指向常量的常量指针（Const pointer to const）</span><br><span class="line">// - 既不能改变指向，也不能通过它修改值</span><br><span class="line">const int* const constPtrToConst = &amp;value;</span><br><span class="line">// *constPtrToConst = 15; // ❌</span><br><span class="line">// constPtrToConst = &amp;anotherValue; // ❌</span><br></pre></td></tr></table></figure></code></pre></li></ul><p><strong>记忆口诀</strong>：<code>const</code> 在 <code>*</code> 左边表示指向常量，在 <code>*</code> 右边表示指针本身是常量。</p><hr><h3 id="4-Const-成员变量">4. Const 成员变量</h3><p>在类中声明不可修改的成员变量。<strong>必须在构造函数的初始化列表中初始化</strong>，不能在函数体内赋值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> m_PI; <span class="comment">// const成员变量</span></span><br><span class="line">    <span class="type">double</span> m_Radius;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Circle</span>(<span class="type">double</span> radius) </span><br><span class="line">        : <span class="built_in">m_PI</span>(<span class="number">3.14159</span>) <span class="comment">// 必须在初始化列表中初始化</span></span><br><span class="line">        , <span class="built_in">m_Radius</span>(radius) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// m_PI = 3.14; // ❌ 错误！不能在构造函数体内赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">GetArea</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_PI * m_Radius * m_Radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="5-Constexpr-C-11-引入">5. Constexpr (C++11 引入)</h3><p><code>constexpr</code> 比 <code>const</code> 更严格，表示<strong>编译期常量</strong>，值必须在编译时就能确定。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> ArraySize = <span class="number">100</span>; <span class="comment">// 编译期常量</span></span><br><span class="line"><span class="type">int</span> myArray[ArraySize]; <span class="comment">// ✅ 可以用作数组大小</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> size = <span class="built_in">SomeFunction</span>(); <span class="comment">// 运行时才能确定</span></span><br><span class="line"><span class="comment">// int anotherArray[size]; // ❌ 错误：size不是编译期常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constexpr函数：如果参数是编译期常量，则结果也是编译期常量</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">int</span> <span class="title">Square</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> squaredValue = <span class="built_in">Square</span>(<span class="number">5</span>); <span class="comment">// 编译时计算</span></span><br><span class="line"><span class="type">int</span> array[<span class="built_in">Square</span>(<span class="number">5</span>)]; <span class="comment">// ✅ 正确</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-Mutable-成员变量">6. Mutable 成员变量</h3><p>这是一个与 <code>const</code> 相关的特殊关键字。被声明为 <code>mutable</code> 的成员变量，<strong>即使在 <code>const</code> 成员函数中也可以被修改</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataLogger</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> m_AccessCount; <span class="comment">// 可变成员变量</span></span><br><span class="line">    std::string m_Data;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">const</span> std::string&amp; <span class="title">GetData</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        m_AccessCount++; <span class="comment">// ✅ 即使这是const函数，也可以修改mutable成员</span></span><br><span class="line">        <span class="keyword">return</span> m_Data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">GetAccessCount</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_AccessCount; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>典型用途</strong>：用于缓存、引用计数、调试统计等需要在逻辑const操作中更新的辅助数据。</p><hr><h3 id="7-Const-与函数返回值">7. Const 与函数返回值</h3><p>让函数返回常量值或常量引用，可以防止返回值被意外修改。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BigData</span> &#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; m_HugeData;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 返回const引用，防止调用者修改内部数据</span></span><br><span class="line">    <span class="function"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; <span class="title">GetData</span><span class="params">()</span> <span class="type">const</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> m_HugeData; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不好的设计：返回非const引用，暴露了内部实现</span></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt;&amp; <span class="title">GetData</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> m_HugeData; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BigData data;</span><br><span class="line"><span class="comment">// 好的：只能读取，不能修改</span></span><br><span class="line"><span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; safeRef = data.<span class="built_in">GetData</span>();</span><br><span class="line"><span class="comment">// safeRef.clear(); // ❌ 编译错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好的：可以修改内部数据（破坏了封装性）</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt;&amp; unsafeRef = data.<span class="built_in">GetData</span>();</span><br><span class="line">unsafeRef.<span class="built_in">clear</span>(); <span class="comment">// ✅ 编译通过，但可能破坏对象状态</span></span><br></pre></td></tr></table></figure><hr><h3 id="总结对比表">总结对比表</h3><table><thead><tr><th>用法</th><th>语法示例</th><th>含义</th></tr></thead><tbody><tr><td><strong>Const变量</strong></td><td><code>const int size = 10;</code></td><td>值不可变的命名常量</td></tr><tr><td><strong>Const引用</strong></td><td><code>const std::string&amp; str;</code></td><td>不能通过引用修改目标对象</td></tr><tr><td><strong>指向Const的指针</strong></td><td><code>const int* ptr;</code></td><td>可通过指针改指向，不能改值</td></tr><tr><td><strong>Const指针</strong></td><td><code>int* const ptr;</code></td><td>不可改指向，可通过指针改值</td></tr><tr><td><strong>Const成员函数</strong></td><td><code>void func() const;</code></td><td>不修改对象状态的成员函数</td></tr><tr><td><strong>Const成员变量</strong></td><td><code>const int m_Value;</code></td><td>必须在构造函数初始化列表中初始化的常量成员</td></tr><tr><td><strong>Constexpr</strong></td><td><code>constexpr int size = 10;</code></td><td>编译期常量，值必须在编译时确定</td></tr><tr><td><strong>Mutable</strong></td><td><code>mutable int m_Counter;</code></td><td>即使在const函数中也可修改的成员变量</td></tr><tr><td><strong>Const返回值</strong></td><td><code>const Type&amp; GetValue() const;</code></td><td>返回不可修改的值或引用，保护内部数据</td></tr></tbody></table><p>C++ 中 <code>const</code> 的正确使用是编写健壮、安全和易于维护代码的关键技能，它可以在编译期捕获许多潜在的错误。</p><h1>关于define的用法</h1><p>在C++中，<code>#define</code> 是预处理指令，用于创建宏定义，主要作用是在编译前对代码进行文本替换。它的使用方式灵活，常见用法如下：</p><h3 id="1-定义常量">1. 定义常量</h3><p>最基本的用法是定义常量，提高代码可读性和维护性：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415926  <span class="comment">// 定义圆周率常量</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100  <span class="comment">// 定义数组最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="type">double</span> area = PI * r * r;</span><br><span class="line"><span class="type">int</span> arr[MAX_SIZE];</span><br></pre></td></tr></table></figure><h3 id="2-定义带参数的宏">2. 定义带参数的宏</h3><p>可以像函数一样定义带参数的宏，实现简单的代码替换：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算两数之和</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(a, b) (a + b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算平方</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) (x) * (x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="type">int</span> sum = <span class="built_in">ADD</span>(<span class="number">3</span>, <span class="number">5</span>);  <span class="comment">// 替换为 (3 + 5)</span></span><br><span class="line"><span class="type">int</span> square = <span class="built_in">SQUARE</span>(<span class="number">4</span>);  <span class="comment">// 替换为 (4) * (4)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：带参数的宏需要注意括号的使用，避免运算优先级问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例（缺少括号）</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MUL(a, b) a * b</span></span><br><span class="line"><span class="type">int</span> result = <span class="built_in">MUL</span>(<span class="number">2</span> + <span class="number">3</span>, <span class="number">4</span>);  <span class="comment">// 会被替换为 2 + 3 * 4，结果为14（非预期的20）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MUL(a, b) ((a) * (b))</span></span><br><span class="line"><span class="type">int</span> result = <span class="built_in">MUL</span>(<span class="number">2</span> + <span class="number">3</span>, <span class="number">4</span>);  <span class="comment">// 替换为 ((2 + 3) * 4)，结果为20</span></span><br></pre></td></tr></table></figure><h3 id="3-定义代码片段">3. 定义代码片段</h3><p>可以定义一段代码块，用于简化重复操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 交换两个变量的值</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SWAP(a, b) do &#123; \</span></span><br><span class="line"><span class="meta">    int temp = a; \</span></span><br><span class="line"><span class="meta">    a = b; \</span></span><br><span class="line"><span class="meta">    b = temp; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">5</span>, y = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">SWAP</span>(x, y);  <span class="comment">// 替换为上述代码块</span></span><br></pre></td></tr></table></figure><p>这里的 <code>do-while(0)</code> 用于确保宏在任何场景下都能正确执行（如在 <code>if</code> 语句后无需加括号）。</p><h3 id="4-条件编译">4. 条件编译</h3><p>结合其他预处理指令（如 <code>#ifdef</code>、<code>#ifndef</code>、<code>#else</code>、<code>#endif</code>）实现条件编译：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG  <span class="comment">// 定义DEBUG宏</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="comment">// 调试模式下执行的代码</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> LOG(message) cout &lt;&lt; <span class="string">&quot;Debug: &quot;</span> &lt;&lt; message &lt;&lt; endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="comment">// 发布模式下不执行任何操作</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> LOG(message)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;程序开始执行&quot;</span>);  <span class="comment">// 调试模式下会输出，发布模式下无操作</span></span><br></pre></td></tr></table></figure><h3 id="5-取消宏定义">5. 取消宏定义</h3><p>使用 <code>#undef</code> 可以取消已定义的宏：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100</span></span><br><span class="line">cout &lt;&lt; MAX &lt;&lt; endl;  <span class="comment">// 输出100</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> MAX  <span class="comment">// 取消MAX的定义</span></span></span><br><span class="line"><span class="comment">// cout &lt;&lt; MAX &lt;&lt; endl;  // 错误：MAX未定义</span></span><br></pre></td></tr></table></figure><h3 id="注意事项-3">注意事项</h3><ol><li><strong>宏与函数的区别</strong>：宏是编译前的文本替换，没有类型检查，而函数是运行时的代码调用，有类型检查。</li><li><strong>避免副作用</strong>：带参数的宏可能产生副作用，例如 <code>ADD(a++, b++)</code> 会导致变量被多次递增。</li><li><strong>命名规范</strong>：通常宏名使用全大写字母，以区分普通变量和函数。</li><li><strong>C++中的替代方案</strong>：在很多场景下，<code>const</code> 定义的常量或 <code>inline</code> 函数可以替代宏，提供更好的类型安全性。</li></ol><p>合理使用 <code>#define</code> 可以简化代码，但过度使用可能导致代码可读性和可维护性下降，需谨慎使用。</p><h1>C++中可以把字段和方法定义在class外面</h1><p>在 C++ 中，<strong>允许在 <code>class</code> 外部定义字段（变量）和方法（函数）</strong>，这些被称为<strong>全局变量</strong>和<strong>全局函数</strong>。这种特性源于 C++ 的设计历史和语言哲学，而 C# 不支持类似机制则是由于其纯面向对象的设计理念。</p><h3 id="一、C-为什么允许类外定义字段和方法？">一、C++ 为什么允许类外定义字段和方法？</h3><p>C++ 是从 C 语言发展而来的，而 C 是一种<strong>面向过程（procedural）语言</strong>，其核心语法支持全局变量和全局函数（即不依赖于任何结构体/类的变量和函数）。C++ 为了保持对 C 的兼容性，保留了这一特性，同时增加了面向对象（OOP）的特性（如类、继承等）。</p><p>因此，C++ 本质上是<strong>面向过程和面向对象的混合语言</strong>，既支持类内的成员变量/方法（OOP 特性），也支持类外的全局变量/函数（面向过程特性）。这种设计允许开发者根据场景灵活选择编程范式：</p><ul><li>对于简单逻辑（如工具函数、全局配置），可以用全局函数/变量快速实现；</li><li>对于复杂模块，用类封装数据和行为，保证封装性和复用性。</li></ul><h3 id="二、C-如何实现类外的字段和方法？">二、C++ 如何实现类外的字段和方法？</h3><p>C++ 通过<strong>全局作用域</strong>和<strong>编译-链接模型</strong>支持类外的字段和方法：</p><ol><li><p><strong>全局作用域</strong><br>C++ 存在一个<strong>全局命名空间（global namespace）</strong>，所有未被包裹在 <code>namespace</code> 或 <code>class</code> 中的变量和函数，默认属于这个全局作用域。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量（类外字段）</span></span><br><span class="line"><span class="type">int</span> global_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局函数（类外方法）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; global_count &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类内成员（属于类作用域）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>编译与链接机制</strong><br>全局变量和函数在编译时会被编译器标记为<strong>全局符号（global symbol）</strong>，存储在目标文件（.o/.obj）的符号表中。链接阶段， linker 会将多个目标文件中的全局符号合并，确保整个程序中全局变量/函数的地址唯一（除非用 <code>static</code> 限制为文件内可见）。</p><p>例如，全局变量会被分配在<strong>数据段（.data 或 .bss）</strong>，全局函数会被分配在<strong>代码段（.text）</strong>，其地址在程序加载时确定，可被整个程序访问（只要声明正确）。</p></li><li><p><strong>命名空间（namespace）的补充</strong><br>为了避免全局作用域的命名冲突（多个全局实体重名），C++ 引入了 <code>namespace</code> 机制，将全局实体分组管理，但本质上仍属于类外的全局作用域：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> GlobalUtils &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;  <span class="comment">// 仍为类外字段，属于 GlobalUtils 命名空间</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; ... &#125;  <span class="comment">// 类外方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="三、为什么-C-不支持类外的字段和方法？">三、为什么 C# 不支持类外的字段和方法？</h3><p>C# 是一种<strong>纯面向对象（pure OOP）语言</strong>，其设计哲学要求**“一切皆为对象”**，所有变量和方法必须属于某个类型（<code>class</code>、<code>struct</code>、<code>interface</code> 等），不允许存在独立于类型的全局实体。这一设计主要出于以下原因：</p><ol><li><p><strong>语言设计理念的差异</strong><br>C# 诞生于 OOP 已经成熟的时代，强调封装性和类型化（typed）。将所有成员绑定到类型中，可以：</p><ul><li>避免全局作用域的命名污染和冲突；</li><li>强制开发者通过类型组织代码，提升可读性和可维护性；</li><li>更好地支持模块化和面向对象的核心特性（如继承、多态）。</li></ul></li><li><p><strong>运行时（CLR）的限制</strong><br>C# 代码编译为中间语言（IL），运行在 .NET 公共语言运行时（CLR）上。CLR 的类型系统要求所有变量和方法必须关联到具体类型，IL 指令中不存在“全局符号”的概念，自然无法支持类外的字段和方法。</p></li><li><p><strong>替代方案的存在</strong><br>C# 虽然没有全局函数/变量，但可以通过<strong>静态类（static class）</strong> 实现类似功能。静态类中的静态成员（<code>static</code> 字段/方法）可以在类外通过类名访问，兼具全局访问性和类型封装性：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">GlobalUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Count = <span class="number">0</span>;  <span class="comment">// 类似全局变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintCount</span>()</span> &#123;  <span class="comment">// 类似全局函数</span></span><br><span class="line">        Console.WriteLine(Count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时通过类名访问，仍属于类的成员</span></span><br><span class="line">GlobalUtils.Count = <span class="number">10</span>;</span><br><span class="line">GlobalUtils.PrintCount();</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结-4">总结</h3><ul><li><strong>C++ 允许类外定义字段和方法</strong>：源于对 C 语言的兼容，支持面向过程与面向对象混合编程，通过全局作用域和编译-链接机制实现。</li><li><strong>C# 不支持</strong>：因纯面向对象设计理念，要求所有成员属于类型，且运行时（CLR）不支持全局符号，可通过静态类替代全局实体的功能。</li></ul><p>两种设计各有侧重：C++ 更灵活，兼顾历史兼容性；C# 更强调类型化和封装性，简化代码组织。</p><h1>C++在 #define中使用 ## 和</h1><p>在 C++ 的宏定义中，<code>#</code> 是一个<strong>字符串化操作符（stringizing operator）</strong>，它的作用是<strong>将宏参数转换为字符串常量</strong>。</p><p>在你给出的宏定义中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SHADERTEXTUREPROP(a) \</span></span><br><span class="line"><span class="meta">    FastTexturePropertyName kSLProp ## a(<span class="string">&quot;_&quot;</span> #a, <span class="string">&quot;_&quot;</span> #a <span class="string">&quot;_ST&quot;</span>, <span class="string">&quot;_&quot;</span> #a <span class="string">&quot;_TexelSize&quot;</span>, <span class="string">&quot;_&quot;</span> #a <span class="string">&quot;_HDR&quot;</span>)</span></span><br></pre></td></tr></table></figure><p><code>#a</code> 的含义是<strong>将宏参数 <code>a</code> 转换为以该参数名为内容的字符串</strong>。例如，当使用 <code>SHADERTEXTUREPROP(MainTex)</code> 调用这个宏时：</p><ul><li><code>#a</code> 会被替换为 <code>&quot;MainTex&quot;</code>（字符串）</li><li>结合前后的 <code>&quot;_&quot;</code>，会生成 <code>&quot;_MainTex&quot;</code>、 <code>&quot;_MainTex_ST&quot;</code> 等字符串</li></ul><p>展开后的完整代码会是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FastTexturePropertyName <span class="title">kSLPropMainTex</span><span class="params">(<span class="string">&quot;_MainTex&quot;</span>, <span class="string">&quot;_MainTex_ST&quot;</span>, <span class="string">&quot;_MainTex_TexelSize&quot;</span>, <span class="string">&quot;_MainTex_HDR&quot;</span>)</span></span></span><br></pre></td></tr></table></figure><h3 id="补充说明：">补充说明：</h3><p>宏中还用到了 <code>##</code> 操作符（连接操作符），它的作用是<strong>将两个标识符拼接成一个新的标识符</strong>。<br>在上面的例子中，<code>kSLProp ## a</code> 会将 <code>kSLProp</code> 与参数 <code>a</code>（<code>MainTex</code>）拼接，生成新的变量名 <code>kSLPropMainTex</code>。</p><p>总结：</p><ul><li><code>#</code>：将宏参数转换为字符串（字符串化）</li><li><code>##</code>：将两个标识符拼接成一个新标识符（连接）</li></ul><p>这两个操作符是 C++ 宏定义中常用的“元编程”工具，用于动态生成代码元素（如变量名、字符串），减少重复代码。</p><h1>关于C++头文件中出现的前置声明</h1><p>在 C++ 头文件中，类声明之前出现的大量 <code>struct</code> 声明（如 <code>CoreCameraValues</code>、<code>SharedRendererScene</code> 等），主要作用是<strong>提前声明类中会用到的类型，为后续的类定义提供类型支持</strong>，具体原因如下：</p><h3 id="1-解决“类型依赖”问题">1. 解决“类型依赖”问题</h3><p>C++ 要求“使用一个类型前必须先声明它”。在 <code>Camera</code> 类的定义中，很可能会用到这些 <code>struct</code> 作为成员变量类型、函数参数类型或返回值类型。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> : <span class="keyword">public</span> Behaviour &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CoreCameraValues* m_CoreValues;  <span class="comment">// 使用CoreCameraValues作为成员类型</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetCullingParams</span><span class="params">(<span class="type">const</span> CullingParameters&amp; params)</span></span>;  <span class="comment">// 使用CullingParameters作为参数</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果不在 <code>Camera</code> 类之前声明这些 <code>struct</code>，编译器会因为“未识别的类型”而报错。因此，提前声明这些结构体是为了让编译器知道“这些类型存在”，确保 <code>Camera</code> 类的定义能够正常编译。</p><h3 id="2-避免“循环依赖”">2. 避免“循环依赖”</h3><p>在大型项目（如游戏引擎中的相机模块）中，类与类之间往往存在复杂的依赖关系。例如：</p><ul><li><code>Camera</code> 类可能需要引用 <code>CullingParameters</code> 结构体；</li><li><code>CullingParameters</code> 结构体可能又需要引用 <code>Camera</code> 类的某些成员或枚举。</li></ul><p>这种情况下，如果将 <code>struct</code> 的完整定义写在 <code>Camera</code> 类之后，会导致“循环依赖”（编译器处理 <code>Camera</code> 时不认识 <code>CullingParameters</code>，处理 <code>CullingParameters</code> 时又不认识 <code>Camera</code>）。</p><p>通过在 <code>Camera</code> 类之前<strong>前置声明</strong>这些 <code>struct</code>（只声明“存在这个类型”，不定义具体成员），可以暂时打破循环依赖，让编译器先接受 <code>Camera</code> 类的定义，后续再通过其他头文件提供这些 <code>struct</code> 的完整定义。</p><h3 id="3-减少“头文件冗余”">3. 减少“头文件冗余”</h3><p>这些 <code>struct</code> 的完整定义可能非常复杂，且可能被多个类（不仅是 <code>Camera</code>）使用。如果在 <code>Camera</code> 类的头文件中直接包含它们的完整定义，会导致：</p><ul><li>头文件体积膨胀，编译速度变慢；</li><li>一旦这些 <code>struct</code> 的定义修改，所有包含该头文件的代码都需要重新编译。</li></ul><p>因此，通常的做法是：</p><ol><li>在 <code>Camera.h</code> 中<strong>只前置声明</strong>这些 <code>struct</code>（告诉编译器“有这个类型”）；</li><li>在专门的头文件（如 <code>CullingParameters.h</code>、<code>CoreCameraValues.h</code>）中提供它们的完整定义；</li><li><code>Camera</code> 类的实现文件（<code>Camera.cpp</code>）中再 <code>#include</code> 这些头文件，获取完整定义。</li></ol><p>这样既保证了 <code>Camera.h</code> 的简洁性，又避免了不必要的编译依赖。</p><h3 id="总结-5">总结</h3><p><code>Camera</code> 类声明前的 <code>struct</code> 声明是 <strong>“前置声明（forward declaration）”</strong> 技术的应用，主要目的是：</p><ul><li>让编译器识别 <code>Camera</code> 类中使用的各种类型，避免“未声明类型”错误；</li><li>解决复杂项目中的类型循环依赖问题；</li><li>减少头文件冗余，提高编译效率。</li></ul><p>这是 C++ 大型项目中管理类型依赖的常见手段，尤其在模块化程度高的代码（如游戏引擎）中广泛使用。</p><p>在 C++ 中，编译器找到这些类型的完整定义，依赖于 <strong>前置声明 + 头文件包含</strong> 的配合机制，以及编译和链接的分工。具体过程可以分为两个阶段：<strong>编译阶段</strong>（找到类型的完整定义）和<strong>链接阶段</strong>（找到类型相关的实体地址）。</p><h3 id="一、编译阶段：如何找到类型的完整定义？">一、编译阶段：如何找到类型的完整定义？</h3><p>当编译器在 <code>Camera</code> 类中遇到前置声明的类型（如 <code>struct CoreCameraValues</code>）时，它只知道“这个类型存在”，但不知道其内部成员（大小、方法等）。要完成编译，必须在<strong>使用该类型的具体代码处</strong>找到其完整定义。</p><p>这个过程通过以下方式实现：</p><ol><li><p><strong>前置声明让编译器“暂时接受”类型</strong><br>前置声明（如 <code>struct CoreCameraValues;</code>）告诉编译器：“存在一个名为 <code>CoreCameraValues</code> 的结构体，后续会提供完整定义”。此时，编译器允许在 <code>Camera</code> 类中用该类型声明<strong>指针、引用或函数参数/返回值</strong>（这些场景不需要知道类型的具体大小和成员）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Camera.h</span></span><br><span class="line"><span class="comment">// 前置声明</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CoreCameraValues</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CoreCameraValues* m_values;  <span class="comment">// 允许：指针不需要知道类型大小</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">SetValues</span><span class="params">(<span class="type">const</span> CoreCameraValues&amp; values)</span></span>;  <span class="comment">// 允许：引用作为参数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>完整定义通过头文件引入</strong><br>当代码需要<strong>访问该类型的成员</strong>（如 <code>m_values-&gt;field</code>）或<strong>创建其实例</strong>（如 <code>CoreCameraValues values;</code>）时，编译器必须知道类型的完整定义。这些完整定义通常放在专门的头文件中（如 <code>CoreCameraValues.h</code>），并在<strong>使用该类型的 <code>.cpp</code> 文件</strong>中通过 <code>#include</code> 引入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Camera.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Camera.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreCameraValues.h&quot;</span>  <span class="comment">// 包含CoreCameraValues的完整定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Camera::SomeMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    m_values-&gt;width = <span class="number">1024</span>;  <span class="comment">// 此时编译器已知晓CoreCameraValues的成员，合法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于跨文件的依赖，只要在编译每个 <code>.cpp</code>（编译单元）时，确保所有被使用的类型在<strong>首次需要完整定义的地方之前</strong>已经通过头文件引入，编译器就能找到它们。</p></li><li><p><strong>头文件的“包含链”传递定义</strong><br>有时，类型的完整定义可能通过“间接包含”传递。例如：</p><ul><li><code>CoreCameraValues.h</code> 可能包含 <code>MathTypes.h</code>（定义了 <code>Vector2f</code>）；</li><li><code>Camera.cpp</code> 包含 <code>CoreCameraValues.h</code> 后，也就间接获得了 <code>Vector2f</code> 的定义。</li></ul><p>编译器会沿着 <code>#include</code> 形成的“包含链”查找所有需要的类型定义。</p></li></ol><h3 id="二、链接阶段：如何找到类型相关的实体？">二、链接阶段：如何找到类型相关的实体？</h3><p>如果这些 <code>struct</code> 包含非内联函数（即函数体定义在 <code>.cpp</code> 文件中），链接器需要将函数调用与实际的函数实现关联起来。这个过程依赖于：</p><ol><li><p><strong>符号表记录类型相关的实体</strong><br>每个 <code>.cpp</code> 编译生成的目标文件（<code>.obj</code>/<code>.o</code>）会包含一个<strong>符号表</strong>，记录该文件中定义的函数、变量等（如 <code>CoreCameraValues::Calculate()</code>）。</p></li><li><p><strong>链接器合并符号表</strong><br>链接器会扫描所有目标文件的符号表，将“声明”与“定义”匹配。例如，<code>Camera.cpp</code> 中调用 <code>CoreCameraValues::Calculate()</code> 时，链接器会在 <code>CoreCameraValues.cpp</code> 生成的目标文件中找到该函数的实现地址，完成关联。</p></li></ol><h3 id="三、如果找不到类型会发生什么？">三、如果找不到类型会发生什么？</h3><ol><li><p><strong>编译错误</strong>：如果代码中使用了类型的成员（如 <code>values.width</code>），但未包含其完整定义的头文件，编译器会报“不完全类型”错误（incomplete type）。</p><p>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">CoreCameraValues</span>;  <span class="comment">// 仅前置声明，无完整定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CoreCameraValues values;  <span class="comment">// 错误：需要知道类型大小，但无完整定义</span></span><br><span class="line">    values.width = <span class="number">100</span>;       <span class="comment">// 错误：不知道width成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>链接错误</strong>：如果类型的函数只有声明而无定义（如忘记实现 <code>CoreCameraValues::Calculate()</code>），编译器能通过，但链接器会报“未定义引用”错误（undefined reference）。</p></li></ol><h3 id="总结-6">总结</h3><p>C++ 找到这些类型的完整定义，本质是<strong>编译阶段通过头文件包含传递完整定义，链接阶段通过符号表匹配实体实现</strong>的过程：</p><ol><li>前置声明让编译器暂时接受类型的存在；</li><li>头文件包含提供类型的完整定义，确保编译通过；</li><li>链接器通过符号表关联类型的声明与实现。</li></ol><p>这一机制依赖于开发者正确组织头文件的包含关系，是 C++ 模块化管理的核心基础。</p><p>是的，<strong>如果代码中使用了某个类型（需要其完整定义），但所有 <code>#include</code> 的头文件里都没有该类型的完整定义，编译器一定会报错</strong>。具体报错场景和原因，需要结合“类型的使用方式”和“头文件是否提供定义”进一步拆解：</p><h3 id="一、先明确两个关键前提">一、先明确两个关键前提</h3><p>在判断是否报错前，要先区分两种对类型的使用场景，它们对“是否需要完整定义”的要求不同：</p><ol><li><strong>仅“声明存在”即可的场景</strong>：用类型声明<strong>指针、引用、函数参数/返回值</strong>（不需要知道类型的大小、成员）。<br>此时只需<strong>前置声明</strong>（如 <code>struct CoreCameraValues;</code>），即使头文件没提供完整定义，编译器也不会报错。</li><li><strong>必须“完整定义”的场景</strong>：需要<strong>访问类型成员</strong>（如 <code>obj-&gt;field</code>）、<strong>创建类型实例</strong>（如 <code>CoreCameraValues obj;</code>）、<strong>计算类型大小</strong>（如 <code>sizeof(CoreCameraValues)</code>）。<br>此时必须通过 <code>#include</code> 头文件获取该类型的完整定义，否则必然报错。</li></ol><h3 id="二、具体报错场景与原因">二、具体报错场景与原因</h3><p>如果 <code>#include</code> 的头文件里<strong>没有</strong>前置声明过的类型的完整定义，会触发以下两类错误，核心原因都是“编译器无法获取类型的详细信息”：</p><h4 id="1-编译错误：“不完全类型”（incomplete-type）">1. 编译错误：“不完全类型”（incomplete type）</h4><p>这是最常见的错误，发生在“必须完整定义”但未提供定义的场景。<br>编译器知道“有这个类型”（因为有前置声明），但不知道它的内部结构（成员、大小），无法完成编译。</p><p><strong>示例代码</strong>（错误场景）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Camera.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SomeHeader.h&quot;</span>  <span class="comment">// 假设这个头文件里没有 CoreCameraValues 的完整定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置声明：告诉编译器“CoreCameraValues 存在”</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CoreCameraValues</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 错误：创建实例需要知道 CoreCameraValues 的大小， but 头文件没给完整定义</span></span><br><span class="line">        CoreCameraValues values;  </span><br><span class="line">        <span class="comment">// 错误：访问成员需要知道类型的内部结构， but 头文件没给完整定义</span></span><br><span class="line">        values.width = <span class="number">1024</span>;      </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    CoreCameraValues* m_ptr;  <span class="comment">// 没问题：指针不需要完整定义</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>编译器报错信息</strong>（不同编译器措辞略有差异）：</p><ul><li>GCC/Clang：<code>error: variable has incomplete type 'CoreCameraValues'</code>（变量类型不完整）</li><li>MSVC：<code>error C2079: 'values' uses undefined struct 'CoreCameraValues'</code>（使用了未定义的结构体）</li></ul><h4 id="2-编译错误：“未定义类型”（undefined-type）">2. 编译错误：“未定义类型”（undefined type）</h4><p>如果连“前置声明”都没有，且头文件也没提供定义，编译器会直接认为“这个类型不存在”，报错比“不完全类型”更直接。</p><p><strong>示例代码</strong>（错误场景）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Camera.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SomeHeader.h&quot;</span>  <span class="comment">// 既没有 CoreCameraValues 的前置声明，也没有完整定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 错误：编译器根本不知道 CoreCameraValues 是什么</span></span><br><span class="line">        CoreCameraValues* ptr = <span class="literal">nullptr</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>编译器报错信息</strong>：</p><ul><li>GCC/Clang：<code>error: unknown type name 'CoreCameraValues'</code>（未知类型名）</li><li>MSVC：<code>error C2065: 'CoreCameraValues': undeclared identifier</code>（未声明的标识符）</li></ul><h3 id="三、为什么会出现“头文件没有定义”的情况？">三、为什么会出现“头文件没有定义”的情况？</h3><p>本质是<strong>头文件包含关系遗漏</strong>，常见原因有两种：</p><ol><li><strong>直接遗漏</strong>：忘记 <code>#include</code> 该类型对应的“定义头文件”。<br>比如 <code>CoreCameraValues</code> 的完整定义在 <code>CoreCameraValues.h</code> 里，但 <code>Camera.h</code> 或 <code>Camera.cpp</code> 没写 <code>#include &quot;CoreCameraValues.h&quot;</code>。</li><li><strong>间接包含断裂</strong>：原本依赖“间接包含”（A 头文件包含 B 头文件，B 里有定义），但后续代码修改导致间接包含失效。<br>比如原本 <code>SomeHeader.h</code> 包含 <code>CoreCameraValues.h</code>，但后来有人修改 <code>SomeHeader.h</code> 时删掉了这个 <code>#include</code>，导致依赖它的 <code>Camera.h</code> 失去了定义。</li></ol><h3 id="四、如何解决？">四、如何解决？</h3><p>核心思路是“让编译器在需要完整定义的地方，能通过 <code>#include</code> 找到定义”：</p><ol><li><strong>直接包含对应头文件</strong>：如果知道类型的定义在哪个头文件里，直接在“使用该类型”的 <code>.h</code> 或 <code>.cpp</code> 中 <code>#include</code>。<br>比如 <code>CoreCameraValues</code> 定义在 <code>CoreCameraValues.h</code>，就在 <code>Camera.cpp</code> 里加 <code>#include &quot;CoreCameraValues.h&quot;</code>（如果 <code>Camera.h</code> 里需要完整定义，也可以在 <code>Camera.h</code> 里加）。</li><li><strong>检查间接包含是否有效</strong>：如果依赖间接包含，可打开中间头文件（如 <code>SomeHeader.h</code>）确认是否还包含目标类型的定义，若没有则补充。</li><li><strong>避免“过度依赖间接包含”</strong>：最佳实践是“谁使用，谁包含”——即使间接包含能拿到定义，也建议直接包含目标头文件，避免后续代码修改导致间接包含断裂。</li></ol><h3 id="总结-7">总结</h3><ul><li>若仅用类型声明指针/引用：只需前置声明，头文件没定义也不报错；</li><li>若需访问成员/创建实例：必须通过 <code>#include</code> 头文件获取完整定义，否则必报“不完全类型”或“未定义类型”错误；</li><li>报错的本质是“编译器无法获取类型的详细信息（大小、成员）”，解决方式是补全对应的头文件包含。<br>是的，如果 <code>SomeHeader.h</code> 中通过 <code>#include</code> 包含了 <code>CoreCameraValues</code> 的完整定义（或者 <code>SomeHeader.h</code> 自身就定义了 <code>CoreCameraValues</code>），那么即使 <code>Camera.h</code> 中没有直接包含 <code>CoreCameraValues</code> 的定义，也不会报错。这是因为 <code>#include</code> 指令会将被包含文件的内容“复制粘贴”到当前文件中，形成一个完整的预处理结果（编译单元），编译器能在这个合并后的内容中找到所需的类型定义。</li></ul><h3 id="具体示例说明">具体示例说明</h3><p>假设项目文件关系如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CoreCameraValues.h</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CoreCameraValues</span> &#123;</span><br><span class="line">    <span class="type">int</span> width;  <span class="comment">// 完整定义：包含成员</span></span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SomeHeader.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreCameraValues.h&quot;</span>  <span class="comment">// 包含CoreCameraValues的完整定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Camera.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SomeHeader.h&quot;</span>  <span class="comment">// 包含SomeHeader.h，间接获得CoreCameraValues的定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Camera</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CoreCameraValues values;  <span class="comment">// 合法：编译器通过SomeHeader.h间接找到完整定义</span></span><br><span class="line">        values.width = <span class="number">1024</span>;      <span class="comment">// 合法：已知width成员</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ol><li><code>Camera.h</code> 包含 <code>SomeHeader.h</code>；</li><li><code>SomeHeader.h</code> 包含 <code>CoreCameraValues.h</code>，而 <code>CoreCameraValues.h</code> 提供了 <code>CoreCameraValues</code> 的完整定义；</li><li>预处理后，<code>Camera.h</code> 的内容会间接包含 <code>CoreCameraValues</code> 的定义，因此编译器能识别该类型的成员和大小，不会报错。</li></ol><h3 id="注意事项-4">注意事项</h3><p>虽然“间接包含”能解决类型定义的问题，但实际开发中<strong>不推荐过度依赖这种方式</strong>，原因如下：</p><ol><li><p><strong>可读性差</strong>：其他开发者阅读 <code>Camera.h</code> 时，无法直接知道 <code>CoreCameraValues</code> 的定义来自哪里，需要逐层追溯 <code>SomeHeader.h</code>，增加理解成本。</p></li><li><p><strong>脆弱性高</strong>：如果未来有人修改 <code>SomeHeader.h</code> 并移除 <code>#include &quot;CoreCameraValues.h&quot;</code>，<code>Camera.h</code> 会突然出现“类型未定义”错误，且排查原因较困难。</p></li><li><p><strong>编译效率低</strong>：<code>SomeHeader.h</code> 可能包含很多无关的定义（如其他结构体、函数），间接包含会导致 <code>Camera.h</code> 的预处理结果变大，增加编译时间。</p></li></ol><h3 id="最佳实践">最佳实践</h3><p><strong>“谁使用，谁直接包含”</strong>：如果 <code>Camera</code> 类需要 <code>CoreCameraValues</code> 的完整定义，最好在 <code>Camera.h</code> 或 <code>Camera.cpp</code> 中<strong>直接包含</strong>其定义所在的头文件（如 <code>#include &quot;CoreCameraValues.h&quot;</code>），而非依赖间接包含。这样既清晰又可靠，避免隐藏依赖带来的问题。</p><p>总结：间接包含确实能让编译器找到类型定义，避免报错，但出于代码可读性和维护性，建议优先使用直接包含。</p><p>在 <code>.cpp</code> 文件中<strong>同样会有前置声明的场景</strong>，但使用目的和头文件（<code>.h</code>）中有明显区别——核心仍是遵循“<strong>编译器仅需最小信息</strong>”的原则，不过 <code>.cpp</code> 中的前置声明更多是为了<strong>简化局部代码依赖</strong>，而非优化头文件的“依赖传递”（头文件的前置声明更侧重减少其他文件的编译连锁反应）。</p><h3 id="一、-cpp-文件中使用前置声明的典型场景">一、.cpp 文件中使用前置声明的典型场景</h3><h4 id="1-局部使用某类型（无需完整定义），且不想包含头文件">1. 局部使用某类型（无需完整定义），且不想包含头文件</h4><p>当 <code>.cpp</code> 中仅用某类型的<strong>指针、引用、函数声明</strong>（无需创建实例、访问成员）时，可通过前置声明避免 <code>#include</code> 头文件——尤其适合“临时用一次”或“避免引入复杂头文件”的场景，能轻微提升编译效率（减少头文件展开的开销）。</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Camera.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Camera.h&quot;</span>  <span class="comment">// 仅包含当前类的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置声明：仅在当前.cpp中用一次CoreCameraValues的指针，无需#include其头文件</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CoreCameraValues</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部函数：参数是CoreCameraValues的指针（仅需声明）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintCameraInfo</span><span class="params">(CoreCameraValues* values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (values != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意：这里不能访问values-&gt;width（需要完整定义），只能做指针判空等操作</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Camera values exist\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若后续需要访问成员，再在需要的地方#include头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreCameraValues.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CoreCameraValues values;</span><br><span class="line">    values.width = <span class="number">1024</span>;  <span class="comment">// 访问成员：必须包含头文件</span></span><br><span class="line">    <span class="built_in">PrintCameraInfo</span>(&amp;values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-解决“局部循环依赖”">2. 解决“局部循环依赖”</h4><p>若 <code>.cpp</code> 中某局部代码需要同时用到两个互相包含头文件的类型（循环依赖），且仅需其中一个类型的“存在性”（指针/引用），前置声明可打破循环。</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;A.h&quot;</span>  <span class="comment">// A的头文件中可能包含了B的前向声明，但B的头文件又包含A的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置声明B：避免直接#include &quot;B.h&quot;（否则触发A和B的头文件循环包含）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::DoSomething</span><span class="params">(B* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        b-&gt;<span class="built_in">CallMethod</span>();  <span class="comment">// 若CallMethod()的声明在B的前置声明后可见，此处可调用（需B的头文件在后续包含）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后续包含B的头文件，获取完整定义（若需要）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;B.h&quot;</span></span></span><br></pre></td></tr></table></figure><h4 id="3-声明局部函数（较少见，但合法）">3. 声明局部函数（较少见，但合法）</h4><p>虽然不推荐，但 <code>.cpp</code> 中也可通过前置声明声明<strong>后续定义的局部函数</strong>（无需在头文件中暴露），避免“函数未声明就调用”的错误。</p><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tool.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前置声明局部函数：告诉编译器“后面会定义这个函数”</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintHelper</span><span class="params">(<span class="type">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ProcessData</span><span class="params">(<span class="type">int</span> data)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">PrintHelper</span>(data);  <span class="comment">// 调用前必须声明（前置声明或提前定义）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义局部函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintHelper</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、-cpp-与-h-中前置声明的核心区别">二、.cpp 与 .h 中前置声明的核心区别</h3><table><thead><tr><th>对比维度</th><th>头文件（.h）中的前置声明</th><th>.cpp 文件中的前置声明</th></tr></thead><tbody><tr><td><strong>核心目的</strong></td><td>减少头文件依赖，避免“依赖传递”（降低其他文件的编译开销）</td><td>简化局部代码依赖，避免引入不必要的头文件（提升当前.cpp的编译效率）</td></tr><tr><td><strong>影响范围</strong></td><td>所有包含该头文件的文件（全局影响）</td><td>仅当前 <code>.cpp</code> 文件（局部影响）</td></tr><tr><td><strong>使用限制</strong></td><td>必须严格控制（避免其他文件因“缺少定义”报错）</td><td>更灵活（仅影响自身，无需考虑其他文件）</td></tr></tbody></table><h3 id="三、注意：-cpp-中前置声明的“局限性”">三、注意：.cpp 中前置声明的“局限性”</h3><p>和头文件一样，若 <code>.cpp</code> 中需要<strong>创建类型实例、访问成员变量/函数、计算类型大小（<code>sizeof</code>）</strong>，仅靠前置声明无法满足——必须通过 <code>#include</code> 头文件获取完整定义，否则编译器会报错（“不完整类型”错误）。</p><p>示例（错误情况）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Camera.cpp</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CoreCameraValues</span>;  <span class="comment">// 仅前置声明</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitCamera</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CoreCameraValues values;  <span class="comment">// 错误：需要完整定义才能创建实例</span></span><br><span class="line">    values.width = <span class="number">1024</span>;      <span class="comment">// 错误：需要完整定义才能访问成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-8">总结</h3><p><code>.cpp</code> 文件中<strong>会用到前置声明</strong>，但其本质是“头文件前置声明逻辑的延伸”——核心仍是根据代码对类型的“使用程度”（仅需存在性 vs 需完整定义），提供编译器所需的最小信息。区别在于：头文件的前置声明更关注“全局依赖优化”，而 <code>.cpp</code> 的前置声明更关注“局部代码简洁性”。</p><h1>C++中的static_cast</h1><p><code>static_cast&lt;T&gt;</code> 是 C++ 中<strong>显式类型转换</strong>的一种安全写法，用于将表达式转换为指定类型<strong>T</strong>。<br>它是 C++ 所引入的多种类型转换操作符之一（还有 <code>dynamic_cast</code>、<code>const_cast</code>、<code>reinterpret_cast</code>），比 C 语言的标准类型强制转换（如 <code>(int)x</code>）更安全、语法更清楚。</p><hr><h2 id="1-基本用法">1. 基本用法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T value = <span class="built_in">static_cast</span>&lt;T&gt;(expression);</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> d = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(d);   <span class="comment">// a 变成 3</span></span><br><span class="line"></span><br><span class="line">Base* pb = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">Derived* pd = <span class="built_in">static_cast</span>&lt;Derived*&gt;(pb); <span class="comment">// ⬅️ 向下转换指针</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-适用场景">2. 适用场景</h2><ul><li><strong>内置类型转换</strong><br>如：<code>double</code> 转 <code>int</code>，<code>float</code> 转 <code>int</code> 等。</li><li><strong>类层次结构下的指针/引用转换</strong><br>如：父类指针转子类指针（向下转型），子类指针转父类指针（向上转型）（但不安全时编译也不会报错，需确保实际对象确实是该类型）。</li><li><strong>void*</strong> 与 具体指针类型的转换<br>如：<code>void*</code> 转 <code>SomeType*</code>。</li><li><strong>相关类型的 user-defined conversion</strong><br>即，如果有<code>operator T()</code>，也会被用到。</li><li><strong>枚举/整型互转</strong><br>如：<code>enum</code> 转 <code>int</code>。</li></ul><hr><h2 id="3-它的优势">3. 它的优势</h2><ul><li><strong>显式、清晰</strong><br>一看 <code>static_cast&lt;T&gt;</code> 就知道这里发生了类型转换，易于查错和维护。</li><li><strong>比 C 风格强转更安全</strong><br>C风格转型如 <code>(T)x</code>，容易不小心用错，且不易区分到底是 const_cast、static_cast 还是 reinterpret_cast。<code>static_cast</code> 只能用于“静态已知、语法明确”的类型转换，很多非法转换编译器直接报错。</li></ul><hr><h2 id="4-注意事项">4. 注意事项</h2><ul><li><strong>不会做运行时安全检查</strong>，如指针类型向下转换时，如果类型不是实际的派生类，对象用错类型会引发未定义行为。所以转换前要确保类型关系正确。如果你要做运行时检查（比如多态类型非安全转换），应使用 <code>dynamic_cast</code>。</li><li>严格限制转换范围，只允许已知可行的类型之间转换。</li><li>不可用于去除对象的 const、volatile 等属性（那要用 <code>const_cast</code>）。</li></ul><hr><h2 id="5-小结一句话">5. 小结一句话</h2><p><strong><code>static_cast&lt;T&gt;</code> 是 C++ 中最常用的类型安全转换操作符，适用于绝大多数已知可行的类型转换，比C风格强制类型转换安全、易读、易查错。</strong></p><hr><h1>关于左值和右值的定义</h1><p>这个问题很棒，也是现代C++语法的重点之一！<br>下面详细讲讲 <code>*</code> 和 <code>&amp;</code> 在变量定义、函数参数等场景下的含义，尤其关注“左值”“右值”相关的写法和区别。</p><hr><h2 id="1-和-的基本作用">1. <code>*</code> 和 <code>&amp;</code> 的基本作用</h2><ul><li><code>*</code> : 声明一个<strong>指针类型</strong>，表示该变量是一个指针，可以存地址。</li><li><code>&amp;</code> : 声明一个<strong>引用类型</strong>，表示该变量是对另一个变量的一个“别名”，可以直接操作原对象。</li></ul><hr><h2 id="2-左值、右值的基本概念">2. 左值、右值的基本概念</h2><ul><li><strong>左值(lvalue)</strong>：有名字，可以被取地址的内存对象。简单理解为“你能在等号左边写的东西”。</li><li><strong>右值(rvalue)</strong>：通常是临时对象、字面量等，没有具体名字，也不能取地址（比如 5, a+b, 函数返回的匿名临时等）。</li></ul><hr><h2 id="3-和-在声明中的区别">3. <code>&amp;</code> 和 <code>&amp;&amp;</code> 在声明中的区别</h2><h3 id="a-单独的-——-左值引用">a) 单独的 <code>&amp;</code> —— <strong>左值引用</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;      <span class="comment">// b 是 a 的引用，b和a指的是同一块内存</span></span><br><span class="line">b = <span class="number">15</span>;          <span class="comment">// 现在a也变成15了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> &amp;x)</span>   <span class="comment">// 只能传给f一个左值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">f</span>(a);            <span class="comment">// OK</span></span><br><span class="line"><span class="built_in">f</span>(<span class="number">20</span>);           <span class="comment">// 错误！字面量不是左值</span></span><br></pre></td></tr></table></figure><p>结论：<strong><code>&amp;</code> 定义的是“左值引用”</strong>，只能引用有名字的对象（左值）。</p><hr><h3 id="b-两个-——-右值引用（C-11新引入）">b) 两个 <code>&amp;&amp;</code> —— <strong>右值引用</strong>（C++11新引入）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp;r = <span class="number">20</span>;    <span class="comment">// r 绑定到字面量20（临时对象）</span></span><br><span class="line">r = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">g</span><span class="params">(<span class="type">int</span> &amp;&amp;y)</span>  <span class="comment">// 只能传给g一个右值（如匿名临时、move出来的变量等）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    y = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">g</span>(<span class="number">100</span>);          <span class="comment">// OK</span></span><br><span class="line"><span class="type">int</span> c = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">g</span>(c);            <span class="comment">// 错误！c是左值</span></span><br><span class="line"><span class="built_in">g</span>(std::<span class="built_in">move</span>(c)); <span class="comment">// OK! 被move后c变成右值</span></span><br></pre></td></tr></table></figure><p>结论：<strong><code>&amp;&amp;</code> 定义的是“右值引用”</strong>，只能引用无名的对象（右值）。</p><hr><h2 id="4-常用场景小结">4. 常用场景小结</h2><ul><li><code>int* p;</code>  // 指针类型（*没涉及左值右值），p是指向int的指针</li><li><code>int &amp;a = b;</code>  // 左值引用，只能绑定左值</li><li><code>int &amp;&amp;c = 123;</code>  // 右值引用，只能绑定右值</li><li><code>int foo(int&amp; x);</code> // 参数接受左值</li><li><code>int foo(int&amp;&amp; x);</code> // 参数接受右值</li></ul><hr><h2 id="5-总结一句话">5. 总结一句话</h2><ul><li><code>*</code> ：和左值右值没有直接关系，是指针符号</li><li><code>&amp;</code> ：在类型名后面作为引用，单独一个是&quot;左值引用&quot;，两个<code>&amp;&amp;</code>就是&quot;右值引用&quot;</li><li><code>左值引用</code> 只能绑定左值；<code>右值引用</code> 只能绑定右值</li></ul><hr><h2 id="附赠：什么时候用右值引用-？">附赠：什么时候用右值引用 <code>&amp;&amp;</code>？</h2><ul><li>普通参数/引用/返回值/成员变量，绝大多数用 <code>&amp;</code> 即可（左值引用）</li><li>想要<strong>接收临时对象</strong>、实现<strong>移动语义</strong>、<strong>完美转发</strong>，用 <code>&amp;&amp;</code>（右值引用）</li></ul><hr><p><strong>结论</strong>：</p><ul><li><code>*</code> 是指针声明</li><li><code>&amp;</code> 一个是左值引用，绑定左值</li><li><code>&amp;&amp;</code> 是右值引用，绑定右值</li><li>左值引用和右值引用的最大区别在于所能绑定的对象类型不同。</li></ul><h1>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/652187383">【CMake】 简单的CMakeLists命令</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构——树</title>
      <link href="/posts/62b3cca9/"/>
      <url>/posts/62b3cca9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>二叉树的各种遍历方式的完整C++代码在<a href="https://github.com/SoIncredible/programming-practice/blob/master/Code/CPP/Tree/BinaryTree/BinaryTree.h">github仓库上</a></p></blockquote><h1>二叉树</h1><h2 id="遍历">遍历</h2><ul><li>按照遍历方式可以分为递归遍历和迭代遍历</li><li>按照遍历结果可以分成深度遍历和广度遍历</li></ul><h2 id="广度优先遍历">广度优先遍历</h2><h3 id="层序遍历">层序遍历</h3><h2 id="深度优先遍历">深度优先遍历</h2><p>深度优先遍历按照遍历方式可以分为递归遍历和迭代遍历, 按照遍历结果可以分为前序遍历、中序遍历和后续遍历, 前、中、后序指的是父节点的遍历顺序.</p><h3 id="递归方式">递归方式</h3><p>递归方式调用栈这种方式与二叉树的三种深度优先遍历方式天然契合 节点的遍历顺序和节点的处理顺序完全一致<br>使用迭代方式是需要我们额外模拟调用栈的作用机制 让他表现为节点的便利顺序 和处理顺序一致</p><p><strong>前序遍历</strong></p><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/description/">配套练习 144.二叉树的前序遍历</a></p><blockquote><p>遍历顺序 中-&gt;左-&gt;右</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> BinaryTree&lt;T&gt;::<span class="built_in">InnerPreorderTraversalRecursion</span>(BinaryTreeNode&lt;T&gt; *cur, Queue&lt;BinaryTreeNode&lt;T&gt;&gt; *queue)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 前序遍历 中-&gt;左-&gt;右</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出cur的index</span></span><br><span class="line">    queue-&gt;<span class="built_in">EnQueue</span>(cur);</span><br><span class="line">    <span class="comment">// 遍历左</span></span><br><span class="line">    <span class="built_in">InnerPreorderTraversalRecursion</span>(cur-&gt;left, queue);</span><br><span class="line">    <span class="comment">// 遍历右</span></span><br><span class="line">    <span class="built_in">InnerPreorderTraversalRecursion</span>(cur-&gt;right, queue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> BinaryTree&lt;T&gt;::<span class="built_in">PreorderTraversalRecursion</span>(Queue&lt;BinaryTreeNode&lt;T&gt;&gt; *queue)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在使用C++时，当向一个方法请求返回一组数据结构时，最好的做法是调用这个方法，并向这个方法中传入用来存储结果的指针</span></span><br><span class="line">    <span class="comment">// 因为这样能确保这个指针的new和delete是成对出现的</span></span><br><span class="line">    <span class="comment">// 如果你在这个方法内部new了一个队列 然后返回出去 外部很有可能在完成操作后忘记对这个队列执行delete操作，这就造成内存泄漏了</span></span><br><span class="line">    <span class="built_in">InnerPreorderTraversalRecursion</span>(_root, queue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中序遍历</strong></p><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/description/">配套练习 94.二叉树的中序遍历</a><br>⚠️注意: 中序遍历要比前序和后序特殊 因为遍历树节点的顺序和处理树节点的顺序是不一样的</p><blockquote><p>遍历顺序 左-&gt;中-&gt;右</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> BinaryTree&lt;T&gt;::<span class="built_in">InorderTraversalRecursion</span>(Queue&lt;BinaryTreeNode&lt;T&gt;&gt; *queue)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">InnerInorderTraversalRecursion</span>(_root, queue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> BinaryTree&lt;T&gt;::<span class="built_in">InnerInorderTraversalRecursion</span>(BinaryTreeNode&lt;T&gt; *cur, Queue&lt;BinaryTreeNode&lt;T&gt;&gt; *queue)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 前序遍历 中-&gt;左-&gt;右</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历左</span></span><br><span class="line">    <span class="built_in">InnerInorderTraversalRecursion</span>(cur-&gt;left, queue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出cur的index</span></span><br><span class="line">    queue-&gt;<span class="built_in">EnQueue</span>(cur);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历右</span></span><br><span class="line">    <span class="built_in">InnerInorderTraversalRecursion</span>(cur-&gt;right, queue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后序遍历</strong></p><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/">配套练习 145.二叉树的后序遍历</a></p><blockquote><p>遍历顺序 左-&gt;右-&gt;中</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> BinaryTree&lt;T&gt;::<span class="built_in">InnerPostorderTraversalRecursion</span>(BinaryTreeNode&lt;T&gt; *cur, Queue&lt;BinaryTreeNode&lt;T&gt;&gt; *queue)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 前序遍历 中-&gt;左-&gt;右</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历左</span></span><br><span class="line">    <span class="built_in">InnerPostorderTraversalRecursion</span>(cur-&gt;left, queue);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历右</span></span><br><span class="line">    <span class="built_in">InnerPostorderTraversalRecursion</span>(cur-&gt;right, queue);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 输出cur的index</span></span><br><span class="line">     queue-&gt;<span class="built_in">EnQueue</span>(cur);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代方式</p><ul><li>前序遍历</li><li>后序遍历</li><li>中序遍历 ⚠️注意: 中序遍历要比前序和后序特殊 因为遍历树节点的顺序和处理树节点的顺序是不一样的</li></ul><h3 id="迭代方式">迭代方式</h3><p><strong>前序方式</strong></p><p>不能用递归了, 那就要用迭代的方式尝试模拟递归的思想, 那么我们就需要在代码中手动的创建一个栈, 用来模拟递归方式中的函数调用栈<br>由二叉树节点的结构可知, 我们可以通过一个节点找到该节点的左右孩子(如果有的话),</p><p><strong>后序遍历</strong><br><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/">配套练习 145.二叉树的后序遍历</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> BinaryTree&lt;T&gt;::<span class="built_in">PostorderTraversalIteration</span>(Queue&lt;BinaryTreeNode&lt;T&gt;&gt; *queue)</span><br><span class="line">&#123;</span><br><span class="line">    Stack&lt;BinaryTreeNode&lt;T&gt;&gt; stack = Stack&lt;BinaryTreeNode&lt;T&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    stack.<span class="built_in">Push</span>(_root);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 而后续遍历的顺序是左 -&gt; 右 -&gt; 中 需要将队列翻转一下</span></span><br><span class="line">    <span class="keyword">while</span>(!stack.<span class="built_in">IsEmpty</span>())&#123;</span><br><span class="line">        BinaryTreeNode&lt;T&gt; *node = stack.<span class="built_in">Pop</span>();</span><br><span class="line">        queue-&gt;<span class="built_in">EnQueue</span>(node);</span><br><span class="line">        <span class="keyword">if</span>(node-&gt;left != <span class="literal">nullptr</span>)&#123;</span><br><span class="line">            stack.<span class="built_in">Push</span>(node-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            stack.<span class="built_in">Push</span>(node-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将队列反转</span></span><br><span class="line"></span><br><span class="line">    queue-&gt;<span class="built_in">Reverse</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中序遍历</p><p>中序遍历需要引入一个cur指针, 思考引入这个指针的目的是什么? 目前我的理解是, 这个指针是一个右转标记, 如果指针是null了, 代表以当前栈顶节点为根结点的树的左子树已遍历完毕</p><h3 id="迭代方式的统一写法-标记法">迭代方式的统一写法(标记法)</h3><p>迭代方式的困难点在于 我们通过二叉树节点 能够遍历节点的方式 和 二叉树的前、中、后序遍历方式都不太一样, 我们可以通过给节点打标记的方式 来判断一个节点到底是该进行遍历还是写入结果集和.</p><h1>注意</h1><p>不同的编译器 Win上的MinGW和Mac上的clang貌似对于指针释放操作有不同的处理，必须下面这段代码，笔者在二叉树类的析构方法中把二叉树中所有的节点全部释放掉：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">BinaryTree&lt;T&gt;::~<span class="built_in">BinaryTree</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 前序遍历所有节点</span></span><br><span class="line">    Queue&lt;BinaryTreeNode&lt;T&gt;&gt; *queue = <span class="keyword">new</span> Queue&lt;BinaryTreeNode&lt;T&gt;&gt;();</span><br><span class="line">    <span class="built_in">PreorderTraversalRecursion</span>(queue);</span><br><span class="line">    <span class="keyword">while</span>(!queue-&gt;<span class="built_in">IsEmpty</span>())&#123;</span><br><span class="line">        BinaryTreeNode&lt;T&gt;* node = queue-&gt;<span class="built_in">DeQueue</span>();</span><br><span class="line">        <span class="keyword">delete</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用二叉树类的地方main方法中，手动释放掉二叉树对象占用的内存，在Mac的Clang中，该操作会报错，但是在Win的MinGW中，就不会有这个问题。</p><h1>时间复杂度</h1><p>常用时间复杂度表示<code>O(n)</code> <code>O(log n)</code> <code>O(n!)</code> <code>O(n^2)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiply</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> B?<span class="built_in">multiply</span>(A&lt;&lt;<span class="number">1</span>,B&gt;&gt;<span class="number">1</span>)+(B&amp;<span class="number">1</span>?A:<span class="number">0</span>):<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码功能<br>这段代码通过递归和位操作实现了两个整数的乘法，避免了直接使用 * 运算符。</p><p>关键点<br>位操作：</p><p>左移操作 A &lt;&lt; 1 相当于 A * 2。<br>右移操作 B &gt;&gt; 1 相当于 B / 2。<br>按位与操作 B &amp; 1 用于检查 B 的最低位是否为 1。<br>递归：</p><p>每次递归计算当前位的贡献，并将问题规模缩小一半，直到 B == 0。<br>时间复杂度：</p><p>每次递归将 B 减少一半，因此递归深度为 O(log B)。<br>每次递归的计算量为常数，因此总时间复杂度为 O(log B)。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Unity中的动态链接库</title>
      <link href="/posts/4ea0c9c3/"/>
      <url>/posts/4ea0c9c3/</url>
      
        <content type="html"><![CDATA[<h1>啥是动态链接库</h1><p>如果你在搜索引擎上直接搜索动态链接库的定义, 搜索结果大部分都会与<a href="https://learn.microsoft.com/zh-cn/troubleshoot/windows-client/setup-upgrade-and-drivers/dynamic-link-library">Microsoft以及Windows平台有关</a>: 动态链接库（Dynamic Link Library，DLL）是微软公司在Windows操作系统中实现共享函数库的一种机制，旨在解决静态库代码冗余问题。其核心原理是程序编译时仅标记所需库文件，运行时由系统加载器动态载入内存，实现多程序共享同一份库代码，减少资源占用。在非Windows平台上也存在和动态链接库一样共享代码的机制, 只是不叫动态链接库罢了. 笔者在这里想讨论是DLL这种代码共享的思想机制, 不局限在Windowsw平台上, 因此下文中任何平台的代码共享库笔者全部称之为DLL或动态库.</p><p>动态链接库分为两种: 由<strong>原生语言(Native Languagege)*编写并编译的</strong>原生DLL<strong>和由</strong>托管类语言(Managed Language)<strong>编写并编译的</strong>托管DLL**.<br>原生DLL是传统意义上的DLL, 这类DLL在不同的平台有各自动态链接库的文件格式. 在Windows上是<code>.dll</code>, 在Mac上是<code>.dylib</code>, 在Linux上是<code>.so</code>. 原生语言编写出来的程序，经过编译后直接生成当前操作系统和硬件平台的“本地机器码”（Native Code）。程序无需额外的“虚拟机”、“解释器”、“运行时中间层”就能直接在操作系统之上被加载和运行。原生语言天然与操作系统、硬件架构强相关。以下语言都是原生语言: C、C++、Objective-C（macOS/iOS下）、Rust（默认就是直接编译本地机器码）、Go语言（Go 1.5以后完全支持无需虚拟机，能直接编译原生机器码）、Fortran、Delphi/Pascal（比如 Embarcadero Delphi）、Zig、Assembly 汇编（最彻底的native code）、Swift（编译模式不同，本地或托管两种，主流iOS开发是本地的）.</p><p>托管DLL与原生DLL不同, C#和Java都是托管语言, 因为它们的编译器并不是直接将它们编译成机器码, 而是有一个中间态, 比如C#的中间态就是IL, 然后运行时由CLR解析执行IL代码, Java的JVM应该也是类似的机制. 因此, 使用C#等托管语言导出的dll并不是传统意义上的DLL.</p><h1>在Unity中使用DLL</h1><p>我们先来说托管代码, 笔者作为Unity开发者, 就以C#为例来讲, C#语言编译导出的dll, 本质上是一组程序集编译导出的IL代码集合, 根据上文的描述, C#的编译其实不受平台的限制, 这点很好理解, 因此各个平台的C#动态库的文件扩展名都是<code>.dll</code>. 因此, <strong>托管类型的.dll格式的动态库是可以在非Windows平台上被正确识别和执行的</strong>, 因此随着.Net支持跨平台, .dll这种文件格式也就出现在了各个平台上, 因此当你在某一个非Windows平台上看到了一个.dll文件被使用并正确执行, 很有可能这是一个C#dll. 当然这是有前提的: 这<strong>类dll必须在.Net环境下才能够正确的执行</strong>. <a href="http://xn--UnityEditor-i98wtf052m.Net">UnityEditor显然是.Net</a>(Mono)环境, 因此C#类型的dll导入进Unity之后就能正确识别并执行. 我们的业务代码可以直接访问C#dll中的成员.</p><p>至于非托管的动态库, 想要在Unity开发中使用就十分麻烦了(不只是Unity, 所有要跨平台的开发调用非托管动态库都十分麻烦), 因为非托管的动态库与平台强绑定, 如果要做跨平台开发, 就需要针对每一个平台构建专门的动态库, 光这一点就十分麻烦, <strong>应当在各自目标平台上构建动态库, 而不是在一个平台上使用交叉编译的方式构建其他平台的动态库.</strong> 除此之外, 还需要开发者使用<code>[DLLImport]</code>属性在C#层手动做一下桥接.</p><p>下面是笔者尝试在Unity中构建一个支持在Arm版本的Windows和Arm版本的Mac平台上调用原生DLL的尝试.</p><h1>Unity中调用非托管的动态库</h1><p>如果想在C#侧使用C++中的一个类的话, 需要将这个类的每一个public成员方法封装一个<strong>静态方法</strong>供C#测调用, 然后C#侧做一个中间层的封装,即在C#侧将这些静态方法重新封装成类.</p><p>以一个Stack结构为例:</p><h2 id="C-侧">C++侧</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StackLib.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> STACKLIBRARY_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACKLIBRARY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> BUILDING_DLL</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> DLL_PUBLIC __declspec(dllexport)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> DLL_PUBLIC __declspec(dllimport)</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> __GNUC__ &gt;= 4</span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> DLL_PUBLIC __attribute__((visibility(<span class="string">&quot;default&quot;</span>)))</span></span><br><span class="line">    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">define</span> DLL_PUBLIC</span></span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stack</span>();</span><br><span class="line">    ~<span class="built_in">Stack</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(<span class="type">int</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::stack&lt;<span class="type">int</span>&gt; stack_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C风格接口导出</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">DLL_PUBLIC Stack* <span class="title">CreateStack</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">DLL_PUBLIC <span class="type">void</span> <span class="title">DestroyStack</span><span class="params">(Stack* instance)</span></span>;</span><br><span class="line"><span class="function">DLL_PUBLIC <span class="type">void</span> <span class="title">Push</span><span class="params">(Stack* instance, <span class="type">int</span> value)</span></span>;</span><br><span class="line"><span class="function">DLL_PUBLIC <span class="type">int</span> <span class="title">Pop</span><span class="params">(Stack* instance)</span></span>;</span><br><span class="line"><span class="function">DLL_PUBLIC <span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">(Stack* instance)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// STACKLIBRARY_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StackLib.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;StackLib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- Stack的实现 ---</span></span><br><span class="line"></span><br><span class="line">Stack::<span class="built_in">Stack</span>() &#123;&#125;</span><br><span class="line">Stack::~<span class="built_in">Stack</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stack::Push</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    stack_.<span class="built_in">push</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Stack::Pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stack_.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 或throw std::underflow_error</span></span><br><span class="line">    <span class="type">int</span> value = stack_.<span class="built_in">top</span>();</span><br><span class="line">    stack_.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Stack::IsEmpty</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack_.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- C 接口实现 ---</span></span><br><span class="line"><span class="function">Stack* <span class="title">CreateStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Stack</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DestroyStack</span><span class="params">(Stack* instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push</span><span class="params">(Stack* instance, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">        instance-&gt;<span class="built_in">Push</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop</span><span class="params">(Stack* instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance ? instance-&gt;<span class="built_in">Pop</span>() : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">(Stack* instance)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance ? instance-&gt;<span class="built_in">IsEmpty</span>() : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Mac上, 导出dylib:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -std=c++11 -dynamiclib -o libStackLibrary.dylib StackLib.cpp</span><br></pre></td></tr></table></figure><p>在Windows上, 导出dll:<br>笔者的操作环境是VMWare下的ArmWin11虚拟机, 使用的是Visual Studio 2022自带的编译器<code>x64 Native Tools Command Prompt for VS 2022</code>, 安装了VisualStudio之后使用Windows自带的搜索功能应该是能搜到的, 打开是一个终端, 输入下面命令:</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cl /LD /DBUILDING_DLL=<span class="number">1</span> StackLib.cpp /Fe:StackLibrary.dll</span><br></pre></td></tr></table></figure><blockquote><p>💡笔者也尝试使用<a href="https://sourceforge.net/projects/mingw-gcc-arm-eabi/">MinGW GCC For ARM</a>来构建DLL, 但是构建出的dll导入到Unity中构建出来exe并不能正确运行, 并没有深究.</p></blockquote><h2 id="C-侧-2">C#侧</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CPP</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StackCaller</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Text Log;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Log.text = <span class="built_in">string</span>.Empty;</span><br><span class="line">            Log.text += <span class="string">&quot;StackCaller start\n&quot;</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;StackCaller start&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建栈实例</span></span><br><span class="line">            <span class="keyword">var</span> stackWrapper = <span class="keyword">new</span> StackCPP();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 入栈操作</span></span><br><span class="line">            stackWrapper.Push(<span class="number">10</span>);</span><br><span class="line">            stackWrapper.Push(<span class="number">20</span>);</span><br><span class="line">            stackWrapper.Push(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 出栈操作并输出结果</span></span><br><span class="line">            <span class="keyword">while</span> (!stackWrapper.IsEmpty())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> <span class="keyword">value</span> = stackWrapper.Pop();</span><br><span class="line">                Log.text += <span class="string">&quot;Popped value: &quot;</span> + <span class="keyword">value</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                Debug.Log(<span class="string">&quot;Popped value: &quot;</span> + <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 销毁栈实例</span></span><br><span class="line">            stackWrapper.DestroyStack();</span><br><span class="line">            Log.text += <span class="string">&quot;Stack destroyed&quot;</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;Stack destroyed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">StackDLL</span>&#123;</span><br><span class="line">        <span class="comment">// 引入C++动态链接库中的函数</span></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;StackLibrary&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">CreateStack</span>()</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;StackLibrary&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">DestroyStack</span>(<span class="params">IntPtr stackWrapper</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;StackLibrary&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params">IntPtr stackWrapper, <span class="built_in">int</span> <span class="keyword">value</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;StackLibrary&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">Pop</span>(<span class="params">IntPtr stackWrapper</span>)</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DllImport(<span class="string">&quot;StackLibrary&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">return: MarshalAs(UnmanagedType.I1)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>(<span class="params">IntPtr stackWrapper</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StackCPP</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IntPtr stackPointer;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StackCPP</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            stackPointer = StackDLL.CreateStack();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StackDLL.Push(stackPointer, <span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Pop</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> StackDLL.Pop(stackPointer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">IsEmpty</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> StackDLL.IsEmpty(stackPointer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DestroyStack</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            StackDLL.DestroyStack(stackPointer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>总结</h1><ul><li>如果你使用的是Mac, 注意你的Mac架构是arm还是x86的, 在Mac平台的BuildPlayer页面, 选择对应的Apple Silicon、Intel或Apple Silicon + Interl.</li><li>在Unity开发场景下, 原生dll适用于必须利用C/C++优势/平台/性能的极特殊场景, 本文只是为了演示作用, 实际开发中是绝对不会在这种场景下调用原生dll的.</li><li>想要在哪个平台跑, 就现在哪个平台上构建原生的dll, 然后将构建出的dll导入到Unity, 再用Unity构建出哪个平台的Package.</li></ul><h1>[DllImport(“__Internal”)]</h1><p>[DllImport(“xxx.dll”)] 是 .NET / C# 的 P/Invoke 语法，作用是让 C# 可以调用外部的 C、C++、Objective-C 等“本地函数”。</p><p>一般写成这样：</p><p>[DllImport(“myPlugin”)]<br>public static extern int MyNativeFunction(int a, int b);<br>2. “__Internal” 特殊含义</p><p>当你用 [DllImport(“__Internal”)] 这样写时，“__Internal”是一个特殊的伪名称，而不是指某个实际文件。<br>其真正含义是：</p><p>让 .NET 或 Unity 在 本进程/本程序/主可执行程序自身 的导出表里寻找本地实现的符号。<br>也就是说，被 [DllImport(“__Internal”)] 标注的方法，对应的本地方法体需要在当前可执行程序内部（而不是某个外部 DLL 文件里）。<br>符号名搜索会在自己的 executable 导出里找。<br>3. 应用场景举例</p><p>场景A：iOS、Mac 等平台（特别是 Unity）</p><p>Unity/IL2CPP 在生成 iOS、Mac 原生工程时，如果你写了：<br>[DllImport(“__Internal”)]<br>public static extern void MyFunc();<br>实际上，IL2CPP 编译器会在最终的 App binary（或 Framework 二进制）里搜 名为 MyFunc 的导出函数，而不是去动态查找某个外部库（.dylib、.so、.dll）。<br>这样做的好处：<br>iOS 平台不允许像 Windows 那样动态链接第三方 DLL，所有 Native 代码都必须静态链接进 App 的主可执行文件中。<br>[DllImport(“__Internal”)] 是唯一安全支持的方式。<br>场景B：自己写好本地函数并链接进主程序</p><p>如果你在构建的主程序中嵌入了自己的 C 代码，可以直接给导出符号以供 .NET 查找，无需拆分外部 DLL 文件。<br>4. 对比调用外部DLL</p><p>[DllImport(“user32.dll”)] 就是在找 Windows 的系统动态库。<br>[DllImport(“__Internal”)] 是在找当前程序（App、自身进程、主 binary）中定义的本地符号——通常只有在本地代码编译成主程序时才会有。<br>5. Unity的常见用法</p><p>在 Unity iOS 插件开发中，Native 代码（C/Objective-C/C++/Swift）最终会被链接进主 app binary，此时 C# 访问原生函数都要用 [DllImport(“__Internal”)]，不能写成 “yourlib.dylib” —— 否则找不到或被苹果审核拒绝。</p><p>[DllImport(“__Internal”)]<br>public static extern void MyObjCFunc();</p><p>[DllImport(“__Internal”)] 让 C#（Mono/.NET/Unity）去主程序自身导出符号表里找函数，而不是去加载某个外部DLL文件。<br>常见于 iOS、Mac Unity 原生插件开发场景。<br>Windows 平台一般用 [DllImport(“xxx.dll”)] 加载外部库。<br>如果你在 Windows 下用 [DllImport(“__Internal”)]，绝大多数情况下用不到（除非自己自定义可执行文件出口，且用Mono/IL2CPP等特殊方案）。</p><h2 id="⚠️注意事项">⚠️注意事项</h2><ul><li><code>unknown type name '__declspec' 和 unknown type name 'class' 错误</code>  <a href="https://blog.csdn.net/lc250123/article/details/81985336">https://blog.csdn.net/lc250123/article/details/81985336</a></li></ul><hr><p>以实现冒泡排序功能为例记录如何在<code>C#</code>和<code>C++</code>中编写、生成和调用DLL</p><h1>CPP中的DLL</h1><h2 id="Mac环境">Mac环境</h2><p>1.创建头文件和CPP文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 创建头文件</span><br><span class="line">touch Head.h</span><br><span class="line"></span><br><span class="line">// 辅助类的方法 </span><br><span class="line">touch Utils.cpp</span><br><span class="line"></span><br><span class="line">// 排序方法</span><br><span class="line">touch SortUtils.cpp</span><br><span class="line"></span><br><span class="line">// 主方法</span><br><span class="line">touch Main.cpp</span><br></pre></td></tr></table></figure><p>2.编写各文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Head.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HEAD_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HEAD_H</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">PrintArr</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Utils.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Head.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(<span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> temp = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">PrintArr</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Sorted Array:&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">    cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SortUtils.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;Head.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> size)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; size - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">          <span class="built_in">Swap</span>(arr[j], arr[j+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">// 操作dll相关头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*BubbleSort)</span><span class="params">(<span class="type">int</span>*,<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*PrintArr)</span><span class="params">(<span class="type">int</span>*,<span class="type">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 加载DLL</span></span><br><span class="line">  <span class="type">void</span> *handle = <span class="built_in">dlopen</span>(<span class="string">&quot;Utils.dylib&quot;</span>,RTLD_LAZY);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 判断DLL是否加载成功</span></span><br><span class="line">  <span class="keyword">if</span>(handle == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Load DLL Fail!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  BubbleSort bubbleSort = <span class="built_in">reinterpret_cast</span>&lt;BubbleSort&gt;(<span class="built_in">dlsym</span>(handle,<span class="string">&quot;BubbleSort&quot;</span>));</span><br><span class="line">  PrintArr printArr = <span class="built_in">reinterpret_cast</span>&lt;PrintArr&gt;(<span class="built_in">dlsym</span>(handle,<span class="string">&quot;PrintArr&quot;</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 判断DLL中的两个函数是否存在</span></span><br><span class="line">  <span class="keyword">if</span>(bubbleSort == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Load BubbleSort Func Fail!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(printArr == <span class="literal">nullptr</span>)&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Load PrintArr Func Fail!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Input Random Numbers:(Press X and then Press Enter to End Input)&quot;</span> &lt;&lt; endl;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt; randomNums;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(cin &gt;&gt; number)&#123;</span><br><span class="line">    randomNums.<span class="built_in">push_back</span>(number);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> size = randomNums.<span class="built_in">size</span>();</span><br><span class="line">  <span class="type">int</span> arr[size];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">    arr[i] = randomNums[i];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">bubbleSort</span>(arr,size);</span><br><span class="line">  <span class="built_in">printArr</span>(arr,size);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">dlclose</span>(handle);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.生成DLL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">g++ -c -fPIC Utils.cpp -o Utils.o</span><br><span class="line"></span><br><span class="line">g++ -c -fPIC SortUtils.cpp -o SortUtils.o</span><br><span class="line"></span><br><span class="line">// Mac环境中C++的dll文件类型是.dylib</span><br><span class="line">g++ -shared SortUtils.o Utils.o -o Utils.dylib</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -shared SortUtils.cpp Utils.cpp -o Utils.dylib</span><br></pre></td></tr></table></figure><p>4.编译Main.cpp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ Main.cpp -o a</span><br></pre></td></tr></table></figure><p>5.运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a</span><br></pre></td></tr></table></figure><h1>CS中的DLL</h1><h2 id="Mac环境-2">Mac环境</h2><p>1.创建DLL项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定创建的项目名称和.NET版本</span></span><br><span class="line">dotnet new classlib -o Utils -f net8.0</span><br></pre></td></tr></table></figure><p>2.编写DLL脚本</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SortUtils.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Utils;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SortUtils</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SortUtils</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span>(<span class="params"><span class="built_in">int</span>[] arr</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.Length; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; arr.Length - i - <span class="number">1</span>; j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>]) Utils.Utils.Swap(<span class="keyword">ref</span> arr[j], <span class="keyword">ref</span> arr[j+<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Utils.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Utils</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Utils</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> x, <span class="keyword">ref</span> <span class="built_in">int</span> y</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">int</span> temp = x;</span><br><span class="line">      x = y;</span><br><span class="line">      y = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArr</span>(<span class="params"><span class="built_in">int</span>[] arr</span>)</span>&#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Sorted Array:&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.Length; i++)&#123;</span><br><span class="line">        Console.Write(<span class="string">$&quot;<span class="subst">&#123;arr[i]&#125;</span> &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      Console.Write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编译生成DLL</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build</span><br></pre></td></tr></table></figure><p>4.创建引用DLL的项目</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet <span class="keyword">new</span> console -o Project -f net7<span class="number">.0</span></span><br></pre></td></tr></table></figure><p>5.在项目中引用DLL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Project.csproj</span><br></pre></td></tr></table></figure><p>在Project标签下添加如下代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Reference</span> <span class="attr">Include</span>=<span class="string">&quot;DLL文件名&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HintPath</span>&gt;</span>DLL文件路径<span class="tag">&lt;/<span class="name">HintPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Reference</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6.编写测试代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"><span class="keyword">using</span> Utils;</span><br><span class="line"><span class="keyword">using</span> SortUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    Console.WriteLine(<span class="string">&quot;Input Random Numbers:&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span>? input = Console.ReadLine();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(input == <span class="literal">null</span>)&#123;</span><br><span class="line">      Console.WriteLine(<span class="string">&quot;Input Nums Null!&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Regex regex = <span class="keyword">new</span> Regex(<span class="string">@&quot;\d+&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    MatchCollection matches = regex.Matches(input);</span><br><span class="line">      </span><br><span class="line">    List&lt;<span class="built_in">int</span>&gt; randomNums = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">foreach</span>(Match match <span class="keyword">in</span> matches)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">int</span>.TryParse(match.Value,<span class="keyword">out</span> <span class="built_in">int</span> number))&#123;</span><br><span class="line">        randomNums.Add(number);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">int</span>[] arr = randomNums.ToArray();</span><br><span class="line">    </span><br><span class="line">    SortUtils.SortUtils.BubbleSort(arr);</span><br><span class="line">    Utils.Utils.PrintArr(arr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文档 </tag>
            
            <tag> C# </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML图学习笔记</title>
      <link href="/posts/6ea8fdb7/"/>
      <url>/posts/6ea8fdb7/</url>
      
        <content type="html"><![CDATA[<h1>背景</h1><p><a href="https://cloud.tencent.com/developer/article/1684161">https://cloud.tencent.com/developer/article/1684161</a></p><p>UML图有很多中，但是并非必须掌握所有的UML图，才能完成系统分析和设计工作。一般来说，在UML图中，只要掌握类图、用例图、时序图的使用，就能完成大部分的工作。也就是说，掌握UML的20%，就可以做80%的事情。对于程序员来说，最频繁使用的莫过于类图。因此我们先主要探讨类图，其他的图我们在之后会不断补充进来。</p><h1>类图</h1><p>类图是面向对象系统建模中最常用和最重要的图，是定义其他图的基础。类图主要是用来显示系统中的类、接口以及它们之前静态结构和关系的一种静态模型。类图中最基本的元素是类、接口。我们设计出类图后，就可以用代码实现类图中包含的内容。</p><h2 id="类图中具体类、抽象、接口和包的表示方法">类图中具体类、抽象、接口和包的表示方法</h2><p>UML类图中具体类、抽象类、接口和包有不同的表示方法。</p><h2 id="在UML中表示具体类">在UML中表示具体类</h2><p>具体类在类图中用矩形框表示，矩形框分为三层：第一层是类名；第二层是类的成员变量；第三层是类的方法。成员变量以及方法前的访问修饰符用符号来表示：</p><ul><li><code>+</code>表示<code>public</code></li><li><code>-</code>表示<code>private</code></li><li><code>#</code>表示<code>protected</code></li><li>不带符号表示<code>default</code></li></ul><img src="/posts/6ea8fdb7/%E7%B1%BB%E5%9B%BE%E7%A4%BA%E4%BE%8B.jpg" class=""><h2 id="在UML类图中表示抽象类">在UML类图中表示抽象类</h2><p>抽象类在UML类图中同样用矩形框表示，但是抽象类的类名以及抽象方法的名字都用斜体字表示</p><img src="/posts/6ea8fdb7/%E6%8A%BD%E8%B1%A1%E7%B1%BB.jpg" class=""><h2 id="在UML类图中表示接口">在UML类图中表示接口</h2><p>接口在类图中也是使用矩形框进行表示的，但是与类的表示方法不同的是，接口在类图中的第一层顶端用构造型<code>&lt;&lt;interface&gt;&gt;</code>表示，下面是接口的名字，第二层是方法。此外，接口还有另外一种表示方法，俗称棒棒糖表示法，就是类上面的一根棒棒糖（圆圈+实线）。圆圈旁边为接口名称，接口方法在实现类中出现。</p><img src="/posts/6ea8fdb7/%E6%8E%A5%E5%8F%A3.jpg" class=""><h2 id="在UML类图中表示包（看起来像是一个Java中的概念，先不写了）">在UML类图中表示包（看起来像是一个Java中的概念，先不写了）</h2><h1>在类图中表示关系</h1><p>类和类、类和接口、接口和接口之间存在一定的关系，UML类图中一般会有连线指明它们之间的关系。关系一共有六种类型，分别是实现关系、泛化关系、关联关系、依赖关系、聚合关系、组合关系。</p><p><img src="https://pic4.zhimg.com/v2-e6a48521352fff8270e753ea4a79d9fb_r.jpg" alt=""></p><p>下面来详细讲述这些关系，以及在UML类图中如何表示这些关系。</p><h2 id="实现关系">实现关系</h2><p>实现关系是指接口及其实现类之间的关系。在UML类图中，实现关系用空心三角和虚线组成的箭头来表示，从实现类指向接口，在Java（参考的原文是以Java作为开发语言的，C#和Java高度相似）中实现关系可以直接翻译为关键字<code>implements</code>。</p><img src="/posts/6ea8fdb7/UML%E5%9B%BE.jpg" class=""><h2 id="泛化关系">泛化关系</h2><p>泛化关系<code>Generalization</code>是指对象与对象之间的继承关系。如果对象A和对象B之间的<code>is a</code>关系成立，那么二者之间就存在继承关系，对象B是父对象，对象A是子对象。例如，一个年薪制员工<code>is a</code>员工，很显然年薪制员工Salary对象和员工Employee对象之间存在继承关系，Employee对象是父对象，Salary对象是子对象。</p><p>在UML类图中，泛化关系用空心三角形和实线组成的箭头表示，从子类指向父类，在Java（C#）中泛化关系可以直接翻译为关键字<code>extends</code>。</p><img src="/posts/6ea8fdb7/%E6%B3%9B%E5%8C%96%E5%85%B3%E7%B3%BB.jpg" class=""><h2 id="关联关系">关联关系</h2><p>关联关系<code>Association</code>是指对象和对象之间的链接，它使一个对象知道另一个对象的属性和方法。在Java（C#）中，关联关系的代码表现成为一个对象含有另一个对象的引用。也就是说，如果一个对象的类代码中包含有对另一个对象的引用，那么这两个对象之间就是关联关系。</p><p>关联关系有单向关联和双向关联。如果两个对象都知道（即可以调用）对方的公共属性和操作，那么二者就是双向关联。如果只有一个对象知道（即可以调用）另一个对象的公共属性和操作，那么就是单向关联，大多数关联都是单向关联，单向关联关系更容易建立和维护，有助于寻找可重用的类。</p><p>在UML图中，双向关联关系用带箭头的实线或者无箭头的实现双线表示。单向关联用一个带箭头的实线表示，箭头指向被关联的对象，这就是导航性<code>Navigatity</code>。</p><img src="/posts/6ea8fdb7/UML%E5%9B%BE.png" class=""><p>一个对象可以持有其他对象的数组或者集合。在UML中，通过放置多重性<code>multipicity</code>表达式在关联线的末端来表示。多重性表达式可以是一个数字、一段范围或者是它们的组合。多重性允许的表达式如下：</p><ul><li>数字：精确的数量</li><li><code>*</code>或者<code>0..*</code>：表示0到多个</li><li><code>0..1</code>：表示0或者1个，在Java中经常用一个空引用来实现</li><li><code>1..*</code>：表示1到多个</li></ul><p>在关联关系中，另一个类的对象是这个类的属性，而在依赖关系中，是除了这种情况之外的所有在这个类中引用另一个类的形式，都算依赖关系</p><p>关联关系又分为依赖关联、聚合关联和组合关联三种类型</p><h2 id="依赖关系">依赖关系</h2><p>依赖<code>Dependency</code>关系是一种弱关联关系。如果对象A用到对象B，但是和B的关系不是太明显的时候，就可以把这种关系看作依赖关系。如果对象A依赖于对象B，则A <code>use a</code> B。比如驾驶员和汽车的关系，驾驶员使用汽车，两者是依赖关系。</p><p>在UML类图中，依赖关系用一个带虚线的箭头表示，由使用方向指向被使用方，表示使用方对象是有的被使用方对象的引用。</p><img src="/posts/6ea8fdb7/UML%E5%9B%BE-1681836701455-4.png" class=""><p>依赖关系在代码中的具体表现形式为B为A的构造器或方法中的局部变量、方法或构造器的参数、方法的返回值，或者A调用B的静态方法。</p><p>不好理解，直接看代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> field1; <span class="comment">//成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;在B类的方法1中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span>() <span class="comment">//静态方法</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;在B类静态方法2中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是依赖B类的A类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  A依赖于B的第一种表现形式：B为A的局部变量</span></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        b.method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// A依赖于B的第二种表现形式：调用B中的静态方法</span></span><br><span class="line">        B.method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span>(<span class="params">B b</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// A依赖B的第三种表现形式：B作为A的方法参数</span></span><br><span class="line">        <span class="built_in">string</span> s = b.field1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">method</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// A依赖B的第四种表现形式：B作为A的方法的返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="聚合关系和组合关系">聚合关系和组合关系</h2><p>聚合<code>Aggregation</code>是关联关系的一种特例，它体现的是整体与部分的拥有关系，即<code>has a</code>的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享，所以聚合关系也常称为共享关系。例如，公司部门与员工的关系，一个员工可以属于多个部门，一个部门撤销了，员工可以转到其他部门。</p><p>在UML图中，聚合关系用空心菱形+实线箭头表示，空心菱形在整体一方，箭头指向部分一方，如下图所示：</p><img src="/posts/6ea8fdb7/UML%E5%9B%BE-1681836784310-6.jpg" class="" title="UML图"><p>组合<code>Composition</code>也是关联关系的一种特例，它同样体现整体与部分之间的包含关系，即<code>contains a</code>的关系。但此时整体与部分是不可分的，部分也不能给其他整体共享，作为整体的对象负责部分的对象的生命周期。这种关系比聚合更强，也称为强聚合。如果A组合B，则A需要知道B的生命周期，即可能A负责生成或者释放B，或者A通过某种途径知道B的生成和释放。</p><p>比如说，人包含头、躯干、四肢，它们的生命周期一致。当人出生时，头、躯干、四肢同时诞生。当人死亡时，作为人体组成部分的头、躯干、四肢同时死亡。</p><p>在UML图中，组合关系用实心菱形加实线箭头表示，实心菱形在整体一方，箭头指向部分一方，如下图：</p><img src="/posts/6ea8fdb7/UML%E5%9B%BE-1681836995575-8.png" class=""><p>在代码形式上，聚合关系和组合关系中部分对象是整体对象的一个成员变量。但是，在实际应用开发时，两个对象之间的关系到底是聚合还是组合，有时候很难区别。在C#中，仅从类代码本身是区分不了组合和聚合的。如果一定要区分，那么如果在删除整体对象的时候，必须删除掉部分对象，那么就是组合关系；否则就有可能是聚合关系。从业务角度来看，如果作为整体的对下岗必须要部分对象的参与，才能完成自己的职责，那么二者之间就是组合关系，否则就是聚合关系。</p><p>例如，汽车和轮胎，汽车作为整体，轮胎作为部分。如果用在二手车销售业务环境下，二者就是聚合关系。因为轮胎作为汽车的一个组成部分，它和汽车可以分别生产以后装配起来使用，但是汽车可以更换新的轮胎，轮胎也可以拆下来给别的汽车使用。如果用在驾驶系统业务环境上，汽车如果没有轮胎，就无法完成形式任务，二者之间就是一个组合关系。再比如网上书店业务中的订单和订单项之间的关系，如果订单中没有订单项，也就无法完成订单的业务，所以二者是组合关系。而购物车和商品之间的关系，因为商品的生命周期并不被购物车控制，商品可以被多个购物车共享，因此，二者之间是聚合关系。</p>]]></content>
      
      
      <categories>
          
          <category> 软技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity关于协程Coroutine</title>
      <link href="/posts/83d7c4e7/"/>
      <url>/posts/83d7c4e7/</url>
      
        <content type="html"><![CDATA[<h1>Unity中的协程和真正的协程并不是一回事</h1><p>Unity的协程这个概念还真有可能会让只接触过Unity的C#开发者产生误解, 比如在实际开发中, 一个资源同步加载的时间太久, 就会阻塞游戏进程, 于是我们希望异步加载这个资源, 我们的做法可能是将调用<code>Resources.Load</code>接口改为<code>Resources.LoadAsync</code>接口. 然后将资源加载的方法返回类型改为<code>IEnumerator</code>, 调用<code>StartCoroutine</code>启动这个协程, 一气呵成. 如果你从未想过上述这一切Unity和C#编译器在背后为我们做了什么, 那么你肯呢个会产生下面三个误解: 一是误以为Unity中所说的协程和操作系统级别的协程是一个概念; 二是把异步和协程甚至线程概念挂钩, 认为要实现异步必须依赖协程或者线程. 三是<code>yield return</code>关键字的误解, 认为后面只能跟协程、<code>WaitForSeconds</code>.</p><h1>拨乱反正</h1><p>Unity中的协程（Coroutines）并不是严格意义上的“真协程”，而是<strong>基于C#迭代器（IEnumerator）和Unity引擎的帧调度机制实现的一种协程模拟</strong>. 在游戏开发的客户端领域, 我们在日常开发中几乎不会涉及到真的多线程(Unity的Dots当然还是用到多线程的了, 但Dots不在本篇博客的讨论范围内).</p><p>首先想一下, 为什么我们需要异步呢? 笔者认为, 使用异步的原因, 是因为我们不想让某些操作阻塞整个流程. 于是笔者简单总结了一下我们在客户端开发中会使用的异步操作场景:</p><ul><li>等待一段时间后尽心某种操作: 打开一个页面、播放一个动效等等</li><li>异步加载资源</li><li>异步等待网络</li></ul><p>你会发现, 上述这些异步场景中, CPU好像都不需要做什么事情, 比如加载资源只是一个IO操作, 如果同步加载资源, 在资源加载上来之前, CPU就只能干等着, 阻塞游戏进程. 使用异步加载的方式, CPU想IO发出加载指令之后, 就可以去执行别的操作了. 网络请求也是同理. 上述异步操作都是非CPU密集型的操作.</p><p>而还有一些是需要CPU执行很繁重的任务而产生的异步场景, 比如涉及到大量逻辑运算的, CPU执行这些逻辑要耗费大量的时间, 这便是CPU密集型的操作. 这时我们会选择创建一个新的线程, 在新的线程上执行这段逻辑, 从而不会阻塞原来的线程. 因为CPU有多个核嘛, 我们可以简单的理解为一个线程对应一个CPU的一个核心(这是十分不严谨的, 因为线程并不是一个纯物理的概念, 是一个操作系统概念, 但在这里只是为了帮助理解), 开辟新的线程能让我们在<strong>同一时刻</strong>利用CPU中的多个核心. 只是游戏开发的客户端中很少会有CPU密集型的操作(游戏界的笑话: 一核有难, 八核围观), 这是Unity3D前端程序员由于开发场景的原因而对异步和协程线程概念产生误解的原因.<br>因此异步是异步, 多线程是多线程, 一般来说, 只有异步场景为CPU密集型操作时, 异步操作才有可能涉及到多线程, 涉及到多线程的操作我们就会使用<code>await</code>关键字而不会用<code>yield return</code>的伪协程了.</p><p>所以妄图使用Unity协程来做一些CPU密集型的工作是根本不可能的, 因为协程本质上还是运行在同一个进程上, Unity协程只适合那些I/O密集型的操作, 因为这类操作并不真的会占用CPU的执行时间, 这段时间的CPU能够去做别的事情.</p><h1>揭开<code>yield return</code>的面纱</h1><p>有下面的代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">C</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">M</span>()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">A</span>()</span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;SaySomething&quot;</span>);</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">BClass</span>(<span class="params"><span class="number">0</span></span>)</span>; </span><br><span class="line">        Console.WriteLine(<span class="string">&quot;SaySomething&quot;</span>);</span><br><span class="line">        <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">BClass</span>(<span class="params"><span class="number">1</span></span>)</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;SaySomething&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BClass</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BClass</span>(<span class="params"><span class="built_in">int</span> idx</span>)</span>&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在笔者发现<a href="https://sharplab.io/">SharpLab</a>之前, <code>yield return</code>一直很神秘, 在<code>SharpLab</code>中处理之后, <code>yield return</code>的神秘面纱被轻易揭开:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Security;</span><br><span class="line"><span class="keyword">using</span> System.Security.Permissions;</span><br><span class="line"></span><br><span class="line">[<span class="meta">assembly: CompilationRelaxations(8)</span>]</span><br><span class="line">[<span class="meta">assembly: RuntimeCompatibility(WrapNonExceptionThrows = true)</span>]</span><br><span class="line">[<span class="meta">assembly: Debuggable(DebuggableAttribute.DebuggingModes.Default | DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints | DebuggableAttribute.DebuggingModes.EnableEditAndContinue | DebuggableAttribute.DebuggingModes.DisableOptimizations)</span>]</span><br><span class="line">[<span class="meta">assembly: SecurityPermission(SecurityAction.RequestMinimum, SkipVerification = true)</span>]</span><br><span class="line">[<span class="meta">assembly: AssemblyVersion(<span class="string">&quot;0.0.0.0&quot;</span>)</span>]</span><br><span class="line">[<span class="meta">module: UnverifiableCode</span>]</span><br><span class="line">[<span class="meta">module: RefSafetyRules(11)</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">C</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BClass</span>(<span class="params"><span class="built_in">int</span> idx</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="meta">CompilerGenerated</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> &lt;<span class="title">A</span>&gt;<span class="title">d__1</span> : <span class="title">IEnumerator</span>&lt;<span class="title">object</span>&gt;, <span class="title">IEnumerator</span>, <span class="title">IDisposable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">object</span> &lt;&gt;<span class="number">2</span>__current;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> C &lt;&gt;<span class="number">4</span>__this;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">object</span> IEnumerator&lt;<span class="built_in">object</span>&gt;.Current</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &lt;&gt;<span class="number">2</span>__current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">object</span> IEnumerator.Current</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> &lt;&gt;<span class="number">2</span>__current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">        <span class="keyword">public</span> &lt;A&gt;d__1(<span class="built_in">int</span> &lt;&gt;<span class="number">1</span>__state)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.&lt;&gt;<span class="number">1</span>__state = &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">        <span class="keyword">void</span> IDisposable.Dispose()</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (&lt;&gt;<span class="number">1</span>__state)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    &lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;SaySomething&quot;</span>);</span><br><span class="line">                    &lt;&gt;<span class="number">2</span>__current = <span class="keyword">new</span> BClass(<span class="number">0</span>);</span><br><span class="line">                    &lt;&gt;<span class="number">1</span>__state = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    &lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;SaySomething&quot;</span>);</span><br><span class="line">                    &lt;&gt;<span class="number">2</span>__current = <span class="keyword">new</span> BClass(<span class="number">1</span>);</span><br><span class="line">                    &lt;&gt;<span class="number">1</span>__state = <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    &lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;SaySomething&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">bool</span> IEnumerator.MoveNext()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//ILSpy generated this explicit interface implementation from .override directive in MoveNext</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.MoveNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">        <span class="keyword">void</span> IEnumerator.Reset()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">M</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">NullableContext(1)</span>]</span><br><span class="line">    [<span class="meta">IteratorStateMachine(typeof(&lt;A&gt;d__1))</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">A</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        &lt;A&gt;d__1 &lt;A&gt;d__ = <span class="keyword">new</span> &lt;A&gt;d__1(<span class="number">0</span>);</span><br><span class="line">        &lt;A&gt;d__.&lt;&gt;<span class="number">4</span>__this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> &lt;A&gt;d__;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们来总结一下<code>yield return</code>关键字的作用: 包含有<code>yield return</code>的方法经过编辑器处理之后变成了一个实现了<code>IEnumerator</code>接口的类, 我们知道<code>IEnumerator</code>是一个迭代器, 迭代器的一个作用就是迭代或者叫遍历元素, <code>yield return</code>后跟着的, 便是这个迭代器中的一个元素. <code>yield return</code>只是在状态机里面一个新增一个状态, 然后在这个状态的分支中执行从上一个<code>yield return</code>(不包含), 到这一个<code>yield return</code>(包含)之间的代码, 并且迭代器中会多一个元素. <strong>另外, 不只是<code>WaitForSeconds</code>和<code>IEnumerator</code>可以被<code>yield return</code>, 任何数据结构都可以</strong>. 我们编写返回类型是<code>IEnumerator</code>的方法时, 其实是在借助<code>yield return</code>构造一个包含某些元素的迭代器的过程.<br>只是, 不是随便一个类型被<code>yield return</code>就可以实现异步了, 只有Unity<strong>精心设计过的类型</strong>, 搭配上Unity<code>MonoBehaviour</code>中的驱动逻辑, 才能实现真正的异步操作. 但是像yield return new List<int>这种操作会导致该协程挂起一帧, 就像yield return null一样</p><p>要使用<code>IEnumerator</code>实现异步, 需要MonoBehaviour和继承自UnityEngine命名空间下<code>YieldInstruction</code>类型的配合. 你调用的所有的Unity提供的异步操作接口, 其返回值的类型都包含在下图中:</p><h1>现在你知道为什么说Unity协程是“伪协程”了吗</h1><ul><li>被动调度：协程的恢复完全由Unity引擎控制，而非主动让出给其他协程。</li><li>单线程限制：无法利用多核CPU实现并行计算，仅适用于异步等待或分帧处理。</li><li>基于迭代器：底层实现是状态机（IEnumerator），而非真正的协程原语。</li></ul><h1>Unity协程的局限性</h1><ul><li>依赖主线程：所有协程代码在主线程执行，长时间运行的操作会阻塞渲染和逻辑更新。</li><li>无独立栈：协程的“暂停”状态由IEnumerator保存局部变量，而非独立的执行栈。</li><li>无法跨线程：无法在后台线程中启动或恢复协程。</li></ul><h1>总结</h1><p>Unity中使用迭代器来实现异步, 只是迭代器诸多使用场景的一种, <code>IEnumerator</code>和<code>IEnumerable</code>还有更广阔的天地, 在<a href="https://soincredible.github.io/posts/133a9667/">这篇博客</a>中会详细探讨.</p><blockquote><p>2025.09.13更新</p></blockquote><h1>再谈协程</h1><p>前文的内容, 笔者再次回味时,经过两年半的沉淀, 笔者认为自己终于真的摸清了其中的门道. 并没有帮助笔者理解Unity协程的本质, 协程本质是一个迭代器是很空洞的一句话, 于是下文笔者将尝试换一种视角来探究协程的本质. 注意, 理解了yield return并不能帮助你理解Unity的协程异步机制, 这里面其实有两层迷雾, 第一层, 是yield return背后代表的代码逻辑怎样的, 你可以认为, 上述笔者观点中的<strong>行为</strong>定义, C#也给你封装了起来, 你看不到, 第二层迷雾, 是Unity把如何调用行为的逻辑也给你隐藏了起来, 因此, 你理解了yield return背后代表的是什么代码, 只是揭开了第一层迷雾, 到这里你对于Unity协程的使用程度, 才跟你对UGUI的使用等下, 要想继续了解内部如何控制流程, 那么你就需要像阅读UGUUI的EventSystem源码一样, 去阅读UnityMonoBehaviourC++代码中, 是如何调用yield return所生成的那个IEnumerator的MoveNext的. 第三层迷雾WaitForSeconds、WaitForEndOfFrame是Unity封装好的行为</p><h2 id="从foreach说起">从foreach说起</h2><p>首先由于foreach和yield return语法糖的干扰. 先借助SharpLab揭开他们的面纱.<br>想要理解foreach本质, 笔者总结, 总共有四重迷雾, 比如, 在Unity中, 有如下代码:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> player <span class="keyword">in</span> Players)&#123;</span><br><span class="line">        player.Update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一重迷雾, foreach本质是什么</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(Players.MoveNext())&#123;</span><br><span class="line">    <span class="keyword">var</span> player = Players.Current;</span><br><span class="line">    player.Update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二重迷雾, foreach是如何驱动迭代的, 这一重迷雾还是很显而易见的, 通过while关键字</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(Players.MoveNext())&#123; <span class="comment">// 我们可以认为while就是迭代器的驱动者</span></span><br><span class="line">    <span class="keyword">var</span> player = Players.Current;</span><br><span class="line">    player.Update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三重迷雾, MoveNext里面做了什么, 对于一个List来说, 迭代器相关的代码如下:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;T&gt; localList = list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (version == localList._version &amp;&amp; ((<span class="built_in">uint</span>)index &lt; (<span class="built_in">uint</span>)localList._size)) </span><br><span class="line">    &#123;                                                     </span><br><span class="line">        current = localList._items[index];                    </span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MoveNextRare();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">MoveNextRare</span>()</span></span><br><span class="line">&#123;                </span><br><span class="line">    <span class="keyword">if</span> (version != list._version) &#123;</span><br><span class="line">        ThrowHelper.ThrowInvalidOperationException(ExceptionResource.InvalidOperation_EnumFailedVersion);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    index = list._size + <span class="number">1</span>;</span><br><span class="line">    current = <span class="literal">default</span>(T);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;                </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T Current &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object System.Collections.IEnumerator.Current &#123;</span><br><span class="line">    <span class="keyword">get</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( index == <span class="number">0</span> || index == list._size + <span class="number">1</span>) &#123;</span><br><span class="line">                ThrowHelper.ThrowInvalidOperationException(ExceptionResource.InvalidOperation_EnumOpCantHappen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四重迷雾, Player.Update()里面做了什么.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">    UpdateMovement();</span><br><span class="line">    UpdateAnimations();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Unity协程中的四层迷雾">Unity协程中的四层迷雾</h2><p>比如, 有如下代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerator <span class="title">M</span>()</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">2f</span></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WXGameCaptureProcess</span>(<span class="params"><span class="literal">null</span>, <span class="literal">null</span></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一重迷雾, <code>yield return</code>的本质是什么</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CompilerGenerated</span>]</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">sealed</span> <span class="keyword">class</span> &lt;<span class="title">M</span>&gt;<span class="title">d__0</span> : <span class="title">IEnumerator</span>&lt;<span class="title">object</span>&gt;, <span class="title">IEnumerator</span>, <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">object</span> &lt;&gt;<span class="number">2</span>__current;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> C &lt;&gt;<span class="number">4</span>__this;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">object</span> IEnumerator&lt;<span class="built_in">object</span>&gt;.Current</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &lt;&gt;<span class="number">2</span>__current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">object</span> IEnumerator.Current</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> &lt;&gt;<span class="number">2</span>__current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">    <span class="keyword">public</span> &lt;M&gt;d__0(<span class="built_in">int</span> &lt;&gt;<span class="number">1</span>__state)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.&lt;&gt;<span class="number">1</span>__state = &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">    <span class="keyword">void</span> IDisposable.Dispose()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> num = &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (num != <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">        &lt;&gt;<span class="number">2</span>__current = <span class="keyword">new</span> WXGameCaptureProcess(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &lt;&gt;<span class="number">1</span>__state = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bool</span> IEnumerator.MoveNext()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//ILSpy generated this explicit interface implementation from .override directive in MoveNext</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.MoveNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DebuggerHidden</span>]</span><br><span class="line">    <span class="keyword">void</span> IEnumerator.Reset()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">NullableContext(1)</span>]</span><br><span class="line">[<span class="meta">IteratorStateMachine(typeof(&lt;M&gt;d__0))</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerator <span class="title">M</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    &lt;M&gt;d__0 &lt;M&gt;d__ = <span class="keyword">new</span> &lt;M&gt;d__0(<span class="number">0</span>);</span><br><span class="line">    &lt;M&gt;d__.&lt;&gt;<span class="number">4</span>__this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> &lt;M&gt;d__;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二重迷雾, Unity是怎么驱动这个迭代器的.</p><p>看下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ScriptingObjectPtr <span class="title">MonoBehaviour::StartCoroutineManaged</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, ScriptingObjectPtr value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Coroutine* coroutine = <span class="built_in">StartCoroutine</span>(name, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CreateManagedWrapperForCoroutine</span>(coroutine);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Coroutine* <span class="title">MonoBehaviour::StartCoroutine</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, ScriptingObjectPtr value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Assert</span>(<span class="built_in">ShouldRunBehaviour</span>());</span><br><span class="line">    <span class="built_in">Assert</span>(<span class="built_in">GetInstance</span>() != SCRIPTING_NULL);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">IsActive</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;Coroutine &#x27;%s&#x27; couldn&#x27;t be started because the the game object &#x27;%s&#x27; is inactive!&quot;</span>, name, <span class="built_in">GetName</span>()), <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ScriptingMethodPtr method = <span class="built_in">FindMethod</span>(name);</span><br><span class="line">    <span class="keyword">if</span> (method.<span class="built_in">IsNull</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ErrorStringObject</span>(<span class="built_in">Format</span>(<span class="string">&quot;Coroutine &#x27;%s&#x27; couldn&#x27;t be started!&quot;</span>, name), <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">InvokeMethodOrCoroutineChecked</span>(method, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> ScriptingObjectPtr <span class="title">CreateManagedWrapperForCoroutine</span><span class="params">(Coroutine* coroutine)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (coroutine == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> SCRIPTING_NULL;</span><br><span class="line">    <span class="built_in">Assert</span>(!coroutine-&gt;m_IsReferencedByMono);</span><br><span class="line">    coroutine-&gt;m_IsReferencedByMono = <span class="literal">true</span>;</span><br><span class="line">    ScriptingObjectWithIntPtrField&lt;Coroutine&gt; wrapper = <span class="built_in">scripting_object_new</span>(<span class="built_in">GetCoreScriptingClasses</span>().coroutine);</span><br><span class="line">    wrapper.<span class="built_in">SetPtr</span>(coroutine, Coroutine::CleanupCoroutineGC);</span><br><span class="line">    <span class="keyword">return</span> wrapper.<span class="built_in">GetScriptingObject</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>依赖unity的PlayerLoop.</li><li>在PlayerLoop中</li><li>当有一个新的协程的时候, 向这个Mono中注册协程, 并通过回调的方式MoveNext.</li></ol><p>第三重迷雾, MoveNext里面做了什么</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> num = &lt;&gt;<span class="number">1</span>__state;</span><br><span class="line">    <span class="keyword">if</span> (num != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;&gt;<span class="number">1</span>__state = <span class="number">-1</span>;</span><br><span class="line">    &lt;&gt;<span class="number">2</span>__current = <span class="keyword">new</span> WXGameCaptureProcess(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &lt;&gt;<span class="number">1</span>__state = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UnityMonoBehaviour中干的事情就是这个, 它也在控制流程, 你可以理解为它在遍历这个迭代器所处理的集合, UnityMonoBehaviour的角色和foreach的角色等价. 只是foreach中的MoveNext的调用时机很简单, foreach是, 遍历一个元素, 处理一下, 紧接着遍历下一个, 而在MonoBehaviour中, 因为Unity初衷就是要用它来做一些延时操作. 因此MoveNext的调用是有说法的. 不是像foreach一样, 遍历一个紧接着调用MoveNext, 而是用DelayedManager做一下延时调用. 另外还要注意, 有一点挺反直觉的, 你想要让协程继续下去, MoveNext要是true. 而不是false. 应该是要在MoveNext里面修改Current的值的,</p><p>比如说C# List的源码,</p><p>但比如说下面这段代码,<br>只要访问一次Current, 就会返回一个新的WaitForEndOfFrame对象回去. 其实这个类中没有一个真正集合的概念.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WXGameCaptureProcess</span> : <span class="title">IEnumerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> shareOver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> Current</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WaitForEndOfFrame();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WXGameCaptureProcess</span>(<span class="params">Rect captureRect, Action&lt;<span class="built_in">string</span>&gt; callback</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> DDZ_WXMINIGAME</span></span><br><span class="line">        WXCanvas.ToTempFilePath(<span class="keyword">new</span> WXToTempFilePathParam()</span><br><span class="line">        &#123;</span><br><span class="line">            x = (<span class="built_in">int</span>)captureRect.x,</span><br><span class="line">            y = (<span class="built_in">int</span>)(Screen.height - captureRect.y - captureRect.height),</span><br><span class="line">            width = (<span class="built_in">int</span>)captureRect.width,</span><br><span class="line">            height = (<span class="built_in">int</span>)captureRect.height,</span><br><span class="line">            destWidth = (<span class="built_in">int</span>)captureRect.width,</span><br><span class="line">            destHeight = (<span class="built_in">int</span>)captureRect.height,</span><br><span class="line">            success = (ret) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">&quot;Screenshot saved: &quot;</span> + ret.tempFilePath);</span><br><span class="line">                callback?.Invoke(ret.tempFilePath);</span><br><span class="line">            &#125;,</span><br><span class="line">            fail = (msg) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                callback?.Invoke(<span class="literal">null</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            complete = (msg) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                shareOver = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        callback?.Invoke(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> !shareOver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        shareOver = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用协程的方式, 不像List, 有IEnumerable接口, 同时这种方式也没有像List一样内部有一个数组存储了某个集合, 但是协程内部其实还是有集合的概念的, 只不过集合的元素全部硬编码在了MoveNext里面, 不得不说, 协程真的是我最难以揣测设计者设计动机的一个东西了. 不管怎么说, 下面这段代码, 就是我们编写的所有的代码, 接下来把它丢给StartCoroutinue接口, 协程就可以跑起来了, 那我们来看看这段代码中我们干了什么呢? 1. 我们没有控制该协程的执行流程, 我们是将该协程通过StartCoroutine接口传递给了Unity底层 2. 我们定义了迭代器中的集合元素, 这点和List的例子还不太一样, List是通过调用Add接口向其中加入元素的. 使用协程的时候, 协程定义的迭代器中的集合的元素本身就代表了一种行为, 而不需要像List中的Player一样, 每遍历到一个Player就要执行一个Update操作. 因此协程的集合更像是一组标签集合, 驱动该协程的模块遍历该协程中迭代其中的元素, 根据这些元素身上的标签, 执行不同的操作. 那么Unity底层支持哪些标签呢?</p><ul><li>WaitForSeconds</li><li>IEnumerator</li></ul><p>所以说, Unity底层是通过判断迭代器中当前元素的对象类型, 作为标签的. 那么有那么多的类型, Unity不可能全都识别到. 所以说, 你可以用yield return返回任意的类型, 比如你可以yield return new List<int>() 但是Unity协程机制所<br>能识别出来的类型就那几个.</p><p>当Unity遇到yield return new List的时候会做什么?</p><h1>而当我们尝试梳理C#中编写的复杂yield return的时候, 我们是在梳理什么?</h1><p>yield return 中嵌套yield rteurn 的含义是什么?</p><p>意思其实是, 迭代器迭代的集合里面有一个集合元素又是一个迭代器.</p><p>这样总结下来, 一共就有三种常见迭代器迭代集合的方式了, 第一种是像List那样的正统<br>第二种是Unity通过yield return 创建出来的<br>第三种是创建一个类, 继承IEnumerator. 比如WXGameCaptureProcess这个, “模拟”了一个集合</p><h1>几种可以实现图片透明度渐变效果的方法</h1><p>方法一：使用协程</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Net.Mime;</span><br><span class="line"><span class="keyword">using</span> Unity.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestCoroutine</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> Image testImg;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> colorAlpha = <span class="number">1f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(Test());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IEnumerator <span class="title">Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (colorAlpha &gt;= <span class="number">0.0f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            colorAlpha -= <span class="number">0.02f</span>;</span><br><span class="line">            testImg.GetComponent&lt;Image&gt;().color = <span class="keyword">new</span> Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, colorAlpha);</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">0.05f</span></span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：使用<code>Time.deltatime</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Net.Mime;</span><br><span class="line"><span class="keyword">using</span> Unity.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestCoroutine</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> Image testImg;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> colorAlpha = <span class="number">1f</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (colorAlpha &gt;= <span class="number">0.0f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            colorAlpha -= <span class="number">0.1f</span> * Time.deltaTime;</span><br><span class="line">            testImg.GetComponent&lt;Image&gt;().color = <span class="keyword">new</span> Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, colorAlpha);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个例子我有点理解Time.deltatime的含义了，在本例中，我们在<code>colorAlpha -= 0.1f * Time.deltaTime;</code>处使用了Time.deltatime，它的作用是使得<code>colorAlpha</code>变量每一秒减0.1f，如果使用打断点的方式去分步调试，每次Update的时候都会去执行这一行代码，然后可以看到每次Update后<code>colorAlpha</code>会每次减小一点点，也就是说Time.deltaTime是一个很小的数，它能够确保在1s内将colorAlpha这个变量减少0.1，而且这个过程是连续的。</p><p>使用协程的那个方式呢，它能够实现在一段时间间隔内渐变的效果是因为有<code>yield return new WaitForSeconds()</code>方法和while循环的共同配合，而且如果你WaitForSeconds方法中的数太大的话会导致变化的过程非常的生硬，不够连贯，也就是说和Time.deltatime相比，使用协程的方式实现的渐变显得像是非连续式的渐变，而且写法也不如Time.deltatime方便，所以我个人认为使用Time.deltatime的方法实现渐变效果会更好一点。</p><p>我在网上看到了这样的写法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Net.Mime;</span><br><span class="line"><span class="keyword">using</span> Unity.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestCoroutine</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> Image testImg;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">float</span> colorAlpha = <span class="number">1f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StartCoroutine(Test());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IEnumerator <span class="title">Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (colorAlpha &gt;= <span class="number">0.0f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            colorAlpha -= <span class="number">0.1f</span> * Time.deltaTime;</span><br><span class="line">            testImg.GetComponent&lt;Image&gt;().color = <span class="keyword">new</span> Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, colorAlpha);</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我个人感觉这和直接写在Update中没有任何区别啊，这样写难道有什么别的好处么？🥲不过这样确实也达到了连续渐变的效果。</p><blockquote><p>2025.5.10更新<br>这段实现方式以笔者现在的水平来看确实是要优于前两者的. 首先WaitForSecond会造成额外开销, 而协程会在每一帧Update之后、LateUpdate之前执行, 使用<code>Time.deltaTime</code>是合理的. 其次, 在<code>Update()</code>方法里面做颜色渐变很蠢, Update只要这个Mono存在就会每帧执行, 做一个渐变效果要每一次Update里都要判断简便要不要执行是很cumbersome的.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#问题杂记</title>
      <link href="/posts/34114324/"/>
      <url>/posts/34114324/</url>
      
        <content type="html"><![CDATA[<h1>使用C#创建一个文件</h1><p>遇到 <code>System.IO.DirectoryNotFoundException</code> 错误表明尝试访问的目录路径中的某部分不存在。这个问题通常发生在尝试创建文件或目录、读取文件、或者执行其他需要访问文件系统的操作时。针对这个问题，有几个可能的解决方案：</p><h2 id="确认路径的正确性">确认路径的正确性</h2><p>首先，确认你尝试访问的路径是正确的。检查路径中的每一部分，确保没有拼写错误或者路径错误。路径应该完全匹配到你想要访问的位置。</p><h2 id="确认目录结构存在">确认目录结构存在</h2><p>在尝试创建文件之前，确保文件所在的目录结构已经存在。如果目录结构中的任何部分不存在，尝试创建文件时就会引发 <code>DirectoryNotFoundException</code>。</p><h2 id="创建缺失的目录">创建缺失的目录</h2><p>如果你的应用程序需要在特定的目录中创建文件，但那些目录可能不存在，你应该首先检查这些目录是否存在，如果不存在，则创建它们。可以使用以下代码段来实现这一点：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> directoryPath = <span class="string">@&quot;/Users/mac/Desktop/TetrisBlock/TetrisBlock-Unity/Assets/FontProcessLog/RedundantFontInfo&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> filePath = Path.Combine(directoryPath, <span class="string">&quot;SFUIDisplay-Bold.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保目录存在</span></span><br><span class="line"><span class="keyword">if</span> (!Directory.Exists(directoryPath))</span><br><span class="line">&#123;</span><br><span class="line">    Directory.CreateDirectory(directoryPath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在可以安全地创建文件了</span></span><br><span class="line">File.WriteAllText(filePath, <span class="string">&quot;Your content here&quot;</span>);</span><br></pre></td></tr></table></figure><p>这段代码首先检查目标目录是否存在，如果不存在，则使用 <code>Directory.CreateDirectory</code> 方法创建它。这样可以确保在尝试写入文件之前，文件的目标目录已经存在，从而避免 <code>DirectoryNotFoundException</code>。</p><h2 id="使用绝对路径而非相对路径">使用绝对路径而非相对路径</h2><p>确保你使用的是绝对路径而非相对路径，因为相对路径可能会因为当前工作目录的不同而导致路径解析错误。在你的例子中，你已经使用了绝对路径，这是一个好的做法。</p><h2 id="检查权限问题">检查权限问题</h2><p>确保你的应用程序或者你的用户账户有权限访问指定的路径。在某些情况下，权限限制可能会导致无法访问路径。</p><h1>重写、重载、多态的区别</h1><p>重写 <code>override</code> 重载 <code>overload</code> 多态<code>polymorphism</code></p><p>重写<code>override</code>指的是重写了一个方法来实现不同的功能，一般是用于子类在继承父类的时候后，重写父类中的方法，重写的规则：</p><ol><li>重写方法的参数列表必须完全与被重写方法的参数列表相同，否则就不能称之为重写而是重载</li><li>重写方法的访问修饰符一定要大于被重写方法的访问修饰符public &gt; protected &gt; default &gt; private</li><li>重写的方法的返回值必须和被重写方法的返回值一致</li><li>重写的方法所抛出的异常必须和被重写方法所抛出的异常一致，或者是其子类</li><li>被重写的方法不能是private，否则在其子类中只是新定义了一个方法，并没有对其进行重写</li><li>静态方法不能被重写为非静态方法</li><li>静态方法属于类，不能被重写，因此也不能多态</li></ol><p>重载<code>overload</code>一般用于在一个类内实现若干重载的方法，这些方法的名称相同而参数形式不同</p><p>重载的规则：</p><ol><li>在使用重载时只能通过相同的方法名、不同的参数形式实现。可以是不同的参数个数，不同的参数顺序（参数类型必须不一样）</li><li>不能通过访问权限、返回类型、抛出的异常进行重载</li><li>方法的异常类型和数目不会对重载造成影响</li></ol><p>多态<code>polymorphism</code>可以是静态的或动态的，在静态多态性中，函数的响应是在编译的时候发生的。在动态多态性中，函数的响应是在运行时发生的。</p><p>静态多态：在编译阶段，函数和对象的连接机制被称为早起绑定，也被称为静态绑定。C#提供了两种技术来实现静态多态性：函数重载和<a href="#2">运算符重载</a></p><p>动态多态的三个条件：</p><ol><li>继承</li><li>重写（重写父类继承的方法）</li><li>父类引用指向子类的对象（这个在<a href="http://soincredible777.com.cn/posts/133a9667/">IEnumerator和IEnumerable的理解与辨析</a>这篇博客末尾提到了，当时还不太明确这是实现多态的一个条件），语句在堆内存中开辟了子类的对象，并把栈内存中的父类的引用指向了这个子类的对象</li></ol><h2 id="函数重载实例">函数重载实例</h2><p>我们可以在同一个范围内对相同的函数名有多个定义，函数的定义必须彼此不同，可以是参数列表中的参数类型不同，也可以是参数个数不同。<strong>不能重载只有返回类型不同的函数声明</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">LearnOverload</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Overload</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b, <span class="built_in">int</span> c</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b + c;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">Add</span>(<span class="params"><span class="built_in">float</span> a, <span class="built_in">float</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> a = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">int</span> b = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">int</span> c = <span class="number">1</span>;</span><br><span class="line">            Console.WriteLine(Overload.Add(a, b));</span><br><span class="line">            Console.WriteLine(Overload.Add(a, b, c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态多态：">动态多态：</h2><p>C#允许我们使用关键字<code>abstract</code>创建抽象类，用于提供接口部分类的实现。当一个派生类继承自该抽象类时，实现即完成。抽象类包含抽象方法，抽象方法可以被派生类实现，派生类具有更专业的功能，我们在使用抽象类的时候要注意以下几点：</p><ul><li>我们不能创建一个抽象类的实例</li><li>我们不能在一个抽象类外部声明一个抽象方法</li><li>通过在类定义前面放置关键字<code>sealed</code>，可以将类声明为密封类。当一个类被声明为<code>sealed</code>时，它不能被继承。抽象类不能被声明为<code>sealed</code></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">PolymorhismApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="built_in">int</span> <span class="title">Area</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _length;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _width;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _length = a;</span><br><span class="line">            _width = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Length</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; _length = <span class="keyword">value</span>; &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _length; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Width</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; _width = <span class="keyword">value</span>; &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _width; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">Area</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _length * _width;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">RectangleTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Rectangle r = <span class="keyword">new</span> Rectangle(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(r.Area());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面使用了虚方法来实现多态</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">PolymorhismApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">int</span>? Area()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;执行了绘制图形的基类&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _length;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _width;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span>(<span class="params"><span class="built_in">int</span> a, <span class="built_in">int</span> b</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _length = a;</span><br><span class="line">            _width = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Length</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; _length = <span class="keyword">value</span>; &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _length; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Width</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; _width = <span class="keyword">value</span>; &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _width; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span>? Area()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;执行绘制矩形的函数&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> _length * _width;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> _radius;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Radius</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; _radius = <span class="keyword">value</span>; &#125;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> _radius; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="built_in">int</span> radius</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _radius = radius;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span>? Area()</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;执行Circle类的绘制函数&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">base</span>.Area();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> shapes = <span class="keyword">new</span> List&lt;Shape&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Rectangle(<span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">                <span class="keyword">new</span> Circle(<span class="number">2</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> p <span class="keyword">in</span> shapes)</span><br><span class="line">            &#123;</span><br><span class="line">                p.Area();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>联想：在写枚举器那一篇博客的时候，我们自己写枚举器的目的是为了枚举自己自定义的数据类型，而C#中是有List这个数据类型的，我们可以把我们自定义的数据类型放在List里，不也能实现枚举的效果么，那我们自己写枚举器的意义何在呢？</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">learnIEnumerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowName</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> ll = <span class="keyword">new</span> List&lt;Person&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">new</span> Person(<span class="string">&quot;李磊&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> Person(<span class="string">&quot;王刚&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> Person(<span class="string">&quot;彤彤&quot;</span>),</span><br><span class="line">                    <span class="keyword">new</span> Person(<span class="string">&quot;丹丹&quot;</span>),</span><br><span class="line">                &#125;</span><br><span class="line">                ;</span><br><span class="line">            <span class="keyword">foreach</span> (Person p <span class="keyword">in</span> ll)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(p.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="span-id-2-运算符重载-span"><span id = "2">运算符重载</span></h2><p>我们可以重定义或者重载C#中内置的运算符。因此，我们也可以使用自定义类型的运算符。重载运算符具有特殊名称的函数，是通过关键字<code>operator</code>后跟运算符的符号来定义的。于其他函数一样，重载运算符返回类型和参数列表：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">OverloadOperator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Box</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> length;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> breadth;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> height;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getVolume</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBreadth</span>(<span class="params"><span class="built_in">double</span> bre</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            breadth = bre;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span>(<span class="params"><span class="built_in">double</span> len</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            length = len;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span>(<span class="params"><span class="built_in">double</span> hei</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            height = hei;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Box <span class="keyword">operator</span> +(Box b, Box c)</span><br><span class="line">        &#123;</span><br><span class="line">            Box box = <span class="keyword">new</span> Box();</span><br><span class="line">            box.length = b.length + c.length;</span><br><span class="line">            box.breadth = b.breadth + c.breadth;</span><br><span class="line">            box.height = b.height + c.height;</span><br><span class="line">            <span class="keyword">return</span> box;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Tester</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Box Box1 = <span class="keyword">new</span> Box();</span><br><span class="line">            Box Box2 = <span class="keyword">new</span> Box();</span><br><span class="line">            Box Box3 = <span class="keyword">new</span> Box();</span><br><span class="line">            <span class="built_in">double</span> volume = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Box1.setLength(<span class="number">6.0</span>);</span><br><span class="line">            Box1.setBreadth(<span class="number">7.0</span>);</span><br><span class="line">            Box1.setHeight(<span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line">            Box2.setLength(<span class="number">12.0</span>);</span><br><span class="line">            Box2.setBreadth(<span class="number">13.0</span>);</span><br><span class="line">            Box2.setHeight(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line">            volume = Box1.getVolume();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Box1的体积：&#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">            volume = Box2.getVolume();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Box2的体积：&#123;0&#125;&quot;</span>, volume);</span><br><span class="line"></span><br><span class="line">            Box3 = Box1 + Box2;</span><br><span class="line"></span><br><span class="line">            volume = Box3.getVolume();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Box3的体积：&#123;0&#125;&quot;</span>, volume);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码实现的是我们自己对自定义类Box的加法运算符，它把两个Box对象的属性相加，并返回相加后的Box对象。</p><h1>C#中out和ref之间的区别</h1><p>首先两者都是按地址传递的，使用后都将改变原来参数的数值。</p><p>其次，ref可以把参数的数值传递进函数，但是out是要把参数清空，我们无法把一个数值从out传递进去，out进去后，参数的数值为空，我们必须初始化一次。</p><h1>C#中的params关键字</h1><p>params是C#关键字，可变长参数，是在声明方法时参数类型或者参数个数不确定的时候使用的。</p><p>关于params参数数组，需要掌握以下几点：</p><ol><li>参数数组必须是一维数组</li><li>不允许将params修饰符与ref和out修饰符组合起来使用</li><li>与参数数组对应的实参可以是同一类型的数组名，也可以是任意多个与该数组元素属于同一类型的变量</li><li>如果实参是数组按引用传递，若实参是变量或表达式则按值传递</li><li>形式为：方法修饰符 返回类型 方法名(params 类型[] 变量名)</li><li>params参数必须是参数列表的最后一个参数</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        UserParams(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span>[] myarray = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>] &#123; <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span> &#125;;</span><br><span class="line">        UserParams(myarray);</span><br><span class="line"></span><br><span class="line">        UserParams2(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&quot;dasd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UserParams</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] list</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(list[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UserParams2</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">object</span>[] list</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(list[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>结构体和类的区别</h1><ul><li><p>关于结构体，C#的结构不同于传统的C或者C++中的结构，它的特点如下：</p><ul><li>结构可以带有方法、字段、索引、属性、运算符方法和事件</li><li>结构可以自定义构造函数，但是不能定义析构函数。要注意，我们不能为结构定义无参的构造函数，无参的构造函数默认是自动定义的，而且不能被改变</li><li>与类不同，结构不能继承其他的结构或类</li><li>结构不能作为其他结构或类的基础结构（不能被继承）</li><li>结构可以实现一个或多个接口</li><li>结构成员不能制定为<code>abstract</code>、<code>virtual</code>l或者<code>protected</code></li><li>当我们使用New操作服创建一个结构对象的时候，会调用适当的构造函数来创建结构。与类不同，结构可以不适用New操作符即可以被实例化</li><li>如果不使用New操作符，有在所有的字段都被初始化之后，字符才被赋值，对象才被引用。</li></ul></li><li><p>类和结构的区别</p><ul><li>类是引用类型，结构是值类型</li><li>结构不支持继承</li><li>结构不能声明默认的构造函数</li></ul></li></ul><h1>C#的类修饰符</h1><ul><li><p><code>public</code>：访问不受限制的，所有的本程序集以及其他的程序集里面的类都能够访问</p></li><li><p><code>internal</code>：本程序集内的类可以访问，这是类默认的修饰符，在一个程序集内，public和internal的权限是一样的</p></li><li><p><code>partial</code>：部分类，可以将一个类分成几部分写在不同的文件中，最终编译时将合成一个文件，并且各个部分不能分散在不同的程序集中</p></li><li><p><code>abstract</code>：修饰类的时候表示该类为抽象类，不能够创建该类的实例。修饰方法的时候表示该方法需要子类来实现，如果子类没有实现该方法那么子类同样是抽象类；并且含有抽象方法的类一定是抽象类。</p></li><li><p><code>sealed</code>：修饰类表示该类不能够被继承</p></li><li><p><code>static</code>：修饰类时表示该类是静态类，不能够实例化该类的对象，那么这个类也就不能够含有对象成员，即该类所有成员为静态。</p></li><li><p><code>new</code>：只能用于嵌套的类，表示对继承父类同名类型的隐藏</p></li></ul><p><strong>C#类修饰符的总结</strong></p><ul><li>抽象类就是不能使用new方法进行实例化的类，即没有具体实例对象的类。抽象类有点类似“模板”的作用，目的是根据其格式来创建和修改新的类，对象不能由抽象类直接创建，只可以通过抽象类派生出新的子类，再由其子类来创建对象。当一个类被声明为抽象类时，要在这个类前面加上修饰符abstract</li><li>在抽象类中的成员方法可以包括<strong>一般方法</strong>和<strong>抽象方法</strong>，抽象方法就是以abstract修饰的方法，这种方法只声明返回的数据类型、方法名称和所需的参数，没有方法体，也就是说冲向方法只需要声明而不需要实现。当一个方法为抽象方法时，意味着这个方法必须被子类的方法所重写，否则其子类的该方法仍然是abstract的，而这个子类也必须是抽象的，即声明为abstract，想要调用<strong>抽象类中的一般方法只能通过定义一个子类并实例化它之后才能调用</strong>。</li><li>抽象类中不一定包含抽象方法，但是包含抽象方法的类一定要被声明为抽象类。抽象类本身不具备实际的功能，只能用于派生其子类。抽象类中可以包含构造方法，但是构造方法不能被声明为抽象。</li><li>调用抽象类中的方法（抽象方法和非抽象方法），如果方法是static的，直接使用<code>抽象类.方法</code>就可以了，如果是非static的则必须一个继承的非抽象类，然后用这个非抽象类的实例来调用方法。</li><li>抽象类可以实现接口，接口中的方法，在抽象类中可以不实现，当有子类继承抽象类时，并且子类不是抽象类时，子类需要将抽象类中的抽象方法和接口中的方法都实现。</li><li>抽象类不能用final来修饰，即一个类不能既是最终类又是抽象类。</li><li>abstract不能与private、static、final、native并列修饰同一个方法。</li></ul><p><strong>TIPS：抽象方法和虚方法都可以供派生类重写，它们的区别如下</strong></p><ul><li>虚方法必须有实现部分，并为派生类提供了覆盖方法的选项；抽象方法没有提供实现部分抽象方法是一种强制派生类覆盖的方法，否则派生类将不能被实例化。</li><li>抽象方法只能在抽象类中声明，抽象方法必须在派生类中重写，这一点跟接口类似；虚方法不是也不必要重写。如果类包含抽象方法，那么该类也是抽象的，也必须声明为抽象的。</li><li>抽象方法不能声明方法实体，而虚方法可以；包含抽象方法的类不能够被实例化，而包含虚方法的类可以被实例化。</li></ul><p>protected、private、protected internal只能用于嵌套的类</p><p>为什么要有嵌套类？</p><p>嵌套类主要用于当该类仅仅被所在类使用，不需要外部进行显式地构造，并且需要对所在类的成员进行大量访问操作的情况</p><p>嵌套类型的访问修饰符为：public、internal、protected、private和protected internal</p><h1>随机数</h1><p>随机数生成的原理可以分为两类：伪随机数生成（Pseudo-Random Number Generation, PRNG）和真随机数生成（True Random Number Generation, TRNG）。大多数计算机系统使用的是伪随机数生成器，因为它们效率高且易于实现。以下是随机数生成的基本原理和方法。</p><ol><li>伪随机数生成（PRNG）<br>伪随机数生成器是一种算法，它通过数学公式或预定义的规则生成一个看似随机的数列。伪随机数生成器并不是真正的随机，它是确定性的，即只要输入相同的初始值（种子），就会生成相同的随机数序列。</li></ol><p>1.1 基本原理<br>伪随机数生成器通常基于以下公式：</p><p>$$ X_{n + 1}  = (a ⋅ X_{n} + c) \space mod \space m$$</p><p>其中:</p><ul><li>$X_{n}$ 当前随机数(种子)</li><li>$X_{n+1}$ 下一个随机数</li><li>a 乘数</li><li>c 增量</li><li>m 模数（Modulus）。</li><li>初始值$X_{0}$ 种子</li></ul><p>这个公式被称为线性同余生成器（Linear Congruential Generator, LCG），是最常见的伪随机数生成算法之一。</p><h1>int?</h1><p><code>int?</code>表示可空类型，它是一种特殊的值类型，它的值可以为null，在变量设初值的时候，给变量赋值为null，而不是0</p><p><code>int??</code>用于判断并赋值，先判断当前变量是否为null，如果是就可以赋一个新值，否则跳过。注：这是一个右值，不是一个statement。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span>？ a=<span class="literal">null</span>；</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">b</span>()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.a ?? <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>public class ObjectPool<T> where T : IPoolObject, new() new()的含义是什么?</h1><p>在 C# 中，<code>where T : new()</code> 是一个<strong>泛型约束</strong>，它表示泛型类型参数 <code>T</code> 必须具有一个<strong>无参数的公共构造函数</strong>。这意味着使用 <code>new()</code> 约束的类型 <code>T</code> 必须满足以下条件：</p><ol><li><code>T</code> 必须是一个非抽象类（即不能是抽象类或接口）。</li><li><code>T</code> 必须有一个无参数的公共构造函数（即 <code>public T()</code>）。</li></ol><p>在你的例子中：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObjectPool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">IPoolObject</span>, <span class="title">new</span>()</span><br></pre></td></tr></table></figure><p>这段代码的含义是：</p><ul><li><code>T</code> 是一个泛型类型参数。</li><li><code>T</code> 必须实现 <code>IPoolObject</code> 接口（<code>where T : IPoolObject</code>）。</li><li><code>T</code> 必须具有一个无参数的公共构造函数（<code>where T : new()</code>）。</li></ul><hr><h3 id="new-的作用"><strong><code>new()</code> 的作用</strong></h3><p>使用 <code>new()</code> 约束后，代码中可以直接使用 <code>new T()</code> 来创建类型 <code>T</code> 的实例。因为编译器知道 <code>T</code> 满足无参数构造函数的约束，所以可以安全地生成实例。</p><h4 id="示例代码">示例代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPoolObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reset</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObjectPool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">IPoolObject</span>, <span class="title">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; pool = <span class="keyword">new</span> List&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetObject</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pool.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            T obj = pool[<span class="number">0</span>];</span><br><span class="line">            pool.RemoveAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 使用 new T() 创建一个新的实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> T();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReturnObject</span>(<span class="params">T obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        obj.Reset();</span><br><span class="line">        pool.Add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyPoolObject</span> : <span class="title">IPoolObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Resetting object...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ObjectPool&lt;MyPoolObject&gt; pool = <span class="keyword">new</span> ObjectPool&lt;MyPoolObject&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取对象</span></span><br><span class="line">        MyPoolObject obj = pool.GetObject();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Object created&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回对象</span></span><br><span class="line">        pool.ReturnObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出">输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object created</span><br><span class="line">Resetting object...</span><br></pre></td></tr></table></figure><h4 id="解释">解释</h4><ol><li><strong><code>new T()</code></strong>：在 <code>GetObject()</code> 方法中，当池中没有可用对象时，直接通过 <code>new T()</code> 创建一个新的对象。</li><li><strong><code>where T : new()</code></strong>：确保泛型类型参数 <code>T</code> 有一个无参数的构造函数，因此 <code>new T()</code> 是合法的。</li><li><strong><code>where T : IPoolObject</code></strong>：确保 <code>T</code> 实现了 <code>IPoolObject</code> 接口，因此可以调用 <code>Reset()</code> 方法。</li></ol><hr><h3 id="为什么需要-new-约束？"><strong>为什么需要 <code>new()</code> 约束？</strong></h3><p>在 C# 中，泛型类型参数是未知的类型，编译器无法确定类型 <code>T</code> 是否具有构造函数。如果你尝试在没有 <code>new()</code> 约束的情况下使用 <code>new T()</code>，编译器会报错。</p><h4 id="错误示例">错误示例</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObjectPool</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">CreateObject</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 编译错误：T 必须具有无参数构造函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> T();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="错误信息">错误信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;new()&#x27; constraint must be used on type parameter &#x27;T&#x27; to create instances of the type.</span><br></pre></td></tr></table></figure><h4 id="解决方法">解决方法</h4><p>添加 <code>new()</code> 约束：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObjectPool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">new</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">CreateObject</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> T();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="new-的限制"><strong><code>new()</code> 的限制</strong></h3><p>虽然 <code>new()</code> 约束允许你使用 <code>new T()</code>，但它有以下限制：</p><ol><li><p><strong>只能调用无参数的构造函数</strong>：</p><ul><li>如果 <code>T</code> 只有带参数的构造函数（例如 <code>T(int value)</code>），则无法使用 <code>new()</code> 约束。</li><li>解决方案是通过工厂模式或委托来创建对象，而不是直接使用 <code>new T()</code>。</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ObjectPool</span>&lt;<span class="title">T</span>&gt; <span class="keyword">where</span> <span class="title">T</span> : <span class="title">IPoolObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Func&lt;T&gt; objectFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectPool</span>(<span class="params">Func&lt;T&gt; factory</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        objectFactory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">CreateObject</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> objectFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>不能用于抽象类或接口</strong>：</p><ul><li><code>new()</code> 约束要求类型 <code>T</code> 是可以实例化的（非抽象类），因此不能直接用于抽象类或接口。</li></ul></li></ol><hr><h3 id="总结"><strong>总结</strong></h3><ul><li><code>new()</code> 是一个泛型约束，表示泛型类型参数必须具有一个无参数的公共构造函数。</li><li>它允许在泛型类或方法中通过 <code>new T()</code> 创建实例。</li><li>常用于需要动态创建泛型类型实例的场景，比如对象池、工厂模式等。</li><li>结合其他约束（如接口约束 <code>where T : IPoolObject</code>），可以更灵活地定义泛型类的行为。</li></ul><h1>固定长度字符串</h1><p>如果你希望 <code>_moveStrus[posY, posX].moveDir</code> 的输出是一个固定长度的字符串，可以通过格式化字符串的方式来实现。<code>BrickMoveDir</code> 是一个枚举值，默认会通过 <code>ToString()</code> 输出枚举的名称。如果你希望将其输出为固定长度，可以通过以下方式处理：</p><hr><h3 id="方法-1：使用字符串格式化并填充空格"><strong>方法 1：使用字符串格式化并填充空格</strong></h3><p>你可以用 <code>String.Format</code> 或插值字符串（C# 6.0 及以上支持）来对值进行格式化，并通过指定固定宽度填充空格。</p><h4 id="示例代码-2">示例代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.AppendFormat(<span class="string">&quot;&#123;0,-10&#125;&quot;</span>, _moveStrus[posY, posX].moveDir);</span><br></pre></td></tr></table></figure><ul><li><code>&#123;0,-10&#125;</code> 表示将第一个参数的值左对齐，并确保占用 10 个字符的宽度。如果值的长度不足 10，则填充空格；如果值的长度超过 10，则不会截断。</li></ul><p>或者使用字符串插值的方式：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.Append(<span class="string">$&quot;<span class="subst">&#123;_moveStrus[posY, posX].moveDir,<span class="number">-10</span>&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="方法-2：通过-PadRight-或-PadLeft-填充"><strong>方法 2：通过 <code>PadRight</code> 或 <code>PadLeft</code> 填充</strong></h3><p>你可以将 <code>moveDir</code> 转换为字符串后，使用 <code>PadRight</code>（左对齐）或 <code>PadLeft</code>（右对齐）来填充到固定长度。</p><h4 id="示例代码-3">示例代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.Append(_moveStrus[posY, posX].moveDir.ToString().PadRight(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><ul><li><code>PadRight(10)</code> 会将字符串填充到 10 个字符宽度，右侧补空格。</li><li>如果需要右对齐，可以使用 <code>PadLeft(10)</code>。</li></ul><hr><h3 id="方法-3：加上-t-制表符"><strong>方法 3：加上 <code>\t</code> 制表符</strong></h3><p>如果你希望使用制表符（<code>\t</code>）来对齐列，可以在每个值后面追加一个 <code>\t</code>。不过，制表符的宽度在不同环境下可能会有所不同（通常为 4 或 8 个字符），因此不推荐用于精确对齐。</p><h4 id="示例代码-4">示例代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.Append(_moveStrus[posY, posX].moveDir + <span class="string">&quot;\t&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="方法-4：将枚举值转换为整数并格式化"><strong>方法 4：将枚举值转换为整数并格式化</strong></h3><p>如果你希望输出的值是固定宽度的数字（而不是枚举名称），可以将 <code>BrickMoveDir</code> 转换为整数，再进行格式化。例如，确保输出占用 4 个字符宽度：</p><h4 id="示例代码-5">示例代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sb.AppendFormat(<span class="string">&quot;&#123;0,4&#125;&quot;</span>, (<span class="built_in">int</span>)_moveStrus[posY, posX].moveDir);</span><br></pre></td></tr></table></figure><ul><li><code>&#123;0,4&#125;</code> 表示右对齐并占用 4 个字符宽度。</li></ul><hr><h3 id="完整示例"><strong>完整示例</strong></h3><p>以下是一个完整的示例，展示如何将 <code>_moveStrus</code> 的内容按固定宽度输出到 <code>StringBuilder</code> 中：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> posY = <span class="number">0</span>; posY &lt; <span class="number">8</span>; posY++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> posX = <span class="number">0</span>; posX &lt; <span class="number">8</span>; posX++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 将 moveDir 输出为固定宽度的字符串（左对齐，宽度 10）</span></span><br><span class="line">        sb.Append(<span class="string">$&quot;<span class="subst">&#123;_moveStrus[posY, posX].moveDir,<span class="number">-10</span>&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.AppendLine(); <span class="comment">// 换行</span></span><br><span class="line">&#125;</span><br><span class="line">Console.WriteLine(sb.ToString());</span><br></pre></td></tr></table></figure><hr><h3 id="输出示例"><strong>输出示例</strong></h3><p>假设 <code>_moveStrus[posY, posX].moveDir</code> 的值为 <code>Up</code>、<code>Down</code>、<code>Left</code> 等，输出可能如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Up        Down      Left      Right     None      None      None      None      </span><br><span class="line">None      None      None      None      None      None      None      None      </span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr><h3 id="总结-2"><strong>总结</strong></h3><ul><li>如果需要固定宽度的字符输出，推荐使用 <strong>字符串格式化</strong>（<code>String.Format</code> 或插值字符串）或 <strong>PadRight/PadLeft</strong>。</li><li>如果需要使用制表符（<code>\t</code>），请注意它的宽度可能因环境而异，不适合精确对齐。</li><li>如果需要输出数字而非字符串，可以将枚举转换为整数后格式化。</li></ul><h1>浮点数精度问题</h1><p><a href="https://blog.csdn.net/weixin_42186870/article/details/106086671">https://blog.csdn.net/weixin_42186870/article/details/106086671</a></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> expPlus = Mathf.FloorToInt((DoushenMgr.Instance.GetTasksExpPlus() - <span class="number">1.0f</span>) * <span class="number">100f</span>);</span><br></pre></td></tr></table></figure><h1>C#中的值类型</h1><p>foreach与值类型天然不相容, 如果要遍历一个值类型的集合, 那么你只能是去访问这些值, 而不能去改变这些值. 因为 这个结构就会导致 data是从集合中深拷贝出来的, 跟集合里的数据已经没有关系了.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> data <span class="keyword">in</span> dataCollection)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Info&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用一个Collection比如List或者Dictionary遍历由Info构成的集合, 并且尝试修改其中的值, 是不支持的, foreach嘛 如果这是个class就可以<br>这是值类型和引用类型的本质区别</p><h1>C# CodeGenerator</h1><p><a href="https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/">https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/</a></p><h1>C#Stopwatch</h1>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keep On Keeping On</title>
      <link href="/posts/fd7e9d17/"/>
      <url>/posts/fd7e9d17/</url>
      
        <content type="html"><![CDATA[<p>Unity中用到的资源文件, 本质上都是一组数据, Unity在运行时将某一个资源实例化到场景中, 本质上, 是将这一份资源的数据从磁盘中加载到内存里, 然后再把这一组数据解析存储到一个类里面, 然后Unity就直接和这个类对这个资源进行操作和处理了.</p><p>实现全场景可破坏 体素渲染</p><h1>TODO</h1><ul><li>给Hexo拓展一个功能, hexo new的时候自动从一些网站上拉取一张封面下来 然后每次部署的时候去遍历这些封面看看是否还有效, 无效的就再拉取一个新的封面</li><li>Unity网络游戏开发实战</li><li>UnityShader Kerry佬教程</li><li>UGUIContentSizeFitter源码阅读 做一个可以根据文本内容长度自适应长度的ContentSizeFitter</li><li><a href="https://docs.unity3d.com/2022.3/Documentation/Manual/Graphics.html">UnityRender一节文档</a></li><li>ET源码梳理</li><li>Unity源码梳理 PlayerLoop中Render渲染部分的时序图</li><li>C# Task源码的执行时序图</li><li>C# yield return 协程的时序图</li><li>资源校对方案整理 YooAsset、FigmaConvertToUnity、UnityAssetDatabase的资源校验</li><li>YooAsset源码梳理</li><li>LitJson源码梳理</li><li>OpenGL</li><li>Blender</li><li>UE</li><li>看到了UnityText组件的TextGenerator 对 UV 有些疑惑 推测 Unity将 Text中的字体信息传给C++层, C++层根据字体信息、文本内容 生成每个字符在字体文件材质上的位置 也就是UV 需要验证一下 可以通过在Unity层打Log或者去C++层看TextGenerator实现两种方式验证</li><li>Mesh SetUV的作用是什么?</li><li>游戏行业报告</li><li>⭕️ 正则表达式</li><li>⭕️ LinQ表达式</li><li>⭕️ 场景如果打了AssetBundle是如何加载的？和普通资源一样吗？-&gt; AssetBundle博客补全</li><li>⭕️ 反编译入门</li><li>⭕️ 依赖注入博客</li><li>⭕️ <a href="https://docs.unity3d.com/2022.3/Documentation/Manual/class-TextureImporterOverride.html">搞清楚Unity TextureImporter中几种压缩格式的使用</a></li><li>⭕️ Unity粒子系统的使用 -&gt; UI框架博客+实现</li><li>⭕️ Unity渲染管线了解</li><li>⭕️ 注意到图集和散图一样,都是可以设置在不同平台上的Compress Format的,需要测试的是,即使将图集设置了合理的压缩格式,如果图集中的散图用的压缩格式不合理,还是会导致包体会大.</li><li>⭕️ TimeLine插件</li><li>⭕️ Cinemachine插件</li><li>⭕️ 二叉树算法整理</li><li>⭕️ 图算法整理</li></ul><h1>合集</h1><p><a href="https://soincredible.github.io/posts/d97e22f1">C#</a><br><a href="https://soincredible.github.io/posts/e78f9514">C++</a><br><a href="https://soincredible.github.io/posts/127bc3c9">Unity</a></p><ul><li><a href="https://soincredible.github.io/posts/">Animation</a></li><li><a href="https://soincredible.github.io/posts/">资源加载管理</a></li><li><a href="https://soincredible.github.io/posts/">代码热更</a></li><li><a href="https://soincredible.github.io/posts/">网络通信</a></li><li><a href="https://soincredible.github.io/posts/">设计模式</a></li><li><a href="https://soincredible.github.io/ae5b3442">工具开发</a></li><li><a href="">性能优化</a></li><li><a href="https://soincredible.github.io/e0e34b4b">UGUI</a></li><li><a href="https://soincredible.github.io/b20b7f63">渲染合集</a></li><li><a href="https://soincredible.github.io/posts/">Shader</a></li><li><a href="https://soincredible.github.io/posts/">URP</a></li><li><a href="https://soincredible.github.io/posts/">HDRP</a></li><li><a href="https://soincredible.github.io/posts/">插件合集</a><br><a href="https://soincredible.github.io/posts/">UnrealEngine</a><br><a href="https://soincredible.github.io/posts/">设计模式</a><br><a href="https://soincredible.github.io/posts/e1a82e1">数据结构算法</a><br><a href="https://soincredible.github.io/posts/">渲染</a><br><a href="https://soincredible.github.io/posts/">建模</a><br><a href="https://soincredible.github.io/posts/">云服务器</a><br><a href="https://soincredible.github.io/posts/">计算机网络</a><br><a href="https://soincredible.github.io/posts/">AI</a><br><a href="https://soincredible.github.io/posts/">阅读</a><br><a href="https://soincredible.github.io/posts/">迷思</a><br><a href="https://soincredible.github.io/posts/">Jekins</a><br><a href="https://soincredible.github.io/posts/">我写的插件</a></li></ul><p>Obsidian + Git + Hexo + PigGo + 云服务器 + 云存储的方案 <a href="https://zhuanlan.zhihu.com/p/554333805">https://zhuanlan.zhihu.com/p/554333805</a><br>图床方案 <a href="https://tbed.hellohao.cn/">https://tbed.hellohao.cn/</a><br>PicGo <a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><h1>ProjectO</h1><p><a href="https://soincredible.github.io/posts/8a8aad75">https://soincredible.github.io/posts/8a8aad75</a></p><ul><li><p>ET框架</p></li><li><p>Animancer</p></li><li><p>行为树</p></li><li><p>技能编辑器</p></li><li><p>模型提取</p></li><li><p>YooAsset</p></li><li><p>Slate</p></li><li><p>Odin</p></li><li><p><a href="https://github.com/Cysharp/MagicPhysX">MagicPhysX</a> C#绑定物理库</p></li><li><p><a href="https://assetstore.unity.com/packages/tools/terrain/world-streamer-2-176482#description">WorldStreamer</a> 大地图加载方案</p></li><li><p><a href="">UniStorm</a></p></li><li><p><a href="https://www.mmzsblog.cn/articles/2022/02/23/1645604883865.html#toc_h4_188">Unity面试</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1sB4y1n7hg/?spm_id_from=333.1387.homepage.video_card.click&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">ARPG</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1x44y1e7Ro/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">Unity Animator</a></p></li><li><p><a href="https://www.bilibili.com/opus/904636480410877954">街霸导论</a></p></li></ul><h1>资源</h1><ul><li><a href="https://qntm.org/perl_cn">Perl语言教程</a></li><li><a href="https://sharplab.io/">一个能在线查看经过C#编译器处理过后C#代码的网站</a></li><li><a href="https://referencesource.microsoft.com/">C#源码</a> 2025.7.18 这个网站挂掉了https://sourceroslyn.io/</li><li><a href="https://zhuanlan.zhihu.com/p/452412091">Mac安装Windows虚拟机</a></li><li><a href="https://github.com/icsharpcode/AvaloniaILSpy">能够在Mac上运行的ILSpy</a></li><li><a href="https://tableconvert.com/zh-cn/markdown-generator">MarkDown在线表格生成</a></li><li><a href="https://z-library.sk/">在线图书馆</a></li><li><a href="https://godbolt.org/">Compiler Explorer 一个在线的查看C++代码对应汇编语言的工具</a></li><li><a href="https://assimp.org/">开源的C++资产导入库(OpenGL学习模型导入一节提及)</a></li><li><a href="https://glm.g-truc.net/0.9.8/index.html">OpenGL教程中使用的数学库</a></li><li><a href="https://github.com/nothings/stb">一个C++中流行的图片加载库</a></li><li><a href="https://www.glfw.org/docs/latest/index.html">GLFW主页</a></li><li><a href="https://www.shadertoy.com/">一个在线的Shader构建器</a></li><li>Gradle</li><li><a href="https://www.jenkins.io/">Jenkins</a></li><li><a href="https://www.youtube.com/watch?v=vOBSAFmL610&amp;list=PLI9CK8e_e3MeDv8K1vi0FosBV4dKmcOo3">C#服务器</a></li><li><a href="https://www.bilibili.com/video/BV1X7411F744">Games101</a></li><li><a href="https://games-cn.org/forums/topic/allhw/">Games101作业</a></li><li><a href="https://www.bilibili.com/video/BV1oU4y1R7Km">Games104</a></li><li>Android</li><li><a href="https://developer.apple.com/documentation/">IOS开发</a></li><li><a href="https://learnopengl-cn.github.io/intro/">OpenGL学习</a></li><li>游戏逆向</li><li><a href="https://www.bilibili.com/cheese/play/ss32685?csource=Hp_searchresult&amp;spm_id_from=333.337.0.0">Unreal谌嘉诚的蓝图教程不错</a></li><li><a href="https://www.aseprite.org/">Aseprite官网</a></li><li>Cocos2d</li><li>Godot</li><li><a href="https://boardgamegeek.com/">桌游Geek</a></li><li><a href="https://programmercarl.com/">算法, 代码随想录不错</a></li><li>设计模式</li><li><a href="https://www.bilibili.com/video/BV14u41147YH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">Blender教程</a></li><li><a href="">Vim</a></li><li><a href="https://github.com/LearnShare/Learning-Markdown">MarkDown文档编写技巧</a></li><li><a href="https://www.piccoloengine.com/topics/node/feed/all">Piccolo游戏引擎社区</a></li><li><a href="https://www.youtube.com/watch?v=fNk_zzaMoSs&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&amp;index=2">3b1b——线性代数的本质</a></li><li><a href="https://github.com/AssetRipper/AssetRipper">AssetRipper</a>: Mac上解包AssetBundle的工具</li><li><a href="https://github.com/libgdx/libgdx">libGDX</a>: 轻量级游戏引擎</li><li><a href="https://github.com/Perfare/Il2CppDumper">Il2CppDumper</a>: 反编译工具</li><li><a href="https://github.com/NationalSecurityAgency/ghidra">ghidra</a>: 反编译工具</li><li><a href="https://github.com/LearnShare/Learning-Markdown">MarkDown文档编写技巧</a></li><li><a href="https://github.com/modesttree/Zenject">Zenject</a>: Unity中使用的轻量级依赖注入框架 类似的还有VContainer</li><li><a href="https://github.com/glfw/glfw">GLFW</a></li><li><a href="https://github.com/jenkinsci/jenkins">Jenkins</a></li><li><a href="https://github.com/Unity-Technologies/AssetBundles-Browser">AssetBundleBrowser</a></li><li><a href="https://github.com/egametang/ET">ET框架</a></li><li><a href="https://github.com/mongodb/mongo">MongoDB</a></li><li><a href="https://github.com/Cysharp/UniTask">UniTask</a></li><li><a href="https://cdprojektred.atlassian.net/wiki/spaces/W3REDkit/pages/36864027/WS+Script+Studio+basics">RedKit官方文档</a></li><li><a href="https://github.com/EllanJiang/GameFramework">GameFrameWork</a></li><li><a href="https://www.youtube.com/@Gdconf">GDC</a></li><li><a href="https://kbengine.github.io//">kbEngine</a></li><li><a href="https://love2d.org/wiki/Game_Distribution">love2d轻量级游戏引擎,小丑牌的开发引擎</a></li><li><a href="https://www.mixamo.com/#/?page=3">mixamo免费下载角色动画</a></li><li><a href="https://github.com/snozbot/fungus">开源对话框架fungus</a></li><li><a href="https://www.redblobgames.com/">RedBlobGames可视化A*寻路算法</a></li><li><a href="https://github.com/warmtrue/RVO2-Unity">避障算法RVO</a></li><li><a href="https://github.com/Tencent/xLua">xLua</a></li><li><a href="https://github.com/topics/game">github游戏区</a></li><li><a href="https://www.yooasset.com/docs/Introduce">YooAsset</a></li><li><a href="https://www.photonengine.com/">Photon——一个专注于做Unity多人联机框架的工作室</a></li><li><a href="https://osgameclones.com/">开源游戏合集</a></li><li><a href="https://github.com/qq362946/Fantasy">Fantacy</a></li><li><a href="https://www.codeandweb.com/texturepacker">TexturePacker</a></li><li><a href="https://www.bilibili.com/video/BV1sE411g7N9?spm_id_from=333.788.videopod.sections&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">庄懂技术美术课程</a></li><li><a href="https://github.com/BoyanTata/AP01">庄懂技术美术课程配套资源</a></li><li><a href="https://www.bilibili.com/video/BV1TX4y1g75w?spm_id_from=333.788.videopod.sections&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">B站UP主samlee2025的Shader系列, 就是通过他才知道了庄懂</a></li><li><a href="https://www.kdocs.cn/l/cbSqBT9pOXH5">UP主samlee2025的笔记</a></li><li><a href="https://github.com/FreyaHolmer/ShaderForge">ShaderForge</a></li><li><a href="https://www.bilibili.com/video/BV1Zr4y147Jx/?spm_id_from=333.337.search-card.all.click&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">菲兹杂货铺</a></li><li><a href="https://space.bilibili.com/4435618?spm_id_from=333.337.0.0">Kerry佬</a></li><li><a href="https://enjoyphysics.cn/%E6%96%87%E4%BB%B6/soft/Hlsl/GPU-Programming-AndCgLanguage-Primer.pdf">GPU 编程与CG 语言之阳春白雪下里巴人</a></li></ul><h1>博客</h1><ul><li><a href="https://frog-game.github.io/posts/blog/wufengdashijie/">Frog’s Blog</a></li><li><a href="https://www.lfzxb.top/">烟雨迷离半世殇</a></li><li><a href="https://blog.csdn.net/j756915370?type=blog">水曜日鸡</a></li><li><a href="https://networm.me/">狂飙</a></li><li><a href="https://ameye.dev/">Alexander Ameye</a></li><li><a href="https://candycat1992.github.io/">CandyCat冯乐乐</a></li><li><a href="https://www.ownself.org/">OWNSELF</a></li><li><a href="https://blog.codingnow.com/">云风的Blog</a></li><li><a href="https://www.liuocean.com/">L’s Blog</a></li><li><a href="https://blog.stephencleary.com/">Stephen Cleary</a> C#专家</li><li><a href="https://walkingfat.com/">行尸走油</a></li><li><a href="https://acegikmo.com/">ShaderForge作者的博客, 还是个数学家</a></li></ul><p>博客收录 <a href="https://zhuanlan.zhihu.com/p/100922816">https://zhuanlan.zhihu.com/p/100922816</a><br><a href="https://javahikers.github.io/2019/06/16/personal-blog-being-included-in-google/">https://javahikers.github.io/2019/06/16/personal-blog-being-included-in-google/</a></p><p>直接使用Mac命令行比较两个文件是否一模一样 基于hash值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shasum filename</span><br></pre></td></tr></table></figure><p>本文标题<strong>Keep On Keeping On</strong>, 出自小岛秀夫死亡搁浅.</p><p>在Unity中构建一套经济循环系统</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ET中反射与特性的使用</title>
      <link href="/posts/cd96d12/"/>
      <url>/posts/cd96d12/</url>
      
        <content type="html"><![CDATA[<h1>ET中用到的其他Attribute</h1><p>[BsonIgnore]<br>[UnityEngine.HideInInspector]<br>[MemoryPackIgnore]</p><blockquote><p>2025.3.20更新</p></blockquote><p>笔者最近在看ET框架的Demo,里面有一个名为<code>CodeLoader</code>的脚本,里面用到了反射的东西</p><p>反射可以直接与程序集交互,越过常规的类构造函数,直接由程序集中实例化出对象来.<br>通过反射执行方法/实例化对象的方式也有缺点,在Editor中无法直观定位到调用</p><p>Assembly程序集提供给了一个<code>GetTypes()</code>接口,允许你访问该程序集中包含的所有Type<br>Type中存储了FullName、以及这个Type所处的程序集</p><p>在<code>CodeTypes</code>脚本的Awake方法中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params">Assembly[] assemblies</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, Type&gt; addTypes = AssemblyHelper.GetAssemblyTypes(assemblies);</span><br><span class="line">    <span class="keyword">foreach</span> ((<span class="built_in">string</span> fullName, Type type) <span class="keyword">in</span> addTypes)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.allTypes[fullName] = type;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (type.IsAbstract)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录所有的有BaseAttribute标记的的类型</span></span><br><span class="line">        <span class="built_in">object</span>[] objects = type.GetCustomAttributes(<span class="keyword">typeof</span>(BaseAttribute), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">object</span> o <span class="keyword">in</span> objects)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.types.Add(o.GetType(), type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CodeLoader中的Start方法如下:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Define.IsEditor)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] modelAssBytes = <span class="keyword">this</span>.dlls[<span class="string">&quot;Unity.Model.dll&quot;</span>].bytes;</span><br><span class="line">        <span class="built_in">byte</span>[] modelPdbBytes = <span class="keyword">this</span>.dlls[<span class="string">&quot;Unity.Model.pdb&quot;</span>].bytes;</span><br><span class="line">        <span class="built_in">byte</span>[] modelViewAssBytes = <span class="keyword">this</span>.dlls[<span class="string">&quot;Unity.ModelView.dll&quot;</span>].bytes;</span><br><span class="line">        <span class="built_in">byte</span>[] modelViewPdbBytes = <span class="keyword">this</span>.dlls[<span class="string">&quot;Unity.ModelView.pdb&quot;</span>].bytes;</span><br><span class="line">        <span class="comment">// 如果需要测试，可替换成下面注释的代码直接加载Assets/Bundles/Code/Unity.Model.dll.bytes，但真正打包时必须使用上面的代码</span></span><br><span class="line">        <span class="comment">//modelAssBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.Model.dll.bytes&quot;));</span></span><br><span class="line">        <span class="comment">//modelPdbBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.Model.pdb.bytes&quot;));</span></span><br><span class="line">        <span class="comment">//modelViewAssBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.ModelView.dll.bytes&quot;));</span></span><br><span class="line">        <span class="comment">//modelViewPdbBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, &quot;Unity.ModelView.pdb.bytes&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Define.EnableIL2CPP)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> kv <span class="keyword">in</span> <span class="keyword">this</span>.aotDlls)</span><br><span class="line">            &#123;</span><br><span class="line">                TextAsset textAsset = kv.Value;</span><br><span class="line">                RuntimeApi.LoadMetadataForAOTAssembly(textAsset.bytes, HomologousImageMode.SuperSet);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.modelAssembly = Assembly.Load(modelAssBytes, modelPdbBytes);</span><br><span class="line">        <span class="keyword">this</span>.modelViewAssembly = Assembly.Load(modelViewAssBytes, modelViewPdbBytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enableDll)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] modelAssBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, <span class="string">&quot;Unity.Model.dll.bytes&quot;</span>));</span><br><span class="line">            <span class="built_in">byte</span>[] modelPdbBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, <span class="string">&quot;Unity.Model.pdb.bytes&quot;</span>));</span><br><span class="line">            <span class="built_in">byte</span>[] modelViewAssBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, <span class="string">&quot;Unity.ModelView.dll.bytes&quot;</span>));</span><br><span class="line">            <span class="built_in">byte</span>[] modelViewPdbBytes = File.ReadAllBytes(Path.Combine(Define.CodeDir, <span class="string">&quot;Unity.ModelView.pdb.bytes&quot;</span>));</span><br><span class="line">            <span class="keyword">this</span>.modelAssembly = Assembly.Load(modelAssBytes, modelPdbBytes);</span><br><span class="line">            <span class="keyword">this</span>.modelViewAssembly = Assembly.Load(modelViewAssBytes, modelViewPdbBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();</span><br><span class="line">            <span class="keyword">foreach</span> (Assembly ass <span class="keyword">in</span> assemblies)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> name = ass.GetName().Name;</span><br><span class="line">                <span class="keyword">if</span> (name == <span class="string">&quot;Unity.Model&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.modelAssembly = ass;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (name == <span class="string">&quot;Unity.ModelView&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">this</span>.modelViewAssembly = ass;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.modelAssembly != <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.modelViewAssembly != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    (Assembly hotfixAssembly, Assembly hotfixViewAssembly) = <span class="keyword">this</span>.LoadHotfix();</span><br><span class="line"></span><br><span class="line">    World.Instance.AddSingleton&lt;CodeTypes, Assembly[]&gt;(<span class="keyword">new</span>[]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typeof</span> (World).Assembly, <span class="keyword">typeof</span> (Init).Assembly, <span class="keyword">this</span>.modelAssembly, <span class="keyword">this</span>.modelViewAssembly, hotfixAssembly,</span><br><span class="line">        hotfixViewAssembly</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    IStaticMethod start = <span class="keyword">new</span> StaticMethod(<span class="keyword">this</span>.modelAssembly, <span class="string">&quot;ET.Entry&quot;</span>, <span class="string">&quot;Start&quot;</span>);</span><br><span class="line">    start.Run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你是Editor模式下的话,你应该会走到<code>this.enableDll</code>为true的分支<br>通过执行CodeLoader中的Start方法,被遍历到的程序集有<code>World</code>类所在的程序集<code>Unity.Core</code>、<code>Init</code>类所在的程序集<code>Unity.Loader</code>、modelAssemBly<code>Unity.Model</code>,modelViewAssembly<code>Unity.ModelView</code>,hotfixAssembly<code>Unity.Hotfix</code>,hotfixViewAssembly<code>Unity.HotfixView</code></p><p>代入一下就是,通过AddSingleton方法,创建了CodeTypes实例,并将上面提到的程序集作为参数传入CodeType的Awake方法中.</p><p>然后在modelAssembly<code>Unity.Model</code>中,找到<code>ET.Entry</code>类中的Start方法,并执行该方法,然后在该方法中,执行了<code>CodeTypes.Instance.CreateCode</code>方法,该方法会在上面收集到的程序集中,找到所有被标记了CodeAttribute属性的类,并将这些类实例化出来,这些类分别是</p><ul><li>EntitySystemSingleton</li><li>MessageDispatcher MessagePatcher中的Awake方法中实例化了所有被标记为MessageHandlerAttribute属性的类</li><li>EventSystem</li><li>HttpDispatcher</li><li>LSEntitySystemSingleton</li><li>AIDispatcherComponent</li><li>ConsoleDispatcher</li><li>MessageSessionDispatcher</li><li>NumericWatcherComponent</li><li>UIEventComponent<br>也就是说,上面这十个类,通过执行ET的Entry方法之后就已经被创建出来了.</li></ul><p>在<code>MessageSessionDispatcher</code>的Awake方法中如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    HashSet&lt;Type&gt; types = CodeTypes.Instance.GetTypes(<span class="keyword">typeof</span> (MessageSessionHandlerAttribute));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (Type type <span class="keyword">in</span> types)</span><br><span class="line">    &#123;</span><br><span class="line">        IMessageSessionHandler iMessageSessionHandler = Activator.CreateInstance(type) <span class="keyword">as</span> IMessageSessionHandler;</span><br><span class="line">        <span class="keyword">if</span> (iMessageSessionHandler == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Log.Error(<span class="string">$&quot;message handle <span class="subst">&#123;type.Name&#125;</span> 需要继承 IMHandler&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">object</span>[] attrs = type.GetCustomAttributes(<span class="keyword">typeof</span>(MessageSessionHandlerAttribute), <span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">object</span> attr <span class="keyword">in</span> attrs)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageSessionHandlerAttribute messageSessionHandlerAttribute = attr <span class="keyword">as</span> MessageSessionHandlerAttribute;</span><br><span class="line">            </span><br><span class="line">            Type messageType = iMessageSessionHandler.GetMessageType();</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">ushort</span> opcode = OpcodeType.Instance.GetOpcode(messageType);</span><br><span class="line">            <span class="keyword">if</span> (opcode == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Error(<span class="string">$&quot;消息opcode为0: <span class="subst">&#123;messageType.Name&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            MessageSessionDispatcherInfo messageSessionDispatcherInfo = <span class="keyword">new</span> (messageSessionHandlerAttribute.SceneType, iMessageSessionHandler);</span><br><span class="line">            <span class="keyword">this</span>.RegisterHandler(opcode, messageSessionDispatcherInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中的<code>GetCustomAttributes(typeof(MessageSessionHandlerAttribute), true);</code>接口</p><h1>AIHandlerAttribute</h1><h1>CodeAttribute</h1><h1>ConfigAttribute</h1><h1>ConsoleHandlerAttribute</h1><h1>EnableClassAttribute</h1><h1>EntitySystemAttribute</h1><h1>EntitySystemOfAttribute</h1><h1>EventAttribute</h1><h1>HttpHandlerAttribute</h1><h1>InvokeAttribute</h1><h1>LSEntitySystemAttribute</h1><h1>LSEntitySystemOfAttribute</h1><h1>MessageAttribute</h1><h1>MessageHandlerAttribute</h1><h2 id="MessageLocationHandlerAttribute">MessageLocationHandlerAttribute</h2><h1>MessageSessionHandlerAttritube</h1><h1>NumericWAtcherAttribute</h1><h1>ResponseTypeAttribute</h1><h1>UIEventAttribute</h1><hr><h1>背景</h1><p>这篇博客本来想聊一聊反射的内容，但是反射的前置知识点优点太多了，所以真正要聊到反射可能要到下一篇博客了。</p><h1>特性</h1><p>特性（Attribute）是用于在运行时传递程序中各种元素（比如类、方法、结构、枚举、组件等等）的行为信息的声明性标签。我们可以使用特性向程序添加声明性信息。一个声明性标签是通过放置在它所应用的元素前面的方括号<code>[]</code>来描述的。</p><p>特性用于添加元数据，如编译器指令和注释</p><h1>反射</h1><p>反射指程序可以访问、检测和修改它本身状态和行为的一种能力。程序集包含模块，而模块包含类型，类型又包含成员。反射提供了封装程序集、模块和类型的对象。我们可以使用反射动态地创建类型的实例，将类型绑定到现有对象上，或者从现有对象中获取类型。然后可以调用类型的方法或者访问其字段和属性。</p><h2 id="优缺点">优缺点</h2><p>优点：</p><ol><li>反射提高了程序的灵活性和扩展性</li><li>降低耦合性，提高自适应能力</li><li>它允许程序创建和控制任何类的对象，无需提前硬编码目标类</li></ol><p>缺点：</p><ol><li>性能问题：反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码，因此反射机制主要应用在对灵活性和拓展性要求很高的系统框架上，普通程序不建议使用。</li><li>使用反射会模糊程序内部的逻辑，程序员希望在源码中看到程序的逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更为复杂。</li></ol><h1>反射为什么慢?</h1><p>因为信息都是字符串 是要检索字符串的 而且字符串的检索是大小不敏感的.</p><h2 id="反射的用途：">反射的用途：</h2><p>反射有以下用途：</p><ol><li>它允许在运行时查看特性（attribute）信息</li><li>它允许审查集合中的各种类型，以及实例化这些类型</li><li>它允许延迟绑定的方法和属性</li><li>它允许在运行时创建新的类型，然后使用这些类型执行一些任务</li></ol><h1>TEngine中的反射</h1><p>在TEngine中有一个模块, 是在ToolBar上增加按钮的, 根据Unity官方的文档, ToolBar区域是没有对开发者暴露API的, 也就是我们没有办法在ToolBar区域自定义内容, 而TEngine采用反射的方式获取到了控制ToolBar区域表现的实例, 并修改其中的方法字段, 达到了自定义Toolbar的效果.</p>]]></content>
      
      
      <categories>
          
          <category> ET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> ET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于命名空间</title>
      <link href="/posts/73546a6d/"/>
      <url>/posts/73546a6d/</url>
      
        <content type="html"><![CDATA[<p>命名空间的设计目的是提供一种让一组名称于其他名称分割开来的方式，在一个命名空间中声明的类的名称与另一个命名空间中声明的相同的类的名称不冲突。</p><p>我们举一个计算机系统中的例子，一个文件夹中可以包含多个文件夹，每个文件夹中不能有相同的文件名，但不同文件夹中的文件可以重名。</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/09/0129A8E9-30FE-431D-8C48-399EA4841E9D.jpg" alt=""></p><h1>自定义命名空间</h1><p>命名空间的定义是以关键字<code>namespace</code>开始，后面跟命名空间的名称，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_name</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面演示了命名空间的用法：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">namespace_cl</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      first_space.namespace_cl fc = <span class="keyword">new</span> first_space.namespace_cl();</span><br><span class="line">      second_space.namespace_cl sc = <span class="keyword">new</span> second_space.namespace_cl();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Inside first_space</span><br><span class="line">Inside second_space</span><br></pre></td></tr></table></figure><h1>using关键字</h1><p>using关键字表明程序使用的是给定命名空间中的名称。比如我们在程序中使用System命名空间，其中</p><p>您也可以使用 <strong>using</strong> 命名空间指令，这样在使用的时候就不用在前面加上命名空间名称。该指令告诉编译器随后的代码使用了指定命名空间中的名称。下面的代码演示了命名空间的应用。</p><p>让我们使用 using 指定重写上面的实例：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> first_space;</span><br><span class="line"><span class="keyword">using</span> second_space;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">first_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">abc</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside first_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">second_space</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">efg</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span>()</span></span><br><span class="line">      &#123;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;Inside second_space&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title">TestClass</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">      abc fc = <span class="keyword">new</span> abc();</span><br><span class="line">      efg sc = <span class="keyword">new</span> efg();</span><br><span class="line">      fc.func();</span><br><span class="line">      sc.func();</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套命名空间">嵌套命名空间</h2><p>命名空间可以被嵌套，即您可以在一个命名空间内定义另一个命名空间，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">namespace_name1</span> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 代码声明</span></span><br><span class="line">   <span class="keyword">namespace</span> <span class="title">namespace_name2</span> </span><br><span class="line">   &#123;</span><br><span class="line">     <span class="comment">// 代码声明</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用点（.）运算符访问嵌套的命名空间的成员，如下所示：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace;</span><br><span class="line"><span class="keyword">using</span> SomeNameSpace.Nested;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SomeNameSpace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;In SomeNameSpace&quot;</span>);</span><br><span class="line">            Nested.NestedNameSpaceClass.SayHello();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内嵌命名空间</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">Nested</span>  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NestedNameSpaceClass</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;In Nested&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In SomeNameSpace</span><br><span class="line">In Nested</span><br></pre></td></tr></table></figure><p>在平时的开发中，我们可能会遇到这样的命名空间写法：<code>namespace View.Effect.Pfx</code>，<strong>这从概念上来讲并不属于嵌套命名空间</strong>，但是在使用上来讲这和嵌套命名空间的使用是没有区别的。</p><h1>namespace在使用中遇到的疑惑</h1><h2 id="背景">背景</h2><p>我在使用<code>C++</code>的时候就对<code>namespace</code>的理解十分欠缺。而到了C#中，我发现namespace的作用相较于<code>C++</code>好像发生了变化，我将通过下面这个场景来描述我的疑惑：我现在创建了两个脚本分别为脚本A和脚本B，在这两个脚本中分别定义了类A和类B，我们要在脚本B中定位并使用脚本A中的类A。</p><h2 id="C-和C-定位并识别不同脚本中类的方式">C++和C#定位并识别不同脚本中类的方式</h2><p>对于C#来讲，在类B中访问类A的关键是确保C#编译器能够找到并识别类A，有以下几个步骤：</p><ol><li>确保源代码文件包含公开定义的类A。如果类A不是公共public类型，按照访问修饰符的规定，类B可能无法获取类A，所以应该将类A设置为public。</li><li>如果类B和类A位于同一个<code>命名空间</code>，它们应该能够相互访问，无需额外的操作。</li><li>如果类A和类B位于不同的命名空间，则需要在类B的源文件顶部使用using语句导入类A所在的命名空间</li><li><strong>如果类A没有制定命名空间，那么它属于全局命名空间，这种情况下我们可以直接在类B中使用类A，而无需额外的<code>using</code>语句，当然在实际的项目中，我们通常为类定义合适的命名空间来实现更好的代码组织、避免名称冲突，提高代码的可读性和可维护性。只有在极少数的特定场景下才考虑将类放入全局命名空间。</strong></li><li>如果类A和类B位于不同的项目/程序集中，比如Unity的插件，要确保正确地引用了包含类A的程序集。在Unity编辑器中，可以将包含类A的DLL拖放至Asset目录，然后Unity会自动处理引用关系。而在普通的C#中，可以通过Visual Studio等IDE添加对应的<code>.dll</code>文件作为引用。</li></ol><p>对于C++来讲，在类B中能够找到并使用类A涉及以下几个步骤：</p><ol><li>声明：确保类A在对应的头文件中公开声明</li><li><strong>引用：在类B所在的头文件的顶部包含类A的头文件，这里要注意使用正确的文件路径和文件名</strong></li><li>访问<ul><li>静态成员：通过<code>类名::成员</code>的方式直接访问静态成员</li><li>非静态成员：创建一个类A的对象实例，然后使用<code>类名.成员</code>访问非静态成员，如果是指针，则使用<code>-&gt;</code></li></ul></li><li>如果类B和类A位于不同的项目，需要确保正确地构建和链接它们，例如，将项目A构建为静态库或动态库（<code>.lib</code>或<code>.dll</code>），然后将其添加到项目B的链接器输入中。此外，别忘了在类B中包含类A所在的头文件。</li></ol><p>所以C++和C#在类B如何找到并使用类A的过程中有一定的相似性，尽管它们分别属于不同的编程范式。下面是一些主要的区别</p><ol><li>文件包含：<ul><li>C++需要使用<code>include</code>语句在头文件中包含对应的头文件，这就是在编译时，将类A的声明引入到类B的头文件中。</li><li><strong>C#需要使用<code>using</code>语句指定某个命名空间，如果类A和类B不在同一个命名空间的话，而不需要指定具体的文件名，C#会在项目范围内自动处理相关类型的引用</strong></li></ul></li><li>引用语法<ul><li>C++：类成员的访问语法是<code>对象名.成员</code>或者<code>对象指针-&gt;成员</code></li><li>C#：类成员访问语法也是<code>对象名.成员</code>，实际上不区分值类型和引用类型</li></ul></li><li>编译和链接方式：<ul><li>C++：编译器需要在编译阶段处理包含关系，每个源文件在被编译前通过预处理器将相关文件展开、合并，然后形成单独的目标文件。在链接阶段，再将所有目标文件以及第三方库进行链接生成可执行程序。</li><li><strong>C#：基于<code>.NET</code>平台，源代码在一开始被编译成中间语言，而各自的类分别保存在它们自己的文件中，在运行时，IL会通过即时编译变为本地机器码，整个过程中，相关类型之间的引用在运行时进行解析。</strong></li></ul></li></ol><p>其实我们想要在类B中访问类A的方法或者变量，与命名空间的关系不大。关键是使用正确的访问修饰符以及合适地使用对象或者引用。</p><p>有以下两种情况：</p><ol><li>访问静态成员，如果类A中有一个静态方法或或静态变量，我们可以直接使用类名加上成员名进行访问</li><li>访问非静态成员：对于非静态成员，我们需要创建一个类A的对象实例，然后通过该实例引用对应的方法和变量。确保这些方法和变量受到适当的访问修饰符保护。</li></ol><p>不过命名空间可能会影响上述过程，如果类A和类B位于同一个命名空间，则无需特别声明；但是如果它们位于不同的命名空间，那么在类B的文件顶部需要添加<code>using</code>语句来引用类A所在的命名空间。所以，理解访问修饰符如何与对象或引用相结合是使用的关键。同时，确保在跨命名空间访问时能正确地使用using语句。</p><p>总结：C++和C#在类B定位并使用类A的基本概念相似，都需要先导入声明，然后在其他类中使用。主要的不同点在于包含/导入方式、访问语法以及编译链接思路。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#IEnumerator与IEnumerable理解与辨析</title>
      <link href="/posts/133a9667/"/>
      <url>/posts/133a9667/</url>
      
        <content type="html"><![CDATA[<h1>IEnumerator更广阔的天地</h1><p>编写的几乎所有程序都需要循环访问集合，因此需要编写代码来检查集合中的每一项。</p><p>迭代器可以读取集合中的数据，但是不能从底层修改集合，因为迭代器的实现方法中只实现了Get方法，所以不能对集合中的数据进行修改</p><p>语法糖：计算机中添加某种语法，这种语法对语言功能没有影响，但是更方便程序员使用，语法糖让代码更加简洁，有更高的可读性</p><h1>基本概念</h1><p>协程（Coroutine）：协同程序，在主程序运行的同时，开启另外一段逻辑处理，来协同当前程序的执行。Unity的协程系统是基于C#的一个简单而强大的接口——迭代器（IEnumerator），协程并不是多线程的，只是运行的结果很像多线程而已。它们最大的区别就是多线程可以多核并发，但是协程只能是单核按帧顺序轮转，线程可以使用多个CPU，协程不能，所以线程是真的并行。协程是在Unity主线程中运行的，每一帧中处理一次，而并不与主线程并行。这就意味着在协程之间不存在着所谓的线程间的同步和互斥问题，访问同一个值也都是安全的，不会出现死锁。</p><h1>协程的用法：</h1><h2 id="开启协程：">开启协程：</h2><p>开启协程的两种方式：</p><ul><li><code>StartCoroutine(string methodName)</code>。参数是方法名（字符串类型）；此方法可以包含一个参数，形参方法可以有返回值</li><li><code>StartCoroutine(IEnumerator method)</code>。参数是方法名(TestMethod())，方法中可以包含多个参数；IEnumerator类型的方法不能含有ref或者out类型的参数，但是可以含有被传递的引用；必须要有返回值，并且返回值的类型为IEnumerator，返回值使用<code>yield return expression</code>或者<code>yield return value</code>，或者<code>yield break</code>语句。</li></ul><h2 id="终止协程">终止协程</h2><p>终止协程的两种方式</p><ul><li><code>StopCoroutine(string methodName)</code>，只能终止制定的协程，在程序中调用StopCoroutine()方法只能终止以字符串形式启动的协程。</li><li><code>StopAllCoroutine()</code>，终止所有协程</li></ul><p>挂起</p><ul><li><code>yield</code>：挂起，程序遇到<code>yield</code>关键字的时候会被挂起，暂停执行，等待条件满足的时候从当前位置继续执行</li><li><code>yield return 0</code> or <code>yield return null</code>：程序在下一帧中从当前位置继续执行</li><li><code>yield return 1,2,3...</code>：等待程序1，2，3…帧之后从当前位置继续执行</li><li><code>yield return new WaitForSeconds(n)</code>:程序等待n秒之后从当前位置继续执行</li><li><code>yield new WaitForEndOfFrame()</code>：在所有的渲染以及GUI程序执行完成后从当前位置继续执行</li><li><code>yield new WaitForFixedUpdate()</code>：所有脚本中FixedUpdate()函数都被执行后从当前位置继续执行</li><li><code>yield return WWW</code>：等待一个协程执行完成后从当前位置继续执行</li><li><code>yield return SatrtCoroutine()</code>：等待一个协程执行完成后从当前位置继续执行</li><li><code>yield break</code>：将会导致协程的执行条件不被满足，不会从当前的位置继续执行程序，而是直接从当前位置跳出函数体回到函数的根部</li></ul><h1>协程的执行原理</h1><p>协程函数的返回值是IEnumerator，它是一个迭代器，可以把它当成执行一个序列的某个节点的指针，它提供了两个重要的接口，分别是<code>Current</code>(返回指向当前的元素)和<code>MoveNext</code>（将指针向后移动一个单位，如果移动成功，则返回<code>true</code>）</p><p>yield关键字用来声明序列中的下一个值或者是一个无意义的值，如果用<code>yield return x</code>（x指的是一个具体的对象或者数值）的话，那么MoveNext返回为true并且Current被赋值为x，如果使用<code>yield break</code>使得<code>MoveNext</code>返回为<code>false</code></p><p>如果<code>MoveNext</code>函数返回为<code>true</code>就意味着协程的执行条件被满足，则能够从当前位置继续往下执行，否则不能从当前位置继续往下执行。</p><h1>理解协程的本质</h1><p>我们都说协程的本质是迭代器，我在之前的博客中也对迭代器(IEnumerator)有过详细的介绍了，但是我还是没有办法把协程和迭代器联系起来，我认为问题出在了我对yield和foreach的理解上了，下面我将先试图理解foreach内部的工作原理</p><h2 id="集合类的关键要素">集合类的关键要素</h2><p>根据定义，Microsoft .NET Framework集合是至少可以实现<code>IEnumerable&lt;T&gt;</code>（或非泛型IEnumerable类型）的类，此接口至关重要，因为至少必须实现<code>IEnumerable&lt;T&gt;</code>的方法，才支持迭代集合。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">X</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> list)&#123;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过SharpLab可以看到foreach的实际逻辑</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">X</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    List&lt;<span class="built_in">int</span>&gt;.Enumerator enumerator = list.GetEnumerator();</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (enumerator.MoveNext())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> current = enumerator.Current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        ((IDisposable)enumerator).Dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foreach语法十分简单，开发者无需知道元素数量，避免编码过于复杂。不过，运行时<code>Runtime</code>不直接支持foreach语句。C#编译器会转换代码，接下来会对此部分进行介绍：</p><p>foreach和数组：下面展示了简单的foreach循环，用于迭代整数数组，然后将每个整数打印输出到控制台中：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] array = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> item <span class="keyword">in</span> array)&#123;</span><br><span class="line">Console.WriteLine(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此代码中，C#编辑器为for循环创建了等同的<code>CIL</code>：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] tempArray;</span><br><span class="line"><span class="built_in">int</span>[] array = <span class="keyword">new</span> <span class="built_in">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">tempArray = array;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> counter = <span class="number">0</span>;(counter &lt; tempArray.Length); counter++)&#123;</span><br><span class="line"><span class="built_in">int</span> item = tempArray[counter];</span><br><span class="line">Console.WriteLine(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，请注意，foreach依赖对Length属性和索引运算符<code>[]</code>的支持。借助Length属性，C#编译器可以使用for语句迭代数组中的每个元素。</p><p><code>foreach</code>和<code>IEnumerable&lt;T&gt;</code>集合：虽然前面的代码适用于长度固定且始终支持索引运算符的数组，但并不是所有类型集合的元素数量都是已知的。此外，许多集合类（包括<code>Stack&lt;T&gt;</code>、<code>Queue&lt;T&gt;</code>和<code>Dictionary&lt;TKey and TValue&gt;</code>）都不支持按索引检索元素。因此，需要使用一种更为通用的方法来迭代元素集合。迭代器模式就派上用场了（迭代器模式在<a href="http://soincredible777.com.cn/posts/279644bd/">这篇博客</a>中有介绍）。假设可以确定第一个、第二个和最后一个元素，那么就没有必要知道元素的数量，也就没有必要支持按索引检索元素。</p><p><code>System.Collections.Generic.IEnumerator&lt;T&gt;</code>和非泛型<code>System.Collections.IEnumerator</code>接口旨在启用迭代器模式（而不是前面介绍的长度索引模式）来迭代元素集合。它们的关系类图如下：</p><p><code>IEnumerator&lt;T&gt;</code>派生自IEnumerator包含三个成员。第一个成员是布尔型MoveNext。使用则中方法，可以在集合中从一个元素移动到下一个元素，同时检测是否已经枚举完所有项。第二个成员是只读属性Current，用于返回当前处理的元素。<code>Current在IEnumerator&lt;T&gt;</code>中进行重载，提供按类型分类的实现代码。借助集合类中的这两个成员，只需要使用while循环，即可迭代集合：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt; stack = <span class="keyword">new</span> System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"><span class="built_in">int</span> number;</span><br><span class="line"><span class="keyword">while</span>(stack.MoveNext())&#123;</span><br><span class="line">  number = stack.Current;</span><br><span class="line">  Console.WriteLine(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此代码中，当移到集合的末尾时，MoveNext方法返回false。这样一来，便无需在循环的同时计算元素的数量。</p><p>（Reset方法通常会抛出NotImplementedException，因此不得进行调用，如果需要重新开始进行枚举，只需要新建一个枚举器就可以了。）</p><p>前面的示例展示的是C#编译器输出要点，但实际上并非按此方式进行编译，因为其中略去了两个重要的实现细节：交错和错误处理。</p><p>状态为共享：前面示例中展示的实现代码存在一个问题，即如果两个此类循环彼此交错（一个foreach在另外一个循环内，两个循环使用相同的集合），集合必须始终有当前元素的状态指示符，以便在调用MoveNext的时候，可以确定下一个元素。在这种情况下，交错的一个循环可能会影响另一个循环。（对于多个线程执行的循环也是如此）。</p><p>通过代码理解上面说的这个情况：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stack是我们要遍历的集合，如果我们直接支持IEnumerator&lt;T&gt;这个接口，那我们所做的所有操作将会直接影响集合的状态</span></span><br><span class="line"><span class="comment">// 换个角度理解，任何要遍历这个集合的地方都是用到了同一个枚举器，所以在嵌套循环中（如下代码）一个枚举会影响到别的枚举</span></span><br><span class="line">System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt; stack = <span class="keyword">new</span> System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"><span class="built_in">int</span> number;</span><br><span class="line"><span class="keyword">while</span>(stack.MoveNext())&#123;</span><br><span class="line">  <span class="keyword">while</span>(stack.MoveNext)&#123;</span><br><span class="line">    number = stack.Current;</span><br><span class="line">    Console.WriteLine(number);</span><br><span class="line">  &#125;</span><br><span class="line">  number = stack.Current;</span><br><span class="line">  Console.WriteLine(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了解决这个问题，集合类不直接支持<code>IEnumerator&lt;T&gt;</code>和IEnumerator接口。而是直接支持另一种接口<code>IEnumerable&lt;T&gt;</code>，其唯一的方法是<code>GetEnumerator</code>。此方法用于返回支持<code>IEnumerator&lt;T&gt;</code>的对象。不必使用始终指示状态的集合类，而是可以使用另一种类，通常为嵌套类，这样便有权访问集合内部，从而支持<code>IEnumerator&lt;T&gt;</code>接口，并且始终指示迭代循环的状态。枚举器就像是序列中的“游标”或者“书签”。可以有多个“书签”，移动其中任何一个都可以枚举集合，与其他枚举互不影响。使用此模式就相当于有多个独立工作的枚举器在遍历这个集合，因此互不影响了，foreach循环的C#等同代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt; stack = <span class="keyword">new</span> System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"><span class="built_in">int</span> number;</span><br><span class="line">Syste,.Collections/Generic.Stack&lt;<span class="built_in">int</span>&gt;/Enumerator enumerator;</span><br><span class="line">enumerator = stack.GetEnumerator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(enumerator.MoveNext())&#123;</span><br><span class="line">  number = enumerator.Current;</span><br><span class="line">  Console.WriteLine(number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代后清除状态：由于实现<code>IEnumerator&lt;T&gt;</code>接口的类始终指示状态，因此有时需要在退出循环后清除状态（因为要么所有迭代均已完成，要么抛出异常）。为此，从IDisposable派生<code>IEnumerator&lt;T&gt;</code>接口。实现IEnumerator的枚举器不一定实现IDisposable，如果实现了，同样也会调用Dispose。这样可以在退出foreach循环后调用Dispose。因此，最终CIL的C#等同如下代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt; stack = <span class="keyword">new</span> System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt;.Enumerator enumerator;</span><br><span class="line">IDisposable disposable;</span><br><span class="line">enumerator = stack.GetRnumerator();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="built_in">int</span> numeber;</span><br><span class="line">  <span class="keyword">while</span>(enumerator.MoveNext())&#123;</span><br><span class="line">    number = enumerator.Current;</span><br><span class="line">    Console.WriteLine(number);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">  disposable = (IDisposable)enumerator;</span><br><span class="line">  disposable.Dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，由于<code>IEnumerator&lt;T&gt;</code>支持IDisposable接口，因此using语句可以将上面的代码简化为下面的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt; stack = <span class="keyword">new</span> System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"><span class="built_in">int</span> number;</span><br><span class="line"><span class="keyword">using</span>(System.Collections.Generic.Stack&lt;<span class="built_in">int</span>&gt;.Enumerator enumerator = stack.GetEnumerator())&#123;</span><br><span class="line">  <span class="keyword">while</span>(enumerator.MoveNext())&#123;</span><br><span class="line">    number = enumerator.Current;</span><br><span class="line">    Console.WriteLine(number);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而，重新调用CIL并不直接支持using关键字。因此，未简化的代码实际上使用C#更精确表示的foreach CIL代码。</p><p>在<em>不实现</em> IEnumerable 的情况下使用 foreach： C# 不要求必须实现 <code>IEnumerable/IEnumerable&lt;T&gt;</code> 才能使用 foreach 迭代数据类型。编译器改用鸭子类型这一概念；它使用 Current 属性和 MoveNext 方法查找可返回类型的 GetEnumerator 方法。鸭子类型涉及按名称搜索，而不依赖接口或显式方法调用。（“鸭子类型”一词源自将像鸭子一样的鸟视为鸭子的怪诞想法，对象必须仅实现 Quack 方法，无需实现 IDuck 接口。） 如果鸭子类型找不到实现的合适可枚举模式，编译器便会检查集合是否实现接口。</p><p>到此为止我们算是理解了<code>foreach</code>的基本原理了，我们知道，foreach是不支持对我们遍历的元素进行修改的，我们下面尝试一下使用foreach的思想去自己实现一下对集合的遍历。</p><p>看一下下面这段代码，里面综合了比较多的知识点，多态、继承、泛型、Struct，还有我们的迭代器模式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> ActivityData</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _activityName;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _activityStartDate;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _activityEndDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ActivityName</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _activityName; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _activityName = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ActivityStartDate</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _activityStartDate; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _activityStartDate = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ActivityEndDate</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _activityEndDate; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _activityEndDate = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityData</span>(<span class="params"><span class="built_in">string</span> activityName, <span class="built_in">string</span> activityStartDate, <span class="built_in">string</span> activityEndDate</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// ActivityName = activityName;</span></span><br><span class="line">        <span class="comment">// ActivityStartDate = activityStartDate;</span></span><br><span class="line">        <span class="comment">// ActivityEndDate = activityEndDate;</span></span><br><span class="line">        _activityStartDate = activityStartDate;</span><br><span class="line">        _activityEndDate = activityEndDate;</span><br><span class="line">        _activityName = activityName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteEnumerator</span>&lt;<span class="title">T</span>&gt; : <span class="title">IEnumerator</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] _collection;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteEnumerator</span>(<span class="params">T[] collection</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _collection = collection;</span><br><span class="line">        _index = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _index++;</span><br><span class="line">        <span class="keyword">if</span> (_index &lt; _collection.Length)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">object</span> IEnumerator.Current &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T Current</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; _collection[_index];</span><br><span class="line">        <span class="keyword">set</span> =&gt; _collection[_index] = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcreteCollection</span>&lt;<span class="title">T</span>&gt; : <span class="title">IEnumerable</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] _collection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCollection</span>(<span class="params">T[] collection</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _collection = collection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IEnumerator</span>&lt;<span class="title">T</span>&gt; <span class="title">GetEnumerator</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteEnumerator&lt;T&gt;(_collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    IEnumerator IEnumerable.GetEnumerator()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetEnumerator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span>[] a = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">        ConcreteCollection&lt;<span class="built_in">int</span>&gt; cc = <span class="keyword">new</span> ConcreteCollection&lt;<span class="built_in">int</span>&gt;(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ConcreteEnumerator&lt;int&gt; ce = cc.GetEnumerator&lt;int&gt;();</span></span><br><span class="line"></span><br><span class="line">        ConcreteEnumerator&lt;<span class="built_in">int</span>&gt;? ce = cc.GetEnumerator() <span class="keyword">as</span> ConcreteEnumerator&lt;<span class="built_in">int</span>&gt;;</span><br><span class="line">        <span class="keyword">while</span> (ce != <span class="literal">null</span> &amp;&amp; ce.MoveNext())</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(ce.Current);</span><br><span class="line">            ce.Current++;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;修改后的集合的值为：&quot;</span> + ce.Current);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine();</span><br><span class="line"></span><br><span class="line">        ActivityData[] data =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> ActivityData(<span class="string">&quot;Unicorn&quot;</span>, <span class="string">&quot;2023-05-21&quot;</span>, <span class="string">&quot;2023-05-23&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> ActivityData(<span class="string">&quot;Flower&quot;</span>, <span class="string">&quot;2023-05-22&quot;</span>, <span class="string">&quot;2023-05-25&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ConcreteCollection&lt;ActivityData&gt; activityDataCollection = <span class="keyword">new</span> ConcreteCollection&lt;ActivityData&gt;(data);</span><br><span class="line">        <span class="keyword">using</span> (ConcreteEnumerator&lt;ActivityData&gt;? activityDataEnumerator =</span><br><span class="line">               activityDataCollection.GetEnumerator() <span class="keyword">as</span> ConcreteEnumerator&lt;ActivityData&gt;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (activityDataEnumerator != <span class="literal">null</span> &amp;&amp; activityDataEnumerator.MoveNext())</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;当前活动名：&quot;</span> + activityDataEnumerator.Current.ActivityName);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;当前活动开始日期：&quot;</span> + activityDataEnumerator.Current.ActivityStartDate);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;当前活动结束日期：&quot;</span> + activityDataEnumerator.Current.ActivityEndDate);</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们上面的代码是按照foreach的思想去遍历我们所有的元素的，但是我们实现了在遍历的过程中更改元素的内容，foreach之所以不能修改元素的值，是因为在foreach的实现中并没有暴露Current属性的set方法，因此我们没有办法在foreach遍历的时候更改集合的值。</li></ul><p>下面放几张我和ChatGPT的截图，真的牛逼：</p><p>我们先来看两段代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">Fibonacci</span>(<span class="params"><span class="built_in">int</span> count</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> prev1 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> prev2 = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> current = prev1 + prev2;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> current; <span class="comment">// 使用yield return返回当前值</span></span><br><span class="line">        </span><br><span class="line">        prev1 = prev2;</span><br><span class="line">        prev2 = current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在Unity中执行如下的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestCoroutine</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;我是Update中的方法1&quot;</span>);</span><br><span class="line">        StartCoroutine(Test());</span><br><span class="line">        Debug.Log(<span class="string">&quot;我是Update中的方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">IEnumerator <span class="title">Test</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;第一次执行方法&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Debug.Log(<span class="string">&quot;第二次执行方法&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Debug.Log(<span class="string">&quot;第三次执行方法&quot;</span>);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到控制台的输出结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">我是Update中的方法1</span><br><span class="line">第一次执行方法</span><br><span class="line">我是Update中的方法2</span><br><span class="line"></span><br><span class="line">我是Update中的方法1</span><br><span class="line">第一次执行方法</span><br><span class="line">我是Update中的方法2</span><br><span class="line">第二次执行方法</span><br><span class="line"></span><br><span class="line">我是Update中的方法1</span><br><span class="line">第一次执行方法</span><br><span class="line">我是Update中的方法2</span><br><span class="line">第二次执行方法</span><br><span class="line">第三次执行方法</span><br></pre></td></tr></table></figure><p>我们看第三次Update中代码执行的顺序我们可以得知：第二次Update中的Coroutine比第一次中的Coroutine先执行了，而且是在这一次Update结束了之后才调用的协程，就是在后面的Coroutine要先于前面的协程执行。</p><h1>IEnumerable和IEnumerator</h1><p><code>IEnumerable</code>和<code>IEnumerator</code>本质是两个接口，二者的源码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decompiled with JetBrains decompiler</span></span><br><span class="line"><span class="comment">// Type: System.Collections.IEnumerator</span></span><br><span class="line"><span class="comment">// Assembly: netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51</span></span><br><span class="line"><span class="comment">// MVID: 5A41D6B7-1898-42EC-A409-FD0B1C3E3DCF</span></span><br><span class="line"><span class="comment">// Assembly location: /Applications/2021.3.14f1/Unity.app/Contents/NetStandard/ref/2.1.0/netstandard.dll</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">System.Collections</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span><span class="doctag">&lt;para&gt;</span>Supports a simple iteration over a non-generic collection.<span class="doctag">&lt;/para&gt;</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEnumerator</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span><span class="doctag">&lt;para&gt;</span>Gets the current element in the collection.<span class="doctag">&lt;/para&gt;</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="built_in">object</span> Current &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span><span class="doctag">&lt;para&gt;</span>Advances the enumerator to the next element of the collection.<span class="doctag">&lt;/para&gt;</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">MoveNext</span>()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span><span class="doctag">&lt;para&gt;</span>Sets the enumerator to its initial position, which is before the first element in the collection.<span class="doctag">&lt;/para&gt;</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reset</span>()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Decompiled with JetBrains decompiler</span></span><br><span class="line"><span class="comment">// Type: System.Collections.IEnumerable</span></span><br><span class="line"><span class="comment">// Assembly: netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51</span></span><br><span class="line"><span class="comment">// MVID: 5A41D6B7-1898-42EC-A409-FD0B1C3E3DCF</span></span><br><span class="line"><span class="comment">// Assembly location: /Applications/2021.3.14f1/Unity.app/Contents/NetStandard/ref/2.1.0/netstandard.dll</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">System.Collections</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span><span class="doctag">&lt;para&gt;</span>Exposes an enumerator, which supports a simple iteration over a non-generic collection.<span class="doctag">&lt;/para&gt;</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEnumerable</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span><span class="doctag">&lt;para&gt;</span>Returns an enumerator that iterates through a collection.<span class="doctag">&lt;/para&gt;</span><span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">GetEnumerator</span>()</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二者的区别与联系：</p><p>一个集合可查询（使用foreach，where，any等），必须以某种方式返回IEnumerator object，也就是必须实现IEnumerable接口</p><p>IEnumerator object具体实现了iterator（通过MoveNext(),Reset(),Current）。</p><p>从这两个接口的选词上，可以看出IEnumerable是一个声明式的接口，声明实现该接口的class是“可枚举的”</p><p>IEnumerable和IEnumerator通过IEnumerable的GetEnumerator()方法建立了连接。</p><p>看一个例子：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">learnIEnumerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowName</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PeopleEnum</span> : <span class="title">IEnumerator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Person[] _person;</span><br><span class="line">        <span class="built_in">int</span> position = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PeopleEnum</span>(<span class="params">Person[] person</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _person = person;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">MoveNext</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            position++;</span><br><span class="line">            <span class="keyword">return</span> (position &lt; _person.Length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Reset</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            position = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">object</span> Current</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> _person[position];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(e);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonSet</span> : <span class="title">IEnumerable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Person[] people;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PersonSet</span>(<span class="params">Person[] pArray</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            people = <span class="keyword">new</span> Person[pArray.Length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pArray.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                people[i] = pArray[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 调用了构造函数吧？</span></span><br><span class="line">            <span class="comment">// 类的声明其实就是调用构造函数的过程</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PeopleEnum(people);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我现在疑惑的点就在于，必须要在Person类的基础上再套一个People List的类么？</span></span><br><span class="line">    <span class="comment">// 拿最简单的int和 int[]</span></span><br><span class="line">    <span class="comment">// int 相当于 Person 代表每一个Person的实例，它停留在个体这个层面</span></span><br><span class="line">    <span class="comment">// int[] 相当于 People 它里面是要实现集合以外，而且继承IEnumerable接口，说明它是可以枚举的，它是集合这个层面的</span></span><br><span class="line">    <span class="comment">// 然后我们还需要去自定义一个迭代器，来实现对于People的枚举</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再抽象一下</span></span><br><span class="line">    <span class="comment">// 我们要实现枚举我们自定义的数据结构，我们需要实现三个类</span></span><br><span class="line">    <span class="comment">// 1.数据结构的定义，也就是每个个体它有哪些属性</span></span><br><span class="line">    <span class="comment">// 2.包含1中数据结构的集合，除此之外该集合继承IEnumerable接口，调用GetEnumerator方法</span></span><br><span class="line">    <span class="comment">// 3。实现GetEnumerator方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person[] person = <span class="keyword">new</span> Person[<span class="number">4</span>]</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;李磊&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;王刚&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;彤彤&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">&quot;丹丹&quot;</span>),</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            PersonSet listPeople = <span class="keyword">new</span> PersonSet(person);</span><br><span class="line">            <span class="keyword">foreach</span> (Person p <span class="keyword">in</span> listPeople)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(p.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们要实现枚举我们自己定义的数据结构的功能，我们总共要实现三个类：</p><ol><li>我们自己定义的数据结构的类，也就是我们要枚举的每一个元素的类</li><li>包含我们自定义数据结构的类的类，也就是集合，这个类要继承IEnumerable接口，重写GetEnumerator函数</li><li>枚举我们定定义数据结构的类，也就是枚举器，继承IEnumerator接口，重写MoveNext方法、Reset方法和Current</li></ol><p>其中最困扰我的是第二个类，或者说foreach的用法，我们在调用GetEnumerator方法的时候会向其中传入我们要枚举的自定义数据结构的数组，通过return语句新建的PeopleEnum类中传的people参数是关键，它告诉了枚举器我们要枚举什么类型的数据，以及枚举的数据有哪些。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonSet</span> : <span class="title">IEnumerable</span></span><br><span class="line">    &#123;</span><br><span class="line">  <span class="comment">// people就是我们要枚举的集合</span></span><br><span class="line">        <span class="keyword">private</span> Person[] people;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PersonSet</span>(<span class="params">Person[] pArray</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            people = <span class="keyword">new</span> Person[pArray.Length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pArray.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                people[i] = pArray[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetEnumerator</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 调用了构造函数吧？</span></span><br><span class="line">            <span class="comment">// 类的声明其实就是调用构造函数的过程</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">// 这一行代码十分关键，它把枚举器和我们要枚举的集合联系到一起了</span></span><br><span class="line">          <span class="comment">// 这行代码告诉我们的枚举器类我们要枚举的数据是什么、有哪些</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> PeopleEnum(people);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1>yield关键字</h1><p>yield关键字是一个语法糖，背后其实生成了一个新的类，是一个枚举器，枚举器具体实现了MoveNext、Reset和Current。</p><p>先看一段代码，通过<code>yield return</code>实现了类似用foreach便遍历数组的功能，说明yield return也是用来实现迭代器的功能的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Console;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//一个返回类型为IEnumerable&lt;int&gt;，其中包含三个yield return</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">enumerableFuc</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//通过foreach循环迭代此函数</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="function"><span class="built_in">int</span> item <span class="keyword">in</span> <span class="title">enumerableFuc</span>())</span></span><br><span class="line">        &#123;</span><br><span class="line">            WriteLine(item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的输出结果将会是：<code>1 2 3</code>。</p><p>如果我在代码中加入<code>yield break</code>：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>那么结果就只会输出1和2，说明这个迭代器被yield break给停掉了，所以yield break是用来终止迭代的。</p><p>我们现在把上面遍历人名的那个程序改写成<code>yield</code>的形式看一下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">learnIEnumerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">set</span>; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowName</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonSet</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Person[] people;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PersonSet</span>(<span class="params">Person[] pArray</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            people = <span class="keyword">new</span> Person[pArray.Length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pArray.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                people[i] = pArray[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;Str4ing&gt; <span class="title">PersonEnum</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; people.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">yield</span> <span class="keyword">return</span> people[i].Name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                Person[] person = <span class="keyword">new</span> Person[<span class="number">4</span>]</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">new</span> Person(<span class="string">&quot;李磊&quot;</span>),<span class="function">ty</span></span><br><span class="line"><span class="function">                    <span class="keyword">new</span> <span class="title">Person</span>(<span class="params"><span class="string">&quot;王刚&quot;</span></span>),</span></span><br><span class="line"><span class="function">                    <span class="keyword">new</span> <span class="title">Person</span>(<span class="params"><span class="string">&quot;彤彤&quot;</span></span>),</span></span><br><span class="line"><span class="function">                    <span class="keyword">new</span> <span class="title">Person</span>(<span class="params"><span class="string">&quot;丹丹&quot;</span></span>),</span></span><br><span class="line"><span class="function">                &#125;</span>;</span><br><span class="line"></span><br><span class="line">                PersonSet listPerson = <span class="keyword">new</span> PersonSet(person);</span><br><span class="line">                IEnumerator&lt;String&gt; enumerator = listPerson.PersonEnum().GetEnumerator();</span><br><span class="line">                <span class="keyword">while</span> (enumerator.MoveNext())</span><br><span class="line">                &#123;</span><br><span class="line">                    String current = enumerator.Current;</span><br><span class="line">                    Console.WriteLine(current);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看一段代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">Fibonacci</span>(<span class="params"><span class="built_in">int</span> count</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> prev1 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> prev2 = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; count; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> current = prev1 + prev2;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> current; <span class="comment">// 使用yield return返回当前值</span></span><br><span class="line">        </span><br><span class="line">        prev1 = prev2;</span><br><span class="line">        prev2 = current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中我们使用了for循环嵌套了一个<code>yield return</code> 语句，我在这里时常会有一个误区就是，我会习惯性地认为for循环是用来实现<code>MoveNext</code>的方法的，但其实不是，因为看这段代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">enumerableFuc</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它里面没有for循环但是依然可以实现<code>MoveNext</code>的功能啊😂，所以无论是使用for循环还是把所有元素罗列出来，这个环节的目的都是为了告诉yield return自动生成的那个迭代器它要遍历的这个集合中有多少个元素，仅此而已，<code>MoveNext</code>会被编译器隐式地处理，完全不需要我们操心。</p><p>还有一点，我们一个IEnumerable方法中只会生成一个迭代器，理解一下这句话，还是蛮重要的，回顾一下迭代器模式中的四个角色，有一个叫做具体聚合角色，有一个叫做具体迭代器角色，具体迭代器迭代的就是具体聚合角色 （集合），集合本质就是一类事物的组合，因此我们只需要使用一个迭代器就可以完成对这一个集合的全部遍历了，我之前存在的一个误区是我认为每调用一次yield语句就会生成一个迭代器。</p><p>最后再来看看使用了yield语句后我们可以少写哪些代码，我们首先不需要自己编写具体的迭代器类了，相对应的抽象迭代器类也不需要了，我们现在只需要在具体聚合类中定义一下获取迭代器的方法就可以了。所以真的好省事啊！</p><p>一般我们会在协程中处理各种各样的业务嘛，比如下图：</p><p>可以看到里面yield return的东西五花八门，但是牢记我们上面讲到的，遍历一个具体聚合角色只会有一个迭代器，来看看ChatGPT怎么说：</p><p>我们现在理解一下StartCoroutine方法，该方法里面会传入一个IEnumerator类型的方法，所以我们类比一下调用StartCoroutine方法就相当于是使用了foreach，看一下伪代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">YieldExample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="built_in">int</span>&gt; <span class="title">GetValues</span>(<span class="params"><span class="built_in">int</span> count</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用静态方法GetValues，获取迭代器</span></span><br><span class="line">        IEnumerable&lt;<span class="built_in">int</span>&gt; valuesEnumerable = YieldExample.GetValues(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;Type of the GetEnumerator instance: &quot;</span> + valuesEnumerable.GetType().FullName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用foreach循环遍历迭代器</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="built_in">int</span> <span class="keyword">value</span> <span class="keyword">in</span> valuesEnumerable)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们调用了StartCoroutine方法后类似于调用了foreach循环，会不断遍历整个集合，但是在Unity的StartCoroutine方法中它所遍历的集合是执行时机的集合，因为在Unity的协程中我们一般yield return的都是一些协程再执行的时机，而且仔细想想协程的运作方式跟纯C#还不一样，在纯C#中我们需要用yield return返回我们要遍历的集合的元素，比如上面这段代码</p><p>而协程的代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FlyPfxManager.Create();</span><br><span class="line">ActivityManager.Create();</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">PlayDefine.Init();</span><br><span class="line">PlayViewDefine.Init(<span class="number">1.5f</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">CmdManager.Create();</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">DataManager.Create();</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">AuthManager.Create();</span><br></pre></td></tr></table></figure><p>我们的目的是在一段时间内执行很多种方法，yield return返回的元素不是我们想要的东西，它是我们达到异步的手段，我认为这是协程和纯C#中IEnumerator的区别</p><p>总之就是使用StartCoroutine和foreach都能达到遍历一个具体聚合角色的所有元素的作用，但是它们遍历这个集合元素的目的是不同的，StartCoroutine遍历集合是为了实现时间间隔，而纯C#的foreach遍历集合是为了展示或者读取到（只读）集合中所有元素的信息。</p><p>那我想协程到此应该就理解了，比如我们定义了一个<code>IEnumerator Func()</code>，那么我们会使用<code>StartCoroutine(Func());</code>，因此，<code>Func()</code>就是一个具体聚合角色（一个集合）而StartCoroutine就是一个迭代器，它去遍历整个<code>Func()</code>集合，所以说协程的本质是迭代器好像没什么问题。</p><p>关于<code>IEnumerator</code>、<code>IEnumerable</code>和<code>yield</code>的探讨就先告一段落了。</p><h1>小结</h1><p>今天是项目的验收环节，工作比较少，所以花了一天的时间写完了这篇博客，本篇博客从IEnumerator和IEnumerable出发，引出了类和接口的辨析、C#中的修饰符、虚函数和抽象函数的区别辨析等等很多零碎的知识点，真的是收获满满。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Mac和Windows上配置dotNet开发环境</title>
      <link href="/posts/724ccb4/"/>
      <url>/posts/724ccb4/</url>
      
        <content type="html"><![CDATA[<h1>背景</h1><p>本文主要记录如何配置.NET环境，以及如何创建最简单的C# application。</p><h1>在Mac上配置dotNet开发环境</h1><p>这里是.Net7的<a href="https://download.visualstudio.microsoft.com/download/pr/86bb5988-5fb5-4e22-8f21-de5992e1a689/f8f616f84dc38100a8464c4644a371ce/dotnet-sdk-7.0.201-osx-arm64.pkg">下载地址</a>，打开下载的pkg，按照指引完成安装。在终端中输入<code>dotnet</code>，如果安装成功，会弹出如下内容：</p><img src="/posts/724ccb4/image-20230310161307972.png" class=""><h1>使用Terminal创建一个最简单的C#命令</h1><p>在终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -o MyApp -f net7.0</span><br><span class="line">cd MyApp</span><br></pre></td></tr></table></figure><p>上述各命令的解释：</p><ul><li><code>dotnet new conslole</code> 命令用来创建新的console APP</li><li>-<code>o</code>参数会创建名为<code>MyApp</code>的目录，用于存储应用并使用所需文件进行填充</li><li><code>-f</code>参数指示console我们创建的是.NET7的应用程序</li></ul><p>创建的MyApp文件夹中的主文件称为<code>Program..cs</code>，默认情况下，它包含的内容如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后在终端中运行<code>dotnet run</code>来运行<code>.NET</code>应用，终端中会输出如下结果：</p><img src="/posts/724ccb4/%E6%88%AA%E5%B1%8F2023-03-10%2016.41.32.png" class=""><h2 id="使用Rider打开并运行C-项目">使用Rider打开并运行C#项目</h2><p>使用Rider打开并运行C#项目不像使用IDEA打开并运行java代码那样繁琐，直接在Rider中选择<code>File</code>-&gt;<code>Open</code>，选择你使用Terminal创建的C# application打开，就可以在Rider中运行项目了。</p><h1>在Windows上配置dotNet开发环境</h1><p>Windows上安装dotNet的方式多种多样，而且官方的教程也很详细，可以直接看<a href="https://learn.microsoft.com/zh-cn/dotnet/core/install/windows?tabs=net70">官网教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Rider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Mac和Windows上配置Java开发环境</title>
      <link href="/posts/f57878ea/"/>
      <url>/posts/f57878ea/</url>
      
        <content type="html"><![CDATA[<h1>背景</h1><p>本文主要记录了JDK、JRE、JVM的区别、在Mac和Windows上配置Java开发环境、创建并运行最简单的Java程序以及如何将单个java文件导入<code>IntelliJ IDEA</code>中运行</p><h1>JDK JRE JVM的区别与联系</h1><h2 id="什么是JDK？">什么是JDK？</h2><p>JDK是Java Development Kit，JDK是用于制作程序和Java应用程序的软件开发环境。Java开发人员可以在Windows、MacOS、Linux上使用，是一个跨平台的编程语言。JDK可以帮助他们编写和运行Java程序，可以在同一台计算机上面安装多个版本的JDK。</p><h2 id="什么是JRE？">什么是JRE？</h2><p>JRE是Java Runtime Environment。JRE是一个旨在运行其他软件的软件，它包含类库、加载器类和JVM。简单来说，如果想要运行Java程序，我们就需要JRE，如果我们只是一个一般的用户，就不需要安装JDK，只需要安装JRE来运行Java程序即可，不过所有的JDK版本都与JRE捆绑在一起，因此无需在PC单独下载和安装JRE。</p><h2 id="什么是JVM？">什么是JVM？</h2><p>JVM是Java Virtual Machine。JVM是一个引擎，它提供运行时环境驱动Java代码或者应用程序，它将Java字节码转换成机器语言，JVM是Java运行环境（JRE）的一部分，它不能单独下载和安装。要安装JVM，需要安装JRE。</p><h2 id="小节">小节</h2><ul><li>JDK是一个软件开发工具包，而JRE是一个允许Java程序运行的软件包，JVM则是一个执行字节码的环境。</li><li>JDK的全称是Java Development Kit，JRE的全称是Java Runtime Environment，而JVM的全称是Java Virtual Machine。</li><li>JDK 是平台相关的，JRE 也是平台相关的，但是 JVM 不是平台相关的。</li><li>JDK 包含开发、调试等工具。JRE 包含类库和其他支持文件，而软件开发工具不包含在 JVM 中。</li><li>JDK 附带安装程序，另一方面，JRE 仅包含执行源代码的环境，而 JVM 捆绑在软件 JDK 和 JRE 中。</li></ul><img src="/posts/f57878ea/34bd93945111189caf3351ac3c0af3b92a6eed.jpg" class=""><h1>JDK的文件目录</h1><p>在JDK1.8之前，JDK的文件目录如下：</p><img src="/posts/f57878ea/image-20230312172651494.png" class=""><p>一些重要的文件夹的作用解释如下：</p><ul><li><p><strong>bin</strong>: 该路径下存放了JDK的各种命令，常用的javac、java等。</p></li><li><p><strong>include</strong>: 一些平台特定的头文件，支持Java本地接口和Java虚拟机调试程序接口的本地编程技术。</p></li><li><p><strong>jre</strong>: 运行java程序所必须的JRE环境。</p></li><li><p><strong>lib</strong>：JDK工具命令的实际执行程序，bin路径下的绝大部分命令都是包装了tools.jar如（lib-&gt;tools.jar-&gt;sun\tools\javac\Main.class javac命令的实际执行类；bin下的javac.exe命令实际上仅仅包装了这个Java类）。</p></li></ul><p>但在1.8版本之后，在安装JDK的时候就不带有<code>jre</code>这个文件夹了，具体原因并不清楚，但是在目前的使用中jre文件夹的缺失并没有造成什么影响，不过为了保持JDK的完整性，我还是要将jre添加到jdk的目录下。</p><p>无论是Mac还是Windows都先进入到JDK的根目录下，然后分别在终端中输入以下指令：</p><p>Windows下需要输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure><p>Mac下需要输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/jlink --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure><p>执行完上面的指令，jre就添加到JDK的文件夹里面了。</p><h1>Mac上配置JDK</h1><p>Arm架构的Mac和X86架构的Mac安装的JDK是不一样的，这是JDK的<a href="https://www.oracle.com/java/technologies/downloads/#java11-mac">下载地址</a>，我们要选择MacOS下的<code>Arm 64 Compressed Archive</code>进行下载。</p><p>下载完成之后，打开终端并输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>打开文件后输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 配置JDK11 环境变量 </span><br><span class="line"># JAVA_HOME：JDK安装路径（修改成你自己的）</span><br><span class="line">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11/Contents/Home</span><br><span class="line"># $JAVA_HOME/bin 下面是JDK的各种命令  </span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH:.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入<code>source ~/.bash_profile</code>使刚才配置的文件生效，接着输入<code>java -version</code>查看JDK是否安装成功 。到这里还没有结束，如果我们重启终端再输入<code>java -version</code>是会报错的，原因是重启后的终端并没有让<code>.bash_profile</code>配置文件生效，所以我需要在终端中执行<code>vim ~/.zshrc</code>，在最后一行添加<code>source ~/.bash_profile</code>，保存后退出，然后执行<code>source ~/.zshrc</code>，这样就可以让终端每次启动的时候自动将<code>./bash_profile</code>配置文件生效。</p><h1>在Windows上配置JDK环境</h1><p>使用这个<a href="https://www.oracle.com/java/technologies/downloads">下载地址</a>下载Windows版本的JDK。</p><img src="/posts/f57878ea/image-20230312090840861.png" class=""><p>下载列表中有一个<code>Compressed Archive</code>和一个<code>installer</code>，二者的区别是：<code>Compressed Archive</code>只会下载jdk的文件，需要我们手动去配置环境，配置的方法稍后会提及，先说<code>installer</code>是什么：<code>installer</code>下载的是一个安装器，会帮助我们将<code>Compressed Archive</code>中下载的jdk文件安装到指定路径。并且环境变量中会自动生成一条变量：</p><img src="/posts/f57878ea/image-20230312093657005.png" class=""><p>在这种情况下直接打开终端，<code>java</code>和<code>javac</code>命令都是可以直接使用的,这是因为<code>installer</code>在为我们安装jdk的时候也将这些工具复制到了这个路径下。</p><img src="/posts/f57878ea/image-20230312094042102.png" class=""><p>通过installer的方法虽然说也可以完成jdk的安装，但是和手动配置jdk从自由度上来讲还是有差别的，下面介绍如何使用<code>Compressed Archive</code>来配置jdk。</p><p>这是我jdk的存放路径：</p><img src="/posts/f57878ea/image-20230312094543160.png" class=""><p>我们打开环境变量，创建两个新的系统变量：<code>JAVA_HOME</code>和<code>CLASSPATH</code>，变量值如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">具体值需要按照不同的版本和设备做修改</span></span><br><span class="line">D:\下载\jdk-19_windows-x64_bin\jdk-19.0.2</span><br><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure><img src="/posts/f57878ea/image-20230312170104688.png" class=""><img src="/posts/f57878ea/image-20230312170141595.png" class=""><p>最后在环境变量中找到Path，新建下面两个变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\下载\jdk-19_windows-x64_bin\jdk-19.0.2\bin</span><br><span class="line">D:\下载\jdk-19_windows-x64_bin\jdk-19.0.2\jre\bin</span><br></pre></td></tr></table></figure><p>添加完成之后重启终端，输入<code>java</code>，看到如下信息代表配置成功了。</p><img src="/posts/f57878ea/image-20230312170856996.png" class=""><h1>在Mac和Windows上不借助任何IDE运行Java脚本</h1><p><span id = "1">我们现在只会用到两个命令<code>java</code>和<code>javac</code>，我们编写一个<code>hello.java</code>文件，注意文件名要和类名一样：</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// main函数的拼写都是小写的，大小写敏感</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们在终端中依次执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">javac命令会将.java文件编译成class文件</span></span><br><span class="line">javac hello.java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">java命令会运行class文件</span></span><br><span class="line">java hello</span><br></pre></td></tr></table></figure><h1>使用IntelliJ IDEA打开并运行java文件</h1><h2 id="背景">背景</h2><p>我使用记事本或者<code>Sublime</code>等Text Editor编写了一个java文件，我想要在IDEA中运行这个java程序，我该怎么做？</p><h2 id="IntelliJ-IDEA中java项目的文件结构">IntelliJ IDEA中java项目的文件结构</h2><p>我先使用IDEA创建一个非常简单的Java项目，项目的文件目录结构如下：</p><img src="/posts/f57878ea/image-20230310111924493.png" class=""><ul><li><code>.idea</code>目录和<code>iml</code>文件是IDEA的配置文件，可以隐藏</li><li><code>src</code>目录是代码源文件存放的目录</li><li><code>out</code>是Java程序的输出目录，存放字节码文件</li><li><code>external Libraries</code>是JDK的扩展类库</li></ul><h2 id="使用IDEA运行单个java程序">使用IDEA运行单个java程序</h2><p>想要使用IDEA运行java项目，就需要这个项目能够符合IDEA项目的文件结构，有两种方法可以将单个java文件放入IDEA中运行：</p><p><strong>方法一</strong></p><p>在IDEA中选择<code>File</code>-&gt;<code>Open</code>-&gt;打开java文件所在的文件夹</p><img src="/posts/f57878ea/%E6%88%AA%E5%B1%8F2023-03-1016.55.36.png" class=""><p>打开文件夹后点击<code>File</code>-&gt;<code>Project Structure</code>，为项目配置<code>jdk</code>和<code>output</code>文件夹，点击Apply，返回项目就可以运行了。</p><img src="/posts/f57878ea/%E6%88%AA%E5%B1%8F2023-03-1017.15.25.png" class=""><p><strong>方法二</strong></p><p>直接在IDEA中新建项目，选择不勾选添加示例代码。</p><img src="/posts/f57878ea/%E6%88%AA%E5%B1%8F2023-03-1017.22.02.png" class=""><p>项目打开后将想要运行的java代码拖到src中去，然后就可以运行了。</p><h1>Java:main()函数的一些知识点</h1><p>上文中已经展示了一个<a href="#1">最简单的Java程序</a>，<code>main</code>函数的前面有两个属性：<code>public</code>和<code>static</code>，两个属性是必须要有的，否则Java程序将无法正常运行。</p><h2 id="为什么要static">为什么要static</h2><p>Main方法是Java程序的入口，JVM会查找类中的<code>public static void main(String[] args)</code>，如果找不到该方法就会抛出错误<code>NoSuchMethodError:main</code>终止程序Main方法必须严格遵循它的语法规则，方法签名必须是public static void，参数类型是String类型，在Java1.5以及以后的版本还可以使用可变的参数：<code>public static void main(String ... args)</code>。</p><p>JVM调用main方法的以后不需要创建任何包含这个main方法的实例，如果main方法不声明为静态的，JVM就必须创建main类的实例，因为构造器可以被重载，JVM没办法确定调用的是哪个main方法。静态方法和静态数据加载到内存中就可以直接调用而不需要像实例方法一样创建实例后才可以被调用，如果main方法是静态的，那么它就会被加载到JVM上下文中成为可执行的方法。</p><h2 id="为什么要public">为什么要public</h2><p>Java指定了一些可访问的修饰符，比如private、protected、public，任何方法或者变量都可以声明为public，Java可以从该类之外的地方访问。因为main方法是公共的，JVM就可以轻松的访问和执行它。</p><h3 id="为什么是void">为什么是void</h3><p>因为main返回任何值对程序都没有任何意义，所以设置成void。</p>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Rider和Unity进行游戏开发初探</title>
      <link href="/posts/61a4721e/"/>
      <url>/posts/61a4721e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2025.10.13更新<br>Unity现在的重定向已经十分恶心了, 笔者只有挂了美国的节点才能够访问到国际版的Unity官网, 如果使用UnityHub下载UnityEditor的方式的话, 下载全程都必须挂着美国的节点, 不然NDK、JDK这些东西都下载不下来.</p></blockquote><h1>本文记录的问题</h1><p><a href="#1">解决M1Mac “无法打开应用，因为Apple无法检查其是否包含恶意软件” 的问题</a></p><p><a href="#2">在Mac上安装多个版本的Unity，并且为每个版本安装扩展modules</a></p><p>如何使用Rider创建一个普通的C#工程？它的文件结构是什么？</p><p>什么是namespace？它的作用是什么？（该问题在<a href="http://soincredible777.com.cn/posts/73546a6d/">这篇文章</a>中得到了解决）</p><h1>背景</h1><p>今天是2023年3月7号，我入职的第三天，公司强制使用Unity搭配Rider进行开发，文本会记录如何使用Rider创建简单的C#工程，并且了解项目的文件结构。</p><p>在今天的工作中也遇到了其他的问题，也将在本文中做记录。</p><h1><span id = "2">在Mac上安装多个版本的Unity和对应的modules</span></h1><p>公司使用的Unity版本为<code>2021.3.14f1</code>，我自己做项目使用的版本是<code>2021.3.8f1c1</code>，这两个版本在UnityHub中的Installer中都是找不到的，需要去官网的<code>Archive</code>中下载。</p><img src="/posts/61a4721e/image-20230307212335202.png" class="" title="image-20230307212335202"><p>这里是官网的归档，感谢宇哥的小TIPS：版本号中带c1的是在Unity中文官网上下载的，不带c1的是在Unity的英文官网上下载的。这是Unity的<a href="https://unity.com/releases/editor/archive">英文版本归档地址</a>，这是<a href="https://unity.cn/releases/full/2021">中文版本归档地址</a>。</p><p><span id = "1">下载完成之后，在打开<code>pkg</code>包的时候会弹出“<strong>无法打开应用，因为Apple无法检查其是否包含恶意软件</strong>”的问题，解决方法是在终端中输入：</span></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><p>然后打开<code>设置</code>-&gt;<code>安全性与隐私</code>-&gt;<code>通用</code>，选择任何来源，就可以打开刚才下载的安装包了。</p><img src="/posts/61a4721e/%E6%88%AA%E5%B1%8F2023-03-08%2011.39.29.png" class="" title="截屏2023-03-08 11.39.29"><p>下面是演示如何在Mac上安装多个版本的Unity。Mac系统会将Unity Editor安装在<code>Applications/Unity</code>这个文件目录，如果电脑中没有这个目录则会自动创建。在安装module的时候，必须首先确保<code>Applications/Unity</code>路径存在，然后确保该路径中有要安装的module对应版本的Unity Editor，否则module会安装失败。成功安装的module会放在<code>Applications/Unity/PlaybackEngines</code>目录下。这是整个目录的结构：</p><img src="/posts/61a4721e/image-20230308110717748.png" class="" title="image-20230308110717748"><p>现在我要安装<code>Unity2021.3.14f1</code>和<code>Unity2021.3.8f1c1</code>两个版本的Editor和各自对应的<code>iOS</code>、<code>Android</code>、<code>MacOS</code>、<code>Windows</code>的module。我先安装了<code>2021.3.14f1</code>版本，系统会自动创建<code>Applications/Unity</code>路径，然后我也完成了对应版本module的安装。这时如果继续安装<code>2021.3.8f1c1</code>的话，系统会直接覆盖掉<code>Applications/Unity</code>中<code>2021.3.14f1</code>这个版本的Editor，所以我先把这个文件夹的名字改成了<code>2021.3.8f1c1</code>，然后再安装新版本的Editor，这样系统又会自动创建<code>Applications/Unity</code>这个路径，并在该路径下安装新版本的Editor和module，就不会出现覆盖的问题了。新版本的Editor和module安装完成之后最好将文件夹的名字改成Editor对应的版本号来方便管理，比如<code>2021.3.14f1</code>。如果之后需要给某一个版本安装新的module，需要先把该版本的文件夹名改回<code>Unity</code>，然后再安装module，安装成功之后将文件夹名再改回对应的版本号。现在我的Mac上就有两个版本的UnityEditor了🤤🤤🤤</p><img src="/posts/61a4721e/%E6%88%AA%E5%B1%8F2023-03-08%2011.25.15.png" class=""><p>最后再记录一个小问题：我每个Editor版本都下载了四个module：<code>iOS</code>、<code>Android</code>、<code>Windows</code>、<code>MacOS</code>，前三个安装完成之后都会在<code>PlaybackEngines</code>文件夹中找到对应的文件，唯独MacOS的module安装成功之后不会出现在<code>PlaybackEngines</code>的文件夹里，我认为可能是因为我的电脑本身就是MacOS，换言之，如果我的电脑是Windows，那在<code>Playback Engines</code>这个文件夹下可能就没有Windows相关的module了，这个问题可能与电脑的系统有关。</p><img src="/posts/61a4721e/image-20230308112954910.png" class="" title="image-20230308112954910"><h1>Rider使用技巧</h1><ul><li>BookMark的使用</li><li><a href="https://blog.csdn.net/u013768914/article/details/144419127">在Rider中切换git和svn</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Unity </tag>
            
            <tag> Rider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity问题杂记</title>
      <link href="/posts/127bc3c9/"/>
      <url>/posts/127bc3c9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博客记录笔者在Unity开发中遇到的各种小问题，有可能是Unity奇怪的bug、Unity Editor的使用小技巧或者是一些不值得开一篇新博客的小知识点</p></blockquote><h1>Unity Scriptable Object踩坑</h1><p>下面是一个名为<code>EntityBaseProperty.cs</code>的脚本，但是在创建一个<code>PlayerEntityProperty</code>SO的时候会提示你找不到这个脚本。你必须让脚本的名字和SO的类名保持一致，所以每一个SO都要新建一个和SO类命一样的脚本来写。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EntityBaseProperty</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;PlayerEntityProperty&quot;</span>, menuName = <span class="string">&quot;CreatePlayerEntityProperty&quot;</span>, order = 0)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerEntityProperty</span> : <span class="title">CharacterProperty</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Editor中, 使用AssetDatabaseLoad上来一个SO, 通过一个对象持有它, 然后同样的操作让另一个对象持有它, 这两个对象同时修改它, 会不会冲突啊? 对这两个对象SetDirty, 然后调用AssetDatabase的Save接口, 会怎么样?</p><h1>Unity项目代码正常运行但是在Rider中大量报红</h1><p>Rider的<code>solution wide analysis</code>组件有问题，在Unity的<code>Settings -&gt; External Tools -&gt; Regenerate project files</code>解决。<br>也有可能是Unity编译项目的dll出问题了, 删除掉Unity工程中<code>Library/ScriptAssemblies</code>目录, 重新打开Unity, 让它重新编译一下</p><h1>GetComponentsInChildren接口</h1><p>GetComponentsInChildren方法中要一个参数，这个参数的作用是是否包括处于非激活状态的节点，默认是false</p><h1>GetComponentInParent接口</h1><p>GetComponentInParent方法中要一个参数，这个参数的作用是是否包括处于非激活状态的节点，默认是false</p><h1>DoTween</h1><p>DoTween不仅可以用来做动画，也可以实现音频减弱、图片的渐显操作。</p><h1>DOTweenAnimation组件使用</h1><p>DOTweenAnimation组件挂载在节点上，调用播放的时候只播第一次，之后不播了，需要搞清楚为什么</p><h1>Spine动画的使用</h1><p>Spine动画有一个专门针对UI的组件叫做SkeletonGraphic，SkeletonGraphic组件是基于UICanvas绘制的，因此它的渲染层级可以被Canvas管理<br>另外还有专门为非UI播放动画的SkeletonAnimation组件，该组件的渲染是基于MeshRenderer的，因此不受Canvas的管理，当要在UI上展示Spine动画的时候，要选择使用SkeletonGraphic组件。</p><p>SkeletonGraphic相关接口</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 停止当前正在播放的动画</span></span><br><span class="line"><span class="comment">// heartBeatFlower.AnimationState.ClearTrack(0);    </span></span><br><span class="line">heartBeatFlower.AnimationState.SetEmptyAnimation(<span class="number">0</span>,<span class="number">0</span>); </span><br><span class="line"><span class="comment">// 播放新的动画</span></span><br><span class="line">heartBeatFlower.AnimationState.SetAnimation(<span class="number">0</span>, <span class="string">&quot;chufa&quot;</span>, <span class="literal">false</span>);  </span><br></pre></td></tr></table></figure><blockquote><p>2024.11.8更新<br>使用SkeletonGraphic.AnimationState.ClearTrack(0)遇到坑了，目前笔者还不清楚Spine的作用原理，从表现上看，调用该接口会将Spine动画从轨道上移除，之后想要再次播放该动画的话就无法在轨道上找到这个动画，所以如果有切换播放动画的需求，只需要调用heartBeatFlower.AnimationState.SetAnimation(0, “chufa”, false);  就可以了</p></blockquote><p>SkeletonAnimation相关接口</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 停止当前正在播放的动画</span></span><br><span class="line">heartBeatFlower.state.SetEmptyAnimation(<span class="number">0</span>,<span class="number">0</span>);            </span><br><span class="line"><span class="comment">// 播放新的动画</span></span><br><span class="line">heartBeatFlower.state.SetAnimation(<span class="number">0</span>, <span class="string">&quot;loop&quot;</span>, <span class="literal">true</span>);  </span><br></pre></td></tr></table></figure><h1>Animator使用</h1><p>Animator中必须设置一个从Entry进入的默认状态，这个从Entry进入默认状态的操作会在Animator所挂载的游戏物体的Active状态变为true或者Animator组件自身的enable状态变为true的时候自动执行，无法控制。如果在默认状态设置了某些动画，在其他开发同事不知情的情况下设置了这个Animator节点的Active状态，就会导致动画的自动触发，可能会给别人留坑。更好的使用Animator的方法是将默认状态设置为一个空状态。让真正的动画状态指向默认状态，如下图：</p><img src="/posts/127bc3c9/image.png" class=""><p>在我们需要播放动画的时机可以通过<a href="https://docs.unity3d.com/cn/current/ScriptReference/Animator.Play.html"><code>Animator.Play()</code></a>接口，并且在动画播放完之后会自动的进入默认状态，这样的好处是不用通过控制Active状态来控制动画的播放，而且在代码中我们也是通过<code>Animator.Play</code>接口控制动画的播放，比通过Active状态来控制的方法更让人知道这行代码在做什么。</p><p>接口的具体参数如下，其中第三个参数normalizedTime是一个归一化的时间，[0,1]指从动画的什么时刻开始播放</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Play</span> (<span class="params"><span class="built_in">string</span> stateName, <span class="built_in">int</span> layer= <span class="number">-1</span>, <span class="built_in">float</span> normalizedTime= <span class="built_in">float</span>.NegativeInfinity</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Play</span> (<span class="params"><span class="built_in">int</span> stateNameHash, <span class="built_in">int</span> layer= <span class="number">-1</span>, <span class="built_in">float</span> normalizedTime= <span class="built_in">float</span>.NegativeInfinity</span>)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>2024.12.18更新<br>最近尝试了一种新的延时方法,以前在处理当某一动画播放完毕后,执行一段逻辑的时候,都是用<br>下面这两种方法都可以对当前的Animator播放动画的normalizedTime做调整</p><img src="/posts/127bc3c9/image-1.png" class=""><p>2025.6.18更新<br>更健壮的版本 TODO Eddie 这个问题能不能抽成<br>Unity的Animator太难用了 笔者是希望在动画播放完成之后 执行某个操作 Animator只需要给我一个回调的接口就可以 这样就不需要我自己来实现了.<br>Animacer插件应该是有这个接口的, 需要验证一下</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">m_ddz_zhounianqing_JY12_zhuanchang_GameObject.SetActiveEx(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">m_ddz_zhounianqing_JY12_zhuanchang_Animator.Play(<span class="string">&quot;ddz_jiyang_12nian_zhuanchang&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待进入动画状态</span></span><br><span class="line"><span class="built_in">float</span> waitAnimStateTimeout = <span class="number">2f</span>, timer = <span class="number">0f</span>;</span><br><span class="line"><span class="keyword">while</span> (!m_ddz_zhounianqing_JY12_zhuanchang_Animator.GetCurrentAnimatorStateInfo(<span class="number">0</span>)</span><br><span class="line">            .IsName(<span class="string">&quot;ddz_jiyang_12nian_zhuanchang&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    timer += Time.deltaTime;</span><br><span class="line">    <span class="keyword">if</span> (timer &gt; waitAnimStateTimeout) &#123;</span><br><span class="line">        QDebug.LogError(<span class="string">&quot;动画没有切换到目标状态！&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待动画非循环情况下正常播放结束</span></span><br><span class="line">timer = <span class="number">0f</span>;</span><br><span class="line"><span class="built_in">float</span> waitAnimPlayTimeout = <span class="number">10f</span>;</span><br><span class="line"><span class="keyword">while</span> (m_ddz_zhounianqing_JY12_zhuanchang_Animator.GetCurrentAnimatorStateInfo(<span class="number">0</span>)</span><br><span class="line">            .normalizedTime &lt; <span class="number">1.0f</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    timer += Time.deltaTime;</span><br><span class="line">    <span class="keyword">if</span> (timer &gt; waitAnimPlayTimeout) &#123;</span><br><span class="line">        QDebug.LogError(<span class="string">&quot;动画播放超时，可能动画clip循环/没切到/速度很慢！&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">QDebug.Log(<span class="string">&quot;转场结束&quot;</span>);</span><br><span class="line">m_ddz_zhounianqing_JY12_zhuanchang_GameObject.SetActiveEx(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h1>Animation体积优化的问题</h1><p><a href="https://blog.uwa4d.com/archives/UWA_Pipeline22.html">https://blog.uwa4d.com/archives/UWA_Pipeline22.html</a></p><h1>Unity的Animation的使用的坑</h1><p>Animation中有一个Legacy字段，如果不勾选这个选项，在Animation中是没有办法通过Animation.Play()接口播放该动画的。<br>有兴趣可以做一个实验，创建一个勾选了Legacy和一个未勾选Legacy的动画，将这两个动画都添加到一个Animation组件上。在代码中获取这个Animation组件的引用，调用<code>Animation.GetClipCount()</code>接口得到的值为2，但是如果使用<code>foreach(AnimationState state in Animation)</code>去遍历却只会遍历到勾选了Legacy的AnimationClip</p><h1>协程的坑</h1><ul><li>协程中的等待一秒并不是真正的一秒有可能会有误差</li><li>提示要执行Coroutine的物体的状态是inactive的<br>一个GameObject,在同一帧内,先被SetActive了,然后紧接着用这个GameObject上的一个Mono执行StartCoroutine,会提示GameObject无法被执行,验证是否是这样的.<br>而且在App切回后台之后, 协程会被暂停 如果要做一个倒计时类的功能, 绝对不呢个依赖协程, 要依赖sinceStartUp那个字段</li></ul><h1>XML文件读取逻辑</h1><p>定义需要从XML中读取的数据结构</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">XmlRoot(<span class="string">&quot;AssetBundleConfig&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AssetBundleConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;BundleRule&gt; Bundles;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;AtlasRule&gt; Atlas;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BundleRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Relative;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Path;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Type;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Recursion;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AtlasRule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Path;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Recursion;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义XML文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AssetBundleConfig</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;AssetBundleConfigSchema.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--带有平台名称的bundle只会出现名称所代表的平台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Bundles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">BundleRule</span> <span class="attr">name</span>=<span class="string">&quot;Art_Animation&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Path</span>&gt;</span>Assets/Art/Animation<span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Type</span>&gt;</span>SubFolder<span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Recursion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">Recursion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">BundleRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">BundleRule</span> <span class="attr">name</span>=<span class="string">&quot;Art_Audio&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Path</span>&gt;</span>Assets/Art/Audio<span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Type</span>&gt;</span>None<span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Recursion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">Recursion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">BundleRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">BundleRule</span> <span class="attr">name</span>=<span class="string">&quot;Art_CustomShaders&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Path</span>&gt;</span>Assets/Art/CustomShaders<span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Type</span>&gt;</span>None<span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Recursion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">Recursion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">BundleRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">BundleRule</span> <span class="attr">name</span>=<span class="string">&quot;Art_Fonts&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Path</span>&gt;</span>Assets/Art/Fonts<span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Type</span>&gt;</span>None<span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Recursion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">Recursion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">BundleRule</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">BundleRule</span> <span class="attr">name</span>=<span class="string">&quot;Art_Fonts8x8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Relative</span>&gt;</span>Assets/Art/Fonts<span class="tag">&lt;/<span class="name">Relative</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Path</span>&gt;</span>Assets/Art/Fonts/Fonts8x8<span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Type</span>&gt;</span>SubFolder<span class="tag">&lt;/<span class="name">Type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Recursion</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Recursion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">BundleRule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Bundles</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">Atlas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">AtlasRule</span> <span class="attr">name</span>=<span class="string">&quot;Art_Atlas&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Path</span>&gt;</span>Assets/Art/Texture/Atlas<span class="tag">&lt;/<span class="name">Path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Recursion</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Recursion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">AtlasRule</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Atlas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AssetBundleConfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p>C#脚本读取该XML文件</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">LoadXmlConfig</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> path</span>) <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">&#123;</span><br><span class="line">    XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(T));</span><br><span class="line">    T result;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> reader = XmlReader.Create(path))</span><br><span class="line">    &#123;</span><br><span class="line">        result = (T) xmlSerializer.Deserialize(reader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用时只需要把<code>AssetBundleConfig</code>作为T传入该方法，就可以返回XML的内容</p><h1>写一个假的进度条</h1><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UI</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoadingUICartoon</span> : <span class="title">LoadingUI</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">SerializeField</span>] <span class="keyword">private</span> Text progressText;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> currentValue = <span class="number">0f</span>; <span class="comment">// 当前值</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> targetValue = <span class="number">100f</span>; <span class="comment">// 目标值</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> speed = <span class="number">1f</span>; <span class="comment">// 增长速度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> endLoading = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            canvas.sortingLayerID = R.SortingLayers.Default;</span><br><span class="line">            progressText.text = <span class="string">&quot;0%&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (endLoading)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用指数衰减的方式逐渐接近目标值</span></span><br><span class="line">            currentValue += (targetValue - currentValue) * speed * Time.deltaTime;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新Text组件的显示内容</span></span><br><span class="line">            progressText.text = Mathf.FloorToInt(currentValue).ToString() + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetProgress</span>(<span class="params"><span class="built_in">float</span> progress</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            endLoading = <span class="literal">true</span>;</span><br><span class="line">            progressText.text = progress.ToString(<span class="string">&quot;0&quot;</span>) + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>Unity中对导入的资产进行自动化的导入格式设置</h1><h1>Unity预制体中的Image组件内容不显示</h1><p><a href="https://blog.csdn.net/WGYHAPPY/article/details/116161817">https://blog.csdn.net/WGYHAPPY/article/details/116161817</a></p><h1>使用摄像机渲染一个RenderTexture 以及 我想要把一个Canvas放到世界坐标下,即不会在上层嵌套一个UICanvas</h1><p><a href="https://blog.csdn.net/qq_37179591/article/details/118148818">https://blog.csdn.net/qq_37179591/article/details/118148818</a></p><h1>Mac下如何打出乘号</h1><p><a href="https://www.zhihu.com/question/20367435">https://www.zhihu.com/question/20367435</a></p><h1>查询资源引用</h1><p>对该工具进行扩充, 变成一个资产库工具, 能够方便开发者快速的管理资源<br>见<a href="https://github.com/SoIncredible/UnityUtils">GitHub</a>工具库<br>Unity插件<a href="https://docs.google.com/document/d/1M3drHsRSCNKk-colYnCYECM_TR2XgtGB_8GFc_La19E/edit?tab=t.0#heading=h.z6ne0og04bp5">FR2</a></p><h1>Unity中合并两个Mesh</h1><p><a href="https://blog.csdn.net/qq_42980269/article/details/123064307">https://blog.csdn.net/qq_42980269/article/details/123064307</a></p><h1>在Unity工程中使用相对路径</h1><p>一套是File接口, 一套是AssetDatabase接口, 两者使用相对路径都是从Assets开始的, 因为Unity生成的C#工程csproj是跟Assets目录同级的.</p><p>如果你在C#中看到这样的目录:<code>configFilePath = $&quot;../Config/Excel/s/&#123;Options.Instance.StartConfig&#125;/&#123;configType.Name&#125;.bytes&quot;;</code>,它代表的是跟Unity工程的根目录同级下有一个Config目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Root</span><br><span class="line"> - Unity工程目录</span><br><span class="line"> - Config目录</span><br></pre></td></tr></table></figure><p>所以如果你要使用AssetDatabase加载某一个资源的话,资源的路径一定是&quot;Assets/…&quot;起手的</p><h1>Unity关闭自动编译</h1><p>在2020.3.48f1中<code>Preference</code>-&gt;General一栏中取消勾选<code>Auto Refresh</code>,但是在2022.3.15f1版本中笔者并没有找到该字段.</p><h1>Unity 颜色十六进制和RGB之间的转换方式</h1><p><a href="https://blog.csdn.net/f_957995490/article/details/120727626">https://blog.csdn.net/f_957995490/article/details/120727626</a></p><h1>让一段代码只在Editor模式下运行</h1><p>两种方式, 一种方式是将代码脚本放到Editor目录下, 另一种是将脚本放在Runtime下, 但是用宏包裹起来, 如果放在Editor下的话则不能挂载到节点上.</p><h1>Unity中的PhysicsRaycaster为什么要继承UIBehaviour</h1><p>RectTransformUtility.ScreenPointToLocalPointInRectangle接口</p><h1>Unity中的对称按钮</h1><p>有一类需求, 会出一个按钮, 向左的, 然后要你水平翻转一下变成向右的 注意要用RectTransform的scale 不要用Rotation 因为Rotation会把这个图片的正面反转的背离摄像机 这样射线就检测不到这个图片了</p><p>Unity控制台输出过多不显示的解决方案<br>有时候编译Unity项目的时候有错误，查看错误的时候控制台输出<message truncated>，是因为输出信息过长显示不下，于是就被截断了的原因。</p><p>这时如果想看完整的错误信息，可以去查找Editor.log来查看日志。</p><p>这个文件在每个系统上的路径不一致，具体如下：</p><p>Mac osx:  ~/Library/Logs/Unity/Editor.log<br>Windows xp: C:\Documents and Settings\username\Local Settings\Application Data_\Unity\Editor\Editor.log<br>Windows vista/7/8/10: C:\Users(用户)\username\AppData\Local\Unity\Editor\Editor.log</p><p><a href="https://www.cnblogs.com/tian98/p/15623292.html">Unity控制台输出过多不显示的解决方案</a></p><h1>Unity中的Awake</h1><p>如果一个节点实例化出来被设置为了active为false, 其Awake方法就不会执行, 所以不应该使用Unity提供的生命周期</p><p>Unity也有Assert功能</p><h1>Unity中的OffScreenRender离屏渲染</h1><p>在 <strong>Unity</strong> 或图形学开发中，“<strong>Off Screen Render</strong>” 或 “<strong>Offscreen Rendering</strong>” 通常指的是“<strong>离屏渲染</strong>”。</p><hr><h2 id="1-直观解释">1. 直观解释</h2><p><strong>OffScreen Render（离屏渲染）</strong>：<br>不是直接将画面渲染到屏幕（monitor）上，而是渲染到某个内存区域（如 RenderTexture、Frame Buffer）的过程。</p><ul><li><strong>On Screen</strong> 渲染：把画面绘制到显示设备上用户直接看到</li><li><strong>Off Screen</strong> 渲染：画面先渲染到一个<strong>纹理</strong>或缓冲区，之后你可以对它做后处理、保存、合成、变换，最后再决定怎么展示或用</li></ul><hr><h2 id="2-Unity中的典型用法">2. Unity中的典型用法</h2><p>在 Unity 里，<strong>离屏渲染</strong>主要体现在以下场景：</p><h3 id="a-RenderTexture">a. RenderTexture</h3><p>最常用的离屏渲染就是<strong>渲染到 RenderTexture</strong>，比如：</p><ul><li><strong>摄像机（Camera）输出</strong>不直接显示，而是输出到一个 RenderTexture</li><li>后期处理（Post Process），比如模糊、特效</li><li>Mini Map（小地图）、分屏、投影、镜子、监控摄像头</li></ul><p><strong>示例</strong>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Camera cam;</span><br><span class="line"><span class="keyword">public</span> RenderTexture myRT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    cam.targetTexture = myRT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，摄像机渲染内容就<strong>不会直接显示在屏幕上</strong>，而是画到 myRT 里，你可以贴到 UI、另一个物体等任意想用的地方。</p><h3 id="b-Texture合成或图片保存">b. Texture合成或图片保存</h3><ul><li>把场景渲染到 RenderTexture，再通过 <code>Texture2D.ReadPixels</code> 等读取数据，保存为 PNG、异步上传等</li></ul><h3 id="c-特殊效果">c. 特殊效果</h3><ul><li>画面截图、动态环境贴图、实时反射球等都要离屏渲染</li></ul><hr><h2 id="3-图形原理解释">3. 图形原理解释</h2><p>离屏渲染在底层其实是：</p><ul><li>创建一个“帧缓冲区”（Frame Buffer Object, FBO），或者用 RenderTexture 作为目标</li><li>将渲染管线的输出写入内存而不是实际屏幕</li><li>后续可以把这块内存的数据用于其它用途（二次渲染、后期处理、特效合成等）</li></ul><hr><h2 id="4-为什么要-OffScreen-Render">4. 为什么要 OffScreen Render?</h2><ul><li>方便实现后处理特效（例如 HDR, Bloom, VFX 类效果先渲染到纹理，再处理再显示）</li><li>实现多视角展示（分屏、监控、全景图、小地图）</li><li>做动态贴图，比如车漆反射、摄像头画面、视频等</li><li>截图及保存画面</li><li>编辑器工具、UI复杂效果</li></ul><hr><h2 id="5-总结一句话">5. 总结一句话</h2><p><strong>OffScreen Render 在 Unity 就是“把渲染结果输出到一个纹理或者缓冲区内存”，而不是直接输出到屏幕，便于实现特效、截图、合成等各种高级功能。</strong></p><p>–<br>如果你需要具体离屏渲染场景的代码例子或不同平台的兼容问题，可以告诉我你的需求！</p><h1>Unity中的LOD</h1><p>在 Unity 中，<strong>LOD</strong> 指的是 “<strong>Level of Detail</strong>” —— 细节层次（或称多层次细节）。<br>它是一种常见的三维图形渲染优化技术，用于提高渲染效率、减少资源消耗，同时保证画面质量。</p><hr><h2 id="LOD（Level-of-Detail）是什么概念？">LOD（Level of Detail）是什么概念？</h2><ul><li><strong>简单说</strong>：<br>对同一个模型，准备多组不同复杂度的版本（高、中、低多边形数），距离近时渲染高细节版本，距离远时自动切换为低细节版本。</li><li><strong>为什么用 LOD？</strong><br>在大场景或有大量模型时，如果都用高细节模型画面会卡顿、瞬间渲染三角形数太多。<br>远处的小物体细节肉眼看不清，多边形再多也没意义，因此远距离渲染低细节模型可以提升性能。</li><li><strong>Unity LOD 系统</strong>就是帮你自动做模型切换的机制。</li></ul><hr><h2 id="Unity-LOD-的具体用法">Unity LOD 的具体用法</h2><ol><li><p>准备不同复杂度的模型（一般3个版本，如 LOD0、LOD1、LOD2）</p><ul><li>LOD0：最近距离、最高细节</li><li>LOD1：中等距离、中细节</li><li>LOD2：最远距离、最低细节（甚至可用一个小盒子、或直接隐藏）</li></ul></li><li><p>使用 <strong>LOD Group 组件</strong></p><ul><li>在 Unity 的 Hierarchy 里选中物体，点击“Add Component” → “LOD Group”</li><li>在组件中可以设置每个 LOD 使用的模型、每个层级切换的阈值（距离/屏幕百分比）</li></ul></li><li><p>运行时，Unity 会自动根据摄像机距离切换不同层级，提升性能又不影响近距离效果。</p></li></ol><hr><h2 id="图示（简化版）">图示（简化版）</h2><table><thead><tr><th>层级</th><th>距离与你远近</th><th>显示模型</th><th>多边形数量</th></tr></thead><tbody><tr><td>LOD0</td><td>很近</td><td>高细节模型</td><td>20000（三角形）</td></tr><tr><td>LOD1</td><td>一般</td><td>中细节模型</td><td>4000（三角形）</td></tr><tr><td>LOD2</td><td>很远</td><td>简单/隐藏</td><td>500（三角形）</td></tr></tbody></table><hr><h2 id="应用场景">应用场景</h2><ul><li>大场景的山峰、建筑、树木、角色等远景物体</li><li>VR、手游等对性能特别敏感的场景</li></ul><hr><h2 id="拓展">拓展</h2><ul><li>LOD 不仅限于 3D mesh，还可以用在贴图、特效等其他需要多细度方案的地方。</li><li>Unity LOD Group 可以和 Static Batching、Occlusion Culling、GPU Instancing 搭配进一步优化性能。</li></ul><hr><p><strong>总结：</strong></p><blockquote><p>Unity中的LOD是一种自动切换模型精度的优化技术，让复杂模型在远距离时用简化版本渲染，以提高性能，使用LOD Group组件管理模型的各个层级细节与距离切换。</p></blockquote><h1>Unity在Scene窗口中可以一直在一个位置点来拾取当前位置的节点 按ControlZ是可以回滚的, 防止你点过了!</h1><h1>之前有记过一个创建预制体把预制体的所有节点Layer设置成UI的来让预制体打开预览的时候 根节点多了一个挂在Canvas的父节点, 那条描述是有误的, 只要让这个预制下挂载一些继承Graphic的组件, 然后只要有一个Graphic组件的父节点中没有Canvas, 那么Unity就会自动给你在跟节点层级上再生成一个挂有Canvas组件的父节点 Layer这个东西跟摄像机有关, 如果你发现你的UI层级什么的都是对的 sortingorder什么都是对的 但是UI就是显示不出来, 那么你就需要检查一个渲染UI的摄像机的渲染Layer有哪些, 以及你这个UI是不是在这个渲染层级里面</h1><h1>至今为解决的Android部分高刷设备锁60帧率的问题.</h1><p>国产厂商的对安卓系统的特殊调教<br>⭕️ 安卓层的尝试 遇到了getHolder获取不到surfaceView的问题 原因是什么unity3d.player.I cant cast to surfaceView<br>⭕️ Unity层的尝试 使用SysInfo.Resolutions获取当前设备所有支持的分辨率+刷新率,从中挑选出那个最高分辨率的,然后调用setResolution接口设置上<br>⭕️ 还有一种策略没尝试:如果一个设备支持120HZ刷新率,但是支持多种分辨率下的120HZ刷新率,我最高的分辨率设置上去不生效,那如果设置最低的呢?另外要取消勾选FramePacing,还要把V Sync关掉</p><h1>解除帧率限制(Android)</h1><p>对一些安卓高刷屏来说，进游戏时屏幕刷新率会被设置成60，这应该和Android系统的策略有关，因此通过<code>Screen.currentResolution.refreshRateRatio</code>接口拿到的屏幕刷新率是不准确的，<br>如果要开启高刷，则需要关闭 ProjectSettings -&gt; Player -&gt; Resolution and Presentation 下的 <a href="https://docs.unity3d.com/ScriptReference/PlayerSettings.Android-optimizedFramePacing.html">Optimized Frame Pacing</a>，并且在脚本中设置 <code>Application.targetFrameRate = 120;</code></p><p>以上的解决方案过于粗糙了，更完善的解决方案需要参考Android的<a href="https://developer.android.com/media/optimize/performance/frame-rate?hl=zh-cn">官方文档</a>去到Android层实现帧率的设置，一篇<a href="https://blog.csdn.net/a310989583/article/details/135771394?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4-135771394-blog-118787844.235%5Ev43%5Epc_blog_bottom_relevance_base8&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-4-135771394-blog-118787844.235%5Ev43%5Epc_blog_bottom_relevance_base8&amp;utm_relevant_index=9">实践的帖子</a></p><ul><li><a href="https://source.android.com/docs/core/graphics/multiple-refresh-rate?hl=zh-cn">https://source.android.com/docs/core/graphics/multiple-refresh-rate?hl=zh-cn</a></li></ul><blockquote><p>2024.12.10更新<br>尝试了上面的方法,最终失败了</p></blockquote><h1>问题</h1><p>有些Android手机设置帧率120HZ但是实际上达不到的问题https://answer.uwa4d.com/question/64e7779266b5c657c78be192</p><h1>Android真机连接Unity Profiler</h1><p><a href="https://blog.csdn.net/Czhenya/article/details/87877398">https://blog.csdn.net/Czhenya/article/details/87877398</a></p>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改日记</title>
      <link href="/posts/370bdedc/"/>
      <url>/posts/370bdedc/</url>
      
        <content type="html"><![CDATA[<img src="https://ghchart.rshah.org/SoIncredible" alt="SoIncredible's Github chart" /><h1>安装Butterfly主题</h1><p>去到<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly GitHub</a>主页,在博客根目录运行以下命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>完成后,在<code>_config.yml</code>中更改theme为Butterfly(当前的版本为4.5.1),到此还不能够成功启动hexo,硬要启动会报以下错误:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure><p>需要先安装以下依赖:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>运行hexo三件套,hexo成功启动.</p><p>Note:在Mac或者Linux中如果想要更改某个文件夹下所有文件的权限,运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 文件夹名 #R必须大写</span><br></pre></td></tr></table></figure><h1>添加加载动画</h1><p>博客里有一些图片比较大,进人到博客后还没有完全加载出来,这样很不好看,所以我想做一个加载动画.</p><p>参考原帖在<a href="https://anzhiy.cn/posts/52d8.html">这里</a>,注意Butterfly主题的版本是**4.5.1*.*</p><img src="/posts/370bdedc/image-20221214202908896.png" class=""><ul><li><p>修改<code>themes/butterfly/layout/includes/loading/fullpage-loading.pug</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#loading-box</span>(onclick=&#x27;document<span class="selector-class">.getElementById</span>(&quot;loading-box&quot;)<span class="selector-class">.classList</span><span class="selector-class">.add</span>(&quot;loaded&quot;)&#x27;)</span><br><span class="line">  <span class="selector-class">.loading-bg</span></span><br><span class="line">    <span class="selector-tag">div</span><span class="selector-class">.loading-img</span></span><br><span class="line">    <span class="selector-class">.loading-image-dot</span></span><br><span class="line"></span><br><span class="line">script.</span><br><span class="line">  const preloader = &#123;</span><br><span class="line">    endLoading: () =&gt; &#123;</span><br><span class="line">      document<span class="selector-class">.body</span><span class="selector-class">.style</span><span class="selector-class">.overflow</span> = &#x27;auto&#x27;;</span><br><span class="line">      document<span class="selector-class">.getElementById</span>(&#x27;loading-box&#x27;)<span class="selector-class">.classList</span><span class="selector-class">.add</span>(&quot;loaded&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    initLoading: () =&gt; &#123;</span><br><span class="line">      document<span class="selector-class">.body</span><span class="selector-class">.style</span><span class="selector-class">.overflow</span> = &#x27;&#x27;;</span><br><span class="line">      document<span class="selector-class">.getElementById</span>(&#x27;loading-box&#x27;)<span class="selector-class">.classList</span><span class="selector-class">.remove</span>(&quot;loaded&quot;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  window<span class="selector-class">.addEventListener</span>(&#x27;load&#x27;,()=&gt; &#123; preloader<span class="selector-class">.endLoading</span>() &#125;)</span><br><span class="line"></span><br><span class="line">  if (!&#123;theme<span class="selector-class">.pjax</span> &amp;&amp; theme<span class="selector-class">.pjax</span><span class="selector-class">.enable</span>&#125;) &#123;</span><br><span class="line">    document<span class="selector-class">.addEventListener</span>(&#x27;pjax:send<span class="string">&#x27;, () =&gt; &#123; preloader.initLoading() &#125;)</span></span><br><span class="line"><span class="string">    document.addEventListener(&#x27;</span>pjax:complete<span class="string">&#x27;, () =&gt; &#123; preloader.endLoading() &#125;)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>themes/butterfly/layout/includes/loading/index.pug</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if theme<span class="selector-class">.preloader</span><span class="selector-class">.source</span> === <span class="number">1</span></span><br><span class="line">  include ./fullpage-loading<span class="selector-class">.pug</span></span><br><span class="line">else if theme<span class="selector-class">.preloader</span><span class="selector-class">.source</span> === <span class="number">2</span></span><br><span class="line">  include ./pace<span class="selector-class">.pug</span></span><br><span class="line">else</span><br><span class="line">  include ./fullpage-loading<span class="selector-class">.pug</span></span><br><span class="line">  include ./pace<span class="selector-class">.pug</span></span><br></pre></td></tr></table></figure></li><li><p>新建<code>source/css/progress_bar.css</code>, 也可以不做这一步下面配置文件<code>pace_css_url</code>这一项就要留空, 这一步是修改 pace 加载的胶囊样式用的.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pace</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eaecf2</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#e3e8f7</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace-inactive</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -ms-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -o-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, <span class="number">#ee7752</span>, <span class="number">#e73c7e</span>, <span class="number">#23a6d5</span>, <span class="number">#23d5ab</span>);</span><br><span class="line">  <span class="attribute">animation</span>: gradient <span class="number">1.5s</span> ease infinite;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">200%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span><span class="selector-class">.pace-inactive</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>修改<code>themes/butterfly/source/css/_layout/loading.styl</code>, 其中的颜色可以替换成你喜欢的色值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">if hexo-config(&#x27;preloader&#x27;)</span><br><span class="line">  <span class="selector-class">.loading-bg</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(<span class="comment">/* 这里替换成你的色值 */</span>);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1001</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#loading-box</span></span><br><span class="line">    <span class="selector-class">.loading-img</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin</span>: auto;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#f0f0f2</span>;</span><br><span class="line">      <span class="attribute">animation-duration</span>: .<span class="number">3s</span>;</span><br><span class="line">      <span class="attribute">animation-name</span>: loadingAction;</span><br><span class="line">      <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">      <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">    <span class="selector-class">.loading-image-dot</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#6bdf8f</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">18px</span>, <span class="number">24px</span>);</span><br><span class="line">    &amp;<span class="selector-class">.loaded</span></span><br><span class="line">      <span class="selector-class">.loading-bg</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: -<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> loadingAction</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: .<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>在<code>[BlogRoot]/source/css/</code>下创建一个custom.css的文件,在该文件中添加如下代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading-img</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/* 这里填你博客头像的地址 */</span>) no-repeat center center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>_config.butterfly.yml</code>中<code>preloader</code>选项, 改完以后<code>source: 1</code>为满屏加载无pace胶囊,<code>source: 2</code>为pace胶囊无满屏动画, <code>source: 3</code>是两者都启用。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Loading Animation (加载动画)</span></span><br><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source</span></span><br><span class="line">  <span class="comment"># 1. fullpage-loading</span></span><br><span class="line">  <span class="comment"># 2. pace (progress bar)</span></span><br><span class="line">  <span class="comment"># else all</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># pace theme (see https://codebyzach.github.io/pace/)</span></span><br><span class="line">  <span class="attr">pace_css_url:</span> <span class="string">/css/progress_bar.css</span></span><br></pre></td></tr></table></figure></li><li><p>记得要在<code>_config.butterfly.yml</code>中添加<code>inject</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># 自定义css</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br></pre></td></tr></table></figure><h1>向博客中添加图片,并且能够在Typora和网页中都能正常显示</h1><p><strong>问题描述</strong>:在Typora中插入图片时使用的是相对路径,该并不能够被hexo识别,导致启动hexo的时候文章内的图片没有办法正常显示.反过来如果使用了hexo能够识别的图片路径,在Typora中又不能够浏览图片了.</p><p><strong>解决办法</strong>:</p><ul><li><p>将<code>_config.yml</code>中<code>post_asset_folder:</code>设置为true,在新建文章时hexo会自动生成一个和文章同名的文件夹存放文章中的图片.</p></li><li><p>调整Typora中的设置</p></li></ul><img src="/posts/370bdedc/image-20221215000601553.png" class=""><ul><li><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-marked #不推荐,这一个包可以不安装</span><br><span class="line">npm install hexo-image-link --save</span><br><span class="line"></span><br><span class="line">npm uninstall hexo-renderer-marker --save  #卸载 marked </span><br><span class="line">npm install hexo-renderer-markdown-it --save  #安装markdown-it</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>Note:如果想要给文章添加封面,可以在scaffold文件夹的post.md中更改一下文章的模板</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">updated: </span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">categories:</span></span><br><span class="line"><span class="emphasis">cover: </span></span><br></pre></td></tr></table></figure><p>将封面的连接填在<code>cover</code>后面,如果封面图片在本地就直接填封面图片的文件名.</p><h1>添加本地搜索</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Search</span></span><br><span class="line">search:</span><br><span class="line">path: search.xml</span><br><span class="line">field: post</span><br><span class="line">format: html</span><br><span class="line">limit: 10000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> template: ./search.xml 这一行添加上会报错,先注释掉</span></span><br></pre></td></tr></table></figure><p>将<code>_config.butterfly.yml</code>中localsearch的enable改为true</p><h1>设置文章永久化连接</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h1>统计字数阅读时间</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>更改<code>_config.butterfly.yml</code>中的代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1>自定义网站样式</h1><p><strong>挖坑:了解CSS的工作原理</strong></p><p>在<code>[BlogRoot]/source/css/custom.css</code>中添加如下代码:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 颜色 */</span></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--anzhiyu-theme-op</span>: <span class="number">#4259ef23</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-gray-op</span>: <span class="number">#9999992b</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-theme-top</span>: <span class="built_in">var</span>(--anzhiyu-theme);</span><br><span class="line">  <span class="attr">--anzhiyu-white</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-white-op</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-black</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-black-op</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-none</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-gray</span>: <span class="number">#999999</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-yellow</span>: <span class="number">#ffc93e</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-main</span>: <span class="built_in">var</span>(--anzhiyu-theme);</span><br><span class="line">  <span class="attr">--anzhiyu-main-op</span>: <span class="built_in">var</span>(--anzhiyu-theme-op);</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-theme</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">var</span>(--anzhiyu-theme-op);</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-main</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">var</span>(--anzhiyu-main-op);</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-blue</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">40</span>, <span class="number">109</span>, <span class="number">234</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-white</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-black</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.05</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-yellow</span>: <span class="number">0px</span> <span class="number">38px</span> <span class="number">77px</span> -<span class="number">26px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">201</span>, <span class="number">62</span>, <span class="number">0.12</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-red</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="number">#ee7d7936</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-green</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="number">#87ee7936</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-border</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d300c</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-blackdeep</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">16px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.15</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-logo-color</span>: <span class="built_in">linear-gradient</span>(<span class="number">215deg</span>, <span class="number">#4584ff</span> <span class="number">30%</span>, <span class="number">#ff7676</span> <span class="number">70%</span>);</span><br><span class="line">  <span class="attr">--style-border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--anzhiyu-card-border);</span><br><span class="line">  <span class="attr">--anzhiyu-blue-main</span>: <span class="number">#3b70fc</span>;</span><br><span class="line">  <span class="attr">--style-border-hover</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--anzhiyu-main);</span><br><span class="line">  <span class="attr">--style-border-dashed</span>: <span class="number">1px</span> dashed <span class="built_in">var</span>(--anzhiyu-theme-op);</span><br><span class="line">  <span class="attr">--style-border-avatar</span>: <span class="number">4px</span> solid <span class="built_in">var</span>(--anzhiyu-background);</span><br><span class="line">  <span class="attr">--style-border-always</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--anzhiyu-card-border);</span><br><span class="line">  <span class="attr">--anzhiyu-white-acrylic1</span>: <span class="number">#fefeff</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-white-acrylic2</span>: <span class="number">#fcfdff</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-black-acrylic2</span>: <span class="number">#08080a</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-black-acrylic1</span>: <span class="number">#0b0b0e</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-main-none</span>: <span class="number">#b8b8b800</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;light&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attr">--anzhiyu-theme</span>: <span class="number">#3b70fc</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-theme-op</span>: <span class="number">#4259ef23</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-blue</span>: <span class="number">#3b70fc</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-red</span>: <span class="number">#d8213c</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-pink</span>: <span class="number">#ff7c7c</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-green</span>: <span class="number">#57bd6a</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-fontcolor</span>: <span class="number">#363636</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-background</span>: <span class="number">#f7f9fe</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-reverse</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-maskbg</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.6</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-maskbgdeep</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-hovertext</span>: <span class="built_in">var</span>(--anzhiyu-theme);</span><br><span class="line">  <span class="attr">--anzhiyu-ahoverbg</span>: <span class="number">#f7f7fa</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-lighttext</span>: <span class="built_in">var</span>(--anzhiyu-main);</span><br><span class="line">  <span class="attr">--anzhiyu-secondtext</span>: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.6</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-scrollbar</span>: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.4</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-card-btn-bg</span>: <span class="number">#edf0f7</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-post-blockquote-bg</span>: <span class="number">#fafcff</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-post-tabs-bg</span>: <span class="number">#f2f5f8</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-secondbg</span>: <span class="number">#edf0f7</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-nav</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.05</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-card-bg</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-lightblack</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-light2black</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-card-border</span>: <span class="number">#c0c6d8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attr">--global-bg</span>: <span class="number">#191919</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-theme</span>: <span class="number">#0084ff</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-theme-op</span>: <span class="number">#0084ff23</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-blue</span>: <span class="number">#0084ff</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-red</span>: <span class="number">#ff3842</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-pink</span>: <span class="number">#ff7c7c</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-green</span>: <span class="number">#57bd6a</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-fontcolor</span>: <span class="number">#f7f7fa</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-background</span>: <span class="number">#18171d</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-reverse</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-maskbg</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-maskbgdeep</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.85</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-hovertext</span>: <span class="number">#0a84ff</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-ahoverbg</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-lighttext</span>: <span class="number">#f2b94b</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-secondtext</span>: <span class="number">#a1a2b8</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-scrollbar</span>: <span class="built_in">rgba</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">223</span>, <span class="number">0.4</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-card-btn-bg</span>: <span class="number">#30343f</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-post-blockquote-bg</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-post-tabs-bg</span>: <span class="number">#121212</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-secondbg</span>: <span class="number">#30343f</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-nav</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">20px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">0.4</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-card-bg</span>: <span class="number">#1d1b26</span>;</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-lightblack</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-shadow-light2black</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attr">--anzhiyu-card-border</span>: <span class="number">#42444a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* @font-face &#123;</span></span><br><span class="line"><span class="comment">  font-family: Candyhome;</span></span><br><span class="line"><span class="comment">  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);</span></span><br><span class="line"><span class="comment">  font-display: swap;</span></span><br><span class="line"><span class="comment">  font-weight: lighter;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">  <span class="attribute">font-weight</span>: lighter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#menus</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;ZhuZiAYuanJWD&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.article-title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.blog-slider__title</span>,</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.categoryBar-list-link</span>,</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.post-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: ZhuZiAYuanJWD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">3em</span>;</span><br><span class="line">  <span class="comment">/* 可以定义图标大小 */</span></span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 时间轴生肖icon */</span></span><br><span class="line">svg<span class="selector-class">.icon</span> &#123;</span><br><span class="line">  <span class="comment">/* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="comment">/* width和height定义图标的默认宽度和高度*/</span></span><br><span class="line">  <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon-zhongbiao</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f7c768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* bilibli番剧插件 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-class">.bangumi-tab</span><span class="selector-class">.bangumi-active</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-theme);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--anzhiyu-ahoverbg);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.bangumi-tab</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-theme) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--anzhiyu-ahoverbg) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.bangumi-button</span><span class="selector-class">.bangumi-nextpage</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.bangumi-tab</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">svg<span class="selector-class">.icon</span><span class="selector-class">.faa-tada</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-info-item</span> &#123;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#f2b94b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-info-item</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f2b94b</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bangumi-info-item</span> <span class="selector-tag">em</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f2b94b</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解决artitalk的图标问题 */</span></span><br><span class="line"><span class="selector-id">#uploadSource</span> &gt; svg &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.19em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.not-top-img</span>)<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页文章卡片 */</span></span><br><span class="line"><span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 首页侧栏卡片 */</span></span><br><span class="line"><span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文章页面正文背景 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分页页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 归档页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#archive</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标签页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#tag</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分类页面 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#category</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*夜间模式伪类遮罩层透明*/</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#recent-posts</span> &gt; <span class="selector-class">.recent-post-item</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#post</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#tag</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#archive</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#category</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#121212</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#category</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 头图透明 */</span></span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#rightside</span> &gt; <span class="selector-tag">div</span> &gt; <span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3b70fc</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3b70fc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 音乐播放器 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* .aplayer .aplayer-lrc &#123;</span></span><br><span class="line"><span class="comment">  display: none !important;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="comment">/* 默认情况下缩进左侧66px，只留一点箭头部分 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">  <span class="comment">/* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999999</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 评论框  */</span></span><br><span class="line"><span class="selector-class">.vwrap</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#bbb</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">30px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置评论框 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vcard</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">#bbb</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标图标 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/x1.cur&quot;</span>), auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>),</span><br><span class="line"><span class="selector-attr">[type=<span class="string">&quot;reset&quot;</span>]</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>),</span><br><span class="line"><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>),</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:not</span>(<span class="selector-pseudo">:disabled</span>) &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/x2.cur&quot;</span>), auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* md网站下划线 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-id">#hpp_talk</span> <span class="selector-tag">p</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 404页面 */</span></span><br><span class="line"><span class="selector-id">#error-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">18rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--card-bg);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="built_in">var</span>(--card-box-shadow);</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-img</span> &#123;</span><br><span class="line">  box-<span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#3b70fc</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-info</span> &#123;</span><br><span class="line">  box-<span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Titillium Web, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Hiragino Sans GB&quot;</span>, <span class="string">&quot;Microsoft JhengHei&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-info</span> <span class="selector-class">.error_title</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">9em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-info</span> <span class="selector-class">.error_subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">3.5rem</span>;</span><br><span class="line">  <span class="attribute">word-break</span>: break-word;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.6em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#error-wrap</span> <span class="selector-class">.error-content</span> <span class="selector-class">.error-info</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">1.5rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--btn-bg);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--btn-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-group</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> <span class="selector-class">.thumbnail</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">230px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">143px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--anzhiyu-card-bg);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> <span class="selector-class">.content</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  -webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#body-wrap</span><span class="selector-class">.error</span> <span class="selector-class">.aside-list</span> <span class="selector-class">.aside-list-item</span> <span class="selector-class">.content</span> <span class="selector-tag">time</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 代码框主题 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">figure</span><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不需要一图流,删除上面代码中的:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 页脚透明 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 头图透明 */</span></span><br><span class="line"><span class="selector-id">#page-header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我感觉一图流更好看一些,同时不要忘记在<code>_config.butterfly.yml</code>中background属性后添加背景图片的地址.</p><h1>给网站添加页脚徽标和计时器</h1><img src="/posts/370bdedc/image-20221010191820950.png" class=""><p>徽标我们在很多GitHub项目的主页中也会看到，比如：</p><img src="/posts/370bdedc/image-20221010164514318.png" class=""><p><a href="https://shields.io/">推荐一个徽标生成网站</a>，但是比较可以的是徽标的label部分底色修改不了。不过我们可以自定义图标，步骤如下：</p><p>1.找到合适的图片，尽量不要太大，背景透明，然后存储png格式。</p><p>2.找个在线转base64图片的网站，推荐<a href="https://tool.chinaz.com/tools/imgtobase">这个在线生成Base64的网站</a>,把制作好的图片转为base64链接。</p><p>3.把base64链接作为logo填进徽标链接，比如这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://img.shields.io/badge/EddieLee-下班啦-d021d6?style=&amp;logo=&lt;生成的base64编码&gt;</span><br></pre></td></tr></table></figure><p>将上面生成的链接使用Chrome浏览器打开，用Safari打开有时会抽风显示不出来。将打开的页面下载下来，下载下来的是一个<code>svg</code>文件，将这个文件放到<code>/img</code>目录下，方便索引。</p><p>在<code>Terminal</code>中安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-footer-beautify --save</span><br></pre></td></tr></table></figure><p>在<code>_config.butterfly.yml</code>中添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_beautify:</span></span><br><span class="line">  <span class="attr">enable:</span></span><br><span class="line">    <span class="attr">timer:</span> <span class="literal">true</span> <span class="comment"># 计时器开关</span></span><br><span class="line">    <span class="attr">bdage:</span> <span class="literal">true</span> <span class="comment"># 徽标开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="comment">#屏蔽页面</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">footer-wrap</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># 计时器部分配置项</span></span><br><span class="line">  <span class="attr">runtime_js:</span>  <span class="string">/js/runtime/runtime.min.js</span></span><br><span class="line">  <span class="attr">runtime_css:</span> <span class="string">/css/runtime/runtime.min.css</span></span><br><span class="line">  <span class="comment"># 徽标部分配置项</span></span><br><span class="line">  <span class="attr">swiperpara:</span> <span class="number">4</span> <span class="comment">#若非0，则开启轮播功能，每行徽标个数</span></span><br><span class="line">  <span class="attr">bdageitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://hexo.io/</span> <span class="comment">#徽标指向网站链接</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo</span> <span class="comment">#徽标API</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">博客框架为Hexo_v5.4.0</span> <span class="comment">#徽标提示语</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://beian.miit.gov.cn/#/Integrated/index</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">/img/备案.svg</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站已在鲁进行备案</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://butterfly.js.org/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">主题版本Butterfly_v3.8.2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://www.jsdelivr.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站使用JsDelivr为静态资源提供CDN加速</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Vercel-brightgreen?style=flat&amp;logo=Vercel</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用双线部署，默认线路托管于Vercel</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://vercel.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Hosted-Coding-0cedbe?style=flat&amp;logo=Codio</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用双线部署，联通线路托管于Coding</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">https://github.com/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站项目由Github托管</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">link:</span> <span class="string">http://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line">      <span class="attr">shields:</span> <span class="string">https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris</span></span><br><span class="line">      <span class="attr">message:</span> <span class="string">本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-swiper/lib/swiper.min.css</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-swiper/lib/swiper.min.js</span></span><br><span class="line">  <span class="attr">swiperbdage_init_js:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/8e1264d1/</span></span><br></pre></td></tr></table></figure><p>计时器部分的两个文件：在博客根目录下的<code>source</code>文件夹下新建<code>/runtime/runtime.css</code>和<code>js/runtime/runtime.js</code>文件，填入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* runtime.js */</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createtime</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;10/10/2022 00:00:00&quot;</span>);</span><br><span class="line">  now.<span class="title function_">setTime</span>(now.<span class="title function_">getTime</span>() + <span class="number">250</span>);</span><br><span class="line">  <span class="keyword">var</span> e = (now - t) / <span class="number">1e3</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>,</span><br><span class="line">    a = <span class="title class_">Math</span>.<span class="title function_">floor</span>(e),</span><br><span class="line">    n = (now - t) / <span class="number">1e3</span> / <span class="number">60</span> / <span class="number">60</span> - <span class="number">24</span> * a,</span><br><span class="line">    r = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n);</span><br><span class="line">  <span class="number">1</span> == <span class="title class_">String</span>(r).<span class="property">length</span> &amp;&amp; (r = <span class="string">&quot;0&quot;</span> + r);</span><br><span class="line">  <span class="keyword">var</span> s = (now - t) / <span class="number">1e3</span> / <span class="number">60</span> - <span class="number">1440</span> * a - <span class="number">60</span> * r,</span><br><span class="line">    i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(s);</span><br><span class="line">  <span class="number">1</span> == <span class="title class_">String</span>(i).<span class="property">length</span> &amp;&amp; (i = <span class="string">&quot;0&quot;</span> + i);</span><br><span class="line">  <span class="keyword">var</span> o = (now - t) / <span class="number">1e3</span> - <span class="number">86400</span> * a - <span class="number">3600</span> * r - <span class="number">60</span> * i,</span><br><span class="line">    l = <span class="title class_">Math</span>.<span class="title function_">round</span>(o);</span><br><span class="line">  <span class="number">1</span> == <span class="title class_">String</span>(l).<span class="property">length</span> &amp;&amp; (l = <span class="string">&quot;0&quot;</span> + l);</span><br><span class="line">  <span class="keyword">let</span> g = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  (g =</span><br><span class="line">    r &lt; <span class="number">18</span> &amp;&amp; r &gt;= <span class="number">9</span></span><br><span class="line">      ? <span class="string">`&lt;img class=&#x27;boardsign&#x27; src=&#x27;/img/诺倾城摸鱼中.svg&#x27;&gt;&lt;span class=&#x27;textTip&#x27;&gt; &lt;br&gt; 本站居然运行了 <span class="subst">$&#123;a&#125;</span> 天&lt;/span&gt;&lt;span id=&#x27;runtime&#x27;&gt; <span class="subst">$&#123;r&#125;</span> 小时 <span class="subst">$&#123;i&#125;</span> 分 <span class="subst">$&#123;l&#125;</span> 秒 &lt;/span&gt; &lt;i class=&#x27;fas fa-heartbeat&#x27; style=&#x27;color:red&#x27;&gt;&lt;/i&gt;`</span></span><br><span class="line">      : <span class="string">`&lt;img class=&#x27;boardsign&#x27; src=&#x27;/img/诺倾城下班啦.svg&#x27;&gt;&lt;span class=&#x27;textTip&#x27;&gt; &lt;br&gt; 本站居然运行了 <span class="subst">$&#123;a&#125;</span> 天&lt;/span&gt;&lt;span id=&#x27;runtime&#x27;&gt; <span class="subst">$&#123;r&#125;</span> 小时 <span class="subst">$&#123;i&#125;</span> 分 <span class="subst">$&#123;l&#125;</span> 秒 &lt;/span&gt; &lt;i class=&#x27;fas fa-heartbeat&#x27; style=&#x27;color:red&#x27;&gt;&lt;/i&gt;`</span>),</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;workboard&quot;</span>) &amp;&amp;</span><br><span class="line">      (<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;workboard&quot;</span>).<span class="property">innerHTML</span> = g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createtime</span>();</span><br><span class="line">&#125;, <span class="number">250</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* runtime.css */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-id">#runtime</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">padding-inline</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#workboard</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-tag">div</span><span class="selector-id">#runtime</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#28b4c8</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">28</span>, <span class="number">69</span>, <span class="number">218</span>, <span class="number">0.71</span>);</span><br><span class="line">  <span class="attribute">animation</span>: flashlight <span class="number">1s</span> linear infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#ghbdages</span> <span class="selector-class">.github-badge</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-moz-keyframes</span> flashlight &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1478d2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#1478d2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> flashlight &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1478d2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#1478d2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@-o-keyframes</span> flashlight &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1478d2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#1478d2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> flashlight &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#1478d2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="number">#1478d2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用<code>VSCode</code>的插件<code>JS &amp; CSS Minifier (Minify)</code>生成<code>runtime.min.css</code>和<code>runtime.min.js</code>文件。</p><h1>添加站点动态Title</h1><p>在<code>[BlogRoot]/source/js/</code>下新建<code>title.js</code>,填入以下代码,<strong>注意要在主题配置文件中Inject</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态标题</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitile</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;visibilitychange&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">    <span class="comment">//离开当前页面时标签显示内容</span></span><br><span class="line">    <span class="comment">//document.title = &quot;w(ﾟДﾟ)w 不要走！再看看嘛！&quot;;</span></span><br><span class="line">    <span class="comment">// clearTimeout(titleTime);</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//返回当前页面时标签显示内容</span></span><br><span class="line">    <span class="comment">//document.title = &quot;♪(^∇^*)欢迎肥来！&quot; + OriginTitile;</span></span><br><span class="line">    <span class="comment">//两秒后变回正常标题</span></span><br><span class="line">    <span class="comment">// titleTime = setTimeout(function () &#123;</span></span><br><span class="line">    <span class="comment">//   document.title = OriginTitile;</span></span><br><span class="line">    <span class="comment">// &#125;, 2000);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1>添加外挂标签</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://www.npmjs.com/package/hexo-butterfly-tag-plugins-plus</span></span><br><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br><span class="line"></span><br><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>使用方法参考:<a href="https://akilar.top/posts/615e2dec/">https://akilar.top/posts/615e2dec/</a></p><h1>安装wowjs</h1><p><strong>需要解决的问题碰到了问题:</strong></p><p>​我在给个人简介的侧边栏加上变色的效果后,这一个卡片的载入动画就不受控制了,和其他的板块格格不入,除了个人信息卡处的动画不受控制以外,Git Calendar的加载动画也不受控制.需要解决</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-wowjs --save</span><br></pre></td></tr></table></figure><p>添加配置项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wowjs</span></span><br><span class="line"><span class="comment"># see https://www.npmjs.com/package/hexo-butterfly-wowjs</span></span><br><span class="line"><span class="attr">wowjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#控制动画开关。true是打开，false是关闭</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">10</span> <span class="comment">#过滤器优先级</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span> <span class="comment">#移动端是否启用，默认移动端禁用</span></span><br><span class="line">  <span class="attr">animateitem:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">recent-post-item</span> <span class="comment">#必填项，需要添加动画的元素的class</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span> <span class="comment">#必填项，需要添加的动画</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="number">1.</span><span class="string">5s</span> <span class="comment">#选填项，动画持续时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">delay:</span> <span class="string">200ms</span> <span class="comment">#选填项，动画开始的延迟时间，单位可以是ms也可以是s。例如3s，700ms。</span></span><br><span class="line">      <span class="attr">offset:</span> <span class="number">30</span> <span class="comment">#选填项，开始动画的距离（相对浏览器底部）</span></span><br><span class="line">      <span class="attr">iteration:</span> <span class="number">1</span> <span class="comment">#选填项，动画重复的次数</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">card-widget</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__zoomIn</span></span><br><span class="line">      <span class="attr">delay:</span> <span class="string">200ms</span></span><br><span class="line">    <span class="comment"># - class: flink-list-card</span></span><br><span class="line">    <span class="comment">#   style: wowpanels</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">flink-list-card</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__flipInY</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">3s</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">flink-list-card</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__animated</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">3s</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">article-sort-item</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__slideInRight</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="number">1.</span><span class="string">5s</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">site-card</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__flipInY</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">3s</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">class:</span> <span class="string">site-card</span></span><br><span class="line">      <span class="attr">style:</span> <span class="string">animate__animated</span></span><br><span class="line">      <span class="attr">duration:</span> <span class="string">3s</span></span><br><span class="line">  <span class="attr">animate_css:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-wowjs/lib/animate.min.css</span></span><br><span class="line">  <span class="attr">wow_js:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-wowjs/lib/wow.min.js</span></span><br><span class="line">  <span class="attr">wow_init_js:</span> <span class="string">https://cdn.cbd.int/hexo-butterfly-wowjs/lib/wow_init.js</span></span><br></pre></td></tr></table></figure><h1>魔改关于页面</h1><h1>添加打赏功能</h1><h1>外挂标签的使用</h1><h1>添加GitCalendar</h1><h1>在侧边栏添加电子时钟</h1><h1>添加Butterfly Swiper插件</h1><h1>适配B站视频</h1><p>在文章中添加B站的视频</p><p>将下面的代码直接复制到你想要添加视频的博客中去,替换掉aid后面那一串字符.<strong>注意,如果你的视频ID是BV开头,那么要把aid替换成bvid</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aspect-ratio&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://player.bilibili.com/player.html?aid=556933559&amp;&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">border</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">high_quality</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">danmaku</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在source/css/custom.css中添加以下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*哔哩哔哩视频适配*/</span></span><br><span class="line"><span class="selector-class">.aspect-ratio</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">3%</span> auto;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aspect-ratio</span> <span class="selector-tag">iframe</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center" class="aspect-ratio">  <iframe    src="https://player.bilibili.com/player.html?bvid=BV1uT4y1P7CX&&page=1&as_wide=1&high_quality=1&danmaku=0"    scrolling="no"    border="0"    frameborder="no"    framespacing="0"    high_quality="1"    danmaku="1"    allowfullscreen="true"  ></iframe></div><h1>存在Bug</h1><h2 id="文章目录无法跳转">文章目录无法跳转</h2><p>打开浏览器的开发者模式，toc-link并没有生成，所以没有办法实现跳转，解决办法：</p><p>安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install markdown-it-named-headings --save</span><br></pre></td></tr></table></figure><p>然后进入项目的根目录，修改根目录下 <code>node_modules\hexo-renderer-markdown-it\lib\renderer.js</code> 文件，在 <code>renderer.js</code> 中添加一行以使用此插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parser.<span class="title function_">use</span>(<span class="built_in">require</span>(<span class="string">&#x27;markdown-it-named-headings&#x27;</span>))</span><br></pre></td></tr></table></figure><img src="/posts/370bdedc/%E6%88%AA%E5%B1%8F2023-03-1418.44.39.png" class=""><div class="tip warning faa-horizontal animated"><p>因为<code>.gitignore</code>忽略了<code>node_modules</code>中的修改，所以在新的设备上git pull下来之后还要手动地添加上面这一行才可以</p></div>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git问题杂记</title>
      <link href="/posts/a72e4bb6/"/>
      <url>/posts/a72e4bb6/</url>
      
        <content type="html"><![CDATA[<h1>终端中git相关指令执行的结果中的中文乱码问题</h1><ul><li>在终端中使用<code>git status</code>命令时，结果显示为乱码<br>解决方法是在终端中输入以下两行命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath true</span><br><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>重启终端，如果仍然显示乱码，执行下面两行命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath true</span><br><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure>再次重启终端</li></ul><h1>Clone GitHub仓库失败</h1><p>拉取git仓库有如下报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/xxxxx/xxxxxx.git/&#x27;: Failed to connect to github.com port 443 after 21052 ms: Couldn&#x27;t connect to server</span><br></pre></td></tr></table></figure><p>有可能是因为本地使用了代理工具，比如Clash修改了网络端口，解决方案如下👇👇👇</p><ul><li><a href="https://blog.csdn.net/qq_27281247/article/details/135925956">https://blog.csdn.net/qq_27281247/article/details/135925956</a></li></ul><h1>Git仓库太大拉取不下来</h1><p>一些比较大的仓库,拉取的时候会有如下报错:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">remote: Enumerating objects: 1315604, done.</span><br><span class="line">remote: Counting objects: 100% (1362/1362), done.</span><br><span class="line">remote: Compressing objects: 100% (850/850), done.</span><br><span class="line">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</span><br><span class="line">error: 6333 bytes of body are still expected</span><br><span class="line">fetch-pack: unexpected disconnect while reading sideband packet</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: fetch-pack: invalid index-pack output</span><br></pre></td></tr></table></figure><p>因为仓库非常大，一次性拉取可能会导致网络压力过大。可以尝试使用 --depth 参数进行浅克隆，只拉取最近的提交记录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth 1 &lt;repository-url&gt;</span><br></pre></td></tr></table></figure><p>或者尝试将缓存增大为1G:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 1048576000</span><br></pre></td></tr></table></figure><p>如果还是不行,那就尝试暴力拉取,编写一个shell脚本重复执行拉取仓库直到拉取成功:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否提供了仓库目录作为参数</span></span><br><span class="line">if [ $# -eq 0 ]; then</span><br><span class="line">    echo &quot;请提供要更新的仓库目录作为参数。&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取命令行传入的仓库目录</span></span><br><span class="line">REPO_DIR=&quot;$1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查仓库目录是否存在</span></span><br><span class="line">if [ ! -d &quot;$REPO_DIR&quot; ]; then</span><br><span class="line">    echo &quot;指定的仓库目录不存在。&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入仓库目录</span></span><br><span class="line">cd &quot;$REPO_DIR&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">循环拉取更新，直到成功</span></span><br><span class="line">while true; do</span><br><span class="line">    git pull</span><br><span class="line">    # 获取上一个命令的退出状态码</span><br><span class="line">    EXIT_CODE=$?</span><br><span class="line">    if [ $EXIT_CODE -eq 0 ]; then</span><br><span class="line">        echo &quot;仓库更新成功！&quot;</span><br><span class="line">        break</span><br><span class="line">    else</span><br><span class="line">        echo &quot;仓库更新失败，将在 5 秒后重试...&quot;</span><br><span class="line">        sleep 5</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h1>Git Submodule</h1><p><code>git submodule update --init --recursive</code> 是一个在使用 Git 管理项目时非常实用的命令，下面为你详细解释它的用途和其中各参数的含义。<br>整体用途<br>这个命令主要用于初始化并更新项目中的子模块（submodule）。子模块是 Git 提供的一种机制，允许在一个 Git 仓库中包含另一个独立的 Git 仓库，且能分别对它们进行版本控制。当你克隆一个包含子模块的项目时，子模块的代码不会自动克隆下来，这时就需要使用这个命令来获取子模块的代码。<br>参数解释<br>–init<br>作用：–init 参数用于初始化子模块。当你克隆一个包含子模块的项目时，主项目仓库中只是记录了子模块的一些引用信息（如子模块的仓库地址、特定的提交哈希值），子模块的代码并没有实际下载到本地。–init 参数会根据主项目中记录的子模块配置信息，在本地创建子模块的仓库目录，并设置好子模块的远程仓库地址等信息。<br>示例：假设你克隆了一个名为 main-project 的项目，它包含一个子模块 sub-project。在克隆 main-project 后，直接查看 sub-project 目录可能为空或者只有一些配置文件。使用 git submodule update --init 命令后，Git 会根据 main-project 中记录的信息，将 sub-project 的代码从远程仓库克隆到本地的 sub-project 目录中。<br>–recursive<br>作用：–recursive 参数用于递归地初始化和更新子模块。如果子模块本身还包含其他子模块（即嵌套子模块），使用 --recursive 参数可以确保所有嵌套子模块都被正确初始化和更新。也就是说，它会逐层深入到每一个子模块中，对其中包含的子模块也执行相同的初始化和更新操作。<br>示例：假设 main-project 包含子模块 sub-project1，而 sub-project1 又包含子模块 sub-project2。使用 git submodule update --init --recursive 命令时，Git 不仅会初始化和更新 sub-project1，还会进一步深入到 sub-project1 中，对 sub-project2 进行初始化和更新。<br>常见使用场景<br>克隆包含子模块的项目后<br>当你克隆一个包含子模块的项目时，通常需要执行这个命令来获取子模块的代码。例如：<br>bash<br>git clone <main-project-repo-url><br>cd main-project<br>git submodule update --init --recursive<br>拉取主项目更新后<br>如果主项目更新了子模块的引用信息（如子模块的提交哈希值），或者添加了新的子模块，你也可以使用这个命令来更新本地的子模块代码：<br>bash<br>git pull<br>git submodule update --init --recursive<br>通过使用 git submodule update --init --recursive 命令，你可以方便地管理项目中的子模块，确保子模块的代码与主项目记录的引用信息保持一致。</p><h1>使用Git管理Unity项目</h1><h2 id="了解Unity的目录结构">了解Unity的目录结构</h2><p>官方参考文档https://docs.unity3d.com/Manual/ExternalVersionControlSystemSupport.html</p><ul><li>Assets：存储所有游戏资源的文件夹，包括脚本、纹理、声音、<code>编辑器定制</code>等等。是项目中最重要的文件夹。</li><li>Library：被导入资源的本地缓存，使用Git做版本控制时不需要管这个文件夹。如果Unity的项目文件太大，可以试试删除Library文件夹</li><li>Logs：日志文件夹，由Unity自动生成管理，记录报错崩溃信息，随时可以删除清理</li><li>Packages：包配置信息，由Unity自动生成管理，用于放置一些官方组件和第三方插件</li><li>ProjectSettings：工程设置信息，由Unity自动生成管理</li><li>UserSettings：编辑器的用户构建设置，记录用户的使用偏好，如Unity编辑器的布局方式等等。</li><li>Temp：临时文件夹，Unity运行过程中生成的历史文件。</li></ul><p><a href="https://github.com/github/gitignore/blob/main/Unity.gitignore">这里</a>是github官方提供的不同工程中gitignore中的内容，但是参考价值不大，我们自己项目工程文件的方式很多样（当然Unity工程文件夹下的基本结构是不变的，我们可能会在工程文件夹之外上传很多我们自己的文件）</p><p>2023.07.13更新</p><p>现在我希望这个命令可以更加全能一些，它能够帮助我创建git仓库、创建gitignore、创建README文件一体的命令，我将这个命令命名为</p><p>但是每一次给Unity项目创建Git仓库的时候都需要手动生成这个<code>.gitigonre</code>文件，非常地麻烦，但是我们可以在终端编写一个命令在自动生成<code>.ginignore</code>文件，在Mac和Windows上操作有所不同。</p><h3 id="Mac">Mac</h3><p>在Mac的终端中，我们可以通过创建一个Shell脚本或简单地定义一个别名来实现自定义命令。我的Mac是Zsh环境：</p><ol><li><p>打开<code>.zshrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure></li><li><p>添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">generate-unity-<span class="function"><span class="title">gitignore</span></span>() &#123;</span><br><span class="line">  curl https://raw.githubusercontent.com/github/gitignore/master/Unity.gitignore -o .gitignore</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保存并退出编辑器，重新加载配置文件以应用更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li></ol><p>现在，我们在创建了一个新的Unity项目后，去到该项目的根目录下，使用<code>generate-unity-gitignore</code>就可以生成<code>.gitignore</code>文件了。</p><h3 id="Windows">Windows</h3><p>在Windows的PowerShell环境下，我们可以通过创建一个自定义函数来实现类似的功能：</p><ol><li><p>打开WindowsPowerShell</p></li><li><p>创建一个名为<code>Microsoft.PowerShell_profile.ps1</code>的Profile文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(<span class="built_in">Test-Path</span> <span class="literal">-Path</span> <span class="variable">$PROFILE</span>)) &#123;</span><br><span class="line">    <span class="built_in">New-Item</span> <span class="literal">-Type</span> File <span class="literal">-Path</span> <span class="variable">$PROFILE</span> <span class="literal">-Force</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用文本编辑器打开<code>Microsoft.PowerShell_profile.ps1</code>文件，我们可以在PowerShell中输入<code>$PROFILE</code>找到文件的路径</p></li><li><p>将下面的内容添加到其中：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate-unity-gitignore</span></span> &#123;</span><br><span class="line">    <span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> <span class="string">&quot;https://raw.githubusercontent.com/github/gitignore/master/Unity.gitignore&quot;</span> <span class="literal">-OutFile</span> <span class="string">&quot;.gitignore&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保存文件并退出编辑器，重启PowerShell窗口或者执行以下命令使更改生效：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. <span class="variable">$Profile</span></span><br></pre></td></tr></table></figure></li></ol><p>现在我们在PowerShell窗口中输入<code>generate-unity-gitignore</code>就可以生成<code>.gitignore</code>了</p><p>不过在近期的使用中我发现，<code>gitigonre</code>的文件内容是从github上获取的，对网络质量要求高，有可能会创建失败；而且由于我使用的编辑器是Rider，项目文件夹中会有一个.idea的文件夹并没有被列入gitignore中，当然我们可以在生成了gitignore文件之后再将这个文件夹加入到文件的末尾，但是还是太繁琐了，所以我们修改一下创建<code>gitignore</code>文件的方式，我们将Mac和Windows对应的Shell脚本和PowerShell脚本中<code>generate-unity-gitignore</code>方法的内容替换：</p><p>2023.07.13更新：经过在公司的学习和自己平时的开发使用，我们现在将这个功能扩展，因为我们使用Git管理的根文件夹可能不仅仅是一个Unity的工程的根目录，因此之前的gitignore文件存在一定的局限性，因此我在之前的文件基础上增加一些拓展性更高的方案</p><p><strong>Mac</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# Unity .gitignore file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/[Ll]ibrary/</span></span><br><span class="line"><span class="string">/[Tt]emp/</span></span><br><span class="line"><span class="string">/[Oo]bj/</span></span><br><span class="line"><span class="string">/[Bb]uild/</span></span><br><span class="line"><span class="string">/[Bb]uilds/</span></span><br><span class="line"><span class="string">/[Ll]ogs/</span></span><br><span class="line"><span class="string">/[Uu]ser[Ss]ettings/</span></span><br><span class="line"><span class="string">Assets/AssetStoreTools*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Autogenerated VS/MD/Consulo solution and project files</span></span><br><span class="line"><span class="string">ExportedObj/</span></span><br><span class="line"><span class="string">*.csproj</span></span><br><span class="line"><span class="string">*.unityproj</span></span><br><span class="line"><span class="string">*.sln</span></span><br><span class="line"><span class="string">*.suo</span></span><br><span class="line"><span class="string">*.tmp</span></span><br><span class="line"><span class="string">*.user</span></span><br><span class="line"><span class="string">*.userprefs</span></span><br><span class="line"><span class="string">*.pidb</span></span><br><span class="line"><span class="string">*.booproj</span></span><br><span class="line"><span class="string">*.svd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*.dll.mdb</span></span><br><span class="line"><span class="string">*.exe.mdb</span></span><br><span class="line"><span class="string">*.mdb</span></span><br><span class="line"><span class="string">*.pdb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*.bak</span></span><br><span class="line"><span class="string">*/symlink</span></span><br><span class="line"><span class="string">*.swp</span></span><br><span class="line"><span class="string">*.swf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Visual Studio cache directory</span></span><br><span class="line"><span class="string">.vs/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># JetBrains Rider cache files &amp; settings</span></span><br><span class="line"><span class="string">.idea/</span></span><br><span class="line"><span class="string">*.DotSettings.user</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># macOS-specific files</span></span><br><span class="line"><span class="string">.DS_Store</span></span><br><span class="line"><span class="string">._*</span></span><br><span class="line"><span class="string">Icon?</span></span><br><span class="line"><span class="string">*.bak.osx</span></span><br><span class="line"><span class="string">*.gmk.osx</span></span><br><span class="line"><span class="string">.cs.meta</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Thumbnails</span></span><br><span class="line"><span class="string">[Systeme][Cc]ache/</span></span><br><span class="line"><span class="string">[Tt]humbs.db</span></span><br><span class="line"><span class="string">*.stackdump</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Cache files for various systems</span></span><br><span class="line"><span class="string">library-*</span></span><br><span class="line"><span class="string">.sln.docstates</span></span><br><span class="line"><span class="string">.expressionblend</span></span><br><span class="line"><span class="string">Tmp_*</span></span><br><span class="line"><span class="string">_StyleCop.Cache</span></span><br><span class="line"><span class="string">.idea/</span></span><br><span class="line"><span class="string">.vsconfig</span></span><br><span class="line"><span class="string">&quot;</span> &gt;&gt; .gitignore</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Windows</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@&#x27;</span></span><br><span class="line"><span class="string"># Unity .gitignore file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/[Ll]ibrary/</span></span><br><span class="line"><span class="string">/[Tt]emp/</span></span><br><span class="line"><span class="string">/[Oo]bj/</span></span><br><span class="line"><span class="string">/[Bb]uild/</span></span><br><span class="line"><span class="string">/[Bb]uilds/</span></span><br><span class="line"><span class="string">/[Ll]ogs/</span></span><br><span class="line"><span class="string">/[Uu]ser[Ss]ettings/</span></span><br><span class="line"><span class="string">Assets/AssetStoreTools*</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Autogenerated VS/MD/Consulo solution and project files</span></span><br><span class="line"><span class="string">ExportedObj/</span></span><br><span class="line"><span class="string">*.csproj</span></span><br><span class="line"><span class="string">*.unityproj</span></span><br><span class="line"><span class="string">*.sln</span></span><br><span class="line"><span class="string">*.suo</span></span><br><span class="line"><span class="string">*.tmp</span></span><br><span class="line"><span class="string">*.user</span></span><br><span class="line"><span class="string">*.userprefs</span></span><br><span class="line"><span class="string">*.pidb</span></span><br><span class="line"><span class="string">*.booproj</span></span><br><span class="line"><span class="string">*.svd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*.dll.mdb</span></span><br><span class="line"><span class="string">*.exe.mdb</span></span><br><span class="line"><span class="string">*.mdb</span></span><br><span class="line"><span class="string">*.pdb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*.bak</span></span><br><span class="line"><span class="string">*/symlink</span></span><br><span class="line"><span class="string">*.swp</span></span><br><span class="line"><span class="string">*.swf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Visual Studio cache directory</span></span><br><span class="line"><span class="string">.vs/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># JetBrains Rider cache files &amp; settings</span></span><br><span class="line"><span class="string">.idea/</span></span><br><span class="line"><span class="string">*.DotSettings.user</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># macOS-specific files</span></span><br><span class="line"><span class="string">.DS_Store</span></span><br><span class="line"><span class="string">._*</span></span><br><span class="line"><span class="string">Icon?</span></span><br><span class="line"><span class="string">*.bak.osx</span></span><br><span class="line"><span class="string">*.gmk.osx</span></span><br><span class="line"><span class="string">.cs.meta</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Thumbnails</span></span><br><span class="line"><span class="string">[Systeme][Cc]ache/</span></span><br><span class="line"><span class="string">[Tt]humbs.db</span></span><br><span class="line"><span class="string">*.stackdump</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Cache files for various systems</span></span><br><span class="line"><span class="string">library-*</span></span><br><span class="line"><span class="string">.sln.docstates</span></span><br><span class="line"><span class="string">.expressionblend</span></span><br><span class="line"><span class="string">Tmp_*</span></span><br><span class="line"><span class="string">_StyleCop.Cache</span></span><br><span class="line"><span class="string">./idea</span></span><br><span class="line"><span class="string">.vsconfig</span></span><br><span class="line"><span class="string">&#x27;@</span> | <span class="built_in">Set-Content</span> <span class="literal">-Path</span> <span class="string">&quot;.gitignore&quot;</span> <span class="literal">-Encoding</span> utf8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果之后还有需要忽略的文件，在这两段内容的末尾添加我们要忽略的文件名即可。</p><h2 id="使用SourceTree管理Unity项目">使用SourceTree管理Unity项目</h2><p><code>SourceTree</code>是带有可视化界面的<code>Git</code>，有了它能够大大提高我们版本管理的效率，下面记录的是我在使用<code>SourceTree</code>面对一些较为复杂的使用场景时的基本流程，为之后遇到类似流程做一个参照。</p><h2 id="在Windows上使用SourceTree执行git命令有如下报错">在Windows上使用SourceTree执行git命令有如下报错</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">The host key is not cached for this server:</span><br><span class="line"> gitee.com(port22)</span><br><span class="line">You have no guarantee that the server is the computer</span><br><span class="line">you think it is</span><br><span class="line">The server&#x27;s ssh-ed25519 key fingerprint is:</span><br><span class="line">.................................</span><br><span class="line">if you trust this host, enter &quot;y&quot; to add thie key to</span><br></pre></td></tr></table></figure><p>打开Windows版的SourceTree，在菜单栏中选择<code>工具``-&gt;``选项``-&gt;``一般``-&gt;``SSH客户端配置``-&gt;``SSH客户端</code>选择<code>OpenSSH</code>就可以解决问题 。</p><h3 id="使用SourceTree在错误的分支上做了修改，如何将修改从错误的分支转移到正确的分支上？">使用SourceTree在错误的分支上做了修改，如何将修改从错误的分支转移到正确的分支上？</h3><p>紧接着上面那个在一个项目中向两个云端仓库同步更新版本的例子使用场景，我极有可能在<code>Learn</code>分支上进行学习的时候突然要修复一个bug或者完成新的需求，但是我忘记切换分支到<code>master</code>上，于是我在<code>Learn</code>分支上完成的代码的编写，在这种情况下，我希望将我在<code>Learn</code>分支上做的修改转移到<code>master</code>分支上，需要使用贮藏<code>stash</code>的功能，基本流程如下：</p><ol><li>当前分支是<code>Learn</code>，确保需要更改分支的内容都处于未提交<code>commit</code>的状态</li><li>选中需要更改分支的内容，点击贮藏<code>stash</code></li><li>切换到<code>master</code>分支上，应用刚才生成的贮藏，就将在<code>Learn</code>分支上做的修改移动到了<code>master</code>分支上</li><li>提交到远程仓库</li></ol><h3 id="gitignore没有生效，将本应该ignore的文件提交了该怎么办？">gitignore没有生效，将本应该ignore的文件提交了该怎么办？</h3><p>今天在使用<code>generate-unity-gitignore</code>方法在终端中生成gitignore文件的时候，在提交的时候发现gitignore文件好像并没有生效，提交了大量Library和Logs文件夹中的文件，导致<code>git add .</code>操作卡了好久，但是已经将不该提交的文件提交上去了，解决方案如下：</p><p>1.删除掉原来的.gitignore文件</p><p>2.创建新的.gitignore文件并且确保格式正确、要忽略的文件填写正确</p><p>3.清除已经被跟踪的文件缓存，如果要递归地删除文件夹，记得使用<code>-r</code>选项，<code>&lt;directory_path&gt;</code>要替换成Unity项目的根路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached &lt;directory_path&gt;</span><br></pre></td></tr></table></figure><p>4.提交更改，git常规三件套：<code>add</code>、<code>commit</code>、<code>push</code></p><p>一般情况下这种问题只会出现在第一次提交的时候，而在SourceTree中在只有一次提交的情况下没有办法撤回，具体做法是，将已经提交的但是不需要追踪的文件删除掉，在SourceTree中就做了一次更改，然后提交一次</p><p>然后更新新的gitignore文件，然后撤销删除</p><p>而在SourceTree当中的操作方法是：我们首先要将.gitignore文件更新到正确的内容，然后将.gitignore文件贮藏起来，选中我们错误的那次提交记录。</p><p>Git钩子的使用</p><p>在开发过程中，我经常需要更改本地的时间去测试一些活动的功能是否正常，这导致了我很可能在没有将时间调整回来就在错误的时间下将本地的修改进行了提交，因为我们的每次提交的时间会被记录，在提交历史中会出现新一次提交记录的时间却比之前提交的时间还要往前这种诡异的记录，所以我希望在我们做了本地修改在提交之前，可以先自动地检验本地的时间是否是正确的，因此我们就需要使用到Git钩子，</p><h1>参考资料</h1><p><a href="https://git-scm.com/book/zh/v2">官方参考书</a></p>]]></content>
      
      
      <categories>
          
          <category> 版本管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode配置UnityC#开发环境</title>
      <link href="/posts/e57f243c/"/>
      <url>/posts/e57f243c/</url>
      
        <content type="html"><![CDATA[<h1>背景</h1><p>笔者大学期间用过一段时间VSCode+Unity的开发方案，工作之后使用了Rider配合Unity开发之后，虽然Rider是一个十分强大的IDE，有强大的补全功能，强大的Debug功能，但是也让我对Rider产生了依赖。另外Rider没有免费的社区版，因此还是想要使用一个更加轻量级的保持自己对代码的熟悉程度<br>另外VSCode的插件也让人眼前一亮</p><img src="/posts/e57f243c/image-20220707015057151.png" class=""><p><a href="https://www.bilibili.com/video/BV19741167zU?spm_id_from=333.999.0.0&amp;vd_source=83f4165825ce9df46cf4fd576ccb1102">麦扣的视频链接</a></p><p><a href="https://code.visualstudio.com/docs/other/unity">VS code 官方文档</a></p><h2 id="前置准备-Prerequisites">前置准备 Prerequisites</h2><ol><li><p>安装<a href="https://dotnet.microsoft.com/zh-cn/download">.NET SDK</a>，执行 dotnet --version 查看是否安装成功</p></li><li><p>（这一步只针对Windows用户）重启Windows让更改的设置生效</p></li><li><p>（这一步只针对Mac用户)安装长期支持版<a href="https://www.mono-project.com/download/stable/">Mono</a>，避免遇到 “Some projects have trouble loading. Please review the output for more details” 的问题 执行 mono --version 查看是否安装成功</p><p>Note: 额外安装的这个Mono，不会干预Unity内置安装的Mono</p></li><li><p>在VSCode中安装C#的扩展</p></li><li><p>在VSCode的设置中，取消勾选 C# extension’s Omnisharp: Use Modern Net setting(“omnisharp.useModernNet” : false)</p><img src="/posts/e57f243c/image-20220707013823965.png" class=""></li></ol><h2 id="在Unity中设置VSCode为默认的脚本编辑器">在Unity中设置VSCode为默认的脚本编辑器</h2><p>选择 Unity Preferences -&gt; External Tools，选择VSCode.</p><img src="/posts/e57f243c/%E6%88%AA%E5%B1%8F2022-07-0701.43.12.png" class=""><h2 id="小结">小结</h2><p>With the solution file selected, you are now ready to start editing with VS Code. Here is a list of some of the things you can expect:</p><ul><li>Syntax Highlighting</li><li>Bracket matching</li><li>IntelliSense</li><li>Snippets</li><li>CodeLens</li><li>Peek</li><li>Go-to Definition</li><li>Code Actions/Lightbulbs</li><li>Go to symbol</li><li>Hover</li></ul><p><strong>巨大的坑</strong>：我在安装完成dotnet和mono组件并且设置vscode为默认编辑器之后，在VSCode中输入rigidbody时并没有语法提示，但<strong>耐心等待一段时间</strong>后，语法提示就出现了……这个本不存在的问题困扰了我两天……</p><img src="/posts/e57f243c/958EBB7CEA0FF5AF41A9A3FECC90845C.jpg" class=""><p>晚安。</p><h1>背景</h1><p>本文主要记录如何配置.NET环境，以及如何创建最简单的C# application。</p><h1>在Mac上配置dotNet开发环境</h1><p>这里是.Net7的<a href="https://download.visualstudio.microsoft.com/download/pr/86bb5988-5fb5-4e22-8f21-de5992e1a689/f8f616f84dc38100a8464c4644a371ce/dotnet-sdk-7.0.201-osx-arm64.pkg">下载地址</a>，打开下载的pkg，按照指引完成安装。在终端中输入<code>dotnet</code>，如果安装成功，会弹出如下内容：</p><h1>使用Terminal创建一个最简单的C#命令</h1><p>在终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -o MyApp -f net7.0</span><br><span class="line">cd MyApp</span><br></pre></td></tr></table></figure><p>上述各命令的解释：</p><ul><li><code>dotnet new conslole</code> 命令用来创建新的console APP</li><li>-<code>o</code>参数会创建名为<code>MyApp</code>的目录，用于存储应用并使用所需文件进行填充</li><li><code>-f</code>参数指示console我们创建的是.NET7的应用程序</li></ul><p>创建的MyApp文件夹中的主文件称为<code>Program..cs</code>，默认情况下，它包含的内容如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后在终端中运行<code>dotnet run</code>来运行<code>.NET</code>应用，终端中会输出如下结果：</p><h2 id="使用Rider打开并运行C-项目">使用Rider打开并运行C#项目</h2><p>使用Rider打开并运行C#项目不像使用IDEA打开并运行java代码那样繁琐，直接在Rider中选择<code>File</code>-&gt;<code>Open</code>，选择你使用Terminal创建的C# application打开，就可以在Rider中运行项目了。</p><h1>在Windows上配置dotNet开发环境</h1><p>Windows上安装dotNet的方式多种多样，而且官方的教程也很详细，可以直接看<a href="https://learn.microsoft.com/zh-cn/dotnet/core/install/windows?tabs=net70">官网教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Unity </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始部署个人博客到云服务器</title>
      <link href="/posts/d182d23d/"/>
      <url>/posts/d182d23d/</url>
      
        <content type="html"><![CDATA[<h1>背景</h1><p>最近服务器被挖矿程序攻击了，阿里云疯狂给我发消息，说再不处理要把我的服务器封了，比起找出挖矿程序然后清理掉，我宁愿选择把服务器重制这样更简单粗暴的方法，于是有了这篇文章：从零开始搭建hexo博客部署到阿里云服务器上。</p><h1>原理</h1><ol><li><p>首先在本地hexo生成博客的静态文件</p></li><li><p>将生成的静态文件部署到云服务器</p></li><li><p>云服务器通过git-hook同步到网站根目录</p></li></ol><h1>搭建流程</h1><h2 id="本地环境搭建">本地环境搭建</h2><ul><li><p>hexo</p></li><li><p>git</p></li><li><p>nodejs</p></li></ul><h2 id="服务器环境搭建">服务器环境搭建</h2><ul><li><p>nginx</p></li><li><p>git</p></li></ul><h2 id="服务器环境搭建步骤">服务器环境搭建步骤</h2><ol><li><p>安装git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git  </span><br><span class="line">git --version    #查看git是否安装成功    </span><br></pre></td></tr></table></figure></li><li><p>创建git用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改权限</span></span><br><span class="line">chmod 740 /etc/sudoers</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编辑</span></span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>找到如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Allow root to run any commands anywhere</span></span></span><br><span class="line">root    ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>在下面添加代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git    ALL=(ALL)    ALL</span><br></pre></td></tr></table></figure><p>保存退出后改回权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/suders</span><br></pre></td></tr></table></figure></li><li><p>git服务器开启RSA认证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/ssd_config</span><br></pre></td></tr></table></figure><p>在’sshd_config’中设置以下几项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile  .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>设置git用户密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure></li><li><p>配置ssh</p><p>这里是为了免密登陆，我设置没问题，但是还是需要密码（汗</p><p><strong>本地客户端生成公私钥</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>上面这个命令会在用户.ssh文件夹下创建公私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>可以看到以下两个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id_rsa(私钥)</span><br><span class="line">id_rsa.pub(公钥)</span><br></pre></td></tr></table></figure><p><strong>上传公钥到服务器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub root@139.224.82.218</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub git@139.224.82.218</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里我两个用户都上传了</span></span><br></pre></td></tr></table></figure><p><strong>测试免密登陆</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh git@139.224.82.218</span><br></pre></td></tr></table></figure><p>这里我知道为什么我设置了免密登陆却还是需要输入密码了，在我的电脑上，必须进入root模式，才能使用hexo语句，而我在没有进入<code>root</code>模式的情况下，也就是一般用户模式下，去设置了如上的ssh免密登陆，所以说我根本就没有给我的root用户授权免密登陆，所以正确的做法是先进入root模式，再进行上面的操作。正确步骤如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.先进入hexo文件根目录，如果先进入root模式的话当前路径就变成了/var/root了</span></span><br><span class="line">cd blog</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2.进入root模式</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3.获得ssh公私钥</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p><strong>回到云服务器</strong></p><p>更改文件夹权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>创建git仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/blogRepo</span><br><span class="line"></span><br><span class="line">chmod 777 /home/blogRepo</span><br><span class="line"></span><br><span class="line">cd /home/blogRepo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认创建在 /home/git/目录下</span></span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>使用<code>bare</code>参数，git就会创建一个裸仓库，裸仓库没有工作区，我们不会在裸仓库上进行操作，它只为共享而存在</p><p><strong>设置钩子</strong></p><p>在<code>blog.git/hooks</code>目录下新建一个<code>post-receive</code>文件，并编辑这个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/blogRepo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>在文件中写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">git --work-tree=/home/website/MyBlog --git-dir=/home/blogRepo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>设置这个文件的可执行权限</p><pre><code>chmod +x /home/blogRepo/hexo.git/hooks/post-receive</code></pre></li><li><p>创建<code>post-receive</code>文件中的路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果之前的操作一直都是在root用户下，那git仓库的所有者就是root，这一步需要把git仓库的所有者给git用户</span></span><br><span class="line">sudo chown -R git:git hexo.git</span><br><span class="line"></span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line">cd /home</span><br><span class="line"></span><br><span class="line">mkdir website/MyBlog</span><br><span class="line"></span><br><span class="line">chmod 777 /home/website</span><br><span class="line"></span><br><span class="line">chmod 777 /home/website/MyBlog</span><br></pre></td></tr></table></figure></li><li><p>下载nginx</p><p>我是用yum下载的，所以我nginx的配置目录在<code>/etc/nginx/nginx.conf</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br><span class="line"></span><br><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>找到配置文件中的段落：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ......</span><br><span class="line">    # 站点根目录</span><br><span class="line">    root /home/website/MyBlog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启nginx服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>修改本地hexo配置文件</p><p><strong>一定要先进入hexo创建的文件夹中再使用hexo语句，不然会报错</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml</span><br></pre></td></tr></table></figure><p>修改配置文件如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Deployment</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@soincredible777.com.cn:/home/blogRepo/hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>hexo 部署到云服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>大功告成！</p></li></ol><h1>2023年3月13日更新</h1><p>因为目前使用了Butterfly的博客主题，想要给每篇文章配置一个封面，故使用Niginx配置一个简单的图床，我们要做的就是让Nginx可以访问两个路径，一个是博客的路径，另外一个是图片存放的路径，打开Nginx的配置文件/etc/nginx/nginx.conf，在其中添加一个server</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen       80;</span><br><span class="line">      listen       [::]:80;</span><br><span class="line">      server_name  _;</span><br><span class="line">      root        /home/website/MyBlog/;</span><br><span class="line"></span><br><span class="line">      # Load configuration files for the default server block.</span><br><span class="line">      include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">      error_page 404 /404.html;</span><br><span class="line">      location = /404.html &#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      error_page 500 502 503 504 /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  # 上面是博客的服务</span><br><span class="line">  # 下面是图床的服务</span><br><span class="line">  # 注意把端口的防火墙权限打开</span><br><span class="line">  server &#123;</span><br><span class="line">      listen       90;</span><br><span class="line">      listen       [::]:90;</span><br><span class="line">      server_name  _;</span><br><span class="line">      root        /home/website/ImageHost/;</span><br><span class="line"></span><br><span class="line">      # Load configuration files for the default server block.</span><br><span class="line">      include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">      error_page 404 /404.html;</span><br><span class="line">      location = /404.html &#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      error_page 500 502 503 504 /50x.html;</span><br><span class="line">      location = /50x.html &#123;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>添加完成后重启以下Nginx <code>nginx -s reload</code>，现在将图片上传到配置中的图片存放路径中，就可以使用<code>域名:端口号/图片名称</code>访问到图片了。</p><p>之后会不会有时间做一个WebApp来可视化地管理图片呢？</p>]]></content>
      
      
      <categories>
          
          <category> 硬技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现基于frp的内网穿透</title>
      <link href="/posts/1408599b/"/>
      <url>/posts/1408599b/</url>
      
        <content type="html"><![CDATA[<p>今天花了一天的时间，才把内网穿透给搞好了，这次把步骤好好记下来，下次再需要重新配置可以有个参照。</p><h2 id="我需要用内网穿透做什么？">我需要用内网穿透做什么？</h2><p>我寝室里有一台iMac，还有一台MacBook。我在两台设备上都有编辑博客的需求，但如果在两台设备上都部署博客会比较混乱，比如iMac上存有博客a、b、c，MacBook上存有d、e、f。所以我想只用iMac来打包部署，平时带着笔记本在外面写好了博客之后，用内网穿透把编辑好的博客发到iMac上，然后在iMac上打包部署到云服务器上，这样就不会乱了。</p><h2 id="搭建步骤">搭建步骤</h2><p>我们需要现在github上把需要的frp版本下载下来</p><p>我的Mac都是M1版本的，所以下载<code>arm64</code>版本。</p><p>使用<code>uname -a</code>查看你的云服务器的架构，我的是<code>x86</code>，所以下载<code>amd64</code>版本</p><p>另外，我用的ssh工具是<code>Termius</code>。</p><p>mac版本：<a href="">https://github.com/fatedier/frp/releases/download/v0.39.1/frp_0.39.1_darwin_arm64.tar.gz</a></p><p>linux版本：<a href="">https://github.com/fatedier/frp/releases/download/v0.39.1/frp_0.39.1_linux_amd64.tar.gz</a></p><ol><li><p>服务器端</p><p>我们可以在本地下载好服务器版本的frp，然后用<code>Termius</code>的文件传输功能把文件传送给服务器，这样比较快。</p><p>传送到根目录下，使用解压命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.39.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>将解压出来的文件夹改名问frp，然后进入frp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd frp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入之后我们需要对frps.ini配置文件做更改</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">frpc*开头的文件我们都不需要，可以删掉</span></span><br></pre></td></tr></table></figure><p>如果你的需求只是远程操控设备传输文件的话，那么采用默认的配置就可以了，什么都不用动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000       </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认的就可以，什么都不用动</span>                                             </span><br></pre></td></tr></table></figure><p><strong>运行frp</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./frps</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意要在frp目录下</span></span><br></pre></td></tr></table></figure><p><strong>开启自启动frp</strong></p><ol><li><p>添加systemd配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/frp.service</span><br></pre></td></tr></table></figure><p>文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The nginx HTTP and reverse proxy server</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/root/frp/frps -c /root/frp/frps.ini</span><br><span class="line">KillSignal=SIGQUIT</span><br><span class="line">TimeoutStopSec=5</span><br><span class="line">KillMode=process</span><br><span class="line">PrivateTmp=true</span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=inherit</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>ExecStart的内容请根据自己frp安装目录修改。</p></li><li><p>设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl enable frp</span><br></pre></td></tr></table></figure></li><li><p>启动frp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start frp</span><br></pre></td></tr></table></figure></li><li><p>查看frp是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep frps</span><br></pre></td></tr></table></figure><img src="/posts/1408599b/1079.png" class=""><p>看到如上结果，代表frp启动成功</p></li></ol></li><li><p>客户端</p><p>我们先把frp文件下放在用户根目录下，然后配置frpc.ini文件如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 139.224.82.218</span><br><span class="line">server_port = 7000</span><br></pre></td></tr></table></figure><p>[ssh]<br>type = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 6000</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server_addr是服务器的ip地址</span><br><span class="line"></span><br><span class="line">server_port是frp应用占用的端口</span><br><span class="line"></span><br><span class="line">我使用macbook访问服务器的6000端口，frp就会把这个端口映射成iMac的22端口。</span><br><span class="line"></span><br><span class="line">**设置Mac上frp开启启动**</span><br><span class="line"></span><br><span class="line">1. 终端执行</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">   sudo vim /Library/LaunchDaemons/frpc.plist</span><br></pre></td></tr></table></figure><ol start="2"><li><p>追加并保存内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    &lt;key&gt;Label&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;frpc&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class="line">    &lt;array&gt;</span><br><span class="line">        &lt;string&gt;/Users/jonathan/frpc/frpc&lt;/string&gt;//替换为自己的frpc执行程序路径,并移除当前注释 </span><br><span class="line">        &lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">        &lt;string&gt;/Users/jonathan/frpc/frpc.ini&lt;/string&gt;//替换为自己的frpc.ini配置路径,并移除当前注释 </span><br><span class="line">    &lt;/array&gt;</span><br><span class="line">    &lt;key&gt;KeepAlive&lt;/key&gt;</span><br><span class="line">    &lt;true/&gt;</span><br><span class="line">    &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class="line">    &lt;true/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3. 加入启动项</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">sudo chown root /Library/LaunchDaemons/frpc.plist</span><br><span class="line">sudo launchctl load -w /Library/LaunchDaemons/frpc.plist</span><br></pre></td></tr></table></figure><p><strong>取消frp自启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl unload -w /Library/LaunchDaemons/frpc.plist</span><br></pre></td></tr></table></figure><ol start="3"><li>使用MacBook内网穿透iMac</li></ol><p>使用Termius新建一个HOST</p><p>注意Address还是填服务器的IP，不要加冒号和端口号</p><p>在SSH栏下面的Port中，将默认的22端口改成remote_port设置的值</p><p>UserName是你iMac的用户名，密码也是对应用户名的密码，不是云服务器的！！</p><p>完结撒花。</p>]]></content>
      
      
      <categories>
          
          <category> 技术文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
